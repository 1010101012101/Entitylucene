Enterprise App Installation on iOS that is too old <body> We have an enterprise app for which we are ending support of iOS6. During a recent test, we created a build of the app, and set the following values in Info.plist  precode&lt;key&gt;MinimumOSVersion&lt;/key&gt; &lt;string&gt;7.0&lt;/string&gt; /code/pre  The app was built with the iOS 7.1 SDK. If it matters (and I'm not certain that it does), it is a Xamarin.iOS project.  As we were testing, we expected that when we attempted to install on iOS6 that the installation would be rejected early in the process, since we were installing on an unsupported version of iOS. We anticipated that the previously installed version of the app would continue to function as it had before, without all of the new features.  Instead what happened was that the installation failure happened later in the installation than expected, and the old version of the app was unusable after the upgrade failed.   To double check a couple of things, I downloaded the IPA file, and unzipped it. Inside the bundled Info.plist, I see this:  precodeMinimumOSVersion = "7.0"; /code/pre  which is a good sign. However I think that it also explains why the attempted installation broke the previously installed version.  For regular apps, i.e. apps from the iOS App Store, you aren't given the option of installing applications for which your installed iOS is too old, and the installed version of the app remains unchanged.  Is there a way to do such a thing for Enterprise Apps without having to build everything out? I'm thinking that maybe there is a setting in the manifest.plist that is used for OTA deployment.  For the sake of thoroughness, here is my Info.plist prior to build:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;CFBundleDisplayName&lt;/key&gt;     &lt;string&gt;OurApp Stage&lt;/string&gt;     &lt;key&gt;CFBundleIconFiles&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;Images/OurApp_72.png&lt;/string&gt;         &lt;string&gt;Images/OurApp_50.png&lt;/string&gt;         &lt;string&gt;Images/OurApp_29.png&lt;/string&gt;         &lt;string&gt;Images/OurApp_512.png&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;CFBundleIdentifier&lt;/key&gt;     &lt;string&gt;com.ourappproject.staging.mycompany&lt;/string&gt;     &lt;key&gt;CFBundleURLTypes&lt;/key&gt;     &lt;array&gt;         &lt;dict&gt;             &lt;key&gt;CFBundleURLName&lt;/key&gt;             &lt;string&gt;com.ourappproject.staging-handler&lt;/string&gt;             &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;             &lt;array&gt;                 &lt;string&gt;ourapp-staging&lt;/string&gt;             &lt;/array&gt;         &lt;/dict&gt;     &lt;/array&gt;     &lt;key&gt;CFBundleVersion&lt;/key&gt;     &lt;string&gt;2014.2.04.05&lt;/string&gt;     &lt;key&gt;MinimumOSVersion&lt;/key&gt;     &lt;string&gt;7.0&lt;/string&gt;     &lt;key&gt;UIBackgroundModes&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;audio&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;UIDeviceFamily&lt;/key&gt;     &lt;array&gt;         &lt;integer&gt;2&lt;/integer&gt;     &lt;/array&gt;     &lt;key&gt;UISupportedInterfaceOrientations&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;UIInterfaceOrientationLandscapeLeft&lt;/string&gt;         &lt;string&gt;UIInterfaceOrientationLandscapeRight&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;UISupportedInterfaceOrientations~ipad&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;UIInterfaceOrientationLandscapeLeft&lt;/string&gt;         &lt;string&gt;UIInterfaceOrientationLandscapeRight&lt;/string&gt;     &lt;/array&gt; &lt;/dict&gt; &lt;/plist&gt;  /code/pre  Info.plist from within the IPA:  precode// !!! BINARY PROPERTY LIST WARNING !!! // // The pretty-printed property list below has been created // from a binary version on disk and should not be saved as // the ASCII format is a subset of the binary representation! // {   BuildMachineOSBuild = "13C1021";     CFBundleDevelopmentRegion = "en";     CFBundleDisplayName = "OurApp Stage";     CFBundleExecutable = "OurAppMobileApp";     CFBundleIconFiles = ( "OurApp_72.png", "OurApp_50.png", "OurApp_29.png" );     CFBundleIdentifier = "com.ourappproject.staging.mycompany";     CFBundleInfoDictionaryVersion = "6.0";     CFBundleName = "OurAppMobileApp";     CFBundlePackageType = "APPL";     CFBundleResourceSpecification = "ResourceRules.plist";     CFBundleSignature = "????";     CFBundleSupportedPlatforms = ( "iPhoneOS" );     CFBundleURLTypes = (         {   CFBundleURLName = "com.ourappproject.staging-handler";             CFBundleURLSchemes = ( "ourapp-staging" );         },     );     CFBundleVersion = "2014.2.04.05";     DTCompiler = "com.apple.compilers.llvm.clang.1_0";     DTPlatformBuild = "11D167";     DTPlatformName = "iphoneos";     DTPlatformVersion = "7.1";     DTSDKBuild = "11D167";     DTSDKName = "iphoneos7.1";     DTXcode = "0510";     DTXcodeBuild = "5B1008";     LSRequiresIPhoneOS = :true;     MinimumOSVersion = "7.0";     UIBackgroundModes = ( "audio" );     UIDeviceFamily = ( 2 );     UIRequiredDeviceCapabilities = ( "armv7" );     UISupportedInterfaceOrientations = ( "UIInterfaceOrientationLandscapeLeft", "UIInterfaceOrientationLandscapeRight" );     "UISupportedInterfaceOrientations~ipad" = ( "UIInterfaceOrientationLandscapeLeft", "UIInterfaceOrientationLandscapeRight" ); } /code/pre  The manifest.plist:  precode&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt;     &lt;dict&gt;         &lt;!-- array of downloads. --&gt;         &lt;key&gt;items&lt;/key&gt;         &lt;array&gt;             &lt;dict&gt;                 &lt;!-- an array of assets to download --&gt;                 &lt;key&gt;assets&lt;/key&gt;                 &lt;array&gt;                     &lt;!-- software-package: the ipa to install. --&gt;                     &lt;dict&gt;                         &lt;!-- required.  the asset kind. --&gt;                         &lt;key&gt;kind&lt;/key&gt;                         &lt;string&gt;software-package&lt;/string&gt;                         &lt;!-- required.  the URL of the file to download. --&gt;                         &lt;key&gt;url&lt;/key&gt;                         &lt;string&gt;https://arm.staging.ourappproject.com:443/Store/App/9/17/OurAppMobileApp.ipa&lt;/string&gt;                     &lt;/dict&gt;                     &lt;!-- display-image: the icon to display during download .--&gt;                     &lt;dict&gt;                         &lt;key&gt;kind&lt;/key&gt;                         &lt;string&gt;display-image&lt;/string&gt;                         &lt;!-- optional.  indicates if icon needs shine effect applied. --&gt;                         &lt;key&gt;needs-shine&lt;/key&gt;                         &lt;true/&gt;                         &lt;key&gt;url&lt;/key&gt;                         &lt;string&gt;https://arm.staging.ourappproject.com:443/Assets/OurAppMobileApp.png&lt;/string&gt;                     &lt;/dict&gt;                     &lt;!-- full-size-image: the large 512x512 icon used by iTunes. --&gt;                     &lt;dict&gt;                         &lt;key&gt;kind&lt;/key&gt;                         &lt;string&gt;full-size-image&lt;/string&gt;                         &lt;key&gt;needs-shine&lt;/key&gt;                         &lt;true/&gt;                         &lt;key&gt;url&lt;/key&gt;                         &lt;string&gt;https://arm.staging.ourappproject.com:443/Assets/OurApp_512.png&lt;/string&gt;                     &lt;/dict&gt;                 &lt;/array&gt;                 &lt;key&gt;metadata&lt;/key&gt;                 &lt;dict&gt;                     &lt;!-- required --&gt;                     &lt;key&gt;bundle-identifier&lt;/key&gt;                     &lt;string&gt;com.ourappproject.staging.mycompany&lt;/string&gt;                     &lt;!-- optional (software only) --&gt;                     &lt;key&gt;bundle-version&lt;/key&gt;                     &lt;string&gt;2014.2.04.05&lt;/string&gt;                     &lt;!-- required.  the download kind. --&gt;                     &lt;key&gt;kind&lt;/key&gt;                     &lt;string&gt;software&lt;/string&gt;                     &lt;!-- optional. displayed during download; typically company name --&gt;                     &lt;key&gt;subtitle&lt;/key&gt;                     &lt;string&gt;mycompany&lt;/string&gt;                     &lt;!-- required.  the title to display during the download. --&gt;                     &lt;key&gt;title&lt;/key&gt;                     &lt;string&gt;OurApp Mobile&lt;/string&gt;                 &lt;/dict&gt;             &lt;/dict&gt;         &lt;/array&gt;     &lt;/dict&gt; &lt;/plist&gt; /code/pre  Any and all suggestions are appreciated.  <answer129260> I found that:  You should not specify codeMinimumOSVersion/code in your Info.plist.   Instead see this for guidance Information Property List Key reference:  img src="https://i.stack.imgur.com/I7v4v.png" alt="Information Property List key ref"  <answer129403> (This isn't a proper answer, but it is too long for a comment.)  I don't know much about Xamarin, but in Xcode, the setting that specifies the minimum iOS version required is called the strongdeployment target/strong.  See this stackoverflow question and answers for a few links to some details.  According to this article, one of the consequences of setting the deployment target is to add a MinimumOSVersion string to the Info.plist file, but perhaps there are others too (in the binary itself?).  If you haven't tried this already, try searching for details on "deployment target" rather than MinimumOSVersion.  Also perhaps consider asking your question on stackoverflow?  <answer129700> I don't think it is possible to do.  If you are using a web based deployment you can always check for an OS version from the browser and force it that way.   You can use Request.UserAgent to get the OS version and then JQuery to disable the button and throw an alert explaining to the user why they can't download.   precode        string agent = Request.UserAgent;           if (agent.Contains("iPad; CPU OS 6_"))         {             ClientScript.RegisterStartupScript(this.GetType(), "iOS",                                                " $('#appInstall a').click(function(e) {e.preventDefault();});",                                                true);             ClientScript.RegisterStartupScript(this.GetType(), "iOSAlert",                                                " $('#appInstall a').click(function() {alert('The application is now only available on iPads running iOS 7 or higher. Please upgrade your iPad to get the latest version.');});",                                                true);         } /code/pre  <comment151315> _[for] apps from the iOS App Store, you aren't given the option of installing applications for which your installed iOS is too old_ --- not strictly true. Depending on the behavior of the older iOS version, when installing an app that requires a newer iOS version, the installation process starts by closing the App Store and placing in the Springboard the app icon, then it will check to see if the system version is compatible. If not, sometimes you will be given the option to install the last version of the app that was compatible with that version of iOS. <comment151351> The IDE created Info.plist for me automatically. Not certain what I can do to make it otherwise, nor am I convinced that this actually addresses the issue at hand. <comment151352> That's interesting. I'm beginning to think that I need to keep hardware around with older iOSs on it. So once the app hits the springboard, if the user does not opt to install the last supported version, then the version that they had installed previously is toasted? <comment151368> I am just reporting what I found been unable to replicate your scenario, and obviously your setting does not work as you explained. You say the info.plist was created based on ? <comment151419> The setting works perfectly. I am looking for a way for the setting to take effect earlier in the installation process. Based on the comment from @chillin up above, I would say that what I am looking to do is not possible without a bunch of extra work on my part. <comment151420> I do appreciate your taking the time to look. What I meant up there was that the Info.plist file was automatically generated by the development tool that we use. I didn't create the file manually. <comment151516> In Xamarin Studio, it also shows up as deployment target. We have it set to 7.0 -- and it is the same deal. Changing the deployment target causes the MinimumOSVersion to change in Info.plist. <comment151686> If the app has been installed before on the earlier iOS version, and now the earlier iOS version is no longer supported, upgrades will continue up to the last version of the app compatible with that version of iOS. However, once that version of iOS is no longer supported, the process will work as I described above, but the result is that the installation will fail, it will not install, and it will inform the user they need to upgrade their system to install the app. <comment151751> Yeah I understand. Since we are enterprise developers, we aren't distributing via the app store, but we came up with a pretty simple work around. <comment151794> I would contact Xamarin support. If needed, maybe fill a bug report.