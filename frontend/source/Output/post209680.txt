Linking python as external build tool in Xcode 7 El Capitan <body> I have been using Xcode 7 as my default python editor for some time now. The usual method to run python from Xcode is given here https://stackoverflow.com/questions/5276967/python-in-xcode-7/8636301#8636301.  But with the new release of El Capitan (OS X 10.11), the /usr/local/bin/ directory is locked and in the step in "Edit Scheme  Info  Executable" where the executable has to be selected from a pop-up window, since the SIP is enforced, this is not possible. I already own the /usr/local/ but this hasn't helped. It is worthwhile to note that this problem should not be python version specific.  Can somebody suggest a workaround for this?   I know I will receive suggestions for using other editors and engines such as Eclipse and Canopy, but no thank you (no offence to Eclipse or Enthought of course).  <answer226831> When you click on "Other..." and the dialog window comes up, press kbdshift/kbd+kbdcmd/kbd+kbdg/kbd. That will open a dialog box that lets you type a specific path. Just like going to a hidden directory in the Finder.  I'm on 10.11.2 running Xcode 7.2, so in my case the python executable is in code/usr/bin/code  <answer226874> trying run Python 2.7.11 on Xcode 7.2 on OS X 10.11.2; I could not select 'python' under "Edit Scheme"  "Info"  "Executable"  It was grayed out. I do not know what SIP means, but strongI got it to work by right-clicking the grayed out 'python' under usr/local/bin in the window and selecting "Quick Look"/strong A box opened and I closed it and 'python' was now selectable and ran the file like a champ!&nbsp;  <answer230756> My system is OS X 10.11 El Capitan with SIP enabled, with Xcode 7.2.1, and the following solution work for me.  The solution briefly: for your executable, select the Python installed in your system, which resides in:  precodePython.framework/Versions/ (3.x or 2.7) /Python /code/pre  The location of Python.framework depends on which distribution of Python you're using. Most often it can be found in code/Library/Frameworks/code.  More comprehensive directions below.  hr  Edit your Xcode scheme:  ol liSelect Product  Scheme  Edit Scheme/li liRun  Info  Executable  Other/li liPress kbdCmd(âŒ˜)/kbd+kbdShift/kbd+kbdG/kbd and type in the place where your Python executables are installed./li liSelect "Python" executable file./li /ol  Now, the place where the actual executables varies, depending on which Python distribution you chose to install. None of those, to my knowledge, place anything but symlinks to code/usr/local/bin/code or code/opt/local/bin/code. Below, I'll provide directions to finding your Python executable file.  hr  h2MacPython/h2  This is the version from the official Python website, and it resides in code/Library/Frameworks/Python.framework/code.  h2ActiveState ActivePython/h2  Installs to the same directory as MacPython.  h2MacPorts/h2  MacPorts installs its python to code/opt/local/Library/Frameworks/Python.framework/code.  h2HomeBrew/h2  HomeBrew has two possible locations for your Python.framework, because unlike any other distribution, HomeBrew installs them separately.  ul lipython2 in code/usr/local/Cellar/python/code/li lipython3 in code/usr/local/Cellar/python3/code/li /ul  Inside either of them, you'll find codeFrameworks/Python.framework/code. br/br/  h2All distributions/h2  Inside any codePython.framework/code, you'll want to open a folder named codeVersions/code. Inside, you'll find folders corresponding to Python versions installed on your system. Open whichever one you want to use, and inside You'll find an executable named codePython/code. You're done!  <answer265119> I know this was posted a loooong time ago, but i ran into the same issue just now, and thought i would share my findings.  This solution worked for me.  ol liClose Xcode./li liBrowse to you project library./li liRight click the project .xcodeproj file and choose 'Show Package Contents' /li liFind the project .xcscheme file and open it in a editor./li liFind the PathRunnable tag, and set the FilePath to "/usr/local/bin/python3"/li liSave the file and open the project again./li /ol  This way you can use codebrew install python3/code to install your preferred Python for Xcode.   <comment252923> I thought /usr/local was not covered by SIP <comment252926> Thanks @Mark. It looks like /usr/local/ is not supposed to be covered by SIP, but selecting the executable is still not possible, even though I own the /usr/local/ and the permissions are lrwxr-xr-x. Any idea what might be going wrong? <comment265874> I'm also keen on the solution, I've not upgraded to El Capitan yet due to MySQL issues, but not being able to use Python in XCode anymore is also an issue. <comment266140> @Ewald: You could possibly run everything fine by disabling the SIP, which is similar to the SELinux. I realised that the SIP definitely doesn't allow even the native python (2.7) to be linked. This is what I got at debugging with the native python on Xcode: **Message from debugger: cannot attach to process due to System Integrity Protection** <comment266274> That "possibly" is what's keeping me from upgrading. A colleague updated and now his MySQL is all broken, I just can't take the chance with my development machine. No work equals no pay for me so I'll patiently wait - at least I still have my Windows laptop and Python development works great on that! <comment266279> @Ewald: As I mentioned in my comment earlier, you don't really need SIP if you are using your mac for development. SIP is very similar to the SELinux. And for development you often need complete control over your machine. I wouldn't bother much about SIP on a unix machine (yes OS X is unix based), unless you are running a server on the machine and want multi level security. <comment266280> I'll look into it when I have some more time to possibly roll back an OS update if it goes wrong. I'm doing my Python on a different machine currently and keeping the Mac for my Scala, Swift and Android work.  Now I just need someone to sponsor me a second Macbook Pro... <comment275502> Your answer sounds kind of chancy. Using `Quick Look` doesn't change anything in your Mac, so there must be another reason you could select Python in Xcode. <comment352311> This worked for me as well: after closing the `Quick Look`, the `Choose` button was enabled. I clicked it, and all is working well! Call it an "Easter Egg", lol?