How does one start a bash command that doesn't close on Terminal quit? <body> I want to run a command, and not have it quit when Terminal closes.  For instance, if I run codetop &amp; ; disown/code, codetop/code quits when I quit Terminal. I want to keep codetop/code alive.  I know this is possible since the command codeopen/code can do this. (For example, codeopen -e/code opens up TextEdit, and when you quit out of Terminal, TextEdit stays open.)  Thanks in advance.  <answer251876> When using a command you want to continue you would normally add something to the effect of:  precodenohup yourcommand &amp; /code/pre  The nohup stops it from receiving hang signals, and the &amp; essentially runs it background so you can continue to do your own thing.  Hope that helps!  <answer251883> Use emscreen/em:  To start a session and a process within run codescreen command/code (e.g. codescreen top/code). Detach from the session with kbdctrl/kbdkbdA/kbdkbdctrl/kbdkbdD/kbd.  Now you can close the Terminal session window or quit Terminal at all and the process started previously is still running.  After (re-)starting Terminal you can get a list of all detached sessions with codescreen -list/code.  Use the pid to reattach to a session: codescreen -R [pid]/code. To stop the reattached session's process use the common commands (e.g. kbdctrl/kbdkbdC/kbd for codetop/code) and codeexit/code to stop the session.  If you want to start a process in a new immediately detached session use: codescreen -d -m command/code (e.g. codescreen -d -m top/code). This will create a new screen session while you get a new prompt in your currently open shell session.  Please check codeman screen/code for a lengthy description, key bindings and customizations.  <answer251886> I think the key here is based on this statement:     For instance, if I run top &amp; ; disown, top quits when I quit Terminal. I want to keep top alive.   The moment you quit Terminal, it immediately kills whatever you were running.  This is where terminal multiplexers come into play.  h2The solution to this is to use tmux./h2  tmux is a "terminal multiplexer" but one of the best features about it is that it continues running even if you close Terminal.  From their codeman/code page:     tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached.   So, if you want to launch codetop/code, you could detach from it while it continued in the background even if Terminal is quit.  tmux is available through homeberew and MacPorts.    ul liHomeBrew:  codesudo brew install tmux/code/li liMacPorts:  codesudo port install tmux/code/li /ul  Detailed installation info can be found on their respective sites.  As for using codetmux/code, just launch Terminal and execute codetmux/code.  You will get a Terminal screen with a green bar.    img src="https://i.stack.imgur.com/eB5ho.png" alt="enter image description here"  Execute (for example)codetop/code.  img src="https://i.stack.imgur.com/OsfOU.png" alt="enter image description here"  Quit and relaunch Terminal.  To get a list of sessions:  codetmux list-sessions/code  precode0: 1 windows (created Wed Sep  7 18:13:21 2016) [132x24] /code/pre  Attach to that specific session  codetmux attach -t0/code And the session comes back up.  img src="https://i.stack.imgur.com/MMxJg.png" alt="enter image description here"  <answer251908> Some programs are launched as a child process of the Terminal window, so closing it will close the program. In that case, launch such programs on a separate process accordingly:  ol liEnter the full path to the executable on the command line em(/Applications/Safari.app/Contents/MacOS/safari/em)/li liUse the emopen/em command and the appropriate flag, such as -a for app (emopen -a Safari/em), which launches applications in a separate process (pid). Once running, you can simply close the Terminal window and the application will remain open, as opposed to using direct executable execution by whatever means you are now using./li liThe “osascript” command, which is OS X’s Terminal command for running “open scripting architecture” scripts like AppleScript (emosascript -e 'open app "Safari"'/em)./li /ol  All three have a separate means of quitting the processes, but which are similar to each their respective means for starting them.  Keep in mind that these are not the only three, but rather the most arcane commands available to you. I supply them because I reason that anyone running commands in the terminal is already familiar with each and every stock command available in every standard UNIX/Linux/FreeBSD distribution, and readily knows how to use the relevant ones to spawn, kill, suspend, fork, resume, join and detach threads and processes—those being FreeBSD's sole reason for existence as the operating system installed on the machines of the world's most profitable company.  Anyway, one last thing: only the current user can run processes using the above commands; launch processes with these commands under a different user, you must enable the super user account (emsu/em), and then prefix each command with emsudo/em.  <comment313185> Why? There is nothing to see if the process isn't attached to a terminal/ <comment313186> `top` was just an example command. I would use a different command that doesn't output anything. <comment313569> I don't see any problem then. If the command doesn't output anything or accept any input then it should work. The Terminal.app may indicate that it is closing the process but the process continues to run after you quit the Terminal.app. Tested in OS X 10.6.