How do I disable System Integrity Protection (SIP) AKA "rootless" on OS X 10.11, El Capitan? <body> Apple has introduced System Integrity Protection, also known as "rootless", with OS X 10.11, El Capitan. I understand this is a step for general protection against malware but as a developer I need write access to some of the files it locks away.  How do I disable this protection?  <answer208481> Apple's documentation covers disabling SIP, About System Integrity Protection on your Mac and Configuring System Integrity Protection.  An article on lifehacker.com lists these steps:     ol   liReboot your Mac into Recovery Mode by restarting your computer and holding down kbdCommand/kbd+kbdR/kbd until the Apple logo appears on your screen./li   liClick Utilities  Terminal./li   liIn the Terminal window, type in codecsrutil disable/code and press kbdEnter/kbd./li   liRestart your Mac./li   /ol   You can verify if a file or folder is restricted by issuing this codels/code command using the capital O (and not zero 0) to modify the long listing flag:  precodels -lO /System /usr  /code/pre  Look for the strongrestricted/strong text to indicate where SIP is enforced.   By default (=SIP enabled), the following folders are restricted (see Apple Support page):  precode/System /usr /bin /sbin Apps that are pre-installed with OS X /code/pre  ... and the following folders are free:  precode/Applications /Library /usr/local /code/pre  <answer209530> It's possible to disable SIP by booting to strongRecovery HD/strong and running the following command:  precodecsrutil disable /code/pre  img src="https://i.stack.imgur.com/nz6zG.png" alt="enter image description here"  It is also possible to enable SIP protections and selectively disable aspects of it, by adding one or more flags to the codecsrutil enable/code command. All require being booted from Recovery in order to set them:  strongEnable SIP and allow installation of unsigned kernel extensions/strong  precodecsrutil enable --without kext /code/pre  img src="https://i.stack.imgur.com/2yymA.png" alt="enter image description here"  strongEnable SIP and disable filesystem protections/strong  precodecsrutil enable --without fs /code/pre  img src="https://i.stack.imgur.com/6bl3B.png" alt="enter image description here"  strongEnable SIP and disable debugging restrictions/strong  precodecsrutil enable --without debug /code/pre  img src="https://i.stack.imgur.com/roJ2n.png" alt="enter image description here"  strongEnable SIP and disable DTrace restrictions/strong  precodecsrutil enable --without dtrace /code/pre  img src="https://i.stack.imgur.com/usGpF.png" alt="enter image description here"  strongEnable SIP and disable restrictions on writing to NVRAM/strong  precodecsrutil enable --without nvram /code/pre  img src="https://i.stack.imgur.com/YBPcC.png" alt="enter image description here"  I also have a post available with more information about SIP:  System Integrity Protection – Adding another layer to Apple’s security model  <answer213622> If all you need is to access /usr/local, take a look at this page: https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/El_Capitan_and_Homebrew.md  The idea is to emtemporarily/em disable SIP using codecsrutil disable/code, add code/usr/local/code, use chflags to set that directory to non-restricted  precode sudo mkdir /usr/local &amp;&amp; sudo chflags norestricted /usr/local &amp;&amp; sudo chown -R $(whoami):admin /usr/local /code/pre  and then re-enable SIP using codecsrutil enable/code.  If code/usr/local/code already exists at the time of your upgrade, then even the above isn't necessary. You can simply run  precodesudo chown -R $(whoami):admin /usr/local /code/pre  <answer248436> If you can't get into Recovery Partition to run codecsrutil disable/code, try setting codenvram/code boot args, e.g.  precodesudo nvram boot-args="rootless=0" /code/pre  <answer276331> It would be safer to modify code/etc/paths/code so that code/usr/local/bin/code is merely before codeusr/bin/code. That way you can do your development work within code/usr/local/bin/code without having to disable SIP.  Clean installations of the OS have ordered code/etc/paths/code this way since El Capitan, but if you were upgrading the OS from Yosemite or earlier, you'd have to modify the path order manually.  <comment252743> What a welcome wealth of knowledge. I might have to double down on this bounty :-) <comment253619> I see from running `ls -lO /usr/local` is not marked restricted. I've also chownd `/usr/local/` recursively. But I keep seeing root take ownership of `/usr/local/bin` and `/usr/local/share` which impacts homebrew. Is this the work of SIP as well? <comment253674> Great information - thanks! <comment253679> @SaxDaddy As long as `/usr/local` is not restricted, you can fix any permissions "below" this directory easily. Homebrew actually recommends to run `sudo chown -R $(whoami) /usr/local` (while being logged in as an admin user) to fix permission issues. <comment253808> @patrix Thanks. I'm still curious because `/usr/local` is **not** restricted and chown'd by me *daily*. Still each day I see those same 2 folders owned by root. I'll troll the console and update if I find the culprit. <comment258171> As a sidenote:  if you ever want to re-enable SIP, just follow those same instructions, replacing `csrutil disable` with `csrutil enable`. <comment261308> @SaxDaddy Are you using Sophos Anti-Virus, by some chance? There is a known issue with Sophos where it changes permissions on those directories.  According to [a thread on their community forums](https://community.sophos.com/products/free-antivirus-tools-for-desktops/f/17/t/10029), it should be resolved in an update due out "soon". <comment261557> @NDGeek: +1: Brilliant, thank you! You called it correctly. And I see that SAV 9.4.1 (released 18nov15) fixed the problem. I have that version installed and confirmed that `/usr/local` now has permissions set correctly. <comment262137> @SaxDaddy Good to know that was your issue, and that the update resolved it! I'm on a corporate network that hosts the updates locally, so I'm still waiting :-/ <comment263336> this saved me a day... searching on the VMWARE error turned up nothing <comment270754> Even though you can fix all SIP aspects, there are plenty entries for this - remember that by compromising the system, you are building stuff that may not run on your client's machine, where SIP is turned on, and users will not accept turning it off <comment284547> This worked perfectly. Thanks. Very useful to know. <comment285797> I get an error: `csrutil: failed to modify system integrity configuration.  This tool needs to be executed from the Recovery OS.` <comment285798> I keep getting an error: `Read-only file system` <comment295277> @IgorGanapolsky Read the answer. **'_disable SIP by booting to Recovery HD_'**. <comment300363> @Motti Shneor - However, in some cases this needs to be turned of just to have write access to install some SDKs for development purposes. This would not require the client to do the same. <comment312759> There is no -O option to ls on El Capitan 10.11.6. What is the equivalent under this OS version? [And I checked - I ma using O and not zero.] <comment312770> @andro The -O flag _does_ still work in 10.11.6. If it doesn't work for you, that's a separate issue and you should ask a new question. <comment312802> @Mike Scott thanks for twigging me onto this. I was not conscious of using /usr/local/bin/ls (GNU coreutils) as opposed to /bin/ls. That's the explanation.