Find readable with Permissions as POSIX? <body> Aimed systems: Linux and OS X. Original code which works in Ubuntu 16.04 but not OS X, but follows unsuccessfully POSIX standards   precodegfind ~ ! -readable -prune -o -type f -name "*.tex"  /code/pre  where   ul licode!/code is about emNegation of a primary; the unary NOT operator./em/li licode-readable/code TODO this does not seem to be POSIX/li licode-prune/code is about emThe primary shall always evaluate as true; it shall cause find not to descend the current pathname if it is a directory. If the -depth primary is specified, the -prune primary shall have no effect./em/li licode-o/code is about emAlternation of primaries; the OR operator. The second expression shall not be evaluated if the first expression is true./em That is if not, then this. /li licode-type/code about type, here file codef/code/li licode-name/code about filename, here code*.tex/code/li /ul  Output  precodegfind: paths must precede expression: type Usage: gfind [-H] [-L] [-P] [-Olevel] [-D help|tree|search|stat|rates|opt|exec] [path...] [expression] /code/pre  h2Fix proposal/h2  Use code-perm 0744/code instead of code-readable/code but not sure if it is equivalent  precodegfind ~ ! -perm 0744 -prune -o -type f -name "*.tex"  /code/pre  Output: code/Users/masi/code. Expected output: list of .tex files.   hr  How can you set permissions of find correctly for readable?   <answer240439> The double negation at the beginning makes this rather complex. Just using  precodegfind . -readable -type f -name '*.tex' /code/pre  should work.  PS: Or codefind . -perm +0666 -type f -name '*.tex'/code for the default codefind/code.  <answer240556> After attempting to use codefind/code's options code-user/code,code-group/code, and code-perm/code, the codefind/code command quickly became unmanageable. An inline script with codefind/code using the shell's code-r test/code would be portable between the two operating systems.  precodefind ~ -type f -name '*.tex' -exec sh -c 'for file do     [ -r "$file" ] &amp;&amp; echo "$file" done ' sh {} + 2&gt;/dev/null /code/pre  <comment295452> Well where did you get find from and what version as it is **not** part of OSX (in general from your other posts Linux is not Unix they differ if you want non standard things stick to Linux :) If you want the same in general don't use GNU extensions <comment295456> As I said don't use GNU extensions - some things will differ but BSD is normally a subset - i.e. don't assume that Linux is the correct way, <comment295519> If you truly want to write portable scripts then I suggest you start here- http://pubs.opengroup.org/onlinepubs/009695399/utilities/contents.html to learn the POSIX standards for the shell and its utilities. Most scripts that I write in OS X will run in Linux. <comment295522> I'm going to let you do the work. Add the `-user` option (It can be a variable) then check whether the `-perm` is readable. <comment295526> Thank you for pointing out the double negation! I have had it all the time in mind but could not find a way to solve it. <comment295527> Do you know what fd0 means about `-user` option here in his comment? I am still thinking about it but I cannot understand. <comment295569> Don't see how `-user` (which checks for ownership, not readability) would help here. But maybe @fd0 can throw some light on it. <comment295574> @fd0 Can you throw some light about `-user`, see patrix comment in his answer. <comment295659> In patrix `find . -perm +0666` example, it is possible to list a file where the owner is not the caller but only that owner can read the file. `-perm` reads permission bit without regards to the file's classifications. So, building `find` 's logic may involve using the `-user` and `-group`options along with `-perm` options. Of course this can be overly complex and hard to debug. I'll post a solution when I have time to test it. <comment295713> You are throwing away something to `/dev/null`. Why? <comment295857> @Masi Well, you should know why. You have asked similar questions before- http://stackoverflow.com/questions/762348/how-can-i-exclude-all-permission-denied-messages-from-find . <comment295859> I asked it because I do not like to throw away such things. It is much better to handle the things, and prevent such things in the first place.