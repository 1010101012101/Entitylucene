Converting Automator Action in applescript to bash script <body> I just wrote an Automator app using AppleScript (along with a couple of bash lines) to start FTP with a single click. However it runs more than a tad slow. Here's the code:  precodeset ftpstatus to "off" try     do shell script "echo \"QUIT\" | telnet 127.0.0.1" &amp; " ftp 2&gt;&amp;1 | grep  \"Escape character is\" &gt; /dev/null"     set ftpstatus to "on" on error     set ftpstatus to "off" end try if (ftpstatus = "off") then     set ipaddr to IPv4 address of (get system info)     set sun to short user name of (get system info)     do shell script "sudo -s launchctl load -w /System/Library/LaunchDaemons/ftp.plist" with administrator privileges     tell application "Finder" to display alert "FTP Launched and ready for file-transfer" &amp; character id 8233 &amp; character id 8233 &amp; character id 8233 &amp; "Address: ftp://" &amp; ipaddr &amp; ":21" &amp; character id 8233 &amp; "User Name: " &amp; sun else     do shell script "sudo -s launchctl unload -w /System/Library/LaunchDaemons/ftp.plist" with administrator privileges     tell application "Finder" to display alert "FTP session closed" end if /code/pre  Here's what the code does:  ol liCheck if FTP server is running/li liIf yes, turn it off and throw a message box saying "FTP session closed"/li liIf no, turn it on and throw a message box saying "FTP session open" along with my IP address and username/li /ol  This script works like charm but since it's too slow, I am wondering if there's any way to convert it to a bash shell script. That should speed up things a lot. Any suggestions?  <answer140297> I'm not sure I understand correctly - if in the third line of Your script You're checking whether codeftp/code service is running You can use following script:  precode#!/bin/bash                                                                                                                     launchctl list | grep ftpd  if [ $? != 0 ]; then     IPADDR=$(ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ &amp;&amp; print $1' | grep -v 127.0.0.1)     launchctl load "/System/Library/LaunchDaemons/ftp.plist"     osascript -e "tell application \"Finder\" to display alert \"FTP Launched and ready for file-transfer\" &amp; character id 8233 &amp; character id 8233 &amp; character id 8233 &amp; \"Address: ftp://\" &amp; \"$IPADDR\" &amp; \":21\" &amp; character id 8233 &amp; \"User Name: \" &amp; \"$USER\"" else     launchctl unload -w "/System/Library/LaunchDaemons/ftp.plist"     osascript -e 'tell application "Finder" to display alert "FTP session closed"' fi /code/pre  Run this a codesudo/code. Explanation:  ul liTo check if job is running use codelaunchctl list/code./li liTo get ip address quickly use my perl script (You may want to codegrep/code it differently in order to get rid of additional IP addresses./li liThe only problem now is that strongFinder/strong app is not brought to front but this can be solved if needed./li /ul  <comment165408> The assignment to IPADDR assumes that there is only *one* active network interface besides `localhost` <comment165409> @patrix that is correct. I've mentioned about that in my answer. To get one specific interface IP script would need to be changed. <comment165410> Upps, right, didn't notice that <comment165419> @MateuszSzlosek thanks for the detailed answer. But won't this launch in Terminal even if I compiled it as a UNIX executable because of the sudo? Is there any way to make the program Terminal-independent? <comment165420> @AmitSchandillia You may insert this script to AppleScript editor, add line like: `do shell script ... with administrator privileges` You'll be prompted to input Your password. Another way is to make an application which will launch Your script with `sudo`. Generally executables properly enclosed inside *.app bundle does not have to launch Terminal. <comment165423> Well, honestly, I already have the Automator script but the whole point i was looking for a bash translation was to not have to use Automator to run the program. I was looking for something like a standalone app with all the required privileges or maybe a popup but without the automator or terminal running in the background <comment165424> So it's a bit risky to let apps do the work with elevated privilages. However I can help You compile ObjC application to launch bashscript. We may try to ask for passowrd with a prompt, or something with setuid/setgid. Here are some informations about differences: https://developer.apple.com/library/mac/documentation/security/conceptual/securecodingguide/Articles/AccessControl.html#//apple_ref/doc/uid/TP40002589-SW3