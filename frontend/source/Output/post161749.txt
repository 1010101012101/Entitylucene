AppleScript “delay” command not working since switch to Yosemite <body> strongNote:/strong The issue with codedelay/code was fixed in OS X 10.11 El Capitan.  Ever since I upgraded to Yosemite, Applescripts that use delays have stopped working.  How can I fix this?  Here's the world's simplest Applescript, for the sake of an easy example:  precodeset volume output volume 0 delay 5 set volume output volume 20 delay 5 set volume output volume 0 delay 5 set volume output volume 20 delay 5 set volume output volume 0 delay 5 set volume output volume 20 delay 5 set volume output volume 0 /code/pre  That should take 30 seconds to complete.  If I run it in Script Editor (formerly Applescript Editor) it takes 30 seconds to complete.  But if I save this script as an app, when I launch the app, the delays are ignored and the app takes a fraction of a second to complete.  How can I force Applescript to delay for a specified amount of time before moving on to the next step?  Is this a Yosemite glitch?  Is there a reliable workaround?  <answer161776> I'm not saying this is the best solution, but it seems to have solved my problem.  Instead of using a simple delay, which is being ignored for reasons I do not understand, I've switched to getting the time and looping until a new time is reached (it still uses a delay, but it doesn't matter if it ignores the delay since the script doesn't continue until the time is reached).  precode# Pause for five minutes set GetTheTime to current date set NewTime to GetTheTime + (5 * minutes) repeat while (current date) is less than NewTime     delay 60 end repeat /code/pre  I'm still dying to know why delay is being ignored (or dramatically sped up?!??), but this gets the job done, clumsy as it is.  <answer174368> strongNote:/strong The issue with codedelay/code was fixed in OS X 10.11 El Capitan.  @2oh1, you have the right basic idea in your answer, but here's a complete and correct answer:  The only reasonable way to work around this is to invoke "delay" within a loop that ensures the desired duration elapses before continuing. The best way to do this is to override "delay" with a custom handler:  precodeon delay duration   set endTime to (current date) + duration   repeat while (current date) is less than endTime     tell AppleScript to delay endTime - (current date)   end repeat end delay /code/pre  This enables you to leave the rest of your script unchanged and you can use "delay" normally, e.g.,  precodedelay 5 display alert "I like cake!" /code/pre  [NOTE: Normally, the custom handler would use "continue delay duration" to invoke the built-in "delay", but I found that, although this works within Script Editor, it returns an error when used within an applet (“Can’t continue delay. (-1708)”). I worked around that issue by directly telling AppleScript to handle the delay command instead of using "continue" to get there.]  The issue is that codedelay/code processes user input while pausing the script, so you can still click on menus or windows displayed by an applet, and there is a bug (fixed in 10.11) where user input causes codedelay/code to not wait the full duration before resuming script execution. If you don't interact with the applet, codedelay/code works correctly.  <answer193518> I found a work-around in a German forum post. Add these lines to the top of your script:  precodeuse framework "Foundation" use scripting additions current application's NSThread's sleepForTimeInterval:1 /code/pre  <answer197715> While battling this same problem I came across this answer to a not-so-related question and decided to try it and it seems to work for me.  Simply replace codedelay 5/code with codedo shell script "/bin/sleep 5"/code and get the same result.  <answer206613> carzyj had what I consider the best answer, but when combined with Chris Page's method, you get:  precodeon delay duration   do shell script "/bin/sleep " &amp; duration end delay /code/pre  You can comment out "on delay" through "end delay" to revert to the original delay.  <answer218656> this is a modification to @chris-page solution  It seems to be a balance between responsiveness and accurately capturing the delay.  precodeon delay duration     set endTime to (current date) + duration     repeat while (current date) is less than endTime         set delta to duration / 100         if duration &lt; 0.2 then             set delta to 0.2         end if         tell AppleScript to delay delta     end repeat end delay /code/pre  But instead of telling Applescript to delay for the overall duration, we just tell it to delay for a fractional period of the duration. if the period is less than what apple allows (1/60 of a second), then let's just set it to that delta. That we can keep some responsiveness, yet still be accurate. the suspicion is that sometimes delay doesn't work so the repeat while loop will keep the thread locked up, but in success scenarios, we want the delay delta to be short so that the process can still be interrupted  <answer218883> So, to put it all together, I believe Chris means this:  precodeon delay duration    set endTime to (current date) + duration    repeat while (current date) is less than endTime       tell AppleScript to delay endTime - (current date)    end repeat end delay /code/pre  <comment189032> This works as expected on my Mac (10.10.1) <comment189099> Any idea what causes it not to work on mine?  To clarify: it works in Script Editor, but if I save the script as an app and then launch the app, the delays are ignored.  It's the strangest thing. <comment205306> The "delay" command isn't being "sped up", it's being interrupted. While delaying, it sits in a loop checking whether there are any keyboard input events so it can check for Command-Period. Apparently it is incorrectly exiting the delay loop when any user input is detected. <comment205321> Is all of this a bug, or is there a reason delay is working this way with Yosemite? <comment205445> It is a bug that delay isn't delaying. <comment208769> Interesting!  I'm finding that it's being ignored (sped up?  interrupted?) even when my Mac is sitting idle, but I don't know why. <comment208770> It's so strange.  I was tinkering with an applescript that uses delay the other night, and suddenly, delay was functioning correctly again.  I assumed the bug had been fixed.  An hour later, even though nothing had changed, the bug was back.  I'm truly baffled.  It doesn't matter though.  I'm using a variable to set the time and delay until five minutes later (for example), and it's working perfectly.  So...  problem solved, but that doesn't explain why the problem exists.  Interesting, interesting, interesting. <comment226493> Because Apple goofed. Apple software is much less reliable since they started releasing OS X yearly. I miss the higher OS X minor versions (like 10.6.8) where the OS was rock-solid. You just don't get that kind of experience anymore. <comment230692> I have the same problem on 10.10.3 <comment230693> If it's a bug (which I agree with), why isn't this still not fixed, I wonder. Has anyone here made a radar report? Would you then please post its ID? (or/also post on openradar.me) <comment230695> Reported to Apple: http://www.openradar.me/21588747 <comment230785> I'm having trouble testing your answer because, for whatever reason, delay is currently working as expected on my Mac.  I have no idea why.  I'm running 10.10.3.  Perhaps Apple fixed this bug?  Or, maybe it's just an intermittent problem that isn't effecting my Mac at this moment.  Ugh.  As I said above though, my workaround is having Applescript get the current time and then delay until current time plus x. <comment231047> I am running 10.10.3 as well and do still see the issue. Since not everyone sees the issue, it's probably intermittend or related to 3rd party software or to certain preference settings. Who knows. BTW, your work-around has probably the disadvantage that the app keeps using 100% CPU time while waiting, whereas the proper delay behavior is to put the app to sleep for that duration, thereby using less power. <comment236409> I have found delay works fine when running within Script Editor, but when running as an Application it is sped up/ignored. <comment236421> Thanks for sharing!  As I said earlier above, I'm unable to test this because, for reasons that make no sense to me, delay 5 is working as it should for me right now (I just tested it again a moment ago).  I have no idea why this sometimes works and sometimes fails.  It's so strange.  I ended up using a workaround where I get the current time and set it as a variable, and then pause the script until the time is variable plus one minute (for a 1 minute delay, obviously).  It's clunky, but it's worked flawlessly for months, whereas a simple delay has been intermittent.  Ugh. <comment264341> I am running 10.10.5 and this solution does not work. <comment264342> I am running 10.10.5 and this solution does not work and also locks the script for the duration of the sleep <comment264344> I also made a similar code modification, before seeing this. I am running 10.10.5 and this solution does not work and also locks the script for the duration of the sleep. <comment264492> @ThomasTempelmann: The issue occurs when there is user input. If you don't click or type while the script is running, the bug isn't triggered. <comment264493> @Greg: If it “locks the script” for the sleep duration, then it's working. `/bin/sleep` waits for the sleep duration and does not return until it has completed. In contrast, AppleScript's built-in `delay` command handles user input events while the script is paused. (Which is where the bug lies: if there is user keyboard input, `delay` continues script execution before the delay duration has completed.) <comment264494> The issue occurs only when there is user keyboard input pending when `delay` executes. `delay` processes some user input while pausing the script so that the application doesn't become unresponsive; e.g., you can click on menus while `delay` is executing. The bug is that events in the event queue cause `delay` to immediately continue script execution instead of waiting the full duration. If you don't interact with the applet while `delay` is running, you won't see the problem. <comment264495> @crazyj: What OS version? The issue was fixed in 10.11. <comment264496> Shortening the requested delay is unnecessary and can only make the script run slower and consume more CPU while waiting. My version merely calls delay until the entire desired duration has elapsed, allowing `delay` to delay as much as it can before it continues execution. <comment264497> Note that this solution causes the application to actually freeze for the duration of the sleep. `delay` processes user input while the script is paused, so you can still interact with menus and windows, for example. <comment264527> This issue was fixed in OS X 10.11 El Capitan. <comment264530> Note that since this answer was posted, I updated my code to use `delay endTime - (current date)` instead of `delay duration`, which ensures that if `delay` _doesn't_ get interrupted it won't pause the script any longer than the originally requested time, which may have been what you were trying to address with this answer. <comment264869> Once a user input event is in the event queue, `delay` will be continue to be interrupted until something handles the events and removes them from the queue.