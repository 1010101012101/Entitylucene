How can I access the LaTeX commands from the terminal? <body> I just installed MacTeX onto Yosemite and it installed everything in codeusr/local/texlive/code  However if I am in Terminal and try to compile a LaTeX file with codepdflatex foo.tex/code, it cannot find the LaTeX tools. Further codewhereis pdflatex/code returns no results.  If I specify the entire path of codepdflatex/code (e.g., code/usr/local/texlive/2014/.../bin/pdflatex/code) it all works well.  How can I get the LaTeX tools to work from the terminal without specifying the entire path?  <answer166516> To get the LaTeX tools to run from the command line, you need to add the path to your codepdflatex/code to your executable search path. To do this, you'll need to edit the code.bash_profile/code file in your home directory. Open the file in a plain text editor (e.g. vi, emacs, bbedit) and add this line at the bottom:  precodePATH=/usr/local/texlive/2014/.../bin:$PATH /code/pre  where code/usr/local/texlive/2014/.../bin/code is the path you typed in your example to get pdflatex to run.  hr  strongAn aside/strong  codewhereis/code only returns results from system-installed executables. codewhich/code looks in the entire path. e.g. on my machine:  precode~ 503   whereis ruby /usr/bin/ruby ~ 504   which ruby /Users/steve/.rvm/rubies/ruby-2.1.2/bin/ruby /code/pre  <answer166517> For binaries to be accessible from the command line, their locations must be part of the codePATH/code environment variable. If you do the following  precodePATH=$PATH:/usr/local/texlive/2014/.../bin /code/pre  (filling in the correct path), you will be able to call codepdflatex/code directly (as well as every other program in the same directory. To make the change permanent, codeexport/code the command in a file sourced by the shell, such as code.bash_login/code or code.profile/code (assuming you use bash). Either use an editor or run   precodeecho "export PATH=$PATH:/usr/local/texlive/2014/.../bin" &gt;&gt; ~/.bash_login /code/pre  Which will append the output of the codeecho/code command to the file and create it if it does not exist.  The shell searches the directories in the codePATH/code in the order they are listed, so usually it is a good idea to always emappend/em to the codePATH/code unless you know exactly what is in the added directory. It might contain other executables with the same name as other programs which are already in the codePATH/code. Having these shadowed can sometimes lead to surprises. 