Why can't I run `su`? (and how should I do?) <body> Whenever I try to issue codesu/code I get this:br code$ subr Password:br su: Sorry/code    Needless to say, I'm entering the correct admin password which does work with codesudo/code. What I want is not having to enter codesudo/code each time.  <answer14625> You have two options. The first is to use codesudo -s/code - this will give you superuser access, but you will still remain 'yourself' (so to speak), so things like code~/code will still be your home directory. Alternatively, you can use codesudo su/code, which gives you a shell as the actual root user of your Mac.  <answer14638> In MacOS X, the root user is disabled by default, therefore codesu/code will not work. As others have stated, it's best to use codesudo/code.   If you strongmust/strong enable the root user, see Apple's technote: Enabling and using the "root" user in Mac OS X.  <comment15742> The Apple Way(tm) is to use `sudo` to run commands that require elevated privileges, not to switch to a root shell and work from that. <comment15760> @Ian C. - No, that's actually the unix way. Apple just uses it because it is *nix based too. <comment15761> `sudo su` still works, so it is not really disabled. It just has no password. <comment15764> @Fake Name: Apple goes through great pains to never talk or expose the root shell to users. You could say they take the `sudo` ethos to the extreme. But whatever: semantics. Don't use root shells in OS X. <comment15783> @Ian C - Apple doesn't do much more than the \*nix designers do, Apple just doesn't talk about it much. In both cases, it's there, only with things like linux, they tell you how to use it easily. If that makes it more widely *used*, it doesn't indicate an underlying architecture difference. <comment334022> @FakeName This is the most hilarious backdoor! If you can run `sudo su`, what in the world is the point of disabling `su` then? <comment334034> @KolobCanyon - The point isn't really to "disable `su`", it's to *prevent root login*. By disallowing login as `root`, you prevent a bunch of possible security issues. Not allowing someone who can `sudo` to `su` is kind of silly.  Basically, `su` just changes the current user-id, and executes a command (a shell, if not specified). If the user-id is already 0 (root), such as when executed with `sudo`, there's nothing for it to do, so it just executes the shell. You can get a similar effect by doing `sudo bash`. <comment334058> @FakeName Still confused. What's the difference between logging in as root and running 'sudo su'? Isn't it effectively the same level? <comment334063> @KolobCanyon - Nope. Basically, if you disable *login*, it means that if there is a vulnerability in the login process, a hacker cannot use it to get root directly. Basically, it moves the required root compromise from "login compromise" to "login comprimise for user account + privesc". It's basically done as a defence-in-depth thing.