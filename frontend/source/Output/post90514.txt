How do I programmatically and reliably get the AirPort's interface name? <body> I need the en0, en1, enN, enWhatever name of my Airport in a script.  How do I get it reliably?  Here is what I put together, but it looks ugly and brittle as it's "text parsing":  precodeairport_hardware_name='Hardware Port: Wi-Fi' networksetup -listallhardwareports | awk -v p="$airport_hardware_name" '$0 ~ p { getline; print $2; }' /code/pre  <answer90516> If you need to support old versions of OS X, the Wi-Fi network service was called Airport in 10.6 and earlier.  codenetworksetup -listallhardwareports | awk '/^Hardware Port: (Wi-Fi|AirPort)$/{getline;print $2}'/code  You could also use code-listnetworkserviceorder/code:  codenetworksetup -listnetworkserviceorder | sed -En 's/^\(Hardware Port: (Wi-Fi|AirPort), Device: (en.)\)$/\2/p'/code  Or read code/Library/Preferences/SystemConfiguration/NetworkInterfaces.plist/code:  coderuby -e 'require "plist";puts Plist::parse_xml("/Library/Preferences/SystemConfiguration/NetworkInterfaces.plist")["Interfaces"].select{|i|i["SCNetworkInterfaceType"]=="IEEE80211"}[0]["BSD Name"]'/code  <answer90518> How about  precode/usr/sbin/networksetup -listnetworkserviceorder | grep -i 'Wi-Fi\|AirPort' | grep -iow en. /code/pre  <answer90552> Playing on Lauri's theme that Apple may change the name of the Wi-Fi devices at some point in the future:  precodefor d in `networksetup -listallhardwareports | awk '/^Device:/{print $2}'`; do   networksetup -getairportpower $d &gt; /dev/null 2&gt;&amp;1 &amp;&amp; echo "Wi-Fi Device: ${d}" done /code/pre  Since 'networksetup -getairportpower dev' throws a non-zero return value when dev is not an airport device, we can find the one(s) that work(s).  <answer90724> Solely to round out the answers (not to suggest that there's something wrong with the other answers, but only to show there is another way to do it), I'll throw out this:  Use the codeairport/code command found at:  precode/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /code/pre  which has been there since at least 10.6. (I always link it to code/usr/local/bin//code whenever I am setting up a new Mac).  One of the benefits of the codeairport/code command is that you don't have to know what the interface is, because:     "If an interface is not specified, airport will use the first AirPort interface on the system."   Therefore, if I run this command:  precodeairport prefs 2&gt;&amp;1 /code/pre  I get this output:  precodeAirPort preferences for en1:  DisconnectOnLogout=NO Unable to retrieve JoinMode Unable to retrieve JoinModeFallback RememberRecentNetworks=NO RequireAdminIBSS=NO RequireAdminNetworkChange=NO RequireAdminPowerToggle=NO WoWEnabled=YES /code/pre  which means that I can get the port/device name by looking for the last word on the first line, minus the colon.  precodeairport prefs 2&gt;&amp;1 | awk -F' ' '/for/{print $NF}' | tr -d ':' /code/pre  <answer91550> Just accidentally found another way to do this:  codenetworksetup -setairportpower enX off 2&gt;&amp;1 | awk -F' ' '/:/{print $NF}'/code  How/why this works:  codenetworksetup -setairportpower enX off/code  gives this result:     enX is not a Wi-Fi interface.      Turning off the only airport interface found: en1   Not sure that I would rank it high in terms of emreliability/em, but I'll include it here as an option.  (Works on 10.8.3.)  <comment106266> fails for en10, for example <comment106267> upvoting for Snow Leopard compat! nice touch! <comment106358> This is the best so far.. built-in additional reliability!! Great stuff.. <comment106392> Don't think I have ever seen a en10. But good to know <comment107366> → Lauri: 2nd version doesn't work if the wireless interface is off. <comment107469> @danielAzuelos Do you mean like when Wi-Fi is turned off from System Preferences? It worked for me even after I turned off Wi-Fi and restarted. <comment107506> → Lauri: I meant when I'm using a dedicated location where there is only Ethernet on & defined. This is a configuration I use everyday to analyse network problems.