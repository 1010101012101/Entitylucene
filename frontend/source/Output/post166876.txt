Macbook Pro: How to disable discrete GPU permanently from EFI? <body> I'd like to disable the NVideo GTX 750M GPU on my Macbook Pro 15" (Retina, Mid 2014, OSX 10.10 Yosemite). I know I can use GfxCardStatus but I read I could have a more permanent solution by changing some EFI flag.  strongMy question is:/strong  ul listrongHow can I disable the discrete GPU from EFI?/strong  I assume this is persistable across multiple reboots. I'd also want to know how to undo it if needed./li /ul  Update:  The question is basically whether the command mentioned in GfxCardStatus github issue comment here is correct or not, and how to undo it if it doesn't work.  .  An answer to this alone is a correct answer, but it'll be awesome if you can also tell me:  ul liIf you force integrated graphics in GfxCardStatus, Mac OSX (up to Yosemite at least) doesn't allow you to use multiple monitors (even though the built in Iris Pro can do it).  If I disable the discrete GPU from EFI, will Mac OS think integrated GPU is the one installed and let me use multiple monitors with it?/li liI heard that the same EFO doesn't even show the integrated GPU to other OSes than Mac OSes and you have to trick it somehow to think it's Mac OS.  Is that true? And if yes, how to do that?/li /ul  <answer196709> Belated answer to one of your side questions: You probably need the discrete GPU enabled to use an external display. The reason why should be in how the GPUs and the video outputs are wired.   (I'm half-guessing, half-extrapolating from how the PC laptop graphics switching technology works. It's not an unreasonable assumption that those technologies are based on the GPU vendors' work with Apple. Still: take the following with a large grain of salt.)  With nVidia Optimus, the setup is that the built-in display of a laptop is connected to the integrated GPU, and the external display port is connected to the discrete GPU. If you need to render stuff using the discrete GPU to the built-in display, the discrete GPU is "slaved" to the integrated one. A rendering call first goes to the integrated GPU, which, if the discrete GPU is enabled, forwards it there, then retrieves the result to push it on the display.  If an external display is connected, rendering calls for that display go directly to the discrete GPU, because that's the GPU that can send any output to that display anyway. The integrated GPU simply can not, at all, send video output to that port on its own. I don't think it's even possible to have the integrated GPU be "slaved" to the discrete one, because first of all it'd be pointless from a design perspective with regards to the goals of the graphics switching technology; and even then, it'd still require the discrete GPU to be enabled, which wouldn't help people whose chip is failing.  <answer231270> h3Your Dilemma/h3  I'm in full sympathy with your wish "save on battery and reduce heat, without paying the noise cost" of using the discrete graphics card inside a MacBook Pro.  h3Warning/h3  Before you do anything which will disable your display, please make sure you are able to log in to your MacBook Pro using SSH so that you can undo, your handiwork. While screen sharing with all graphic cards disabled will probably work at some default resolution, I wouldn't bet my computer on it.  h3Answers/h3     What will happen if I permanently disable the discrete nVidia graphics card from EFI? Will Mac OS think integrated GPU is the one installed and let me use multiple monitors with it?   You will lose any ability to use an external monitor (under any OS). The external graphics port(s) are wired to the discrete graphics chip.  My own MacBook Pro 2011 runs at a stable 60 degrees even under load with minimal fan noise when using the built-in Intel graphics and spikes to full fans (in the 4000 to 6000 RPM range) when under load with the discrete 6750. The problem is real. I too wanted to be able to only use the built-in graphics and drive an external monitor.  No way, no how.     Is it true that the same EFI doesn't even show the integrated GPU to other OSes than Mac OSes and you have to trick it somehow to think it's Mac OS?   Yes, it's true. The Intel GPU gets switched off by the MacBook Pro 11,3's EFI if you boot anything but Mac OS X. You have four choices if you want to use the integrated Intel chip under alternative OS:     ol   lirEFInd version 0.10.0 or above (recommended): http://www.rodsbooks.com/refind/li   /ol      Recent versions of rEFInd have the "apple_set_os" hack built-in. You can enable it by setting the spoof_osx_version option in your refind.conf.      ol start="2"   liapple_set_os.efi: https://github.com/0xbb/apple_set_os.efi/li   lia patched GRUB:   https://lists.gnu.org/archive/html/grub-devel/2013-12/msg00442.html   https://wiki.archlinux.org/index.php/MacBookPro11,x#Getting_the_integrated_intel_card_to_work_on_11.2C3/li   lia patched Kernel: https://www.marc.info/?l=grub-deavel&amp;m=141586614924917&amp;w=2/li   /ol   Be careful to plan ahead. If you don't prepare, you will face a powered-down integrated graphics card and a black screen. Of course you can always go back and boot Mac OS X and start again.  The simplest of the choices above would be number two - to replace the Apple EFI. Unfortunately, it's the one which could leave you unable to boot up at all at some future date. Apple does not like people to play with EFI and reserves the right to brick your device for doing so. If you had Apple Care and were still in the warranty period, you might find a shoulder somewhere to cry on. Might. When you change EFI, you also take security risks, i.e. you may make it easier to hack your machine. You need to be able to update to the latest EFI which would remove your patch.  Option one, strongRefind/strong puts itself between boot and EFI, which leaves considerable scope for something to go wrong and for you to be left with a brick and a long hard trail back to a working computer. How serious are these issues? Many MacBook Pro owners have lost their hard drive to Refind:     Numerous rEFIt bug reports indicate disk corruption problems on disks over about 500 GiB....I strongly recommend that you not type sudo bless --info to check the status of your installation if you have such a disk, or even if you suspect you might have such a disk. (I've seen Advanced Format disks as small as 320 GB.)   Option three is relatively easy. Patching grub is a process with which any early Hackintosh owner is quite familiar. Patching Grub works and is easily undoable as the changes are not made at the firmware level. If you patch grub conservatively, the additional grub code is only enabled by holding option/alt on boot.  h3Conclusion/h3  If you prefer using your computer to repairing it, Cody Krieger's gfxCardStatus in its out of the box configuration looks more and more attractive. If you really want to force gfxCardStatus to run at start Mr Krieger has participated in an illuminating conversation, which has led to switchGPU. switchGPU presets gfxCardStatus to either discrete or integrated graphics early enough that you can run on integrated graphics when your discrete GPU would otherwise overheat and crash. gfxCardStatus continues to operate normally (i.e. you can switch back to discrete GPU after boot using the gfxCardStatus menu item). There's no reason to install switchGPU unless you have serious hardware issues with your discrete GPU which mean you need to keep it turned off all the time.  h3Coda/h3  On reflection, my own situation with the integrated AMD 6750 is bad enough (so hot and loud even after thermal repasting) that I will avail myself of Apple's extended warranty repair program for 2011 MacBook Pro with AMD graphics. Marco Arment was probably right to turn in his 2011 2.2 GHz MBP with 6750 for the 2.0 GHz version with 6490. While I considered doing the same thing at the time, I would have had to ship my MBP overseas to change it. Sadly the Retina MacBook Pros appear to continue to suffer the same heat and noise issues. My girlfriend's 2013 2013 MacBook Pro with only integrated graphics behaves much better.  Over heat and noise issues with quad core MBP work stations, I've given up and bought two Mac Pros (a 2006 and a 2009), upgraded the CPU's to eight core and six core respectively. The 2006 with Apple AMD 5870 installed is nearly silent (much quieter the 2009) and multitasks better than the MBP 15". The two silver towers (home and office) cost less combined than a single new MacBook Pro. For now I'm running the 2011 MBP 15" on discrete graphics only as a carry around (no external monitor).  <answer284398> If anyone is still looking for ways to do this, please check out this MacRumors forum post.    I followed the steps mentioned in that forum post and my 15" MacBook Pro 2011  is working perfectly using only its Integrated Graphic.  The worthless AMD graphic card was disabled successfully.  https://forums.macrumors.com/threads/force-2011-macbook-pro-8-2-with-failed-amd-gpu-to-always-use-intel-integrated-gpu-efi-variable-fix.2037591/page-5#post-24511780  https://forums.macrumors.com/threads/force-2011-macbook-pro-8-2-with-failed-amd-gpu-to-always-use-intel-integrated-gpu-efi-variable-fix.2037591/  <answer285896> You can strongpermanently disable discrete graphics card/strong following next steps:  h31. Prepare a Bootable USB pendrive with a non GUI Linux/h3  strong1.1 Download ArchLinux ISO/strong  ul liYou need a working computer for that and a spare CD/DVD/USB drive. /li liDownload the latest Arch Linux ISO image. /li liThen you could either simply burn this ISO to CD/DVD (which later could be either inserted to MBP's SuperDrive or External DVD Drive connected to MBP by two USB cables) or create a bootable USB./li /ul  strong1.2 Creating the bootable USB with the .iso/strong  ul liFirst, you need to identify the USB device. /li liOpen /Applications/Utilities/Terminal in MacOS and list all storage devices:  codediskutil list/code  Your USB device will appear as something like code/dev/disk2 (external, physical)/code. Verify that this is the device you want to erase by checking its name and size and then use its identifier for the commands below instead of code/dev/diskX/code./li liA USB device is normally auto-mounted in macOS, and you have to unmount (not eject) it before block-writing to it with dd:  codediskutil unmountDisk /dev/diskX/code/li liNow copy the ISO image file to the device. The dd command is similar to its Linux counterpart, but notice the 'r' before 'disk' for raw mode which makes the transfer much faster:  codesudo dd if=path/to/arch.iso of=/dev/rdiskX bs=1m/code  After completion, macOS may complain that "The disk you inserted was not readable by this computer". Select 'Ignore'. The USB device will be bootable./li /ul  h32. Use Linux to change EFI vars/h3  strong2.1 Boot to it/strong  ul liInsert this CD/DVD/USB to Macbook Pro, hold Option key (alt) while booting./li liChoose "EFI boot" (that is your bootable installation media)./li liWhen the menu shows, press "e" key to edit the GRUB options of the Arch Linux archiso x86_64 UEFI CD menu entry while it is selected at the main screen, add codenomodeset/code to the end of this line and press Enter./li liIf everything is done correctly, you will find yourself at the Linux console! (It takes some time so be patient and wait for the prompt)/li /ul  strong2.2 Clear existing EFI vars/strong  Looks like efivarfs filesystem is mounted by default! So you can already codecd /sys/firmware/efi/efivars/code and codels/code to explore this directory and see if there is a codegpu-power-prefs-.../code variable (where ... is UUID of this variable).  ul liIf there is such a variable, its better to remove it with rm.  coderm gpu-power-prefs-…/code /li liIf you are getting the "operation not permitted" message while attempting to coderm/code, it means that efivarfs has been mounted as read-only and you need to remount it with read-write permissions and try again:  codecd //codebr codeumount /sys/firmware/efi/efivars//codebr codemount -t efivarfs rw /sys/firmware/efi/efivars//codebr codecd /sys/firmware/efi/efivars//codebr coderm gpu-power-prefs-…/codebr/li liIf this also fails (you still can’t erase the file), use codechattr/code command to disable file immutability and then erase the file:  codechattr -i "gpu-power-prefs-…”/codebr coderm gpu-power-prefs-…/codebr/li /ul  strong2.3 Create a new gpu-power-prefs-… file/strong  precode`printf "\x07\x00\x00\x00\x01\x00\x00\x00" &gt; /sys/firmware/efi/efivars/gpu-power-prefs-fa4ce28d-b62f-4c99-9cc3-6815686e30f9` /code/pre  strong2.4 Add immutability to the gpu-power-prefs-… file/strong  This codechattr/code command is supposed to lock a file to make it accessible only by "superuser" - and so that, while booting, your EFI will have no chance to screw up your gpu-power-prefs-... variable under any circumstances  precode`chattr +i "/sys/firmware/efi/efivars/gpu-power-prefs-fa4ce28d-b62f-4c99-9cc3-6815686e30f9"` /code/pre  strong2.5 Unmount efivars and reboot/strong  Change to the root directory to unmount efivars:  precodecd / umount /sys/firmware/efi/efivars/ /code/pre  Guarantees that your EFI variables are flushed to efivarfs filesystem. Please unmount it safely before rebooting.  precodereboot /code/pre  h33 Remove AMD kexts/h3  Note: You might need to do this every time you do an OS updates, since each update normally writes the AMD Kexts again.  After disabling the dGPU using Arch, normal boot would hang halfway but safe boot will work.  strong3.1 Move AMD kext files to a backup directory/strong  Remove all the AMD kext files in the Terminal in Recovery Console. Trying to remove them in Single User just gives sandbox errors, so don’t do it in Single User Mode! (the one that you boot with codecmd/code + codes/code).  ul liIf you have FileVault, unlock it first./li liBoot into Recovery (codecmd/code + coder/code) directly. If it fails then repeat step 2 and retry (dGPU could get active again after booting into the os with AMD kexts)./li liStart Terminal  codediskutil cs list/code (find UUID for drive: last item)br codediskutil coreStorage unlockVolume UUID/codebr codecd /Volumes/Macintosh\ HD/codebr codemkdir AMD_Kexts/codebr codemv System/Library/Extensions/AMD*.* AMD_Kexts//codebr codereboot/codebr/li /ul  I found the procedure in this link, where you can read the attribution of the different sections and a discussion thread on the topic.   I tried it myself on an early 2011 MacBook Pro with a faulty discrete graphics card, that was unable to boot even with the overheating trick, and ended up with a fully functional computer!  <comment195663> This looks like a classic [XY Problem](http://xyproblem.info). What are you actually trying to achieve? <comment195667> What I'm trying to achieve is disable discrete GPU from EFI. <comment195669> No, that's the procedure you have decided will achieve your aim, not your actual aim. <comment195670> Have a permanent saving on battery, and reduce heat, without paying the noise cost. I got the NVidia one because I wanted top CPU & SSD upgrades & this was the prebuilt one. If I could wait for custom build, I'd have got the integrated GPU one. <comment198918> A solution to this question would also be useful to owners of 2011 MBP models that have a defective discrete GPU. It is certainly possible to disable the discrete GPU when using Linux, see my question here: http://apple.stackexchange.com/questions/168167/can-i-use-linux-in-a-2011-macbook-pro-with-a-defective-discrete-gpu <comment235112> Interesting! I know that Lenovo ThinkPad W530 allowed me to set integrated GPU from BIOS options, and I'm almost sure this still let me hook external monitors still. Not 100% sure as well. <comment236273> As I said, I'm not 100% certain on the above, because I can't find the original articles again. It's possible that the wiring I described isn't the only possible configuration, and the W530 has the integrated GPU handle both. However, the Macbook requiring you to run the discrete GPU for an external would indicate that it's indeed wired the way I described. <comment361120> Unfortunately, on my mid 2010 MacBook Pro Mid 6,2 model in combination with MacOS High Sierra I did not succeed with step 3. When I enter `diskutil cs list` it returns `No CoreStorage logical volume groups found`. The discrete GPU remains enabled. Any idea? <comment361123> I just figured out that I could just skip the `diskutil` commands and I  succeeded to remove the AMD files. Unfortunately, the discrete gpu is still being used... <comment361301> @Taco, if you rebooted and it didn't work, you may need to repeat step 2. Also make sure your discrete card is an AMD, some models mount a NVIDIA. If that is your case, you should move the kext files related to that card. <comment361722> Yes, you are correct, this mac has an NVIDIA card and not an AMD (I was just following the steps without realizing this). However, I still couldn't get it working, but with another solution proposed for this specific laptop it did work!! [MBPMid2010_GPUFix](https://github.com/julian-poidevin/MBPMid2010_GPUFix). Thanks for your help. <comment369970> Some important info if you have an NVidia rather than an AMD card. The instructions are correct, but the following kexts need to be removed: CUDA.kext GeForce.kext GeForce7xxxGLDriver.bundle GeForceGA.plugin GeForceGLDriver.bundle GeForceVADriver.bundle NVDANV40Hal.kext NVDANV50Hal.kext NVDAResman.kext NVSMU.kext Tested on an early 2011 MBP running 10.12.6.