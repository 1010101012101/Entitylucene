What causes OS X to mark a folder as Quarantined? <body> I had a folder under code~/Sites/code, let's call it codeFoo/code, from which I was sharing a Wordpress site-in-development via Apache. This was working fine, I'd mapped codefoo.local/code to code127.0.0.1/code in my hosts file and was accessing the site from there on my laptop.  Then, I tried to access the site from my iPhone. I was able to see the root index of code~/Sites/code from the phone by surfing to codemy-computers-hostname.local/code, but couldn't access the Wordpress site, as it had been set up to believe its address was codefoo.local/code, and therefore had hardcoded references to that URL in its database. When I attempted to change its URL setting to codemy-computers-hostname.local/code, something very strange happened: I received an authorization error when attempting to save the change. From that point forward, the entire folder containing the Wordpress site disappeared from the index page at codefoo.local/code / codemy-computers-hostname.local/code, and any attempts to access it by URL were met with a 403 - Authorization Refused error from the webserver.   Listing the folder in question in the Terminal showed me that the codecom.apple.quarantine/code extended attribute had been applied to it and to all files contained within. What would cause the operating system to quarantine the folder? Was it the attempted access from another machine, or something to do with Wordpress's configuration?   <answer104875> The codecom.apple.quarantine/code extended attributes probably have nothing to do with the issues you are having with Apache. They are part of the file quarantine feature that was added in 10.5:     File Quarantine is a new feature in Leopard designed to protect users from trojan horse attacks. It allows applications which download file content from the Internet to place files in “quarantine” to indicate that the file could be from an untrustworthy source. An application quarantines a file simply by assigning values to one or more quarantine properties which preserve information about when and where the file come from.      When the Launch Services API is used to open a quarantined file and the file appears to be an application, script, or other executable file type, Launch Services will display an alert to confirm the user understands the file is some kind of application.   The codecom.apple.quarantine/code extended attributes can be added when:  ul liYou download a file with a quarantine-aware application, like Safari, Chrome, or Transmission. For a few applications like Firefox, quarantine is forced to be enabled in code/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/Exceptions.plist/code./li liYou extract an archive with an application like Archive Utility or OS X's codetar/code or codezip/code./li liYou create a file with an application that has codeLSFileQuarantineEnabled/code set to true in the codeInfo.plist/code./li /ul  The extended attributes have fields for quarantine status, a timestamp, the agent that originated the quarantine event, and sometimes a UUID:  precode$ xattr -p com.apple.quarantine Worksheet_v10.4.pdf 0042;51ea420b;Safari.app;5E2F48EA-1356-4D57-BFEA-571EE8ADC08C $ date -r 0x51ea420b Sat Jul 20 10:53:47 EEST 2013 $ sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 .dump|grep 5E2F48EA-1356-4D57-BFEA-571EE8ADC08C INSERT INTO "LSQuarantineEvent" VALUES('5E2F48EA-1356-4D57-BFEA-571EE8ADC08C',395999627.472166,'com.apple.Safari','Safari','http://images.apple.com/server/docs/Worksheet_v10.4.pdf',NULL,NULL,0,NULL,'http://images.apple.com/',NULL); /code/pre  The first field is a hexadecimal bitfield, where for example the seventh bit (2^6 or 0x40) usually gets set after you open a file for the first time.  You can delete the extended attributes with codexattr -dr com.apple.quarantine ~/Sites/code, but it won't probably have any effect on Apache. It will however disable the "is a file downloaded from the Internet" dialogs.  <comment330331> "option -r not recognized"