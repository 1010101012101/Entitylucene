How to find which shared library is loaded by a process on OSX? <body> I am trying to compile and use a shared C library as a python module and I am observing that depending on the codeDYLD_LIBRARY_PATH/code my code works or it crashes with a cryptic error message.   precodeJul 24 02:44:44 master  $ DYLD_LIBRARY_PATH=/opt/local/lib  python -c 'import opengm'  OKAY  Jul 24 02:45:41 master  $ DYLD_LIBRARY_PATH= python -c 'import opengm'  python(86214,0x7fff70ccdcc0) malloc: *** error for object 0x7fff70177500: pointer being freed was not allocated *** set a breakpoint in malloc_error_break to debug Abort trap /code/pre  I have tried to manually inspect which libraries are common between code/usr/lib/code and code/usr/local/lib/code and code/opt/local/lib/code but I have not been able to find the cause of the crash. One way to figure out the cause of the problem will be to figure out which codedylib/code files do the two processes use? I was not able to figure this using codeopensnoop/code or codedtruss/code but maybe I was using those tools wrong.   How can I figure out the cause of this crash?   strongDISCLAIMER:/strong I posted this same question on SO 2 days ago, where it did not receive any replies and only 8 views.   <answer247229> One program that can show which codedylib/code files have been used to execute a program is codeotool/code.  precodeotool -L /path/to/program /code/pre  <answer247331> You can set codeDYLD_PRINT_LIBRARIES=YES/code in the environment to have codedyld/code print every dynamic library that it loads into the process:  precode$ DYLD_PRINT_LIBRARIES=YES /usr/bin/true  dyld: loaded: /usr/bin/true dyld: loaded: /usr/lib/libSystem.B.dylib [ ... snip ... ] dyld: loaded: /usr/lib/libc++.1.dylib dyld: loaded: /usr/lib/libDiagnosticMessagesClient.dylib $ /code/pre  <comment305039> Welcome to AskDifferent! Please don't crosspost. In the future, if you want to move questions to another site, just flag it for mod attention and ask the moderators to migrate it to the other site. <comment305042> Yes, sorry about the cross post. <comment305045> No worries, we all live and learn :-) <comment305054> otool shows `@rpath/libz.1.dylib` and `@rpath/libpython2.7.dylib`. The rest of libraries have complete paths. This probably means that if I somehow set the rpath correctly in the compiled dylib then everything will be fine. Thanks for your answer.