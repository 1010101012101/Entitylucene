Terminal Error: pointer being freed was not allocated *** set a breakpoint in malloc_error_break to debug - Unable to Repair Permissions <body> I'm getting an error when I open Terminal saying:  precodelogin(495,0x7fff77186000) malloc: *** error for object 0x7f8cdad0b780: pointer being freed was not allocated *** set a breakpoint in malloc_error_break to debug  [Process completed] /code/pre  I've read in several forums that this is usually a permissions issue and used to be able to be solved by using the Repair Permissions functionality in Disk Utility. Unfortunately, as of El Capitan, this functionality has been removed and is only accessible via Terminal by default. This has left me with a bit of a cyclical problem.   As an alternative, I have tried repairing permissions with Onyx, however this simply freezes midway through the process.  I'm not sure if this is related but I'm also unable to download an OS X El Capitan (10.11.4) update from the Mac App Store - I click update, click Download &amp; Restart from the dropdown, it says "0 bytes of 1.56 GB - Calculating..." then nothing happens and the Update button reappears. I've read that OS X has started trying to repair permissions during updates which is why I suspect this may be related.  I've made a few efforts to use the repair permissions terminal command from Recovery Mode however Terminal has told me that it doesn't recognise the command - perhaps I'm doing something wrong here.   Please let me know if anyone has come across this issue before or has any advice - thanks very much!  <answer255823> This software save me, check it, onyx couldn't solve it but this does.  https://www.firewolf.science/2016/09/kcpm-utility-pro-v6-brand-new-kexts-ezinstaller-macos-sierra-supported-repairing-permissions-configuring-rootless-and-more/#more-636  <answer260654> I had the same problem with my dev machine. After several hours of trying anything other than a reinstall I finally realized that was the only choice. It should have been the FIRST choice. SO EASY!  ul liBack up the critical data (just in case) /li liEnter the recovery mode by pressing cmd+r at start up/li liChoose "Reinstall Mac OS X"/li /ul  That's it. When my computer restarted I was prompted for my Apple ID credentials and then my user loaded like normal, with a working Terminal, even. I didn't need to reinstall / restore anything. The whole process (including the user folder backup) took about 45 min.  Final step, remove all of the sketchy utilities installed trying to fix this without a reinstall.  <comment287336> Can you get into Single User mode? Reboot your Mac while holding `Command + S`.  You'll get a command line only interface as root.  Do a check of your file system by running `fsck -fy`.  Then mount the filesystem as writable so you can make changes `mount -uw /`.  See if you can repair permissions here. <comment287376> Try the fix at http://apple.stackexchange.com/a/232100/85275 to repair perms/ACLs from the El Capitan Recovery partition, which you can do without needing Terminal. <comment287389> Thanks for the fast replies. @tyelford - I managed to get into Single User mode, the file system was ok. I mounted as writable and executed the verify permissions command:     sudo /usr/libexec/repair_packages --verify --standard-pkgs / This took about 1.5 hours finding many ACL errors. I then tried the repair command:     sudo /usr/libexec/repair_packages --repair --standard-pkgs --volume / And left it overnight. It was still going this morning 9 hours later and I needed the computer so I powered off, Terminal is usable again now! <comment287391> However, on running the verify through Terminal, it is still finding thousands of these ACL errors. These show up after a verify command even immediately after a repair. @Tetsujin I followed that method and reset the ACLs in the Recovery partition but it seems to have had no effect, thousands of ACL errors still showing when I verify permissions. I have tried using: { sudo chflags -R nouchg,nouappnd ~ $TMPDIR.. ; sudo chown -R $UID:staff ~ $_ ; sudo chmod -R u+rwX ~ $_ ; chmod -R -N ~ $_ ; } 2 /dev/null however this hasn't seemed to have helped either. <comment318762> Welcome to Ask Different!  We're trying to find the best answers and those answers will provide info as to why they're the best. Explain why you think the link you provided will answer the question.  Links can change and become outdated so we prefer the answers to not just be a link.  See [answer] on how to provide a quality answer. - From Review