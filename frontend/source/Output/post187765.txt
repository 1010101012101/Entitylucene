Clear terminal and prevent restoration <body> There is some sensitive data (credit card numbers and such) that I store on my hard drive, encrypted. I use a script to decrypt the data and display it in the terminal window. When I am finished, I would like the script to clear the terminal, so that the sensitive data can no longer be viewed (even if someone gains access to my computer).  I have read here that kbd⌘/kbd+kbdk/kbd clears the terminal output. To implement this in a script, I used AppleScript as suggested in the accepted answer to this question:  precode/usr/bin/osascript -e 'tell application "System Events" to tell process "Terminal" to keystroke "k" using command down' /code/pre  Finally, my script closes the terminal window with  precodekillall Terminal /code/pre  The problem: if I leave the terminal window with the sensitive output open for about 30 seconds or longer before closing if, then the next time I open terminal, it restores the sensitive data (the text [restored] is displayed below it). If the data was initially displayed for less time, it is not restored.     How can I clear the terminal window from within a script, and prevent Terminal from restoring the cleared data?   I am running OS X 10.10.3.  <answer187768> try codehistory -c/code and codecommand + k/code  sorry   just send the output to code/dev/null/code  If you need to view or store the output, then redirect it to a file for later use codeyour_commands &gt; path_to_filename/filename_where_output_is_stored/code   <answer187773> h2Final Solution:/h2  Remove the Terminal saved state, located in:  precode~/Library/Saved Application State/com.apple.Terminal.savedState/* /code/pre  Then, make that folder read-only so that it can't be written to.  hr  You can use the codeclear/code command to clear your terminal window from within a script.  As noted on this other thread, the following commands in sequence will clear the current buffer, then the scroll back buffer:  precodeclear &amp;&amp; printf '\e[3J' /code/pre     strongPlease note:/strongbr   (The codeclear/code command looks up the appropriate sequence for clearing the screen for the current terminal, but the “erase scroll-back” escape sequence is custom and must be hard-coded. If you put this in a shell script that you don’t know for certain will only ever be run with Terminal, you should check that code$TERM_APPLICATION/code is codeApple_Terminal/code before sending it.)   hr  strongAlternative 1/strong  Turn off Terminal.app's window restore functionality:  precodedefaults write com.apple.Terminal NSQuitAlwaysKeepsWindows -bool false /code/pre  hr  strongAlternative 2/strong  You can also store sensitive information in the codeSecure Notes/code section within the strongKeychain Access/strong utility.  img src="https://i.stack.imgur.com/4bHdA.png" alt="enter image description here"   <answer211690> After reading the other answers and looking into this myself I have observed some file system behavior, which implies a very simple solution. The terminal program stores it's data in   precode~/Library/Saved Application State/com.apple.Terminal.savedState/ /code/pre  as noted above. When I quit the entire Terminal app (cleanly) this entire folder is deleted. The reason the OP is getting restored data is because he is crashing the terminal app with codekillall/code. I observed this by opening finder to the codeSaved Application State/code folder and starting and quitting terminal. The down side of this is that you have to close ALL terminal windows, but in this way all saved state appears to be wiped clean (baring disk forensics of course)   There appears to be one file in this directory for every open terminal window (but not every tab!) plus data.data and windows.plist and codewindow_1.data/code that presumably represents the terminal program itself. The per-terminal files disappear on the closing of the window however the data.data file is the one that grows as commands are issued and thus presumably stores the scrollback buffer. It does not shrink on the closing of the terminal window implying that it continues to hold scrollback data. The codedata.data/code file does however shrink when the next terminal window is opened. It also shrinks drastically when another terminal window is updated (by pressing return for example). Thus it appears that the following routine will (probably) wipe the scrollback data completely:  ol liCleanly close the window with the sensitive data (e.g. red dot, codecommand + w/code)/li liOpen a new terminal window OR cause scroll in another terminal window that is already open./li /ol  or  ol liClose the entire terminal application cleanly (Command + q etc)/li /ol  It's also worth noting that the codedata.data/code file is not a text file. It is a binary file that will require effort to interpret. My guess is that the data is compressed in some way. A simple codecat/code of the file reveals nothing legible. So for these files to be a vulnerability, it seems both of the following must be true:  ol liTerminal has died and codeNSQuitAlwaysKeepsWindows/code is true (see other answer), or the terminal window was closed and no other window has been opened or updated./li liThe attacker is sophisticated enough to know enough to look for and know how to decode the data.data file. /li /ol  strongPLEASE NOTE:/strong the above is based entirely on observation of how files appear/disappear and how their sizes change. It is of course still possible that some partial information is retained if the maintenance of the codedata.data/code file is sloppy. However these observations seem good enough for me. Decide for yourself if it's good enough for you.  These observations come from OS X 10.9.5 and Terminal Version 2.4 (326), please verify the above described behavior if you are using some other version before relying on this advice. Any or all of this could change with new versions of terminal or Mac OSX.  <comment222029> @JulianRosen  in the script send the output to `/dev/null`  That way there is no output to be restored <comment222030> Check my answer. If you need to view the output then there are other ways. <comment222031> To clarify, I would like to view the data. I do not want to write it (as plaintext) to a file, as this would allow anyone who had access to my computer to read it. <comment222040> I was unaware that text simply displayed in Terminal was written to disk.  Doesn't closing the Terminal window clear anything that was displayed? <comment222043> @StephenR: No.  Ever since Lion, the OS restores the window's previous contents... <comment222044> There must be a setting that can be changed, because it doesn't do that on my system (OS 10.10 Yosemite).  I ran some commands that had output to window.  Quite Terminal.  Started Terminal.  New blank terminal window -- no content beyond the prompt. <comment222045> You might also try an alternate Terminal program, such a iTerm. <comment222116> The `clear` command does not truly clear the terminal, it only outputs a bunch of new lines, and the previous output is readable if one scrolls up. I have tried your suggestion Alternative 1, without success (even after running this command, Terminal continues to restore my output). <comment222128> Yes, that is true about the `clear` command.  However, when the window is closed and then restored, the scrollback is short enough that the output is no longer there to scroll up to.  Alternately, have you tried turning scrollback off (set to `0 or 1 line`) in the terminal window Preferences? <comment222130> You could also remove the Terminal saved state: `~/Library/Saved Application State/com.apple.Terminal.savedState/*` (and / or making that folder read-only so that it can't be written to.) <comment222142> Deleting the contents of `com.apple.Terminal.savedState` and marking the directory as read-only prevents Terminal from restoring the output, so this solves my issue. Thank you. <comment222143> Separately, turning of scrollback and using `clear` did not seem to have an effect on the restore behavior. <comment222144> I will edit the answer to show what answered the question, for future searches. <comment255539> I have also noted that the data.data file may shrink when the window is manipulate (but none have been closed), implying a compression of data, however the shrinkage on update after closing a window is greater, and seems to be vaguely proportional to the relative size of the scrollback buffers among the windows. (Tested with a small buffer in one window and a very large buffer in another that I closed)