Listing all opened documents across all open visible apps in AppleScript <body> I've come across doing something like:  strongCode/strong:  precodetell application "Preview"     set p to {}     set p to documents end tell /code/pre  strongOutput/strong:  precode{document "1st.pdf" of application "Preview", document "2nd.pdf" of application "Preview"} /code/pre  But this is highly app-specific—doing this on MS Word, for instance, yielded pathnames and some apps like CodeRunner don't understand the codedocuments/code keyword at all.  Given these open documents:  precodeCurrent open documents from all open visible apps +– Microsoft Word.app |  +– 1.docx |  +– 2.docx +– CodeRunner.app |  +– 1.sh |  +– 2.py |  +– 3.pl +– Preview.app    +– 1.pdf    +– 2.png . . . /code/pre  I want an output of something like this:  precode{"~/Documents/1.docx", "~/Downloads/2.docx", "~/Dropbox/folder/1.sh", "~/Dropbox/others/2.py", "~/Downloads/folder/folder/3.pl", "~/Documents/special/1.pdf", "~/Dropbox/special/2.png", ...} /code/pre  How is it possible to list all open documents across all open apps?  <answer245667> I’ve been trying to do this myself. I have concluded that there is no standard, guaranteed way to get the open documents of a running application.  What you tried is the best method. For apps that use the Cocoa document architecture (the majority), there is automatic AppleScript support for getting all the open codeNSDocument/code objects and querying certain properties of those objects. The mapping between the AppleScript properties and the Objective-C properties is shown below.  AppleScript property = Objective-C getter:  ul licodepath/code = codefileName/code/li licodemodified/code = codeisDocumentEdited/code/li licodename/code = codelastComponentOfFileName/code/li /ul  What you want is the codepath/code property. Like codetell application "Preview" to set documentsList to path of documents/code.  Unfortunately, this automatic AppleScript support is only available for apps that use the Cocoa document architecture strongand/strong have AppleScript enabled (via the codeNSAppleScriptEnabled/code Info.plist key). Therefore, this method will not work on some apps. For example, CodeRunner does not have AppleScript enabled. And TextMate does not use the Cocoa document architecture. 