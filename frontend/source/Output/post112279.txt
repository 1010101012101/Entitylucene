What could be preventing my backup script from running? <body> I'm having trouble getting a simple backup script to run. The following script runs most of the time, but occasionally it fails entirely (without printing out any log information). Is there something in the script that could intermittently prevent it from running?  Even when it does run, the test log messages are sometimes delayed in appearing (as if the log file is not touched when it is written to, or the write to the log file is delayed), making diagnosis difficult.   precode#!/bin/bash  printf "`date`: Start of Runkit backup Power Manager script:\n" &gt;&gt; ~/Library/Logs/Mine/tests.log  if [ $(mount | grep -c '/Volumes/Run Kit') != 1 ] then     printf "\tDon't copy: /Volumes/Run Kit not mounted\n" &gt;&gt; ~/Library/Logs/Mine/tests.log else     if [ $(pmset -g ac | grep -c 'Wattage') != 1 ]     then         printf "\tDon't copy: Not plugged in\n" &gt;&gt; ~/Library/Logs/Mine/tests.log     else         caffeinate -s -t 1200 &amp;         printf "\tDo copy: /Volumes/Run Kit mounted\n" &gt;&gt; ~/Library/Logs/Mine/tests.log         /Users/Rax/Library/Application\ Support/SuperDuper\!/Scheduled\ Copies/SDUtil -i || open file:///Users/Rax/Library/Application\%20Support/SuperDuper\%21/Scheduled\%20Copies/Smart\%20Update\%20Run\%20Kit\%20from\%20Main.sdsp/Copy\%20Job.app     fi fi  printf "`date`: End of Runkit backup Power Manager script:\n" &gt;&gt; ~/Library/Logs/Mine/tests.log  exit 0 /code/pre  <answer112353> I would first convert the codeprintf/code statements to codelogger -p user.info/code statements since they are easily observed in the console app (and syslog) whenever the script runs.  You could also make a second script that just logs test messages or creates empty files code/usr/bin/touch /tmp/test.$$.log/code to determine if your script above is the culprit or the Power Manager tool you are using is not reliably launching the script.  Also, you could try using an app like Lingon to have codelaunchd/code start your script. The system uses that facility to run itself, so it' highly reliable and logs failures well if you ever need to troubleshoot a problem down the road.  <comment131818> What framework are you using to launch the script? <comment131819> I'm using Power Manager to run it. But I've removed all triggers, and am running it manually as a Power Manager task to test, 9 out of 10 times it runs, but sometimes it has no effect. Does the script have a bug, or is the issue with [Power Manager](http://www.dssw.co.uk/powermanager/)? <comment131890> I don't see `-p user.info` going to syslog. Where do messages with that priority go? <comment132065> As you are using Power Manager, you can reduce the branches in your script by adding a condition to your event. Consider adding a mains power condition to your script; see http://imgur.com/9B2bw9g <comment132098> @GrahamMiln: Yes. In this case I wanted the logging, so I took the approach above. <comment132099> @raxacoricofallapatorius you can enable debug logging on Power Manager to greatly increase the detail of the logs created; you can then see every trigger, condition, and action being evaluated and performed: http://www.dssw.co.uk/powermanager/guide/v4/administrator/admin.managing-power-manager.html#admin.l.switching-on-debug-logging <comment132105> @GrahamMiln: Thanks. Power Manager's documentation is excellent. In fact it's the only place I've found a satisfactory accounting of power management functionality on OS X.