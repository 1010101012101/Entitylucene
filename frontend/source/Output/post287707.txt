Get list of all fonts containing a specific character <body> On macOS Sierra, I would like to get a usable list of all fonts that cover (contain a glyph for) a particular Unicode character. Is there a way to do that, either via a tool, or the commandline, or writing a program?  Right now, this is what I can do:  ol liUnder System Preferences → Keyboard → Keyboard, there is an option to "Show keyboard and emoji viewers in menu bar"  img src="https://i.stack.imgur.com/eD7Bc.png" alt="show keyboard" which I have turned on. This enables a menu in the top-right corner of the screen, next to the time and date./li liIn that menu, I choose "Show Emoji and Symbols" (which I think was previously called "Character Viewer"):/li /ol  img src="https://i.stack.imgur.com/zyEP9.png" alt="Show Emoji and symbols"  ol start="3" liHere I can search for the character and under "Font Variation" I can click on each rendering and see the corresponding font:/li /ol  img src="https://i.stack.imgur.com/kMXgq.png" alt="Font variation"  This is usable when there are few enough fonts that contain the character, but is unwieldy (requires a lot of clicking and copying) when the list of fonts is large. What I'd like is to get a list of all such fonts in plain-text copyable form.  How can I do that? I'm willing and happy to write code if necessary.  <answer291200> It's still not clear to me how this is done by macOS itself, but in the meantime here's what I ended up doing.  The solutions I found all were of the following form:  ol liGet a list of all fonts available./li liLoop over the list to find fonts that contain the selected character./li /ol  h1Listing all fonts/h1  As at this question, there are two approaches (plus a third one I found here):  ol licodesystem_profiler SPFontsDataType/code to which you can add code-xml/code to get output in XML,/li licodefc-list/code which can take a pattern (code:/code is the empty pattern that matches all fonts) and a format specifier./li liInstally codepython-fontconfig/code, then run codeimport fontconfig; fontconfig.query()/code to get a list of font paths./li /ol  Comparing the two approaches (I wrote this before I had noticed the third one) is interesting:  ul liSpeed: On my computer and for my set of fonts, codefc-list/code takes about 24 seconds the first time and 0.04 seconds each time after that, while codesystem_profiler/code consistently takes about 3 seconds each time./li liComprehensiveness: On my current system, codesystem_profiler/code lists 702 fonts while codefc-list/code lists 770: all those 702 plus 68 more. On the one hand, codesystem_profiler/code seems to be the "official" way, and matches the fonts visible in Font Book, the ones that show up in "Font Variation" in the character/symbol viewer (as in the question), the menu in TextEdit etc. On the other hand, at least some of the fonts that it misses are genuinely usable fonts. This includes not just the 5 fonts code/Library/Fonts/{Athelas.ttc,Charter.ttc,Marion.ttc,Seravek.ttc,SuperClarendon.ttc}/code about which you can find some confusing pages online (e.g. this and this), but also code/Library/Fonts/{DIN Alternate Bold.ttf,DIN Condensed Bold.ttf,Iowan Old Style.ttc}/code and 57 of the 177 Noto Sans fonts I have installed on my system. For example, I have Noto Sans Brahmi installed but this font doesn't show up in Font Book or in "Font Variation" when I search for a Brahmi letter (say ), but it does get used in TextEdit (and displayed in my browser). Whatever the reason for this weirdness, I'm happy that I can get the full list with codefc-list/code./li liEase of use: with either method a little bit of parsing the output is required. With codefc-list/code I can specify the format (e.g. codefc-list --format="%{family}\n%{file}\n%{lang}\n\n"/code but I couldn't find a reference for the names of the fields!); with codesystem_profiler/code I can either just grep for codeLocation:/code or output to XML and parse the XML (examples with xml.etree.ElementTree, with plistlib)./li /ul  h1Does this font cover this character?/h1  However we get the list of fonts, next we have to check whether a character is covered in a specific font (given by name or path). Again, the ways I found:  ul liUse one of the FreeType bindings. For Python, there is freetype-py but I couldn't figure out in a few minutes how to use it./li liDump the font's cmap table with ttx/fonttools, then loop over the table. This is certainly doable and I've used such dumping many times (one can just codettx foo.ttf/code to get the codefoo.ttx/code xml file which is even human-readable), but for this use-case (searching over all fonts), it's not the best as it takes seconds per font./li liLook up the cmap table from a library written for that: codeuse Font::TTF::Font/code in Perl, codefrom fontTools.ttLib import TTFont/code in Python -- this would be something like:  pre class="lang-py prettyprint-override"codedef has_char(font_path, c):     """Does font at `font_path` contain the character `c`?"""     from fontTools.ttLib import TTFont     from fontTools.unicode import Unicode     try:         font = TTFont(font_path)         for table in font['cmap'].tables:             for char_code, glyph_name in table.cmap.items():                 if char_code == ord(c):                     font.close()                     return True     except Exception as e:         print('Error while looking at font %s: %s' % (font_path, e))         pass     return False /code/pre  Unfortunately it fails on far too many fonts to be useful./li liIf you use the python-fontconfig solution, there's a codehas_char/code, used like: codefont = fontconfig.FcFont(path); return font.has_char(c)/code/li /ul  h1Summary/h1  I ended up using the solution from here, which I've lightly rewritten to keep it minimal:  precode#!/usr/bin/env python  def find_fonts(c):     """Finds fonts containing  the (Unicode) character c."""     import fontconfig     fonts = fontconfig.query()     for path in sorted(fonts):         font = fontconfig.FcFont(path)         if font.has_char(c):             yield path  if __name__ == '__main__':     import sys     search = sys.argv[1]     char = search.decode('utf-8') if isinstance(search, bytes) else search     for path in find_fonts(char):         print(path) /code/pre  Example usage:  pre class="lang-none prettyprint-override"code% python3 find_fonts.py 'ಠ' /Library/Fonts/Arial Unicode.ttf /Library/Fonts/Kannada MN.ttc /Library/Fonts/Kannada MN.ttc /Library/Fonts/Kannada Sangam MN.ttc /Library/Fonts/Kannada Sangam MN.ttc /System/Library/Fonts/LastResort.ttf /Users/shreevatsa/Library/Fonts/Kedage-b.TTF /Users/shreevatsa/Library/Fonts/Kedage-i.TTF /Users/shreevatsa/Library/Fonts/Kedage-n.TTF /Users/shreevatsa/Library/Fonts/Kedage-t.TTF /Users/shreevatsa/Library/Fonts/NotoSansKannada-Bold.ttf /Users/shreevatsa/Library/Fonts/NotoSansKannada-Regular.ttf /Users/shreevatsa/Library/Fonts/NotoSansKannadaUI-Bold.ttf /Users/shreevatsa/Library/Fonts/NotoSansKannadaUI-Regular.ttf /Users/shreevatsa/Library/Fonts/NotoSerifKannada-Bold.ttf /Users/shreevatsa/Library/Fonts/NotoSerifKannada-Regular.ttf /Users/shreevatsa/Library/Fonts/akshar.ttf /code/pre  (Works with both codepython3/code and codepython2/code, whichever codepython/code you have. Takes about 29 seconds on my computer, for the set of fonts I have installed.) 