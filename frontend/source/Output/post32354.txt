How do you run a script after a network interface comes up? <body> Is there a way to run a script every time a network interface finishes coming up? Or, is there an equivilent answer to this Debian question on OSX?  <answer32707> I haven't tried this solution my self - yet, but found this thread: https://superuser.com/questions/201478/run-script-in-os-x-10-6-on-network-connection-like-etc-network-if-up-d/261004#261004     You should consider using crankd, which precisely allows you to run scripts in response to many system events such as network changes, filesystem activity, application launching, etc.      As I couldn't find any sensible documentation, I also wrote a small blog post on getting started using crankd.   <answer97751> A launchd agent watching code/etc/resolv.conf/code, and two network related .plist files under code/Library/Preferences/SystemConfiguration//code seems to work for me (in Mac OS X 10.8.4):  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" \  "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;   &lt;key&gt;Label&lt;/key&gt;   &lt;string&gt;ifup.ddns&lt;/string&gt;    &lt;key&gt;LowPriorityIO&lt;/key&gt;   &lt;true/&gt;    &lt;key&gt;ProgramArguments&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;/Users/Shared/bin/ddns-update.sh&lt;/string&gt;   &lt;/array&gt;    &lt;key&gt;WatchPaths&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;/etc/resolv.conf&lt;/string&gt;     &lt;string&gt;/Library/Preferences/SystemConfiguration/NetworkInterfaces.plist&lt;/string&gt;     &lt;string&gt;/Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist&lt;/string&gt;   &lt;/array&gt;    &lt;key&gt;RunAtLoad&lt;/key&gt;   &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  I had previously only used /etc/resolv.conf, but there were cases where that wasn't enough.  <answer232168> The following works on Mac OS X 10.11.3 (El Capitan)  create a file: networkchange.plist  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" \  "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;   &lt;key&gt;Label&lt;/key&gt;   &lt;string&gt;networkchange&lt;/string&gt;   &lt;key&gt;LowPriorityIO&lt;/key&gt;   &lt;true/&gt;   &lt;key&gt;ProgramArguments&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;/Users/Shared/bin/networkchange.sh&lt;/string&gt;   &lt;/array&gt;   &lt;key&gt;WatchPaths&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;/etc/resolv.conf&lt;/string&gt;     &lt;string&gt;/var/run/resolv.conf&lt;/string&gt;     &lt;string&gt;/private/var/run/resolv.conf&lt;/string&gt;   &lt;/array&gt;   &lt;key&gt;RunAtLoad&lt;/key&gt;   &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  And register it with:  precodelaunchctl load networkchange.plist launchctl start networkchange /code/pre  note that the script is run by the user registering the plist.  <answer293968> I've ended up with with this script:  precode#!/bin/bash  COUNTER=0 while [ $COUNTER -lt 10 ]; do     let COUNTER=COUNTER+1      # assign to test at each iteration otherwise the output won't be changed     test=$(ifconfig -a inet 2&gt;/dev/null | sed -n -e '/127.0.0.1/d' -e '/0.0.0.0/d' -e '/inet/p' | wc -l)      if [ "${test}" -gt 0 ]; then         # do the job here          # exit the loop         let COUNTER=COUNTER+10         break     fi      # give a little time for a network to get up     sleep 2 done /code/pre  It checks a network 10 times and the network has 2*10 seconds to get up.  <comment37465> I checked stackoverflow and the googles, but didn't happen across superuser. Regardless, this is it! Thanks. <comment248458> "Getting started using crankd" has moved to http://nokyotsu.com/qscripts/2011/03/run-script-in-os-x-on-network.html