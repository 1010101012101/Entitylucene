Dynamically setting HOME environment variable in a launchd script? <body> Continue from this topic, I ended up with:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt;   &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;com.saltstack.minion&lt;/string&gt;     &lt;key&gt;EnvironmentVariables&lt;/key&gt;     &lt;dict&gt;       &lt;key&gt;HOME&lt;/key&gt;       &lt;string&gt;/Users/quanta&lt;/string&gt;     &lt;/dict&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;       &lt;string&gt;/usr/local/bin/salt-minion&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt;   &lt;/dict&gt; &lt;/plist&gt; /code/pre  but I am wonder that: is there any way to set HOME variable dynamically? (instead of fixed code - code/Users/quanta/code)  I have tried to add an codeEnableGlobbing/code key to the plist:  precode&lt;key&gt;EnableGlobbing&lt;/key&gt; &lt;true/&gt; /code/pre  then changed the value of HOME variable to the tilde:  precode&lt;key&gt;EnvironmentVariables&lt;/key&gt; &lt;dict&gt;   &lt;key&gt;HOME&lt;/key&gt;   &lt;string&gt;~&lt;/string&gt; &lt;/dict&gt; /code/pre  and restart the codesalt-minion/code. Here is what I get:  precodeMacBook-Pro.local:     - /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/pathname.rb:853:in `expand_path': non-absolute home (ArgumentError)     -   from /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/pathname.rb:853:in `expand_path'     -   from /usr/local/Library/Homebrew/global.rb:25:in `cache'     -   from /usr/local/Library/Homebrew/global.rb:44     -   from /usr/local/Library/brew.rb:17:in `require'     -   from /usr/local/Library/brew.rb:17 /code/pre  It seems that expansion is only enabled for strings in the codeProgram/code or codeProgramArguments/code keys.  <answer113274> You are right: launchd performs tilde-expansion only for codeProgramArguments/code. But you are free to let a shell do the job:  precode&lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt;     &lt;string&gt;/bin/sh&lt;/string&gt;     &lt;string&gt;-c&lt;/string&gt;     &lt;string&gt;export HOME=~; /usr/local/bin/salt-minion&lt;/string&gt; &lt;/array&gt; /code/pre  Note that the code~/code in this example is not interpreted by launchd (using codeEnableGlobbing/code) but by the shell itself. 