pip disappeared for some reason <body> codepip/code was fine but today when I tried to use it, I got this message:  precode-bash: pip: command not found /code/pre  That's weird. codebrew/code shows that the codepython/code package from codebrew/code is still installed but now typing codepython/code in the terminal will run the one by default on the system instead:  precode~: brew install python Warning: python 2.7.13_1 is already installed  ~: python Python 2.7.10 (default, Feb  7 2017, 00:08:15)  /code/pre  Trying to import the packages I had didn't work as well:  precode~: python &gt;&gt;&gt; import cv2 Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; ImportError: No module named cv2 &gt;&gt;&gt; import PIL Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; ImportError: No module named PIL /code/pre  If I go into code/usr/local/lib/python2.7/site-packages//code, everything seems fine. Strangely it also work if I type  precode~: pip2 -V pip 9.0.1 from /usr/local/lib/python2.7/site-packages (python 2.7) ~: python2 Python 2.7.13 (default, Jul 18 2017, 09:17:00)  &gt;&gt;&gt; import cv2 &gt;&gt;&gt; /code/pre  What I can do to get codepip/code (and my packages) back?  <answer293544> I solved it by manually adding the symlinks back:  precodecd /usr/local/bin ln -s python2 python ln -s pip2 pip /code/pre  However I still do not know why they disappeared in the first place.  <answer293758> I am pretty sure that the reason these symlinks changed was due to the homebrew updates announced in version 1.3.0:     "The most significant change since 1.2.0 is that brew install python   no longer installs a python binary without manual PATH additions and   instead installs a python2 binary. This avoids overriding the system   python binary by default when installing Python as a dependency. It   also paves the way to eventually have python be Python 3.x."   <answer293775> Having read the discussion about why this Homebrew change took place and some of the linked issues, it seems to me that linking to "pip" and "python" as you did in your answer might confuse things in the future.  Instead I followed the suggestions in these two GH PRs (and it is confirmed as the correct solution here).  Edit ~/.bashrc to contain:  precodeexport PATH="/usr/local/opt/python/libexec/bin:$PATH" /code/pre  I am using virtualenvwrapper and I also needed to edit ~/.bash_profile to contain a similar line:  precodeexport VIRTUALENVWRAPPER_PYTHON=/usr/local/opt/python/libexec/bin/python /code/pre  <comment370072> Python 2.7.10 is the system's Python (`~: python`), python 2.7.13 is the Python installed with brew! <comment370073> @klanomath Yes I know. I don't know what happened but I used to be able to start brew's python by just typing `python` in the terminal. <comment370081> What do you get if you type 'which pip'. <comment370085> @john A return code `1`. <comment370693> Oh so that's why. Thanks for letting me know. <comment370701> Digging into it a little deeper turns up this discussion https://github.com/Homebrew/homebrew-core/pull/14408 <comment370726> I had to add it in `~/.bash_profile` because bash doesn't use `~/.bashrc` for whatever the reason is.