Why is SIP keeping me from using `dtruss` on an executable outside its protected folders? <body> I'm trying to run the following command on OS X El Capitan (10.11.4):  precodesudo dtruss /usr/local/bin/mix phoenix.server /code/pre  It fails, saying:     dtrace: failed to execute /usr/local/bin/mix: dtrace cannot control executables signed with restricted entitlements   codemix/code is an executable I installed with Homebrew. code/usr/local/bin/mix/code is actually a symlink, but it points to a file nested under code/usr/local/Cellar/code.  The official statement on SIP says that code/usr/local/code is writable for installers (unlike code/usr//code generally). It doesn't say whether SIP allows tracing programs there, but given that I installed this myself, it seems reasonable to be able to trace it.  Is there something I can do to allow tracing this program? Ideas I have:  ul liDisable SIP entirely (seems heavy-handed)  ul liUpdate: I read that one can disable parts of SIP selectively, but as a first step, I completely disabled it. codecsrutil status/code now reports codeSystem Integrity Protection status: disabled./code. But my original command still fails with the same error. :(/li /ul/li liMake Homebrew install everything to a folder under code~/code (seems messy)  ul liUpdate: pretty sure this would be a bad idea/li /ul/li liIgnore Homebrew and compile codemix/code from source into code~/code, then dtruss the new executable  ul liUpdate: same failure. strongThis one really makes no sense to me/strong. SIP is turned off, the executable isn't "signed" since I compiled it myself, and it's not in a restricted location. :P/li /ul/li liInstall Linux in a VM. (seriously? do I have to do this?)/li /ul  <comment289578> What happens if you either copy the mix binary to a place below `~` or create a hard link? <comment289581> @patrix I copied it to `~`, and while `mix` can run from there, trying to `dtruss` it gives the same error. <comment289605> Note - my particular use case was to watch what files a process accessed. `sudo fs_usage  some_file` and later grepping for the process of interest worked for that. But I still don't understand why my original command doesn't work. I'm root and I explicitly asked for the sharp scissors.