How do I associate a launchd 2 plist with its domain and service targets? <body> What exactly are these "domain" and "service targets" and how do I associate them with plists for use by launchd?  OS X 10.10 introduces a new codelaunchctl/code API for managing LaunchDaemons and launching plists. Log messages and man pages suggest that keys like codeKeepAlive/code and codeRunAtLoad/code should no longer be used and that subcommands codeenable/code; codebootstrap/code; and codekickstart/code should be used in preference to codeload -w/code and codeunload -w/code  However it is not clear from the man pages how to associate a plist with the "domain" and "service target" it talks about and without which these commands cannot be used with existing plists that seemingly were quite sufficient for OS X 10.9  For example [updated]: A basic plist we are trying to "launch"; seemingly bootstrapped into "system" domain but subsequently not recognised in "system"  precode# pwd /Library/LaunchDaemons # cat com.iainhouston.django.plist &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd &gt; &lt;plist version="1.0"&gt; &lt;dict&gt;      &lt;key&gt;Label&lt;/key&gt;      &lt;string&gt;com.iainhouston.django&lt;/string&gt;      &lt;key&gt;ProgramArguments&lt;/key&gt;      &lt;array&gt;           &lt;string&gt;/usr/local/virtualenvs/django.iainhouston.com/bin/gunicorn&lt;/string&gt;           &lt;string&gt;--bind=127.0.0.1:49202&lt;/string&gt;           &lt;string&gt;--workers=2&lt;/string&gt;           &lt;string&gt;superlists.wsgi:application&lt;/string&gt;      &lt;/array&gt;      &lt;key&gt;Disabled&lt;/key&gt;&lt;false/&gt; &lt;/dict&gt; &lt;/plist&gt;  # launchctl bootstrap system com.iainhouston.django.plist /Library/LaunchDaemons/com.iainhouston.django.plist: Service is disabled  # launchctl enable system/com.iainhouston.django.plist  # launchctl kickstart system/com.iainhouston.django.plist Could not find service "com.iainhouston.django.plist" in domain for system   /code/pre  h2Motivation/h2  The system log records that codelaunchctl -w load .../code complains when we use codeKeepAlive/code with codeRunAtLoad/code that emThis service is defined to be constantly running and is inherently inefficient./em so we are motivated to use the new interface.br Not only that, we have significant problems with excessive processor usage that we want to control by providing the appropriate on-demand keywords so, again, we are motivated to understand how to interact with the new launchd .... not easy with the docs as they stand!  <answer159537> If you can, file a bug with Apple regarding incomplete or unclear documentation.  codelaunchd/code appears to have been rewritten for OS X 10.10 and is likely still in flux for a few minor versions yet.  Domains and service targets appear to be an abstraction of the various folders available for launchd job tickets. They also allow a means for launchctl commands to target specific sessions; a feature that should allow a launchctl command to affect other user sessions.  However, as of OS X 10.10.1, the codelaunchd.plist/code man page makes no mention of deprecated codeKeepAlive/code or codeRunAtLoad/code keys.  Apple suggest avoiding codeKeepAlive/code and codeRunAtLoad/code because the intention is to avoid ever launching a process without a guarantee of work to be done. Both keys remain and are required for many tasks.   The best reference document remains Technical Note TN2083, Daemons and Agents. This document provides a great insight into launchd and Apple's intentions towards how background processes should be implemented.  <answer159595> You are close, but you should not have the .plist part in the enable and kickstart commands. Here is some code we use to associate it to a domain and service target for a user. $UID is basically your userid.  precodelaunchctl bootstrap gui/$UID /Library/LaunchAgents/com.yourcompany.yourapp.plist launchctl enable gui/$UID/com.yourcompany.yourapp launchctl kickstart -k gui/$UID/com.yourcompany.yourapp /code/pre  <comment187472> Yes, I will file a bug report. Of course I turned to TN2083 before I posted this question but it's so out of date: it was last updated in November 2007! The developer web man pages are at 10.9 and point you to man pages on your Yosemite system. There you will see the discussion about KeepAlive and RunAtLoad keys. It's not that they are deprecated but, in the case of `RunAtLoad`: "This key should be avoided, as speculative job launches have an adverse effect on system-boot and user-login scenarios." However, there are no example job types or suggestions for use. Very unsatisfactory. <comment187477> Bug 1915644 created. <comment187488> Thankfully `RunAtLoad` and `KeepAlive` remain but are simply advised against. A few tasks require these behaviours but wherever possible Apple clearly want engineers to reconsider the default approach. A nudge rather than an absolute. Thank you for filing and noting the bug. <comment187490> I don't feel I'm just exercising my OCD! OK, the man page  nudges but the log now complains  if we use `KeepAlive` with `RunAtLoad` that "This service is defined to be constantly running and is inherently inefficient." so we are motivated to use the new interface. Not only that, we have problems with excessive processor usage that we want to control by providing the appropriate on-demand keywords so, again, we are motivated to understand how to interact with the new launchd .... not easy with the docs as they stand. <comment187975> One step further but .. what do you do to "unload" the kickstarted daemon? `unbootstrap` not yet implemented; `stop` and `disable` seem to have no effect and `kill` recognises neither `SIGTERM` nor `SIGKILL` .... <comment188270> You would just do a stop (which should end the process) and remove the plist file, right? <comment188297> Should - but doesn't (See my previous comment). Check it out and see what you get. Clearly new API not completely implemented yet ;and to be avoided.