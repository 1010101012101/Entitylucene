How to open a new c++ file with a predefined template in Sublime Text? <body> I am keen to know if there is a way to open not an empty new file but a new file with some predefined template. I participate in online coding contests and for every new file (which I save as a '.cpp'), I have to Cmd+C and Cmd+V all the preprocessor directives i.e. code#include &lt;..&gt;/code's and code#define/code's from one of my earlier '.cpp' file. Is there a way by which I can have all these things written to some file and every new file that I save as a c++ file this data gets loaded onto it thus saving my copy-pasting/retyping. Eclipse IDE has this feature, I wanted to know if its possible somehow in Sublime Text too. Thanx!  <answer162733> You should use a snippet. For instance, you can define a new snippet and trigger it with code!initcpp/code. Then you open a new file, type code!initcpp/code, hit kbd⇥/kbd and your are ready to go.  To define a new one go to Tools → New Snippet…   From Sublime Text: Snippets.  Snippets can be stored under any package’s folder, but to keep it simple while you’re learning, you can save them to your codePackages/User/code folder.  h1Snippets File Format/h1  Snippets typically live in a Sublime Text package. They are simplified XML files with the extension code.sublime-snippet/code.  The structure of a typical snippet is as follows (including the default hints Sublime Text inserts for your convenience):  precode&lt;snippet&gt;     &lt;content&gt;&lt;![CDATA[Type your snippet here]]&gt;&lt;/content&gt;     &lt;!-- Optional: Tab trigger to activate the snippet --&gt;     &lt;tabTrigger&gt;xyzzy&lt;/tabTrigger&gt;     &lt;!-- Optional: Scope the tab trigger will be active in --&gt;     &lt;scope&gt;source.python&lt;/scope&gt;     &lt;!-- Optional: Description to show in the menu --&gt;     &lt;description&gt;My Fancy Snippet&lt;/description&gt; &lt;/snippet&gt; /code/pre  The snippet element contains all the information Sublime Text needs in order to know what to insert, whether to insert and when. Let’s look at each of these parts in turn.  strongcontent/strong  The actual snippet. Snippets can range from simple to fairly complex templates. We’ll look at examples of both later.  Keep the following in mind when writing your own snippets:  ul liIf you want to get a literal code$/code, you have to escape it like this: code\$/code./li liWhen writing a snippet that contains indentation, always use tabs. When the snippet is inserted, the tabs will be transformed into spaces if the option codetranslateTabsToSpaces/code is codetrue/code./li liThe codecontent/code must be included in a code&lt;![CDATA[…]]&gt;/code section. Snippets won’t work if you don’t do this!/li liThe codecontent/code of your snippet must not contain code]]&gt;/code because this string of characters will prematurely close the code&lt;![CDATA[…]]&gt;/code section, resulting in an XML error. To work around this pitfall, you can insert an undefined variable into the string like this: code]]$NOT_DEFINED&gt;/code. This modified string passes through the XML parser without closing the content element’s code&lt;![CDATA[…]]&gt;/code section, but Sublime Text will replace code$NOT_DEFINED/code with an empty string before inserting the snippet into your file. In other words, code]]$NOT_DEFINED&gt;/code in your snippet file content will be written as code]]&gt;/code when you trigger the snippet./li /ul  strongtabTrigger/strong  Defines the sequence of keys that must be pressed to insert this snippet. After typing this sequence, the snippet will kick in as soon as you hit the kbd⇥/kbd key.  A tab trigger is an implicit key binding.  strongscope/strong  Scope selector determining the context where the snippet will be active. See Scopes for more information.  strongdescription/strong  Used when showing the snippet in the Snippets menu. If not present, Sublime Text defaults to the file name of the snippet.  With this information, you can start writing your own snippets as described in the next sections.  <comment190475> Wow!! :D It works like a charm, exactly how i wanted. Thanx for such a detailed and clear answer. @jherran