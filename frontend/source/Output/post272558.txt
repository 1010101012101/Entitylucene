How to downgrade subversion to version 1.7 <body> I'm on OS Sierra.  I currently have subversion 1.9 and I want to downgrade to 1.7.  I tried this so far with no luck:  precode$ brew tap homebrew/versions $ brew install subversion17 Error: No available formula with the name "subversion17"  ==&gt; Searching for similarly named formulae... Error: No similarly named formulae found. ==&gt; Searching taps... Error: No formulae found in taps. $ brew search subversion homebrew/versions/subversion18    /code/pre  What other options might I have?  Edit:  More background:  I'm getting this message when I run svn commands in my working directory:   precode&gt; svn: E155036: Please see the 'svn upgrade' command svn: E155036: The &gt; working copy at '/Users/MyProject' is too old (format 29) to work with &gt; client version '1.9.4 (r1740329)' (expects format 31). You need to &gt; upgrade the working copy first. /code/pre   I'm worried if I run the upgrade I won't be able to talk to the server anymore?  And I have no control over what version the server is running and I don't think they would be willing to upgrade it.  <answer272686> Whatever your underlying motivation or use case is: I personally recommended that you strongdo not downgrade. Downgrading to Subversion 1.7 will put your Mac at risk./strong  Also, for technical reasons, Subversion 1.7 strongcannot run on El Capitan or later/strong unless a developer is willing to spend considerable effort.  The codesubversion17/code formula was deleted from Homebrew last month, albeit for unrelated reasons. Before it got deleted, a comment in the formula said:     code# Requires system OpenSSL headers to build. &gt;El Capitan no longer ship them./codebr   code# Note this means that this subversion is linked against an outdated OpenSSL/codebr   code# and really should not be considered secure./code   In other words, not only is Subversion 1.7 unsafe to use on macOS; also, El Capitan or later versions of macOS cannot run 1.7 because the required header files are missing.  For the same reason, well-known Subversion download sources, e. g. WANdisco’s download page, offer Subversion 1.7 releases for OS X Yosemite or earlier but not for current macOS versions.  An alternative approach would be that you strongpost a new question/strong (or edit your existing one) strongto give more information/strong on what your underlying motivation is.  ul liWhat are you actually trying to achieve specifically with the 1.7 release?/li liWhat specific issue(s) do you anticipate, or have already encountered, using the latest release of Subversion instead, or any other version control package?/li /ul  <answer273056> If  ul liyour SVN client tells you it wants you to upgrade your working copy from format 29 to format 31,/li listrongand/strong the server is not under your control,/li listrongand/strong you’re not sure whether the server is going to support the newer format,/li /ul  then these steps might help you get an updated working copy:  ol liMake a backup of the entire folder that is your working copy, including all subdirectories, especially those named code.svn/code. Store your backup in a safe place that is strongoutside your working copy./strong/li liIf you’re comfortable with losing your uncommitted changes, you can simply check out a fresh working copy. Clients are made to work with old servers, so chances are this is the easiest option for you. If you’re fine with that, stop here. There is no step 3./li liIf you’re still determined to upgrade your existing working copy, codecd/code to it and run codesvn upgrade/code. Don’t worry about breaking something; codesvn upgrade/code is not going to affect server state. If it fails, simply restore your backup or check out a fresh working copy./li liIf codesvn upgrade/code succeeds, you might want to make sure whether the server is still going to well with your newly upgraded working copy. So it’s time to do a quick check and see for yourself. To prepare for that, do codesvn update/code first. If codesvn update/code fails, try fixing all the issues before you go on to the next step./li liAs a final test, make a change and check it in so you can see whether the server accepts that, too. For example, create a dummy change you’re comfortable with checking into the repository, e. g. a new file named codedeleteme.txt/code. Or just add a newline to some existing source code. If your working copy already has some uncommitted changes you’re comfortable with committing, you can simply use those./li liCommit the changes you’ve chosen./li liIf codesvn commit/code returns an error, you still have a few options: as a first step, try and fix the issue yourself; or open another question to ask for help (stating exactly what you did, what you expected, and what actually happened); or edit your existing question; alternatively, simply check out a fresh working copy (see step 2). No matter what, do not be tempted to downgrade your Subversion client to version 1.7./li /ol  <comment343209> Thanks for the answer.  See my edit the question for my specific issue.  Let me know if you have any ideas. <comment343217> So you are running a svn 1.9.4 client ?? <comment343223> You're correct.  I updated the question. <comment343226> @Greg What happens if you backup your working copy, then run `svn upgrade` to find out whether it works? Mind that `svn upgrade` is not going to affect server state; this means you can always return to your backed-up working copy in case something goes south. <comment343815> Thanks!  I ended up going with option 1 and it's working fine.