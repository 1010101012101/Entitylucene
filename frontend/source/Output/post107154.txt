com.apple.iconServicesAgent using a lot of RAM in 10.9 <body> I performed a fresh install of OS X 10.9 and now the process codecom.apple.iconServicesAgent/code is using 300MB of RAM, that is quite a lot. This process is using the second most amount of memory of all processes, after the kernel task.  Google tells me that other people have this problem, too, but I found no solution so far.   Is there any way to reduce the RAM consumption of this process?  <answer110586> It seems to be something to do with the service that renders icons in Finder, when mine maxed out cpu no icons were rendering in finder.  I force quit the process and reopened Finder and all seemed well again.  <answer113552> h1Observations/h1  You may observe natural rises and falls in usage.   You should strongnot/strong treat the usage as a problem.   h2Background: about icon services/h2  For an idea of what's done by icon services (the com.apple.IconServices daemon, com.apple.IconServicesAgent processes and related files), run the following command in a Terminal window that's maybe 257 characters wide, or wider:   codesudo fs_usage -w -f filesys com.apple.IconServices | grep write/code  Then in Finder:   ol librowse a folder that has not been browsed since you started the Mac/li librowse away/li librowse back to the same folder./li /ol  You should find that:  ul lithe initial browse causes writes (to a cache)/li lisecond and subsequent browses cause no additional caching, for as long as the contents of the folder are unchanged. /li /ul  To abort the command, kbdControl/kbd-kbdC/kbd  For an unfiltered view of things:   codesudo fs_usage -w -f filesys com.apple.IconServices/code  h3Benefits of icon services in Mavericks/h3  It seems to me that Apple's approach to caching icons is of particular benefit to apps/processes where primary functions include reading strongmetadata/strong from a variety of types of file system. Apps such as Finder, processes such as Dock, and so on.   As part of a broader approach to maximising performance, icon services should allow presentation with strongminimal delay/strong of the strongsubset of metadata that is of greatest interest/strong to the user.   For the emRecent Applications/em stack in Dock: probably names, icons and dates/times as essentials within a subset.   For views in Finder: subsets may be entirely different, depending on what's required by the user.   h3Additional thoughts/h3  In HFS Plus (Mac OS Extended), with reference to retired documentation, we have the performance-oriented hot file B-tree, attributes file and so on. With everything else that has been done to that file system, it is now debatably iover/i-extended.   The performance-related benefits of icon services should be relatively strongfile system-agnostic/strong. This is pleasing. I expect the benefits to be realised by users of ZFS on Mavericks, and so on …  <comment132781> Forcing `com.apple.IconServicesAgent` to quit may be masking, or simply, deferring an underlying problem. A problem not with the agent, but with **data that the agent tries to handle**. <comment169638> what if i kill the thread...... <comment169639> I'm very much with @GrahamPerrin on this. Complaining about iconservicesagent doing too much is literally "shooting the messenger" - the system services provide data to apps that run. If you quit all apps and reboot the OS - see what the ram allocation of com.apple.IconServicesAgent is and then you can watch as it grows when the system and other apps are asked to draw icons on the screen. Once you've gathered the initial RAM allocation you can track things to see if there is memory pressure to cause this cache to start to thin itself. <comment169640> Is there any memory pressure on this system? Parts of the OS are designed to use a large portion of the RAM when it's not otherwise needed to speed things up. Would you post a screen shot of the Activity Monitor's display at the bottom of the Memory tab? Looking at Physical Memory / Used / pressure and the amount of App/File Cache and Wired Memory is needed to diagnose any RAM usage concerns. <comment227523> I think killing the process is fine, if it doesn't hurt anybody and makes the user happier. It probably just doesn't release resources fast enough (or at all) after some intensive operation. For the curious, there's also https://gist.github.com/walesmd/7315613 - I wouldn't recommend following those instructions though, unless the agent always takes up lots of memory.