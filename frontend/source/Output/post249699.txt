configure: error: C compiler cannot create executables (ld: unknown option: -no_weak_imports) <body> I'm trying to get certain tools such as codewget/code for my mac, and in my Internet adventures I stumbled upon this program called Homebrew, which seems like just the thing I need.  So I installed Homebrew using the script from their website, and everything ran OK. And after it finished, I ran codebrew install wget/code, but I got the following output:  precodeWarning: You are using OS X 10.12. We do not provide support for this pre-release version. You may encounter build failures or other breakages. Please create pull-requests instead of filing issues. ==&gt; Installing dependencies for wget: xz, pkg-config, makedepend, openssl ==&gt; Installing wget dependency: xz ==&gt; Using the sandbox ==&gt; Downloading https://fossies.org/linux/misc/xz-5.2.2.tar.gz ######################################################################## 100.0% ==&gt; ./configure --disable-silent-rules --prefix=/usr/local/Cellar/xz/5.2.2 Last 15 lines from /Users/chenjian/Library/Logs/Homebrew/xz/01.configure: checking whether build environment is sane... yes checking for a thread-safe mkdir -p... build-aux/install-sh -c -d checking for gawk... no checking for mawk... no checking for nawk... no checking for awk... awk checking whether make sets $(MAKE)... yes checking whether make supports nested variables... yes checking whether ln -s works... yes checking for style of include used by make... GNU checking for gcc... clang checking whether the C compiler works... no configure: error: in `/private/tmp/xz-20160817-3709-1qc3b72/xz-5.2.2': configure: error: C compiler cannot create executables See `config.log' for more details  READ THIS: https://git.io/brew-troubleshooting If reporting this issue please do so at (not Homebrew/brew):   https://github.com/Homebrew/homebrew-core/issues  Warning: You are using OS X 10.12. We do not provide support for this pre-release version. You may encounter build failures or other breakages. Please create pull-requests instead of filing issues. /code/pre  TL;DR, I got the following error:  precodechecking whether the C compiler works... no configure: error: in `/private/tmp/xz-20160817-3709-1qc3b72/xz-5.2.2': configure: error: C compiler cannot create executables See `config.log' for more details /code/pre  I checked my codeconfig.log/code as suggested, and found this out:  precodeld: unknown option: -no_weak_imports clang: error: linker command failed with exit code 1 (use -v to see invocation) /code/pre  I'm guessing this was the problem, but in any case, here's the full codeconfig.log/code:  precodeThis file contains any messages produced by compilers while running configure, to aid debugging if configure makes a mistake.  It was created by XZ Utils configure 5.2.2, which was generated by GNU Autoconf 2.69.  Invocation command line was    $ ./configure --disable-debug --disable-dependency-tracking --disable-silent-rules --prefix=/usr/local/Cellar/xz/5.2.2  ## --------- ## ## Platform. ## ## --------- ##  hostname = Chens-MacBook-Pro.local uname -m = x86_64 uname -r = 16.0.0 uname -s = Darwin uname -v = Darwin Kernel Version 16.0.0: Fri Aug 12 19:00:53 PDT 2016; root:xnu-3789.1.28~1/RELEASE_X86_64  /usr/bin/uname -p = i386 /bin/uname -X     = unknown  /bin/arch              = unknown /usr/bin/arch -k       = unknown /usr/convex/getsysinfo = unknown /usr/bin/hostinfo      = Mach kernel version:      Darwin Kernel Version 16.0.0: Fri Aug 12 19:00:53 PDT 2016; root:xnu-3789.1.28~1/RELEASE_X86_64 Kernel configured for up to 8 processors. 4 processors are physically available. 8 processors are logically available. Processor type: x86_64h (Intel x86-64h Haswell) Processors active: 0 1 2 3 4 5 6 7 Primary memory available: 16.00 gigabytes Default processor set: 345 tasks, 1496 threads, 8 processors Load average: 2.33, Mach factor: 5.65 /bin/machine           = unknown /usr/bin/oslevel       = unknown /bin/universe          = unknown  PATH: /usr/local/Library/Homebrew/shims/super PATH: /usr/bin PATH: /bin PATH: /usr/sbin PATH: /sbin   ## ----------- ## ## Core tests. ## ## ----------- ##  configure:2959: checking build system type configure:2973: result: x86_64-apple-darwin16.0.0 configure:2993: checking host system type configure:3006: result: x86_64-apple-darwin16.0.0 configure:3066: checking if debugging code should be compiled configure:3082: result: no configure:3122: checking which encoders to build configure:3209: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc configure:3213: checking which decoders to build configure:3305: result: lzma1 lzma2 delta x86 powerpc ia64 arm armthumb sparc configure:3644: checking which match finders to build configure:3695: result: hc3 hc4 bt2 bt3 bt4 configure:3713: checking which integrity checks to build configure:3755: result: crc32 crc64 sha256 configure:3792: checking if assembler optimizations should be used configure:3816: result: no configure:3847: checking if small size is preferred over speed configure:3865: result: no configure:3881: checking if threading support is wanted configure:3907: result: yes, posix configure:3940: checking how much RAM to assume if the real amount is unknown configure:3955: result: 128 MiB configure:4085: checking if library symbol versioning should be used configure:4108: result: no configure:4126: checking for a shell that conforms to POSIX configure:4167: result: /bin/sh configure:4208: checking for a BSD-compatible install configure:4276: result: /usr/bin/install -c configure:4287: checking whether build environment is sane configure:4342: result: yes configure:4493: checking for a thread-safe mkdir -p configure:4532: result: build-aux/install-sh -c -d configure:4539: checking for gawk configure:4569: result: no configure:4539: checking for mawk configure:4569: result: no configure:4539: checking for nawk configure:4569: result: no configure:4539: checking for awk configure:4555: found /usr/bin/awk configure:4566: result: awk configure:4577: checking whether make sets $(MAKE) configure:4599: result: yes configure:4628: checking whether make supports nested variables configure:4645: result: yes configure:4771: checking whether ln -s works configure:4775: result: yes configure:4795: checking for style of include used by make configure:4823: result: GNU configure:4894: checking for gcc configure:4921: result: clang configure:5150: checking for C compiler version configure:5159: clang --version &gt;&amp;5 Apple LLVM version 8.0.0 (clang-800.0.31) Target: x86_64-apple-darwin16.0.0 Thread model: posix InstalledDir: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin configure:5170: $? = 0 configure:5159: clang -v &gt;&amp;5 Apple LLVM version 8.0.0 (clang-800.0.31) Target: x86_64-apple-darwin16.0.0 Thread model: posix InstalledDir: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin configure:5170: $? = 0 configure:5159: clang -V &gt;&amp;5 clang: error: unsupported option '-V -isystem/usr/include/libxml2' configure:5170: $? = 1 configure:5159: clang -qversion &gt;&amp;5 clang: error: unknown argument: '-qversion' configure:5170: $? = 1 configure:5190: checking whether the C compiler works configure:5212: clang    conftest.c  &gt;&amp;5 ld: unknown option: -no_weak_imports clang: error: linker command failed with exit code 1 (use -v to see invocation) configure:5216: $? = 1 configure:5254: result: no configure: failed program was: | /* confdefs.h */ | #define PACKAGE_NAME "XZ Utils" | #define PACKAGE_TARNAME "xz" | #define PACKAGE_VERSION "5.2.2" | #define PACKAGE_STRING "XZ Utils 5.2.2" | #define PACKAGE_BUGREPORT "lasse.collin@tukaani.org" | #define PACKAGE_URL "http://tukaani.org/xz/" | #define NDEBUG 1 | #define HAVE_ENCODER_LZMA1 1 | #define HAVE_ENCODER_LZMA2 1 | #define HAVE_ENCODER_DELTA 1 | #define HAVE_ENCODER_X86 1 | #define HAVE_ENCODER_POWERPC 1 | #define HAVE_ENCODER_IA64 1 | #define HAVE_ENCODER_ARM 1 | #define HAVE_ENCODER_ARMTHUMB 1 | #define HAVE_ENCODER_SPARC 1 | #define HAVE_DECODER_LZMA1 1 | #define HAVE_DECODER_LZMA2 1 | #define HAVE_DECODER_DELTA 1 | #define HAVE_DECODER_X86 1 | #define HAVE_DECODER_POWERPC 1 | #define HAVE_DECODER_IA64 1 | #define HAVE_DECODER_ARM 1 | #define HAVE_DECODER_ARMTHUMB 1 | #define HAVE_DECODER_SPARC 1 | #define HAVE_MF_HC3 1 | #define HAVE_MF_HC4 1 | #define HAVE_MF_BT2 1 | #define HAVE_MF_BT3 1 | #define HAVE_MF_BT4 1 | #define HAVE_CHECK_CRC32 1 | #define HAVE_CHECK_CRC64 1 | #define HAVE_CHECK_SHA256 1 | #define ASSUME_RAM 128 | #define PACKAGE "xz" | #define VERSION "5.2.2" | /* end confdefs.h.  */ |  | int | main () | { |  |   ; |   return 0; | } configure:5259: error: in `/private/tmp/xz-20160817-3709-1qc3b72/xz-5.2.2': configure:5261: error: C compiler cannot create executables See `config.log' for more details  ## ---------------- ## ## Cache variables. ## ## ---------------- ##  ac_cv_build=x86_64-apple-darwin16.0.0 ac_cv_env_CCASFLAGS_set= ac_cv_env_CCASFLAGS_value= ac_cv_env_CCAS_set= ac_cv_env_CCAS_value= ac_cv_env_CC_set=set ac_cv_env_CC_value=clang ac_cv_env_CFLAGS_set= ac_cv_env_CFLAGS_value= ac_cv_env_CPPFLAGS_set= ac_cv_env_CPPFLAGS_value= ac_cv_env_CPP_set= ac_cv_env_CPP_value= ac_cv_env_LDFLAGS_set= ac_cv_env_LDFLAGS_value= ac_cv_env_LIBS_set= ac_cv_env_LIBS_value= ac_cv_env_LT_SYS_LIBRARY_PATH_set= ac_cv_env_LT_SYS_LIBRARY_PATH_value= ac_cv_env_build_alias_set= ac_cv_env_build_alias_value= ac_cv_env_host_alias_set= ac_cv_env_host_alias_value= ac_cv_env_target_alias_set= ac_cv_env_target_alias_value= ac_cv_host=x86_64-apple-darwin16.0.0 ac_cv_path_install='/usr/bin/install -c' ac_cv_prog_AWK=awk ac_cv_prog_ac_ct_CC=clang ac_cv_prog_make_make_set=yes am_cv_make_support_nested_variables=yes gl_cv_posix_shell=/bin/sh  ## ----------------- ## ## Output variables. ## ## ----------------- ##  ACLOCAL='${SHELL} /private/tmp/xz-20160817-3709-1qc3b72/xz-5.2.2/build-aux/missing aclocal-1.15' AMDEPBACKSLASH='' AMDEP_FALSE='' AMDEP_TRUE='#' AMTAR='$${TAR-tar}' AM_BACKSLASH='\' AM_CFLAGS='' AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)' AM_DEFAULT_VERBOSITY='1' AM_V='$(V)' AR='' AS='' AUTOCONF='${SHELL} /private/tmp/xz-20160817-3709-1qc3b72/xz-5.2.2/build-aux/missing autoconf' AUTOHEADER='${SHELL} /private/tmp/xz-20160817-3709-1qc3b72/xz-5.2.2/build-aux/missing autoheader' AUTOMAKE='${SHELL} /private/tmp/xz-20160817-3709-1qc3b72/xz-5.2.2/build-aux/missing automake-1.15' AWK='awk' CC='clang' CCAS='' CCASDEPMODE='' CCASFLAGS='' CCDEPMODE='' CFLAGS='' CFLAG_VISIBILITY='' COND_ASM_X86_64_FALSE='' COND_ASM_X86_64_TRUE='#' COND_ASM_X86_FALSE='' COND_ASM_X86_TRUE='#' COND_CHECK_CRC32_FALSE='#' COND_CHECK_CRC32_TRUE='' COND_CHECK_CRC64_FALSE='#' COND_CHECK_CRC64_TRUE='' COND_CHECK_SHA256_FALSE='#' COND_CHECK_SHA256_TRUE='' COND_DECODER_ARMTHUMB_FALSE='#' COND_DECODER_ARMTHUMB_TRUE='' COND_DECODER_ARM_FALSE='#' COND_DECODER_ARM_TRUE='' COND_DECODER_DELTA_FALSE='#' COND_DECODER_DELTA_TRUE='' COND_DECODER_IA64_FALSE='#' COND_DECODER_IA64_TRUE='' COND_DECODER_LZMA1_FALSE='#' COND_DECODER_LZMA1_TRUE='' COND_DECODER_LZMA2_FALSE='#' COND_DECODER_LZMA2_TRUE='' COND_DECODER_LZ_FALSE='#' COND_DECODER_LZ_TRUE='' COND_DECODER_POWERPC_FALSE='#' COND_DECODER_POWERPC_TRUE='' COND_DECODER_SIMPLE_FALSE='#' COND_DECODER_SIMPLE_TRUE='' COND_DECODER_SPARC_FALSE='#' COND_DECODER_SPARC_TRUE='' COND_DECODER_X86_FALSE='#' COND_DECODER_X86_TRUE='' COND_DOC_FALSE='#' COND_DOC_TRUE='' COND_ENCODER_ARMTHUMB_FALSE='#' COND_ENCODER_ARMTHUMB_TRUE='' COND_ENCODER_ARM_FALSE='#' COND_ENCODER_ARM_TRUE='' COND_ENCODER_DELTA_FALSE='#' COND_ENCODER_DELTA_TRUE='' COND_ENCODER_IA64_FALSE='#' COND_ENCODER_IA64_TRUE='' COND_ENCODER_LZMA1_FALSE='#' COND_ENCODER_LZMA1_TRUE='' COND_ENCODER_LZMA2_FALSE='#' COND_ENCODER_LZMA2_TRUE='' COND_ENCODER_LZ_FALSE='#' COND_ENCODER_LZ_TRUE='' COND_ENCODER_POWERPC_FALSE='#' COND_ENCODER_POWERPC_TRUE='' COND_ENCODER_SIMPLE_FALSE='#' COND_ENCODER_SIMPLE_TRUE='' COND_ENCODER_SPARC_FALSE='#' COND_ENCODER_SPARC_TRUE='' COND_ENCODER_X86_FALSE='#' COND_ENCODER_X86_TRUE='' COND_FILTER_ARMTHUMB_FALSE='#' COND_FILTER_ARMTHUMB_TRUE='' COND_FILTER_ARM_FALSE='#' COND_FILTER_ARM_TRUE='' COND_FILTER_DELTA_FALSE='#' COND_FILTER_DELTA_TRUE='' COND_FILTER_IA64_FALSE='#' COND_FILTER_IA64_TRUE='' COND_FILTER_LZMA1_FALSE='#' COND_FILTER_LZMA1_TRUE='' COND_FILTER_LZMA2_FALSE='#' COND_FILTER_LZMA2_TRUE='' COND_FILTER_LZ_FALSE='#' COND_FILTER_LZ_TRUE='' COND_FILTER_POWERPC_FALSE='#' COND_FILTER_POWERPC_TRUE='' COND_FILTER_SIMPLE_FALSE='#' COND_FILTER_SIMPLE_TRUE='' COND_FILTER_SPARC_FALSE='#' COND_FILTER_SPARC_TRUE='' COND_FILTER_X86_FALSE='#' COND_FILTER_X86_TRUE='' COND_GNULIB_FALSE='' COND_GNULIB_TRUE='' COND_INTERNAL_SHA256_FALSE='' COND_INTERNAL_SHA256_TRUE='' COND_LZMADEC_FALSE='#' COND_LZMADEC_TRUE='' COND_LZMAINFO_FALSE='#' COND_LZMAINFO_TRUE='' COND_LZMALINKS_FALSE='#' COND_LZMALINKS_TRUE='' COND_MAIN_DECODER_FALSE='#' COND_MAIN_DECODER_TRUE='' COND_MAIN_ENCODER_FALSE='#' COND_MAIN_ENCODER_TRUE='' COND_SCRIPTS_FALSE='#' COND_SCRIPTS_TRUE='' COND_SHARED_FALSE='' COND_SHARED_TRUE='' COND_SMALL_FALSE='' COND_SMALL_TRUE='#' COND_SYMVERS_FALSE='' COND_SYMVERS_TRUE='#' COND_THREADS_FALSE='' COND_THREADS_TRUE='' COND_W32_FALSE='' COND_W32_TRUE='#' COND_XZDEC_FALSE='#' COND_XZDEC_TRUE='' COND_XZ_FALSE='#' COND_XZ_TRUE='' CPP='' CPPFLAGS='' CYGPATH_W='echo' DEFS='' DEPDIR='.deps' DLLTOOL='' DSYMUTIL='' DUMPBIN='' ECHO_C='\c' ECHO_N='' ECHO_T='' EGREP='' EXEEXT='' FGREP='' GETOPT_H='' GETTEXT_MACRO_VERSION='' GMSGFMT='' GMSGFMT_015='' GREP='' HAVE_VISIBILITY='' INSTALL_DATA='${INSTALL} -m 644' INSTALL_PROGRAM='${INSTALL}' INSTALL_SCRIPT='${INSTALL}' INSTALL_STRIP_PROGRAM='$(install_sh) -c -s' INTLLIBS='' INTL_MACOSX_LIBS='' LD='' LDFLAGS='' LIBICONV='' LIBINTL='' LIBOBJS='' LIBS='' LIBTOOL='' LIPO='' LN_EXEEXT='$(EXEEXT)' LN_S='ln -s' LTLIBICONV='' LTLIBINTL='' LTLIBOBJS='' LT_SYS_LIBRARY_PATH='' MAKEINFO='${SHELL} /private/tmp/xz-20160817-3709-1qc3b72/xz-5.2.2/build-aux/missing makeinfo' MANIFEST_TOOL='' MKDIR_P='build-aux/install-sh -c -d' MSGFMT='' MSGFMT_015='' MSGMERGE='' NM='' NMEDIT='' OBJDUMP='' OBJEXT='' OTOOL64='' OTOOL='' PACKAGE='xz' PACKAGE_BUGREPORT='lasse.collin@tukaani.org' PACKAGE_NAME='XZ Utils' PACKAGE_STRING='XZ Utils 5.2.2' PACKAGE_TARNAME='xz' PACKAGE_URL='http://tukaani.org/xz/' PACKAGE_VERSION='5.2.2' PATH_SEPARATOR=':' POSIX_SHELL='/bin/sh' POSUB='' PREFERABLY_POSIX_SHELL='/bin/sh' PTHREAD_CC='' PTHREAD_CFLAGS='' PTHREAD_LIBS='' RANLIB='' RC='' SED='' SET_MAKE='' SHELL='/bin/sh' STRIP='' USE_NLS='' VERSION='5.2.2' XGETTEXT='' XGETTEXT_015='' XGETTEXT_EXTRA_OPTIONS='' ac_ct_AR='' ac_ct_CC='clang' ac_ct_DUMPBIN='' am__EXEEXT_FALSE='' am__EXEEXT_TRUE='' am__fastdepCCAS_FALSE='' am__fastdepCCAS_TRUE='' am__fastdepCC_FALSE='' am__fastdepCC_TRUE='' am__include='include' am__isrc='' am__leading_dot='.' am__nodep='' am__quote='' am__tar='$${TAR-tar} chof - "$$tardir"' am__untar='$${TAR-tar} xf -' ax_pthread_config='' bindir='${exec_prefix}/bin' build='x86_64-apple-darwin16.0.0' build_alias='' build_cpu='x86_64' build_os='darwin16.0.0' build_vendor='apple' datadir='${datarootdir}' datarootdir='${prefix}/share' docdir='${datarootdir}/doc/${PACKAGE_TARNAME}' dvidir='${docdir}' exec_prefix='NONE' host='x86_64-apple-darwin16.0.0' host_alias='' host_cpu='x86_64' host_os='darwin16.0.0' host_vendor='apple' htmldir='${docdir}' includedir='${prefix}/include' infodir='${datarootdir}/info' install_sh='${SHELL} /private/tmp/xz-20160817-3709-1qc3b72/xz-5.2.2/build-aux/install-sh' libdir='${exec_prefix}/lib' libexecdir='${exec_prefix}/libexec' localedir='${datarootdir}/locale' localstatedir='${prefix}/var' mandir='${datarootdir}/man' mkdir_p='$(MKDIR_P)' oldincludedir='/usr/include' pdfdir='${docdir}' prefix='/usr/local/Cellar/xz/5.2.2' program_transform_name='s,x,x,' psdir='${docdir}' sbindir='${exec_prefix}/sbin' sharedstatedir='${prefix}/com' sysconfdir='${prefix}/etc' target_alias='' xz=''  ## ----------- ## ## confdefs.h. ## ## ----------- ##  /* confdefs.h */ #define PACKAGE_NAME "XZ Utils" #define PACKAGE_TARNAME "xz" #define PACKAGE_VERSION "5.2.2" #define PACKAGE_STRING "XZ Utils 5.2.2" #define PACKAGE_BUGREPORT "lasse.collin@tukaani.org" #define PACKAGE_URL "http://tukaani.org/xz/" #define NDEBUG 1 #define HAVE_ENCODER_LZMA1 1 #define HAVE_ENCODER_LZMA2 1 #define HAVE_ENCODER_DELTA 1 #define HAVE_ENCODER_X86 1 #define HAVE_ENCODER_POWERPC 1 #define HAVE_ENCODER_IA64 1 #define HAVE_ENCODER_ARM 1 #define HAVE_ENCODER_ARMTHUMB 1 #define HAVE_ENCODER_SPARC 1 #define HAVE_DECODER_LZMA1 1 #define HAVE_DECODER_LZMA2 1 #define HAVE_DECODER_DELTA 1 #define HAVE_DECODER_X86 1 #define HAVE_DECODER_POWERPC 1 #define HAVE_DECODER_IA64 1 #define HAVE_DECODER_ARM 1 #define HAVE_DECODER_ARMTHUMB 1 #define HAVE_DECODER_SPARC 1 #define HAVE_MF_HC3 1 #define HAVE_MF_HC4 1 #define HAVE_MF_BT2 1 #define HAVE_MF_BT3 1 #define HAVE_MF_BT4 1 #define HAVE_CHECK_CRC32 1 #define HAVE_CHECK_CRC64 1 #define HAVE_CHECK_SHA256 1 #define ASSUME_RAM 128 #define PACKAGE "xz" #define VERSION "5.2.2"  configure: exit 77 /code/pre  If I was wrong, what's exactly the problem? Why is it caused? And most important, how do I fix it?  P.S. I'm running macOS Sierra (10.12) and Xcode-beta.  <answer249741> More recent versions of Homebrew pass the code-no_weak_imports/code flag to ld if Homebrew detects Xcode 8.0 or later, which ships with a version of ld which supports this flag (https://github.com/Homebrew/homebrew-core/issues/3727). However, ealier versions of Xcode 8 beta don't have this, causing ld to fail when autoconf tests the compiler.  There are a couple of solutions to this problem:  h31. Update Xcode to the latest beta (Recommended)/h3  Assuming that you can download the latest beta from the App Store, installing it should also install the version of ld that works with Homebrew. This solution should be easier.  h32. Override the Homebrew checks for Xcode 8/h3  The checks Homebrew makes for Xcode 8 are done in  precode/usr/local/Library/Homebrew/extend/os/mac/extend/ENV/shared.rb /code/pre  which contains  precodemodule SharedEnvExtension   def no_weak_imports?     return false unless compiler == :clang      if MacOS::Xcode.version &amp;&amp; MacOS::Xcode.version &lt; "8.0"       return false     end      if MacOS::CLT.version &amp;&amp; MacOS::CLT.version &lt; "8.0"       return false     end      true   end end /code/pre  Adding a codereturn false/code after the function declaration prevents Homebrew from passing the code-no_weak_imports/code flag, fixing the error:  precodemodule SharedEnvExtension   def no_weak_imports?     ## This fixes the issue     ## CHANGE THIS BACK LATER     return false     ##     return false unless compiler == :clang      if MacOS::Xcode.version &amp;&amp; MacOS::Xcode.version &lt; "8.0"       return false     end      if MacOS::CLT.version &amp;&amp; MacOS::CLT.version &lt; "8.0"       return false     end      true   end end /code/pre  If you take this approach, you should:br 1. Make a note somewhere that you've done it, and change it back when you update Xcodebr 2. Be on the lookout for errors when upgrading Homebrew - I'm not sure of the details, but it's possible that a codebrew upgrade/code will either break or overwrite it.  <comment309950> The `.xip` file gave me some problems, but on the fourth re-download it worked! Thanks :)