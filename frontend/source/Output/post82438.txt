allow sudo to another user without password <body> I want to be able to 'su' to a specific user, allowing me to run any command without a password being entered.  For example:  If my login were user1 and the user I want to 'su' to is user2:  I would use the command:  codesu - user2/code  but then it prompts me with   codePassword:/code  <answer82496> I would set up public/private ssh keys for the second account and store the key in the first account.  ul liAssociating ssh public key with user account/li /ul  Then you could run a command like:  precode ssh user@localhost -n /Applications/Skype.app/Contents/MacOS/Skype &amp; /code/pre  You'd still have the issues where Skype gets confused since two instances are running on one user account and files read/written by that program might conflict. It also might work well enough for your needs and you'd not need an iPod touch to run your second Skype instance.  <answer82527> codesudo/code can do just that for you :)  It needs a bit of configuration though, but once done you would only do this:  precodesudo -u user2 -s /code/pre  And you would be logged in as user2 without entering a password.  h2Configuration/h2  To configure sudo, you must edit its configuration file via: codevisudo/code. Note: this command will open the configuration using the codevi/code text editor, if you are unconfortable with that, you need to set another editor (using codeexport EDITOR=&lt;command&gt;/code) before executing the following line. Another command line editor sometimes regarded as easier is codenano/code, so you would do codeexport EDITOR=/usr/bin/nano/code. You usually need super user privilege for codevisudo/code:  precodesudo visudo /code/pre  This file is structured in different section, the aliases, then defaults and finally at the end you have the rules. This is where you need to add the new line. So you navigate at the end of the file and add this:  precodeuser1    ALL=(user2) NOPASSWD: /bin/bash /code/pre  You can replace also code/bin/bash/code by codeALL/code and then you could launch any command as user2 without a password:  codesudo -u user2 &lt;command&gt;/code.  h2Update/h2  I have just seen your comment regarding Skype. You could consider adding Skype directly to the sudo's configuration file. I assume you have Skype installed in your emApplications/em folder:  precodeuser1    ALL=(user2) NOPASSWD: /Applications/Skype.app/Contents/MacOS/Skype /code/pre  Then you would call from the terminal:  precodesudo -u user2 /Applications/Skype.app/Contents/MacOS/Skype /code/pre  <comment95121> Ask the other user for the password. At least the other user knows what's been done under his/her id. <comment95122> This is nothing to do with another physical user. Both ID's are mine. I know the password as I created the account. I just don't want to have to type the password every time. <comment95133> Would it be ok to ssh to at user or do you need to inherit one shell in particular and need su to work? <comment95154> @bmike I want to do this because I want to run two copies of skype as per the instructions here; http://apple.stackexchange.com/questions/903/can-i-run-multiple-instances-of-skype-on-one-computer - This works fine but I would like to automate it further using a script which will automatically become another user and run skype. <comment95177> @zio Great use case. Does `open -na Skype` not work for you? <comment95178> @bmike it causes a conflict and errors with "You have another copy of skype running". Using a different user account for the second copy allows it to run. (See link above for further info) <comment95187> You could also try [copying the application bundle and changing CFBundleIdentifier](http://superuser.com/questions/349154/run-two-notational-velocities-at-once/349157#349157). <comment95194> This is a good secure solution for the general case of password-free login to any account on any host, but I'd say it's probably overkill when both accounts are on the same host and belong to the same user. <comment95207> Thank you. Exactly what I needed. <comment95224> @scottishwildcat It's far more secure than the alternative of scripting the password and feeding it in clear text or using a variable and storing the password in the keychain and using a tool like `expect` to script the interaction. I just use `sudo su - blah` and type my password. I think the other answer covers sudo well enough to keep this as a comment. <comment95253> Oh, I certainly wasn't suggesting your answer should be removedâ€¦ I didn't even down-vote, it's a perfectly good answer. <comment95258> We appear to be in total agreement - thanks for the addition - feel free to edit it into the answer if you can improve on it. <comment155360> This is far less complicated than the ssh keys idea, so use this unless you need the ssh keys for remote access as well. <comment256960> One thing to note from a security-perspective is that specifying a specific command implies that it should be a read-only command for user1; Otherwise, they can overwrite the command with something else and run that as user2. And if you don't care about that, then you might as well specify that user1 can run *any* command as user2 and therefore have a simpler sudo config. <comment256981> @StanKurdziel good point! Although it is something to be aware of, it's really seldom to have system executables writable by users unless you're root but in this case you don't need sudo ;-) But you're right to add this comment because it's so seldom that I've probably overlooked it more than one time. <comment308663> The accepted solution (`sudo -u user2 ...`) does have the advantage that it can't be used remotely, which might help for security - there is no private key for user1 that can be stolen. <comment308665> To get it nearer to the behaviour `su - user2` instead of `su user2`, the commands should probably all involve `sudo -u user2 -i`, in order to simulate an initial login as user2