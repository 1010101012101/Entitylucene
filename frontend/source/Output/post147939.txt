Ruby on OS X 10.9 Ignoring gems because extensions are not built <body> Every few days this will happen when doing various things in Ruby CLI (notably, using the codeknife/code utility for Chef) on OS X (unable to replicate in other environments; Linux, FreeBSD, etc.):  precodeIgnoring bcrypt-3.1.7 because its extensions are not built.  Try: gem pristine bcrypt-3.1.7 Ignoring bigdecimal-1.2.5 because its extensions are not built.  Try: gem pristine bigdecimal-1.2.5 Ignoring ffi-yajl-1.1.0 because its extensions are not built.  Try: gem pristine ffi-yajl-1.1.0 Ignoring gem-wrappers-1.2.5 because its extensions are not built.  Try: gem pristine gem-wrappers-1.2.5 Ignoring gem-wrappers-1.2.4 because its extensions are not built.  Try: gem pristine gem-wrappers-1.2.4 Ignoring pg-0.17.1 because its extensions are not built.  Try: gem pristine pg-0.17.1 Ignoring psych-2.0.6 because its extensions are not built.  Try: gem pristine psych-2.0.6 Ignoring sqlite3-1.3.9 because its extensions are not built.  Try: gem pristine sqlite3-1.3.9 /code/pre  And while it's a simple fix, it keeps happening. Has anyone come across this before?  precode$ ruby -v ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-darwin11.2.0] /code/pre  <answer148966> I recently switched to from codervm/code to codechruby/code and ran codegem update --system/code, thats when the issue began occurring for me. After that, anytime I ran bundle I was slaughtered with the same warnings. Still not sure which caused the issue.   codeIgnoring curb-0.8.6 because its extensions are not built.  Try: gem pristine curb-0.8.6/code  Not sure what fixed it, but I did 2 things and the warning disappeared:  precodegem uninstall bundler gem install bundler  gem install curb /code/pre  <answer156996> In my case I start to see this errors after installing codervm/code  I resolve such problem with: codegem pristine --all/code  <answer167377> This problem occurs, if a gem was compiled against a different libruby as the currently running. For example, if one uses a ruby located in his home directory with chruby and installs gems to ~/.gem/ruby, but runs a script which calls /usr/bin/ruby, which reuses the gems installed there. In this case codegem pristine --all/code will not help, because the gems can be linked only against one ruby version.  <answer192513> I fixed this by:  precodervm get stable /code/pre  https://github.com/rvm/rvm/issues/3348  <answer232585> In my case:   codervm get stable/code  codesudo gem pristine --all/code  <answer239370> I am very new to rails so this might be completely misguided advice but since none of the other solutions worked for me I thought I'd share mine.   Mic92 and Gerry put me on the right track: I was using coderails s/code which can cause errors because it runs a rails version that can be a different version than the project's.  I tried to connect with codebin/rails server/code, I got a different error (missing gems) so I ran codebundle install/code  At this point I got a third error ("incompatible library version"), which codespring stop/code cured.  Then I ran coderails generate controller/code again, spring restarted and everything worked (I cried a little).  <answer253163> This worked for me on MacOs Sierra:  precodexcode-select --install gem install nokogiri /code/pre  I already had installed the entire xcode prior to running the above commands, but I had to do this anyways, perhaps because the first script updates some internal libraries/dependencies.  <comment175471> Oddly enough, it started for me when I switched from the OS X-bundled Ruby to RVM. Generally, it clears on its own after a few days or if I open a new session (which is sort of a hassle when it occurs midday). I generally have to reinstall whatever I'm using at a given time, and that is usually Knife. <comment175575> it was happening for dozens of gems on my machine. i think they just had to be rebuilt <comment193615> what a useful command <comment213688> Ahhhh thank you! I was getting that error when running "rails s". I switched to "bundle exec rails s" and the problem vanished. <comment246784> This worked... But I have no idea why <comment247078> uninstalling bundler and installing did not work. But this one worked! Thanks! <comment274340> This should have been the accepted answer. <comment300215> this should be the accepted answer <comment300379> This answer is right. If the problem happens in a Rails repository where gems are saved in `vendor/bundle`, just delete them with `rm -rf vendor/bundle` and reinstall them with `bundle install`. <comment310992> For myself, I had to uninstall each gem that it was giving a warning for and then reinstall with `bundle install` <comment326411> This is what I were looking for MacOS Sierra solution. Thanks <comment335791> "I was slaughtered" - wow.