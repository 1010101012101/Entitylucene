Mac virtual memory: how to make OS X create swap (page) files as freely with a normal boot as it does with a safe boot (swapfile1 etc) <body> h2Background/h2  When my MacBookPro5,2 with 8 GB memory boots in safe mode I see that the operating system causes dynamic_pager(8) to create swap files in a way that's relatively unrestrained. In the file system that I dedicate to swap, siblings of   code/Volumes/swap/swapfile0/code  are created very quickly. Simple use of an app seems to result in more swap files than comparable use of that app with a normal boot.   Performance with emsafe/em boot – with stronga greater than normal mass of external swap files/strong – is strongremarkably good/strong. So I'd like to experiment with:   ul lian equally strongunrestrained approach to swap files/strong with a emnormal/em boot./li /ul  h1Question/h1  How can I make the operating system behave in a way that causes a greater than normal mass of swapfiles to be created by codedynamic_pager/code?   I'm prepared to accept the risks that may be associated with evil tuning.   h1Related/h1  Why might more memory be wired in safe mode than in normal mode?  Answers there may help towards answers here.   hr  h2Preliminary investigation/h2  I ran codesysctl -a/code in normal mode and safe mode. I see differences but (unless I'm missing something) nothing to explain the freedom that's associated with a safe boot.  https://apple.stackexchange.com/a/72732/8546 by @Quantumpanda is thought-provoking but the question there is, in a way, the opposite of what I want.   In Server Fault, FreeBSD performance tuning. Sysctls, loader.conf, kernel is popular but much of that seems network-oriented.   h2First experiments/h2  The essence of this question was originally:   ul liHow can I get codedynamic_pager/code to behave with a emnormal/em boot as it behaves with a emsafe/em boot?/li /ul  – and so I experimented with values for code-S/code and code-H/code.   h3dynamic_pager option -S/h3  In 2003, when code-H/code and code-L/code were codehire_point/code and codelayoff_point/code, the default codefile_size/code was 20000000 emMac OS X in a nutshell/em, page 595). For more recent versions of the operating system, some users prefer a codefilesize/code that's around fifty times greater, 1.07 GB on disk:   ul li1073741824/li /ul  h3dynamic_pager option -H/h3  With and without a value for code-S/code, I experimented with various codehigh-water-trigger/code values, including the one suggested by dynamicpagerwrapper:   ul li209715200/li /ul  None had the required effect.   hr  h2References/h2  Addressing The Outmoded Swapping And Paging Strategy in OSX? | dropsafe (2010-03-01, updated in 2012)  dynamic_pager_wrapper source from strongdynamicpagerwrapper/strong –  performance wrapper for /sbin/dynamic_pager on OSX  In the Mac Developer Library:   ul liMemory Usage Performance Guidelines: About the Virtual Memory System/li liKernel Programming Guide: Memory and Virtual Memory/li /ul  <answer90030> AFAIK the reason all those swap files were created so quickly in Safe Mode is because dynamic_pager fell back to an initial swap size of 64MB.  How many swap files did you see?  How many do you want to see?  How many are you seeing?     Right now on my Mac Pro (desktop) running OS 10.8.3 I have 7 swap files (numbered 0-6).  Is that what you want?  Actually, since you've pointed this out, I'm going to try to reduce that to 2.    If you really want to create a lot of swap files, just set code-S 67108864/code  BTW, 1073741824 = 2^30 = 1 GiB  h3Followup/h3  Turns out there is a bug in codedynamic_pager/code (at least under Mountain Lion 10.8.4) where setting code-S 2147483648/code (= 2 GiB) fails because of some sort of 32-bit conversion error.    precodeCannot extend paging file size /private/var/vm/swapfile0 to 18446744071562067968! /code/pre  2147483648 as a 32 bit signed in is actually -2147483648 or 0x80000000 which gets extended to a 64 bit number by extending the MSB and turned into 0xFFFFFFFF80000000 which is then converted to a 64 bit unsigned which is 18446744071562067968 or 2 GiB * 8 GiB.   Crazy.  So after you mess with the dynamic pager options, look for error messages in the console logs.  <comment105738> Not simply the number of files. Think of the mass – the sum of the sizes of all swap files. What causes the operating system to create that greater mass? <comment105747> Never heard that called 'mass' before.  What causes OS to create more total swap space is more total active memory use, i.e. more need to swap data in and out of memory.  It's a bad thing, but if you want to do it you can write a simple C program using `mmap` and `MAP_ANON` to eat up all the real memory, forcing everything else into swap.