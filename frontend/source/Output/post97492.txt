Event based on battery charge level <body> I haven't found anything yet so I was hoping maybe someone here had an idea.  I want to kick off an even based on battery on an Apple laptop reaching a certain charge level, or when the battery is fully charged.  I know I can have something run periodically, check the battery level, and decide what to do, but I prefer event driven if possible.  <answer97493> This is not Mac-specific, but Mozilla Aurora has built-in API that contains a variety of battery-related functions. One can detect the status of the battery (whether it's charging or not), how much more time it will take for the battery to discharge/charge, and its level. There's a simple example of how to add an EventListener to call a function when the battery level is at a certain point.  <answer116525>    I want this to be OS based, so I don't need an internet connection or a browser open etc. Just something that can happen in the background   The easiest way to do it would be with an application, but here's how to do it with built-in OS commands only. I know you want it to be event driven, but I'm not sure how to accomplish that, so here's one way of checking the battery level, then doing something else if it's above/below a threshold.  You may consider a codelaunchd/code process, this is basically a scheduled task which runs every codex/code minutes. They are often used by advanced users, but aren't too difficult to set up. You configure a launchd scheduled task with a .plist file which you put into this directory: codeMacintosh HD\Library\LaunchDaemons/code and this is how you structure the .plist file;  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt; &lt;key&gt;Debug&lt;/key&gt; &lt;true/&gt; &lt;key&gt;ExitTimeOut&lt;/key&gt; &lt;integer&gt;120&lt;/integer&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;com.me.BatteryInfo&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt;     &lt;string&gt;/Users/yourusername/batt.sh&lt;/string&gt; &lt;/array&gt; &lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt; &lt;key&gt;StartInterval&lt;/key&gt; &lt;integer&gt;1800&lt;/integer&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  If you were to save that file as codecom.me.BatteryInfo/code in the codeLaunchDaemons/code folder mentioned above, it would create a scheduled task which runs every 30 minutes. The number, code1800/code, directly above code&lt;/dict&gt;/code is the time in seconds of how often you want the task to run. Where it says code&lt;string&gt;/Users/yourusername/batt.sh&lt;/string&gt;/code is where you specify which script runs on schedule. You must leave code&lt;string&gt;/code and code&lt;/sting&gt;/code intact.  The line code&lt;string&gt;com.me.BatteryInfo&lt;/string&gt;/code is the unique name of the scheduled task. If you are going to make more than one, make sure each .plist has a unique name here.  The next thing you need to do is change the ownership of the .plist to coderoot/code. This is required as a security feature (to stop software/users creating scheduled malicious tasks, I assume). To change the ownership of the file, do codesudo chown root \Library\LaunchDaemons\yourtask.plist/code (replace yourtask.plist with the actual file name of the .plist you created). This task will prompt you for a password.  Now you need to create the script which will run periodically. You need to make a .sh file (a bash script) to tell the computer what to do. To make a .sh file, open up a programmers text editor, such as Sublime Text or Komodo Edit. strongDO NOT use Text Edit, as it often adds text to your files which would interfere with your script. Text Edit shouldn't really be used for code./strong  Make a script (.sh file) with the following code;  precode#!/bin/sh  percent=$(ioreg -l | awk '$3~/Capacity/{c[$3]=$5}END{OFMT="%.3f";max=c["\"MaxCapacity\""];print(max&gt;0?100*c["\"CurrentCapacity\""]/max:"?")}')  if [ $percent &gt; 95 ]     then         echo 'charged.' fi exit 0 /code/pre  Replace codeecho 'charged.'/code with the terminal command(s) you would like to run when the battery is charged. codeopen /Applications/Notes.app/code will open the Notes application; you can change the directory to open a different application.  code$percent &gt; 95/code This tells the next line to only run when the battery is more than code95/code charged. You can change this to whatever you want. strongThe battery level here will often be slightly different to what is displayed in the menu bar at the top. If you want to 'run when battery is fully charged' I recommend leaving this as  95/strong. If you want the task to run when your battery goes below 20% for example, change it to code$percent &lt; 20/code  emNOTE: Because this is a scheduled task, your script will run every codex/code number of minutes. This means if you put codeopen \Applications\Notes.app/code inside your script, the Notes application will start every codex/code minutes (if your battery is charged)/em  This task will run even if nobody is logged in.  I know you asked this question a while ago, but hopefully this will help someone.  <answer116528> Power Manager is not free but supports triggering events based on battery levels (internal or UPS). Events can run scripts, launch applications, or perform tasks such as shutting down.  Power Manager is event driven and does not poll for battery changes.  Instead Power Manager hooks into the IOKit layer of OS X and awaits updates from the hardware. Events can be triggered when no-one is logged in; it does not rely on an active user.  img src="https://i.stack.imgur.com/jFYQS.png" alt="Power Manager - Run a script on battery remaining"  The built-in Schedule Assistant tasks focus on performing when the battery drops to a particular level, but they can be tweaked to check for rises in battery percentage or time remaining.  These two posts talk about UPS power sources, but they are easily adapted for your MacBook's internal battery:  ul liUPS Scripting on Mac OS X/li liHow to Shut Down When UPS Power Drops/li /ul  Disclosure: I am a software engineer behind Power Manager.  <comment114382> I want this to be OS based, so I don't need an internet connection or a browser open etc.  Just something that can happen in the background.