Drag & Drop vs mv - Any difference? <body> Is there a difference between bulk-moving files with Drag &amp; Drop vs codemv/code?  Use case:  Volume External_Drive_A has about 8000 files totalling 9GB. External_Drive_B has 74GB of free space. The desired end result is to move all the files from A to B so that A can be wiped and put to use in another location.   Drag &amp; Drop approach is to open one Finder window for A, another Finder window for B, highlight all the files on A, then command-click-drag them to B.  codemv/code approach is to open a Terminal session and invoke   precodemkdir /Volumes/External_Drive_B/A_legacy mv /Volumes/External_Drive_A/* /Volumes/External_Drive/B/A_legacy/ /code/pre  Does Drag &amp; Drop do anything behind-the-scenes in addition to the copy and remove, or is it strictly a thing of Beauty?   Answered by jmlumpkin below:   They differ! Drag &amp; Drop brings the metadata, codemv/code does not. I tested this by adding a phrase to the Spotlight Comments section on a text file's Get Info dialog. When I dragged and dropped the file across volumes, the phrase was present when I invoked Get Info on the destination; but when it used codemv/code, the phrase was missing when I invoked Get Info on the destination.  <answer4884> The end result is strongprobably/strong the same, but I would guess that edge cases might be treated differently, also depending on which codemv/code you use (the default in code/bin//code or a GNU version in code/sw/bin//code from fink, or from macports, etc.)  For example, an OS X alias or resource forks might not be treated properly by the unix toolchain, and there are probably cases where low-level unix file things might not be handled by the OS X drag-and-drop.  <answer4895> Do not use codemv/code or drag&amp;drop for moving data embetween volumes/em.  If anything bad happens during the operation, you will end up with half the data here and half the data there, and it will be hard to figure out where to restart. If this is done over the network, you may not even still have all the data on either volume.  Do a copy (command line or drag&amp;drop), and after that succeeded, delete the source.   <answer4896> In earlier versions of the Mac OS, Dragging and Dropping a file was actually closer to the 'ditto' command to retain resource forks, etc.   <comment4872> Thanks for introducing me to the ditto command.  Its man page lists all sorts of nifty features, including thinning Universal binaries and HFS meta-data information. <comment4882> So of course I have egg on my face, I missed the whole "batch files" thing. I suggest neither `mv`, nor `cp`, but `rsync` instead. Thilo, I'm very sorry. I had a one-large file use case in my head despite this thread regarding batches of files. <comment4913> its a great tool. We used to use this more than 'mv' when moving stuff between machines/servers/local drives or even on the main drive. <comment4926> For a cross-volume multi-file move executed as a copy - delete, is (cp âŠ• rsync) followed by rm equivalent to a GUI copy followed by a GUI trash followed by a GUI empty-trash? <comment5014> @Thomas L Holaday: Well, a GUI empty-trash could permanently delete all kinds of unrelated stuff already in the trash bin. I think there is a way to delete from the GUI bypassing the trash bin, maybe some option key combination, I can never remember those. That would be a good new question. <comment5199> it's a bit confusing, as the man page for mv states: "The mv utility now supports HFS+ Finder and Extended Attributes and resource forks. The mv utility will no longer strip resource forks off of HFS files.  For an alternative method, refer to cp(1)."  so where is this spotlight information stored then?