IF statement doesn't work properly in osascript <body> I'm working on script which should do something if application is running or not Also there should be a timer of checking(60 seconds) The problem is that "if" statement which is checking "count" doesn't work.  Here is a script:  precode#!/bin/bash osascript -e "do shell script \"  COUNT="0"  while true; do     if (ps aux | grep Skype | grep -v grep &gt; /dev/null)     then         echo "RUNNING" &gt; /Users/someuser/Desktop/RUNNING.txt     else         echo "STOPPED" &gt; /Users/someuser/Desktop/STOPPED.txt     fi      sleep 1     COUNT=$((COUNT+1))      if (("$COUNT" &gt; "60"))     then         exit 0     fi  done  \" with administrator privileges" /code/pre  <answer176128> This way works:  precode#!/bin/bash osascript -e do shell script \"  COUNT=0  while true; do     if (ps aux | grep Skype | grep -v grep &gt; /dev/null)     then         echo 'RUNNING' &gt; /Users/someuser/Desktop/RUNNING.txt     else         echo 'STOPPED' &gt; /Users/someuser/Desktop/STOPPED.txt     fi      sleep 1     COUNT=$((COUNT+1))      if (($COUNT &gt; 60))     then         exit 0     fi  done \" with administrator privileges /code/pre  ul liYou don't need the quotes before codedo shell script/code, as this is an applescript sentence./li liAvoid unnecessary double quotes to prevent errors./li /ul  <comment207782> Where are You increasing `$COUNT`? It's always 0. <comment207784> updated code above <comment207785> The next thing: does it even work for You? You have so many `"` inside the script and in my opinion this should not work. Increasing `$COUNT` is also done in the wrong way (missing `$`). `if` statements uses `[ ... ]` not `( ... )` in bash. <comment207786> yes, it works for me without any errors. I run it in terminals using: "sh my_script.sh" <comment207790> Are you really only interested in the exit code of the last `grep` in the if statement? Or do you want base the decision on the fact whether "Skype" appears in the output of `ps` or not? <comment207791> @MateuszSzlosek Inside `$((...))`, variables don't need a leading `$`. Also `if` just acts on the exit code of a command which usually is `[` (for test), but basically any command works. <comment207792> @patrix I didn't know that, thanks! <comment207837> Your quoting is all wrong tooâ€¦