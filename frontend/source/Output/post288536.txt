Is it possible to keystroke special characters in AppleScript? <body> h2The Bug:/h2  For certain special characters and symbols, AppleScript will fail to codekeystroke/code the actual character, and will instead simply type the letter codea/code.  hr  h2An Example:/h2  The following AppleScript code:  precodetell application "System Events" to keystroke "² ³ é ½ ₭" /code/pre  types the following string of text (no matter what application that I am in):  precodea a a a a /code/pre  hr  h2A Workaround:/h2  One can emeffectively/em "type" the text by placing the special characters on the clipboard, and then pasting the clipboard, like so:  precodeset the clipboard to "² ³ é ½ ₭" tell application "System Events" to keystroke "v" using command down /code/pre  I avoid using the above method to put text on the clipboard in AppleScript, because it necessarily converts the clipboard to rich text, in the process.  I prefer to employ the method provided here, to ensure that plain text is placed on the clipboard. But, this method converts special characters to mojibake.  For example, using the same string as above, this method puts the following text on the clipboard:  precode¬≤ ¬≥ √© ¬Ω ‚Ç≠ /code/pre  You can manually account for this issue, however, by adding a codereplace_chars/code statement for each special character.  hr  h2The Question:/h2  Is there a way to type special characters via AppleScript, emwithout/em having to involve the clipboard?  For example, is there some way that I can add the desired special characters to a "bank" or system file somewhere, so that the codeSystem Events/code application is familiar with them?  hr  <answer288541> In order to codekeystroke/code a character, that character needs to be mapped to an actual key on your selected keyboard.  For instance, I can codekeystroke/code strongé/strong and strong²/strong just fine, because I’m using the strongFrench — PC/strong keyboard layout. However a standard American QWERTY keyboard does not feature those keys and will be unable to codekeystroke/code them.  <answer288631> You can define all your special character sets as variables, like this  precodeon specialKeys(input)     tell application "System Events"         keystroke input     end tell end specialKeys   set characterSet1 to "²³é½₭ " set characterSet2 to "¬≥ " set characterSet3 to "√© " set characterSet4 to "¬Ω " set characterSet5 to "‚Ç≠ " set characterSet6 to characterSet1 &amp; characterSet2 &amp; characterSet3 &amp; characterSet4 &amp; characterSet5  specialKeys(characterSet1) -- ² ³ é ½ ₭ is the result from calling specialKeys(characterSet1) After adding the text replacement for “a a a a a” in my keyboard preferences /code/pre  Some special characters keystroke correctly when you set them as variables. Any of the special characters that you set as variables that do not keystroke properly, you can add “text replacements” in the system preferences for your keyboard.  Be sure to select all of the items and drag them to your desktop or wherever.  This will create a .plist file which will be a backup of your original settings.  You can drag this file back at anytime.  img src="https://i.stack.imgur.com/yJY7J.gif" alt="enter image description here"  img src="https://i.stack.imgur.com/2N41H.png" alt="enter image description here"  Then in ScriptEditor, make sure you have text replacements enabled in the “substitutions” sub menu of the edit menu.  img src="https://i.stack.imgur.com/egrJQ.png" alt="enter image description here"  img src="https://i.stack.imgur.com/V0pSs.gif" alt="enter image description here"  <answer289036> A workaround (with the clipboard):  strong1 -/strong You can use a cocoa method from a shell:  precodeset tString to "² ³ é ½ ₭" my stringToClipboard(tString) tell application "System Events" to keystroke "v" using command down  on stringToClipboard(t1)     do shell script "/usr/bin/python -c 'import sys;from AppKit import NSPasteboard, NSPasteboardTypeString; cb=NSPasteboard.generalPasteboard();cb.declareTypes_owner_([NSPasteboardTypeString], None);cb.setString_forType_(sys.argv[1].decode(\"utf8\"), NSPasteboardTypeString)' " &amp; quoted form of t1 end stringToClipboard /code/pre  hr  strong2 -/strong Or a Cocoa-AppleScript Applet:  precodeuse framework "AppKit" use scripting additions set tString to "² ³ é ½ ₭" my stringToClipboard(tString) tell application "System Events" to keystroke "v" using command down  on stringToClipboard(t1)     set ca to current application     set cb to ca's NSPasteboard's generalPasteboard()     cb's declareTypes:{ca's NSPasteboardTypeString} owner:(missing value)     cb's setString:t1 forType:(ca's NSPasteboardTypeString) end stringToClipboard /code/pre  <answer289046> It's possible with strongCoreGraphics/strong (codeCGEventPost/code), it's a strongC/strong API (it doesn't work in a Cocoa-AppleScript), but it's possible to call an executable from an AppleScript.  hr  Here is the method to create the executable with Xcode (Version 8.3.3):  You can do it yourself (you can download strongXcode/strong from the strongApp Store/strong), or ask a trusted person to create the executable.  strong1-/strong Open Xcode, select menu "strongFile/strong" -- "strongNew/strong" -- "strongProject/strong..." img src="https://i.stack.imgur.com/vMhuq.png" alt="enter image description here"  hr  strong2-/strong Select strongmacOS/strong and strongCommand Line Tool/strong, click on the "strongNext/strong" button. img src="https://i.stack.imgur.com/QgGRH.png" alt="enter image description here"  hr  strong3-/strong Name it codeTypeCharacters/code, select strongObjective-C/strong as Language, click on the "strongNext/strong" button. img src="https://i.stack.imgur.com/42B7E.png" alt="enter image description here"  hr  strong4-/strong Save the project to the desired folder.  hr  strong5-/strong In the window of Xcode, select the codemain.m/code icon, clear the text in the window and paste one of these two codes:  The code need a loop because of a bug, the codeCGEventKeyboardSetUnicodeString()/code method truncates a string which exceeds twenty characters, or it's a limit (not documented).  This code use a loop to type a list of characters at each iteration, the list can contain one to twenty characters. (It's fast, 1 seconds to type 2400 characters in a TextEdit's document on my computer.)  precode#import &lt;Foundation/Foundation.h&gt;  int main(int argc, const char * argv[]) {     @autoreleasepool {         if (argc &gt; 1) {             NSString *theString = [NSString stringWithUTF8String:argv[1]];             NSUInteger len = [theString length];             NSUInteger n, i = 0;             CGEventRef keyEvent = CGEventCreateKeyboardEvent(nil, 0, true);             unichar uChars[20];             while (i &lt; len) {                 n = i + 20;                 if (n&gt;len){n=len;}                 [theString getCharacters:uChars range:NSMakeRange(i, n-i)];                 CGEventKeyboardSetUnicodeString(keyEvent, n-i, uChars);                 CGEventPost(kCGHIDEventTap, keyEvent); // key down                 CGEventSetType(keyEvent, kCGEventKeyUp);                 CGEventPost(kCGHIDEventTap, keyEvent); // key up (type 20 characters maximum)                 CGEventSetType(keyEvent, kCGEventKeyDown);                 i = n;                 [NSThread sleepForTimeInterval:0.004]; // wait 4/1000 of second, 0.002 it's OK on my computer, I use 0.004 to be safe, increase it If you still have issues             }             CFRelease(keyEvent);         }     }     return 0; } /code/pre  This code use a loop to type one character at each iteration (It's slower than the first code).  precode#import &lt;Foundation/Foundation.h&gt; int main(int argc, const char * argv[]) {     @autoreleasepool {         if (argc &gt; 1) {             NSString *theString = [NSString stringWithUTF8String:argv[1]];             UniChar uChar;             CGEventRef keyEvent = CGEventCreateKeyboardEvent(nil, 0, true);             for (int i = 0; i &lt; [theString length]; i++)             {                 uChar = [theString characterAtIndex:i];                 CGEventKeyboardSetUnicodeString(keyEvent, 1, &amp;uChar);                 CGEventPost(kCGHIDEventTap, keyEvent); // key down                 CGEventSetType(keyEvent, kCGEventKeyUp);                 CGEventPost(kCGHIDEventTap, keyEvent); // key up (type the character)                 CGEventSetType(keyEvent, kCGEventKeyDown);                 [NSThread sleepForTimeInterval:0.001]; // wait 1/1000 of second, no need of this line on my computer, I use 0.001 to be safe, increase it If you still have issues             }             CFRelease(keyEvent);         }     }     return 0; } /code/pre  strongNote/strong : This code works on strongmacOS Sierra/strong and should work on strongEl Capitan/strong, but not on an older strongOS/strong.  img src="https://i.stack.imgur.com/4huFt.png" alt="enter image description here"  hr  strong6-/strong Select menu "strongProduct/strong" -- "strongBuild/strong".  hr  strong7-/strong Select the codeTypeCharacters/code icon in the strongProduct/strong folder, right-click and select the "strongShow in Finder/strong" menu in the contextual menu.  img src="https://i.stack.imgur.com/m6BZM.png" alt="enter image description here"  hr  strong8-/strong From the Finder, move the "strongTypeCharacters/strong" file to the desired folder, quit strongXcode/strong, that's all.  hr  From an strongAppleScript/strong, call the executable, like this  precodeset myString to "ùéèà ² ³ é ½ ₭ " do shell script "'/full path/of/TypeCharacters' " &amp; quoted form of myString /code/pre  <comment364802> The *"Text Replacement"* workaround works as desired in the majority of OS X applications (e.g., TextEdit, Notes, Script Editor, etc.), but I was hoping for a solution that would work in *every* text field in any application. Asking for a lot, I know! I still think that this is a very clever solution, so +1. Thank you for the answer. <comment364808> Thanks for the explanation. Makes sense. <comment365164> Incredible answer. This solution works flawlessly on OS X 10.11.6 as well. I couldn't dream of a better solution. I also appreciate the detailed screenshots. Many, many thanks!!! <comment369297> I have discovered a bug: If the length of `myString` exceeds 20 characters, then the string will be truncated. That is, any text that follows the twentieth character will not be typed. Do you know how to fix this? <comment369651> Now ,I use a loop to type each character, (tested with a string of 2000 or more characters), I updated the code in my answer. <comment369814> Your new solution has solved the problem. Thanks! Side note, you removed the `#import Foundation/Foundation.h` line from your code in your edit, but this line is still necessary for a successful build. I know that this line of code is there by default, but some ambiguity exists because your instructions say to *"clear the text in the window."* <comment369913> I think the new solution has a new bug. Every so often, the typed text will be missing a character or change the order of the text. This occurs no matter the string length. Here is a real example: The string that the TypeCharacters file was given was `= 278,932` but the following string was typed:  `=2 78,93`. <comment369982> No bugs here. Maybe  a (substitution, a transformation or the correct spelling automatically) in the foreground application. Check the text replacement in the "System Preferences". Otherwise, use the debug code (in my answer). <comment370078> Maybe (**during heavy CPU load**) the code need a small delay between each **KeyDown**. Try that: add this line at the end of the loop `[NSThread sleepForTimeInterval:0.02]; //  wait 2/100 of second, increase it If you still have issues.`. I updated the code in my answer.  I append another code in my answer (this code can type **20 characters** on each iteration instead of one character, try it. <comment370308> Hmm. It is definitely not a text substitution/transformation issue. Also, the issue occurs even when no other application is open, so it's not CPU-load-dependent (and it occurs in any given application, from TextEdit to Google Chrome). I reset my NVRAM and SMC; the issue persists. Maybe it's an El Capitan issue? BTW, I use an Early-2013 Retina MacBook Pro, so perhaps my computer is simply getting old and sluggish. <comment370310> Whatever is responsible for causing the issue, either of your two new solutions seem to have entirely stopped the issue. Here are GIFs that show the outcomes on my computer: If I use [the 1st code block](http://i.imgur.com/weMNZTS.gif) in your current answer. If I use [the debug code](http://i.imgur.com/TkZdmC5.gif). If I use [the 3rd code block](http://i.imgur.com/GI1fAcY.gif) (which I modified with a shorter delay). <comment370490> I am glad  that your issue has been resolved. On my computer: typing one character at each iteration doesn't need the `sleepForTimeInterval:` method, but this is necessary for typing a list of characters at each iteration (If the string contains more than twenty characters of course). I updated my answer (cleaning).