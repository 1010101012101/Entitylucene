Bash script not found El Capitan <body> I have created a Bash script that simply does codels -l/code.  In Mavericks and older versions of OSX I simply made a symlink to the script and put it in the code/usr/bin/code folder (codeln -s ll.sh /usr/bin/ll/code) and I could then execute the script using codell/code from any folder.  Since upgrading to El Capitan I am unable to load this script. I have disabled SIP so that I am able to create the symlink and the script is definitely executable. The location (code/usr/bin/code) is definitely in the $PATH and I have even tried adding a path to the script into the $PATH too.  Nothing seems to work, all I am getting is code-bash: ll: command not found/code.  I have restarted the terminal after each update to the $PATH and I have tried codesource ~/.bash_profile/code but neither are making any difference.  strongEdit:/strong I also tried adding the current directory of the scripts to the $PATH and that was also giving the same error. In the end I have aliased all my scripts so that they will run.  <answer211415> I'm not sure what's wrong with your setup, but a different (perhaps better) way to do this same thing is via Bash's codealias/code command. At the command prompt, type in:  precodealias ll="ls -l" /code/pre  Then you can just type codell/code and get a full listing. If you wish to make this permanent, you can put it in the code.bashrc/code file in your home directory, which you can create if it doesn't already exist.  <answer211417> Just read the comments and see that you're looking for a general solution, rather than that specific example. I'll leave my previous answer in case it helps someone, but here's a more general solution.  My first piece of advice: leave code/usr/bin/code alone. There's no reason to mess with it and there are many reasons emnot/em to mess with it. Instead, add a directory somewhere else, put you scripts there, and add it to you code$PATH/code variable. If you want this just for your user, you could create a codescripts/code or codebin/code directory in your home directory, or if you want it globally available you could put it under code/usr/local/code, e.g. code/usr/local/scripts/code or code/usr/local/bin/code. Then, in the code.bashrc/code file in your home directory, add the following:  precodeexport PATH=$PATH:~/scripts:/usr/local/scripts /code/pre  If you would rather have your commands override a system command (should they have the same name) then you could do the following, instead:  precodeexport PATH=~/scripts:/usr/local/scripts:$PATH /code/pre  If you want this set for all users, then there is a global code/etc/bashrc/code file that you can add the above to.  In order to edit the global codebashrc/code or modify code/usr/local/code you need root/admin privileges.  <comment254970> when you run your ll.sh does it work ? <comment254973> If all the the `ll.sh` -script_ is doing is `ls -l` then you should use an _alias_ instead. Set `alias ll='ls -l'` in the `~/.profile` or `~/.bash_profile`, whichever you're using. See [6.6 Aliases](http://www.gnu.org/software/bash/manual/bashref.html#Aliases) in the [BASH Reference Manual](http://www.gnu.org/software/bash/manual/bashref.html). <comment254974> I used the `ls -l` as an example, I have quite a few scripts that do different things. I could make an alias for them all but I wondered if the previous implementation was still possible. If I run the .sh script it runs fine. <comment254985> A couple of things...  There really is no need to use an extension on the _shell scripts_, e.g. `ll.sh` simply needs to be `ll`.  I have a separate directory I put all of my scripts in and add that directory pathname to the `$PATH`.  I have  150 scripts I've written in that directory and not one has an extension yet they're all executable.  Some even have _symlinks_ (not Finder Alaises, and not to be confused with _bash aliases_) to shorter names to type in the Terminal for convenience.  This way all of my scripts are more centrally located and do not get mixed in with system executables. <comment254994> Can you please please add the full script to the question? And the output of `ls -l /usr/bin/ll `? <comment255001> Convention would warrant that the system's path- `getconf PATH` is only modified by the vendor regardless of SIP. Nor would one add scripts that alter the shell's environment to your PATH. System wide "scripts" (no shebang and sourced from a shell rc file) belong in /etc and user "scripts" belong in their home folder. <comment255224> Note that /usr/local/bin is already in the default PATH, so if you put things there you don't have to worry about customizing the PATH. <comment255466> It's also worth noting that you can alias the command to a file location `ll=~/scripts/ll.sh`, which is what I have ended up doing. Thanks for the help! <comment255467> My hypothesis still is that there is something wrong with the script itself. But as long as you don't include it in your question text we won`t be able to verify that. Anyway, using aliases (or shell functions) is the better solution. <comment263038> Don't you need quotes around PATH absolute path?