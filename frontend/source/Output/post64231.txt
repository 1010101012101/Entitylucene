How is my $PATH variable built in Mountain Lion? <body> I've recently installed Homebrew on my Mac and it's complaining that code/usr/bin/code occurs before code/usr/local/bin/code in my code$PATH/code variable, meaning that system-provided programs will be used instead of those installed with Homebrew.  My code.bashrc/code is configured in a set of separate files, as per this screencast. This means that code~/.bash_profile/code looks like this:  precodeif [ -f ~/.bashrc ]; then   source ~/.bashrc fi /code/pre  code~/.bashrc/code looks like this:  precodesource ~/bin/dotfiles/bashrc /code/pre  and code~/bin/dotfiles/bashrc/code looks like this:  precode. ~/bin/dotfiles/bash/env . ~/bin/dotfiles/bash/config . ~/bin/dotfiles/bash/aliases /code/pre  code~/bin/dotfiles/bash/env/code, which is where I set my code$PATH/code variable, looks like this:  precodeexport EDITOR="kom" export PATH=some/path/at/start:usr/local/bin:/Users/jim/pear/bin:~/bin:/Users/jim/.gem/ruby/1.8/bin:/Users/jim/bin/bashscripts:some/path/at/end:$PATH /code/pre  I've added codesome/path/at/start/code and codesome/path/at/end/code for debugging purposes, since when I try codeecho $PATH/code I get this:  code/opt/local/bin:/opt/local/sbin:/Users/jim/bin:/opt/local/bin:/opt/local/sbin:some/path/at/start:usr/local/bin:/Users/jim/pear/bin:/Users/jim/bin:/Users/jim/.gem/ruby/1.8/bin:/Users/jim/bin/bashscripts:some/path/at/end:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin/code  That is, there's a load of other stuff being loaded into the $PATH variable that I can't control in the configuration I've outlined above. Any ideas as to where this stuff is loaded from, so that I can go about changing it and moving code/usr/local/bin/code before code/usr/bin/code?  <answer64232> If you fix the typo in your PATH assignment and replace codeusr/local/bin/code with code/usr/local/bin/code Homebrew should stop complaining.  The other stuff (code/opt/local/.../code) is definitively added somewhere later during shell initialization (meaning after codesource ~/.bashrc/code or after code. ~/bin/dotfiles/bash/env/code). You will have to look through the different files (or grep for code/opt/local/code or codePATH.*PATH/code) to see where it happens (and why).  <answer64262> There's also the system wide bashrc, which is found at  /etc/bashrc, and a couple others.  From codeman bash/code:-  precodeFILES        /bin/bash               The bash executable        /etc/profile               The systemwide initialization file, executed for login shells        ~/.bash_profile               The personal initialization file, executed for login shells        ~/.bashrc               The individual per-interactive-shell startup file        ~/.bash_logout               The individual login shell cleanup file, executed when a login shell exits        ~/.inputrc               Individual readline initialization file /code/pre  <answer64266> The INVOCATION section of the bash man page says     When bash is invoked as an interactive login shell, or as a non-interactive shell with the --login option, it first reads and executes commands from the file /etc/profile, if that file exists. After reading   that file, it looks for ~/.bash_profile, ~/.bash_login, and   ~/.profile, in that order, and reads and executes commands from the   first one that exists and is readable.   Of particular interest is code/etc/profile/code, which uses codepath_helper/code to build a path from what it finds in code/etc/paths/code and code/etc/paths.d/*/code.  <comment75654> Thanks patrix, that fixed it. I've also found http://www.semioticpixels.com/crib-notes/mac-10-7-path-settings-and-environment-variables/ which describes how $PATH is built (albeit in Lion)