How to flash screen from command line <body> Is there a way to flash the screen from the command line? I am looking for the same effect that Accessibility does for "Flash the screen when an alert sound occurs", but I don't want it for every alert.  <answer127257> As far as I know, you can't replicate this alert without enabling that option. If you do enable that option, you can cause a flash from Terminal using:  precodeosascript -e "beep" /code/pre  However, if you don't want to enable that option, you can use invert colours. Using the invert colours Accessibility option twice causes the screen to flash, therefore pressing the keyboard shortcut ⌃⌥⌘8 twice will cause a flash:  precode#!/usr/bin/osascript tell application "System Events" to repeat 2 times key code 28 using {command down, control down, option down} delay 0 end repeat /code/pre  <answer127259> It doesn't flash the whole screen (unless you have terminal set to full screen) but if you go to codePreferences &gt; Settings &gt; Advanced/code and select "Visual Bell" you can then type:   codeecho ^G/code   (The keystrokes to get the correct characters are: codeecho/code kbdcontrol/kbd + kbdv/kbd kbdcontrol/kbd + kbdg/kbd because the control character has to be quoted)  to flash the terminal window.  <answer127262> For others, one alternative I have found is to use the strongbrightness command line tool/strong, available via homebrew ( You can find instructions on how to install it from http://brew.sh ). Link to discussion: https://apple.stackexchange.com/a/127258/23876  The first line installs Brightness, the second shows you what brightness looks like in action.  precodebrew install brightness brightness 0; sleep 1; brightness 1 /code/pre  It only works on the main display though. If this form of brightness switching is too slow for you, experiment with sleep 0.3 or even sleep 0.1.  <answer259449> This is a shellscript that calls applescript to do this (the code needs to be explained more)   precode#!/usr/bin/osascript tell application "System Events" to repeat 2 times key code 28 using {command down, control down, option down} delay 0 end repeat /code/pre  <answer288696> This works for me in Sierra via applescript:  precodetell application "System Preferences"     run     reveal anchor "Hearing" of pane id "com.apple.preference.universalaccess" end tell tell application "System Events" to tell process "System Preferences" to click button "Test Screen Flash" of window "Accessibility" of application process "System Preferences" of application "System Events" /code/pre  <comment149131> Whilst this works, the effect is very subtle on my default Terminal profile. <comment149139> something is missing ? <comment149280> The invert is a good alternative. Thanks. <comment152509> What is missing @Buscar? <comment152512> I tired it, and it does not work on my MBA 10.9.2 Error -bash: screenbrightness: command not found <comment360066> @Buscar웃 The reason is that you don't actually have an app called screenbrightness. What you can do, is install Homebrew ( http://brew.sh ) and then do a  "brew install brightness" -  and then run "brightness 0; sleep 1; brightness 1" - for example. <comment364582> Another option is `printf '\a'`. <comment364583> I wonder if the script can check to see if the current setting is to beep or flash and then change the setting if needed, call the "beep" and then change the setting back (only if it made a change?). <comment364584> Looks like this other answer found an even better implementation of my code comment above. https://apple.stackexchange.com/a/288696/5472 <comment364585> Very elegant solution. I had suggested on another answer to actually change the settings (if needed), call a beep and change the settings back. this seems much better to get one off flashes. <comment364586> @bmike That’s a nice idea, I will write a script for this and add it to my answer! (…when I get my Mac back from Apple service; the main reason my participation on the site recently hasn’t been stellar.) <comment364588> @bmike The trouble with this is it takes a number of seconds to execute especially if the app isn’t open first, no doubt it’s elegant apart from that <comment364589> Indeed @grgarside - for speed here, you'd likely need to use python and the objective-c bindings to script up what is in essence a small cocoa app to speed the setting or speed up calling of the function.