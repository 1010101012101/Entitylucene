How to show or hide Keyboard Viewer with a keyboard shortcut? <body> I would like to display and hide the Keyboard Viewer using a shortcut.  ul liIs there a way to display the Keyboard Viewer via a keyboard shortcut?/li liIs there a way to automatically display the Keyboard Viewer once I switch to a specific language?/li /ul  <answer59891> This would also work after the main window has been closed by clicking the close button:  precodeif application "KeyboardViewer" is running then     tell application "System Events" to number of windows of process "KeyboardViewer"     if result is 0 then         quit application "KeyboardViewer"         delay 0.1         launch application "KeyboardViewer"     else         quit application "KeyboardViewer"     end if else     launch application "KeyboardViewer" end if /code/pre  If Keyboard Viewer is opened with AppleScript or codeopen -a KeyboardViewer/code and the main window is closed, the process stays open and keeps using about 0-15% CPU. It doesn't happen when selecting Show Keyboard Viewer from the input menu. So a better option might be to click the menu item:  precodetell application "System Events" to tell process "SystemUIServer"     tell (menu bar item 1 where description is "text input") of menu bar 1         click         click (menu item 1 where title ends with "Keyboard Viewer") of menu 1     end tell end tell /code/pre  Both scripts require access for assistive devices to be enabled in the accessibility preference pane.  <answer59986> I have found a way through BetterTouchTool to do the following :  ul liActivate Keyboard Viewer by a shortcut/li liClose Keyboard Viewer by another shortcut/li liToggle Keyboard Viewer by one shortcut (no need for the previous two)/li liI also uploaded the AppleScript for convenience/li /ul  Platform : rMBP Mountain Lion OSX 10.8  hr  strongActivate Keyboard Viewer by a shortcut/strong  ul liLaunch BetterTouchTool /li liAdd keyboard shortcut/li liAdd Predefined action  Open Application/File/Script.../li liNavigate to Macintosh HD/System/Library/Input Methods//li liSelect KeyboardViewer/li /ul  Now you have a keyboard shortcut to activate the viewer without an additional script.  HOWEVER, I noticed that pressing the red X button does not actually quit the application, which means that the keyboard viewer will only be activated once.  So you need to create a script to quit the program.  To fix this problem :  hr  strongClose Keyboard Viewer by another keyboard shortcut/strong  ul liOpen Automator/li liChoose Application as type of document/li liAdd RunAppleScript/li liWhere it says (* Your script goes here *) , replace it with codequit application "KeyboardViewer"/code /li liCompile and save as in documents or anywhere you want ( I moved it to the same location as KeyboardViewer )/li liOpen BetterTouchTool/li liAdd keyboard shortcut/li liAdd Predefined action  Open Application/File/Script.../li liLocate the application file you just saved/li /ul  You now have a way to quit the KeyBoard viewer for good once its activated. Use it instead of the red X button. Until I figure out why the keyboard viewer does not fully quit when you press the X button, this should be your solution.  emEDIT/em  I have figured out a way to TOGGLE the keyboard viewer !!   hr  strongTOGGLE KEYBOARD VIEWER by one keyboard shortcut/strong  same process as before but the code is changed :  ul liOpen Automator/li liChoose Application as type of document/li liAdd RunAppleScript/li liWhere it says (* Your script goes here *) , replace it with/li /ul   precode  if application "KeyboardViewer" is running then       quit application "KeyboardViewer"   else       activate application "KeyboardViewer"   end if /code/pre   ul liCompile and save as in documents or anywhere you want ( I moved it to the same location as KeyboardViewer )/li liOpen BetterTouchTool/li liAdd keyboard shortcut/li liAdd Predefined action  Open Application/File/Script.../li liLocate the application file you just saved/li /ul  Now the Keyboard Viewer is toggled and you dont even need to assign multiple shortcuts !  hr  strongLink for AppleScript/strong  I uploaded the app online for faster access rather than doing the whole coding steps above (just activate this app through BetterTouchTool) However, since im not an identified publisher, your OS may block running this app, depending on your security preferences. So if you prefer to not run apps from unidentified publishers, just follow the steps above to create your own app !  Link to file : https://www.box.com/s/e2461c91e30e0af025e7  hr  Hope it helps anyone as it helped me :)   <answer62518> The emExtra Scripts Plugin/em of Quicksilver offers this functionality by providing emShow Keyboard Viewer.scpt/em.  Also, when you create a Quicksilver Trigger for emShow Keyboard Viewer.scpt/em with the action emRun/em, then you get the global Keyboard Viewer hotkey.  Here's the source of the script:  precodeproperty theApplication : "KeyboardViewer" property thePath : "/System/Library/Input Methods/KeyboardViewer.app"  set HFSPath to ((POSIX file thePath) as string) tell application "System Events" to Â¬     set isRunning to 0 &lt; (count (application processes whose name is theApplication)) if isRunning then     tell application HFSPath to quit else     ignoring application responses         tell application HFSPath to activate     end ignoring end if /code/pre  If KeyboardViewer is opened with an AppleScript or with codeopen/code and the main window is closed, the Keyboard Viewer process stays open and keeps using about 0-20% CPU.  <answer62532> h1Launch Keyboard Viewer with a Service em(Improved)/em/h1  You can launch the Keyboard Viewer with a shortcut by using Automator and the OS X Services functionality.  The Keyboard Viewer program lives at code/System/Library/Input Methods/KeyboardViewer.app/code (in versions prior to Lion, it may be at code/System/Library/Components/KeyboardViewer.component/Contents/SharedSupport/KeyboardViewerServer.app/code). You open it with a hotkey by using Automator to create a simple launcher service.  ol liOpen Automator and select strongService/strong as the type of your new document./li liSet the options (at the top of the workflow area) to "Service receives strongno input/strong in strongany application/strong"./li liAdd the strongRun AppleScript/strong action to your workflow, and replace the text with the following lines:  precodeif application "KeyboardViewer" is running then     quit application "KeyboardViewer" end if  activate application "KeyboardViewer"  -- wait until the window has been closed, then end the KeyboardViewer process set numberOfWindows to 1 repeat until numberOfWindows = 0     delay 5     tell application "System Events"         tell process "KeyboardViewer"             set numberOfWindows to count windows         end tell     end tell end repeat quit application "KeyboardViewer" /code/pre/li listrongSave/strong with a name like "Open Keyboard Viewer", then open strongKeyboard Preferences/strong to the emKeyboard Shortcuts/em tab. Select emServices/em in the left pane and scroll to the bottom, where you should see the name of your Service under the General Section./li liMake sure the box is checked to enable it, then select it and click strongadd shortcut/strong to set a hotkey./li liAfter setting the hotkey, open the Services menu in any application (i.e. Finder  Services), then close it. For some reason my hot key didn't work until I did this./li /ol  A couple notes:  ul listrongThe script requires that you check the emEnable access for assistive devices/em box in the Universal Access preference pane/strong./li liClosing the Keyboard Viewer window doesn't actually quit the application, and as Lri points out, it can be a bit of a resource hog, so the coderepeat/code loop checks every 5 seconds if Keyboard Viewer has any open windows, and if not, quits the process./li liIf you're running a pre-Lion OS, you emmay/em need to replace the instances of codeKeyboardViewer/code with codeKeyboardViewerServer/code. I don't have anything pre-Lion handy to test this (if someone else could report back in the comments, that would be great./li liBecause the script loops until the Keyboard Viewer is closed, the Automator spinning gear icon will show in the menu bar until it closes./li /ul  <answer74909> Glad I found this thread. Based on the answers above, I made an Alfred extension script that toggles Keyboard Viewer.  https://dl.dropbox.com/u/29440342/linkedFiles/Keyboard%20Viewer.alfredextension  It provides an alfred keyword "kv" that toggles Keyboard Viewer on and off, by running the following applescript:  precode-- adapted from http://apple.stackexchange.com/a/62532 if application "KeyboardViewer" is running then     quit application "KeyboardViewer" else     activate application "KeyboardViewer" end if  (* -- adapted from http://apple.stackexchange.com/a/59986 tell application "System Events" to tell process "SystemUIServer"     tell (menu bar item 1 where description is "text input") of menu bar 1         click         click (menu item 1 where title ends with "Keyboard Viewer") of menu 1     end tell end tell *) -- icon ripped from osx /System/Library/PreferencePanes Keyboard.prefPane/Contents/Resources/Keyboard.icns /code/pre  I left an alternative implementation commented out, in case I experience performance problems that it was meant to avoid.  <answer120925> you can do everything by Automator:  ol liopen Automator and select "Application"/li liin top of Library find "Launch application", double click it/li lichoose "other" and navigate to KeyboardViewer file in /System/Library/Input Methods/li liSave with an name like "start keyboard". test it./li /ol  next part is to close keyboard:   ol liopen Automator and select "Application"/li liin top of Library find "Quit application", double click it/li lichoose "other" and navigate to KeyboardViewer file in /System/Library/Input Methods /li liSave with an name like "quit keyboard". test it./li /ol  now you will have two files one for open, one for close.  all you need is associate your mouse buttons to launch these two files!  for example, i`m using Microsoft Bluetooth Notebook Mouse 5000 and it  work great for me in 10.9.1  <answer271806> It's not a single-stroke shortcut, but a "non-mousing" solution is kbdFn/kbd+kbdCtrl/kbd+kbdF8/kbd to set focus on the "Status menu" icons on the right side of the menu bar.  (Section 4)  img src="https://i.stack.imgur.com/gAbRf.png" alt="enter image description here"  Arrows will navigate you to the Keyboard Preferences icon and the Show/Hide options. When you enter kbdFn/kbd+kbdCtrl/kbd+kbdF8/kbd the icon to the furthest left side of the "Status menu" icons which are on the right half of the menu bar will get highlighted. Once it is selected, then use the kbdRight Arrow â/kbd to navigate to the one you want.  Use the kbdDown Arrow â/kbd to open the menu and select the option you want. Note that the kbdOption/kbd key will make different menu options available in some of the "status menus".    img src="https://i.stack.imgur.com/zchmT.gif" alt="enter image description here"  Of note, kbdFn/kbd+kbdCtrl/kbd+kbdF2/kbd will activate the Apple menu icon ï£¿ on the left hand side. From there the kbdRight Arrow â/kbd will give you access to the Application menu. These options are available in System Preferences  Keyboard  Shortcuts::Keyboard:  img src="https://i.stack.imgur.com/ikQ3d.png" alt="enter image description here"  Depending on how you have your Function keys configured, the kbdFn/kbd is optional.    img src="https://i.stack.imgur.com/BAlFk.png" alt="enter image description here"  In macOS Sierra you can also use Siri to help with this. Invoke Siri with whichever keyboard shortcut you choose from System Preferences  Siri::Keyboard Shortcut, for example kbdOption/kbd+kbdSpacebar/kbd    img src="https://i.stack.imgur.com/PeJCX.png" alt="enter image description here"  ...then say "Turn on the Keyboard Viewer"    img src="https://i.stack.imgur.com/8QZDA.png" alt="enter image description here"  ...and voila:    img src="https://i.stack.imgur.com/bJGWX.png" alt="enter image description here"  Unfortunately, Siri will not close the Keyboard Viewer, nor will kbdCommandâ/kbd+kbdw/kbd  <comment72206> The ideal solution would be to assign a keyboard shortcut to an Apple Script which shows the Keyboard. <comment72221> I'm usually don't like install 3rd party apps for simple scriptable things, but this is __the exception__. :) Thank you very much, working like a charm. ;) <comment72223> If you want to avoid 3rd party software, I just posted an answer that will do the same thing with built-in software. <comment72224> YES! This is __exactly__ for what I looking. I'm familiar with automator and shell-scripting, only needed a hint. Thank you very much... :) <comment72225> sry mach, @CanuckSkier posted an answer what i like more, so accepting his answer. +1 anyway for the QuickSilver. ;) <comment72757> I updated this using an Applescript that runs a check to see if the window has been closed, and if so, quits the process, to avoid the performance drain. Anyone interested in the old bash-based version can find that revision [here](http://apple.stackexchange.com/revisions/62532/2). <comment98561> fantastic!! I thought adding the keyboardViewer app directly to my launchbar index would be a good substitute for my purposes, but there's no option to close kbv once it's running! so, you can't invoke it a second time - weird. anyway your script works a treat! (I had to save it as a script/run only for it to work for me.) Tx! <comment98575> @memeLab Glad it worked for you :) <comment277978> With minimal modification, this script _toggles_ the viewer. Replace "end if" with "else" and move "else if" to the end.