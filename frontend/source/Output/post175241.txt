How can I list the IP addresses of all the AirPrint printers on a network? <body> I am trying to make a list of all AirPrint printers on the network at a school. We have many of them because of all the classroom and office printers, but they have not been set up with meaningful names. I tried reading the DHCP allocation table in the router, but many of the printers do not report a host name. I can't check printers in-person because of the disruption to classes from going in to every room and playing with the 1-3 printers there.   The codedns-sd/code command as in How to find IP address of my other Mac? gives a column called emInstance Name/em, rather than the host name. Using the codedns-sd -G/code option on the instance names gave no such record.   codedns-sd -Z/code is closer, since it gives host names to look up with the codeG/code option, but it doesn't give a complete list. There are many more printers in the emAdd Printer/em dialog on a Mac than there are in the output of codedns-sd -Z/code.   Does anyone have some code or script to just find all the IP addresses of things advertising by Bonjour?  <answer239039> subI do not have an AirPrint printer on my network. And never played with one either.../sub  hr  I cannot test with a real AirPrint device in my proximity right now.  But here is how I can list all the strongemIPP/em/strong-enabled printers (in this case they are all connected via CUPS):  h3First, browse for DNS-SD discoverable services (all types):/h3  pre kp@zdv-wireless-43-219: dns-sd  -B  _services._dns-sd._udp  local.    Browsing for _services._dns-sd._udp.local.   DATE: ---Fri 20 May 2016---   23:54:37.797  ...STARTING...   Timestamp     A/R Flags  if Domain  Service Type         Instance Name   23:54:37.798  Add     3   4 .       _tcp.local.          _ssh   23:54:37.798  Add     3   4 .       _tcp.local.          _sftp-ssh   23:54:37.798  Add     3   4 .       _tcp.local.          _airplay   23:54:37.798  Add     3   4 .       _tcp.local.          _raop   23:54:37.798  Add     3   4 .       _tcp.local.          _googlecast   23:54:37.798  Add     3   4 .       _tcp.local.          _nomachine   23:54:37.798  Add     3   4 local.  _apple-mobdev2._tcp. _sub   23:54:37.798  Add     3   4 .       _tcp.local.          _apple-mobdev2   23:54:37.798  Add     3   4 .       _tcp.local.          _ipps   23:54:37.798  Add     3   4 .       _tcp.local.          _ipp   23:54:37.798  Add     3   4 .       _tcp.local.          _workstation   23:54:37.798  Add     3   4 .       _tcp.local.          _http   23:54:37.798  Add     3   4 .       _tcp.local.          _amzn-wplay   23:54:37.798  Add     3   4 .       _tcp.local.          _rfb   23:54:37.798  Add     3   4 .       _tcp.local.          _afpovertcp   23:54:37.798  Add     3   4 .       _tcp.local.          _smb   23:54:37.798  Add     3   4 .       _udp.local.          _net-assistant   23:54:37.798  Add     2   4 .       _tcp.local.          _eppc   ^C /pre  So yes, there is indeed an IPP print service (but no AirPrint one, which strikewould be marked by/strike stand out being tagged as Service Type of code_airprint._tcp/code in the list).  h3Second, browse for all present services of type "IPP":/h3  pre kp@zdv-wireless-43-219: dns-sd  -B  _ipp._tcp  local.    Browsing for _ipp._tcp.local.   DATE: ---Fri 20 May 2016---   23:54:47.782  ...STARTING...   Timestamp     A/R  Flags  if Domain  Service Type   Instance Name   23:54:47.783  Add      3   4 local.  _ipp._tcp.     Officejet6500donna @ mbp   23:54:47.783  Add      3   4 local.  _ipp._tcp.     raw2dir @ mbp   23:54:47.783  Add      2   4 local.  _ipp._tcp.     Officejet 6600 @ mbp   ^C /pre  Ok, one of the instance names is em"Officejet 6600 @ mbp"/em.  h3Third, lookup specific info about the printer named "Officejet 6600 @ mbp":/h3  pre kp@zdv-wireless-43-219: dns-sd  -L  "Officejet 6600 @ mbp"  _ipp._tcp  local.    Lookup Officejet 6600 @ mbp._ipp._tcp.local.   DATE: ---Fri 20 May 2016---   23:54:55.252  ...STARTING...   23:54:55.253  Officejet\0326600\032@\032mbp._ipp._tcp.local. can be reached at mbp2-2.local.:631 (interface 4)    txtvers=1 qtotal=1 rp=printers/Officejet_6600 ty=Unknown \     adminurl=https://mbp2-2.local.:631/printers/Officejet_6600 \      note=BÃ¼ro\ im\ Keller priority=0 product=\(Officejet\ 6600\ e-All-in-One\) \       pdl=application/octet-stream,application/pdf,application/postscript,image/jpeg,image/png,image/pwg-raster \        UUID=e7d11337-a440-3f2d-7168-b53de4325791 TLS=1.2 Color=T Scan=T \         printer-state=3 printer-type=0x480900E   ^C /pre  Half of the info you are looking for (hostname of the printer) is covered by the sentence em"Officejet\0326600\032@\032mbp._ipp._tcp.local. can be reached at mbp2-2.local.:631"/em  This gives the current (Bonjour-)hostname of node offering the looked-up print service.  h3Fourth, look up the IPv4 and IPv6 addresses for a given hostname:/h3  pre kp@zdv-wireless-43-219: dns-sd -Gv4v6 mbp2-2.local    DATE: ---Sat 21 May 2016---   0:12:41.025  ...STARTING...   Timestamp     A/R Flags if Hostname    Address                                      TTL   0:12:41.025  Add  3  4 mbp2-2.local.   FE80:0000:0000:0000:AEBC:32FF:FEAE:CAEB%en0  120   0:12:41.025  Add  3  4 mbp2-2.local.   FD00:0000:0000:0000:AEBC:32FF:FEAE:CAEB%  120   0:12:41.025  Add  2  4 mbp2-2.local.   192.168.177.20                               120   ^C /pre  hr  h2Summary/h2  strikeAssuming my strongemfirst/em/strong command had returned some code_airprint/code service available in my network, then my guess is that one of the returned lines would read:  precode00:00:00.000  Add     3   4 .       _tcp.local.          _airprint /code/pre  Thus, my strongemsecond/em/strong command would have to be:  precodekp@zdv-wireless-43-219:&gt; dns-sd  -B  _airprint._tcp  local. /code/pre  I assume this could return something like  precode200:00:00.000  Add    3   4 local.  _airprint._tcp.  Some AirPrinter @ somehost /code/pre  Then my strongemthird/em/strong command should read:  precodekp@zdv-wireless-43-219:&gt; dns-sd  -L  "Some AirPrinter @ somehost"  local. /code/pre  Which would return a line telling you em"... can be reached at somewhere.local.:1234/em". From which to derive the strongemfourth/em/strong command:  precodekp@zdv-wireless-43-219:&gt; dns-sd  -Gv4v6  somewhere.local.   /code/pre  hr  strongemCaveats:/em/strong The last part, about AirPrint service discovery may be wrong. It could be the case that AirPrint services announce themselves just as standard IPP services do. You have to find out yourself. strongemIf you do, please report back./em/strong/strike  hr  h2Update/h2  I've googled a bit for "code_airprint._tcp/code".  I didn't find a single instance of anybody who reported in some forum their output from codedns-sd -B/code listing this particular string.  However, there were lots + lots of code_airplay._tcp/code and code_ipp._tcp/code results. This means that "code_airprint._tcp/code" does not seem to exist, and AirPrint printers must be using a different signature to make themselves known to potential clients. However, we already know that all AirPrint services use IPP for communication with their clients, so they also strongemMUST/em/strong be making the code_ipp._tcp/code service type announcements.  Hence it is safe to conclude that...  ol li...all strongAirPrint devices will announce themselves as code_ipp._tcp/code/strong (not code_airprint._tcp/code). Also, it looks like.../li li...you can strongidentify AirPrint devices by looking for the codeTXT/code record of codeurf="$anything"/code/strong and strongcodepdl="$anything,image/urf"/code/strong./li /ol  To verify this, I checked with what the (fake) announcement from emdns-sd.org/em tells about its AirPrint (warning, it is not permanently on the Internet, sometimes it goes away for hours...). It does return this:  pre kp@zdv-wireless-43-219:  dns-sd -Z _ipp._tcp,_universal dns-sd.org.    Browsing for _ipp._tcp,_universal.dns-sd.org.   DATE: ---Sat 21 May 2016---    1:40:45.688  ...STARTING...    ; To direct clients to browse a different domain, substitute that domain in place of '@'   lb._dns-sd._udp                                 PTR     @    ; In the list of services below, the SRV records will typically reference dot-local Multicast DNS names.   ; When transferring this zone file data to your unicast DNS server, you'll need to replace those dot-local   ; names with the correct fully-qualified (unicast) domain name of the target host offering the service.    _ipp._tcp                                       PTR     Stuart's\032Home\032AirPrint\032Printer._ipp._tcp   Stuart's\032Home\032AirPrint\032Printer._ipp._tcp SRV     0 0 631 airprint.dns-sd.org. ; Replace with unicast FQDN of target host   Stuart's\032Home\032AirPrint\032Printer._ipp._tcp TXT     "txtvers=1" "qtotal=1" "rp=ipp/printer" \     "pdl=application/postscript,application/vnd.hp-PCL,application/vnd.hp-PCLXL,application/pdf,image/urf" \     "URF=CP99,W8,OB10,PQ3-4-5,ADOBERGB24,DEVRGB24,DEVW8,SRGB24,IS1-2-4,MT1-2-3-5-12,MT1-2-3-5-12,RS600" \     "ty=HP LaserJet 400 color M451nw" "product=(HP LaserJet 400 color M451nw)" \     "priority=10" "adminurl=http://www.dns-sd.org/ServerStaticSetup.html" \     "note=At Stuart's house" "Color=T" "Duplex=F" "Scan=F" ^C /pre  Indeed, "Stuart's Home AirPrint Printer" mentions "URF" in its TXT records.  So, to summarize the answer to your question em"How can I get the IP addresses of all AirPrint printers?"/em  ol liFirst, list all IPP printers./li liSecond, exclude these IPP printers which do strongemNOT/em/strong enumerate the two above mentioned emurf/em-entries in their TXT records./li /ol  hr  h2Verify my statements/h2  The following (minimal) command will announce a fake AirPrint device in your LAN (until you cancel the command with strongem^C/em/strong):  pre dns-sd                                                                   \                                                                                 -R "Minimal AirPrint Demo (dummy+fake printer fooling iPad clients)" \                    _ipp._tcp.,_universal                                                \                                                                   .                                                                    \                                                                                       631                                                                  \                                                                                     pdl="image/urf"                                                      \                                                                         URF="" /pre  Your iOS devices will now enumerate this printer amongst its auto-discovered AirPrint devices.  sub(BTW, you can announce the port as something different from 631 too -- the iOS clients will still identify it as an AirPrint device...)/sub  Now repeat this little experiment, just leave one of the two codeimage/urf/code or codeURF=""/code statements off your command:  ol liThe fake device will still appear as an IPP printer in the DNS-SD/Bonjour browse lists./li liBut iOS clients will only list as AirPrint-capable these (fake or real) devices with the "URF"-related entries./li /ol  <answer239235> subHere is another answer. It's shorter, and more direct to the point. However, I'll let the first answer stand on its own, since it may be useful for people who are exploring this topic./sub  hr  strongemCurrently, I only know an answer for Linux..../em/strong If I find a command for Mac + codedns-sd/code, I'll extend this answer.  On Linux, run this command:  pre kp@zdv-linux-003:  avahi-browse -rt _universal._sub._ipp._tcp    +  wlan1 IPv4 AirPrint Demo (Dummy Drucker)                 Internet Printer     local   =  wlan1 IPv4 AirPrint Demo (Dummy Drucker)                 Internet Printer     local      hostname = [zdv-linux-003]      address = [192.168.177.20]      port = [632]      txt = ["URF=V1.2,DM3,OF1-2-3-4,CP99,W8,OB10,PQ3-4-5,ADOBERGB24,DEVRGB24,DEVW8,SRGB24,IS1-2-4,MT1-2-3-5-12,RS600" \             "pdl=application/pdf,image/urf,image/jpeg,image/pwg-raster" \             "usb_CMD=" "usb_MDL=" "usb_MFG=" "Transparent=T" "TBCP=T" \             "Product=" "Staple=T" "Sort=T" "Punch=2" "PaperCustom=T" \             "PaperMax=isoC-A2" "Duplex=T" "Copies=T" "Color=T" \             "Collate=T" "Bind=T" "Fax=F" "Binary=T" "Transparent=T" \             "DUUID=12345678-9ABC-DEF0-1234-56789ABCDEF0" \             "UUID=533f7ac6-1c37-11e6-ac21-ffa8e4bdcbf9" "TLS=1.2" \             "printer-type=0x0480FFFC" "printer-state=3" \             "product=Generic PDF PPD" "priority=1" \             "adminurl=mailto:kurt.pfeifle@gmail.com" \             "kind=disc,label,large-format,postcard,receipt,roll,document,envelope,photo" \             "air=none" "air=username,password" "note3=" \             "note2=(totally dummy and fake device)" \             "note=Virtueller Drucker fÃ¼r Demos von IPP-Everywhere in Room 3a/3b" \             "ty=Kurt Pfeifle Handmade Model" "rp=printers/DummyAirPrint" \             "qtotal=1" "txtvers=1"] /pre  As you can see, the service type code_universal._sub._ipp._tcp/code will display AirPrint devices, and the code-r/code parameter will resolve it and reveal the IP address code192.168.177.20/code.  hr  <answer239367> subBefore you dive into the following answer:br Please make sure you've understood the comprehensive AirPrint explanations for the [AirPrint] tag info I've recently written./sub  hr  There is another tool which can identify AirPrint devices. It is the little known codeippfind/code utility, that ships as part of CUPS (on Debian: as part of the emcups-client/em package).  There is an codeippfind.exe/code utility available for Windows as well. It ships as part of the emIPP Everywhere Selfcertification Software Package/em which is available for download from the strongPrinter Working Group (PWG)/strong website here:  ul listronghttp://ftp.pwg.org/pub/pwg/tools/sw-ippeveselfcert10-20151110-windows.msi/strong. For it to actually work on Windows, you also need the following:/li listrongBonjour Print Services for Windows/strong/li /ul  So the following method works on Linux as well as on Mac OS X and Windows.  I'll show now step by step, how to work with it...  h2Most simple command finds all IPP printer URIs/h2  The most simple way to execute the utility is this:  precodeippfind /code/pre  On my current system, it returns:  pre   ipp://mbp2-2.local.:632/printers/DummyAirPrint   ipp://mbp2-3.local.:631/printers/Officejet6500eric   ipp://mbp2-4.local.:631/printers/Officejet_6500   ipp://mbp2-5.local.:631/printers/Officejet_6500_E709n   ipp://mbp2-1.local.:631/printers/Officejet_6600   ipp://mbp2-7.local.:633/printers/Officejet6500donna   ipp://mbp2-8.local.:631/printers/raw2dir /pre  This is a list of all IPP print services (including the AirPrint ones). Note how some of these do not use the default IPP port 631, but they are still discovered.  Because codeippfind/code didn't see any command line parameters, it silently used its default ones, and in reality this command did run:  precodeippfind _ipp._tcp --print /code/pre  h2Filter out the AirPrint devices/h2  To narrow down from emall/em IPP printers to only those which support AirPrint, we have to add the subtype em_universal/em to our query:  precode ippfind _ipp._tcp,_universal --print /code/pre  This leaves me with the following subset of the full list from above:  pre   ipp://mbp2-2.local.:632/printers/DummyAirPrint   ipp://mbp2-3.local.:631/printers/Officejet6500eric   ipp://mbp2-7.local.:633/printers/Officejet6500donna /pre  h2Get the host names for the IPP URIs/h2  codeippfind/code works similar as the classical codefind/code utility which searches for files, directories and other objects in the file system hierarchy, and therefor has a code--exec/code parameter, which can be used to run a command against each found item:  precode ippfind _ipp._tcp,_universal --exec echo '{service_hostname}' \; /code/pre  The command returns the host names for all the AirPrinters. It does not list the other, non-AirPrint IPP printers:  pre   mbp2-2.local.   mbp2-3.local.   mbp2-7.local. /pre  h2Find the IP addresses of all AirPrint devices/h2  Since from previous answers we already know that codedns-sd -G/code will return the IP addresses, we can execute this instead of the simple codeecho/code command from above:  pre ippfind _ipp._tcp,_universal --exec dns-sd -G v4 '{service_hostname}' \;      DATE: ---Tue 24 May 2016---      3:39:18.024  ...STARTING...     Timestamp     A/R Flags if Hostname         Address          TTL      3:39:18.028  Add     2  4 mbp2-2.local.    192.168.177.20   120      3:39:18.028  Add     2  4 mbp2-3.local.    192.168.177.28   120      3:39:18.028  Add     2  4 mbp2-7.local.    192.168.177.31   120 ^C /pre  Voila!, a list of IP addresses alongside the fully qualified (Bonjour) host names....  You could of course also run something like:  pre ippfind _ipp._tcp,_universal --exec echo  '{service_hostname}' \;  \     | while read line; do ping -c 1 "$line" ; done                 \     | grep PING  PING mbp2-2.local (192.168.177.20): 56 data bytes PING mbp2-3.local (192.168.177.28): 56 data bytes PING mbp2-7.local (192.168.177.31): 56 data bytes /pre  (for example, if codedns-sd/code is not readily available, like on Windows), and it will also report the IP addresses (simply because codeping/code needed and resolved them and also reports them).  hr  sub(I admit: I did not test this with real AirPrint devices -- I simply have none available. I did it with simulated ones. But I would be surprised if this didn't work as well in the environment the OP works with...)/sub  <comment206563> try the who is on my wifi app <comment206587> Try Bonjour Browser - http://www.tildesoft.com/. Are your printers from a single manufacturer, and if so which one? We've a number of Epson AIO units around campus and each time we deploy a new unit we record the serial and location. We then use Epson's EpsonNet Config to give printers Bonjour names and locations, all relatively painless. Unfortunately any large deployment is going to cause some initial unavoidable pain but this can be mitigated somewhat if the manufacturer has admin/config tools available. <comment206988> Nearly all HP here. No consistency in models or even model lines though, we have things varying from home printers to small office sized. Bonjour browser seems to work, I've had a look at that and it's showing IPs for tons of printers. <comment293458> Out of curiosity...what good is a list if you don't know where they are deployed, what their SN# is, etc?  Are these printers getting static IP address? <comment293526> There are more printers in the *Add Printer* dialog than you see with `dns-sd -Z` for this reason: every AirPrint-capable printer is also IPP-capable. But not every IPP-capable printer is AirPrint-capable (or has AirPrint disabled). For more details, see my answer.