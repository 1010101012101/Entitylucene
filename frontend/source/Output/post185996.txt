AppleScripting QuickTime Pro 7 to export .png files <body> How can I use AppleScript to save .png files from the start and end of .mp4 files with QuickTime? This is something I am doing a lot of and it would be good to automate it. I have some scripting experience but not a lot.  I am using QuickTime Pro 7 version 7.6.6. I am using the export command to get still frames that are the same size as my video file.  precode (*  Disclaimer: IMPORTANT: This Apple software is supplied to you by Apple Inc. ("Apple") in consideration of your agreement to the following terms, and your use, installation, modification or redistribution of this Apple software constitutes acceptance of these terms. If you do not agree with these terms, please do not use, install, modify or redistribute this Apple software.  In consideration of your agreement to abide by the following terms, and subject to these terms, Apple grants you a personal, non-exclusive license, under Apple's copyrights in this original Apple software ( the "Apple Software" ), to use, reproduce, modify and redistribute the Apple Software, with or without modifications, in source and / or binary forms; provided that if you redistribute the Apple Software in its entirety and without modifications, you must retain this notice and the following text and disclaimers in all such redistributions of the Apple Software. Neither the name, trademarks, service marks or logos of Apple Inc. may be used to endorse or promote products derived from the Apple Software without specific prior written permission from Apple. Except as expressly stated in this notice, no other rights or licenses, express or implied, are granted by Apple herein, including but not limited to any patent rights that may be infringed by your derivative works or by other works in which the Apple Software may be incorporated.  The Apple Software is provided by Apple on an "AS IS" basis. APPLE MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF NON - INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS.  IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES ( INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION ) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND / OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT ( INCLUDING NEGLIGENCE ), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Copyright ( C ) 2011 Apple Inc. All Rights Reserved. *)  (* INSTRUCTIONS This droplet is designed to process one or more files, or folders containing files, whose icons are dragged onto the droplet icon. The droplet processes recursively, and will examine the contents of every dragged-on folder, and every sub-folder within those folders, to find and process any files who kind matches the indicated types. You can set the droplet to process only files of a specific type, such as images, by adding the appropriate data types, name extensions, and type IDs to the values of the properties listed at the top of this script. Place your script code for processing the found files, within the process_file() sub-routine at the bottom of this script. *)   (* TO FILTER FOR SPECIFIC FILES, ENTER THE APPROPRIATE DATA IN THE FOLLOWING LISTS: *) property type_list : {"M4V ", "mpg4"} -- e.g.: {"PICT", "JPEG", "TIFF", "GIFf"}  property extension_list : {"mp4", "m4v", "mpg"} -- e.g.: {"txt", "text", "jpg", "jpeg"}, NOT: {".txt", ".text", ".jpg", ".jpeg"} property typeIDs_list : {"public.mpeg-4"} -- e.g.: {"public.jpeg", "public.tiff", "public.png"}  (* IMAGE FILTERING *) (* -- QuickTime supported image formats property type_list : {"JPEG", "TIFF", "PNGf", "8BPS", "BMPf", "GIFf", "PDF ", "PICT"} property extension_list : {"jpg", "jpeg", "tif", "tiff", "png", "psd", "bmp", "gif", "jp2", "pdf", "pict", "pct", "sgi", "tga"} property typeIDs_list : {"public.jpeg", "public.tiff", "public.png", "com.adobe.photoshop-image", "com.microsoft.bmp", "com.compuserve.gif", "public.jpeg-2000", "com.adobe.pdf", "com.apple.pict", "com.sgi.sgi-image", "com.truevision.tga-image"} *)  (* MOVIE FILTERING *) (* -- iDVD supported movie formats property type_list : {"dvc!", "MooV", "M4V ", "mpg4"} property extension_list : {"mov", "mp4", "dv", "m4v","mpg"} property typeIDs_list : {"public.mpeg-4", "com.apple.quicktime-movie"} *)  -- This droplet processes files dropped onto the applet  on open these_items     repeat with i from 1 to the count of these_items         set this_item to item i of these_items         set the item_info to info for this_item         if folder of the item_info is true then             process_folder(this_item)         else             try                 set this_extension to the name extension of item_info             on error                 set this_extension to ""             end try             try                 set this_filetype to the file type of item_info             on error                 set this_filetype to ""             end try             try                 set this_typeID to the type identifier of item_info             on error                 set this_typeID to ""             end try             if (folder of the item_info is false) and (package folder of the item_info is false) and (alias of the item_info is false) and ((this_filetype is in the type_list) or (this_extension is in the extension_list) or (this_typeID is in typeIDs_list)) then                 process_file(this_item)             end if         end if     end repeat end open  -- this sub-routine processes folders  on process_folder(this_folder)      tell application "Finder" to set f to name of this_folder     log "Processing folder: " &amp; f      set these_items to list folder this_folder without invisibles     repeat with i from 1 to the count of these_items         set this_item to alias ((this_folder as Unicode text) &amp; (item i of these_items))         set the item_info to info for this_item         if folder of the item_info is true then             process_folder(this_item)         else             try                 set this_extension to the name extension of item_info             on error                 set this_extension to ""             end try             try                 set this_filetype to the file type of item_info             on error                 set this_filetype to ""             end try             try                 set this_typeID to the type identifier of item_info             on error                 set this_typeID to ""             end try             if (folder of the item_info is false) and (package folder of the item_info is false) and (alias of the item_info is false) and ((this_filetype is in the type_list) or (this_extension is in the extension_list) or (this_typeID is in typeIDs_list)) then                 process_file(this_item)             end if         end if     end repeat end process_folder  -- this sub-routine processes files  on process_file(this_item)     -- NOTE that during execution, the variable this_item contains a file reference in alias format to the item passed into this sub-routine     -- FILE PROCESSING STATEMENTS GO HERE     tell application "QuickTime Player 7"         set play movie from beginning when opened to false          open this_item          tell front document              # Remove extension from filename             set n to (this_item as string)             set n to text 1 thru ((offset of "." in n) - 1) of n              # Use .png since it will be overwritten later on...             set xFileStart to n &amp; "_start.png"             set xFileEnd to n &amp; "_end.png"              # Positions (in seconds) in video to stop and take frames             set sPos to 0             set ePos to 0              # Move for start frame             set current time to (time scale * sPos)             export to xFileStart as BMP using default settings with replacing              # Move for end frame             set current time to (duration - (time scale * ePos))             export to xFileEnd as BMP using default settings with replacing              close         end tell          # Do the actual conversion to PNG         tell application "Image Events"             set bmpFile to open file xFileStart             save bmpFile as PNG             set bmpFileEnd to open file xFileEnd             save bmpFile as PNG         end tell      end tell end process_file /code/pre  <answer186387> Here is my script to export to PNG written for Snow Leopard. You can adjust to suit your needs easily enough...  hr  EDIT:  Here is your code incorporating the original code I posted. This works as you described you wanted the applet to work.   precodeproperty type_list : {"M4V ", "mpg4"} -- e.g.: {"PICT", "JPEG", "TIFF", "GIFf"}  property extension_list : {"mp4", "m4v", "mpg"} -- e.g.: {"txt", "text", "jpg", "jpeg"}, NOT: {".txt", ".text", ".jpg", ".jpeg"} property typeIDs_list : {"public.mpeg-4"} -- e.g.: {"public.jpeg", "public.tiff", "public.png"}  on open these_items     repeat with i from 1 to the count of these_items         set this_item to item i of these_items         set the item_info to info for this_item         if folder of the item_info is true then             process_folder(this_item)         else             try                 set this_extension to the name extension of item_info             on error                 set this_extension to ""             end try             try                 set this_filetype to the file type of item_info             on error                 set this_filetype to ""             end try             try                 set this_typeID to the type identifier of item_info             on error                 set this_typeID to ""             end try              if (folder of the item_info is false) and (package folder of the item_info is false) and (alias of the item_info is false) and ((this_filetype is in the type_list) or (this_extension is in the extension_list) or (this_typeID is in typeIDs_list)) then                 process_file(this_item)             end if         end if     end repeat end open  -- this sub-routine processes folders  on process_folder(this_folder)      # Debug     tell application "Finder" to set f to name of this_folder     log "Processing folder: " &amp; f      set these_items to list folder this_folder without invisibles     repeat with i from 1 to the count of these_items         set this_item to alias ((this_folder as Unicode text) &amp; (item i of these_items))         set the item_info to info for this_item         if folder of the item_info is true then             process_folder(this_item)         else             try                 set this_extension to the name extension of item_info             on error                 set this_extension to ""             end try             try                 set this_filetype to the file type of item_info             on error                 set this_filetype to ""             end try             try                 set this_typeID to the type identifier of item_info             on error                 set this_typeID to ""             end try              if (folder of the item_info is false) and (package folder of the item_info is false) and (alias of the item_info is false) and ((this_filetype is in the type_list) or (this_extension is in the extension_list) or (this_typeID is in typeIDs_list)) then                 process_file(this_item)             end if         end if     end repeat end process_folder  -- this sub-routine processes files  on process_file(this_item)     tell application "QuickTime Player 7"         set play movie from beginning when opened to false          open this_item          tell front document              # Remove extension from filename             set n to (this_item as string)             set n to text 1 thru ((offset of "." in n) - 1) of n              # Use .png since it will be overwritten later on...             set xFileStart to n &amp; "_start.png"             set xFileEnd to n &amp; "_end.png"              # Positions (in seconds) in video to stop and take frames             set sPos to 1             set ePos to 1              # Move for start frame             set current time to (time scale * sPos)             export to xFileStart as BMP using default settings with replacing              # Move for end frame             set current time to (duration - (time scale * ePos))             export to xFileEnd as BMP using default settings with replacing              close         end tell          # Do the actual conversion to PNG         tell application "Image Events"             set bmpFile to open file xFileStart             save bmpFile as PNG             set bmpFileEnd to open file xFileEnd             save bmpFile as PNG         end tell      end tell end process_file /code/pre  <answer186859> The Applescript you are using for Quicktime is incorrect and you are asking it to do command that are from the standard additions. I strongpath to/strong  QuickTime will not understand this and fail. Similarly:  precodeset frameOne of this_item to track (beginning) set frameEnd of this_item to track (end) /code/pre  QT will not know what strongbeginning/strong and strongend/strong are  You should read the Quicktime 7 dictionary  to understand it's syntax.  In Script Editor go to the Window-strongLibrary/strong menu  This will bring up the Applications Dictionary Library window.    I doubt QT7 is listed, so go to the finder and locate QT7. I t is normally in the strong/Applications/Utilities/strong folder.  Drag it onto the Applications Dictionary Library window.  Then Double click it.  A dictionary will open up.Read through it to understand what QT7 can understand.  Now the Script.  I have not touched any of you file checking.   What I have changed is the  strongprocess_file()/strong handler's content. And add some Objective - C to simplify getting the file path and file name.  Don't worry too much about the Objective -c stuff. You can still use conventional Applescript that you understand if you want just replace it.  The important parts are:  Setting the position of the play head and the exporting the movie. Because we are using BMP it will only export the current frame.  Notice I set the start to 0 and the end to the full duration of the movie - 20.  From what I under stand the measurements are in milliseconds. So having -20 of the end should not make much difference to what you capture. But I do this because one of my Test videos had a problem getting the last frame at the full duration. I got an error saying invalid frame. Changing it to slightly before solved the issue.  I also use a bit of command line to convert the bmp to a png.  Again to simplify things ( for me at least) you can use you own method here if you want.  precodeuse scripting additions use framework "Foundation"    (* TO FILTER FOR SPECIFIC FILES, ENTER THE APPROPRIATE DATA IN THE FOLLOWING LISTS: *) property type_list : {"M4V ", "mpg4"} -- e.g.: {"PICT", "JPEG", "TIFF", "GIFf"}  property extension_list : {"mp4", "m4v", "mpg"} -- e.g.: {"txt", "text", "jpg", "jpeg"}, NOT: {".txt", ".text", ".jpg", ".jpeg"} property typeIDs_list : {"public.mpeg-4"} -- e.g.: {"public.jpeg", "public.tiff", "public.png"}   -- This droplet processes files dropped onto the applet  on open these_items     repeat with i from 1 to the count of these_items         set this_item to item i of these_items         set the item_info to info for this_item         if folder of the item_info is true then             process_folder(this_item)         else             try                 set this_extension to the name extension of item_info             on error                 set this_extension to ""             end try             try                 set this_filetype to the file type of item_info             on error                 set this_filetype to ""             end try             try                 set this_typeID to the type identifier of item_info             on error                 set this_typeID to ""             end try             if (folder of the item_info is false) and (package folder of the item_info is false) and (alias of the item_info is false) and ((this_filetype is in the type_list) or (this_extension is in the extension_list) or (this_typeID is in typeIDs_list)) then                 process_file(this_item)             end if         end if     end repeat end open  -- this sub-routine processes folders  on process_folder(this_folder)     set these_items to list folder this_folder without invisibles     repeat with i from 1 to the count of these_items         set this_item to alias ((this_folder as Unicode text) &amp; (item i of these_items))         set the item_info to info for this_item         if folder of the item_info is true then             process_folder(this_item)         else             try                 set this_extension to the name extension of item_info             on error                 set this_extension to ""             end try             try                 set this_filetype to the file type of item_info             on error                 set this_filetype to ""             end try             try                 set this_typeID to the type identifier of item_info             on error                 set this_typeID to ""             end try             if (folder of the item_info is false) and (package folder of the item_info is false) and (alias of the item_info is false) and ((this_filetype is in the type_list) or (this_extension is in the extension_list) or (this_typeID is in typeIDs_list)) then                 process_file(this_item)             end if         end if     end repeat end process_folder  -- this sub-routine processes files  on process_file(this_item)     tell application "QuickTime Player 7"         set thisDoc to open this_item -- This will open the file in Quicktime         tell thisDoc             set xFolder to its path             set duro to its duration          end tell      end tell      --&gt;&gt; Objective - c to get the name and file path     set xFolder to current application's NSString's stringWithString:(xFolder as string)      set file_path to ((xFolder's stringByDeletingLastPathComponent) as string) &amp; "/"       set file_name to xFolder's lastPathComponent      set file_name to (file_name's stringByDeletingPathExtension) as string     --&lt;&lt;       tell application "QuickTime Player 7"         tell thisDoc             set current time to 0             set xFileStart to file_path &amp; file_name &amp; "_start.png"              export track 1 to xFileStart as BMP using default settings with replacing             delay 1             do shell script ("sips -s format png " &amp; (quoted form of xFileStart)) -- convert to png             set current time to (duro - 20)             set xFileEnd to file_path &amp; file_name &amp; "_end.png"             export track 1 to xFileEnd as BMP using default settings with replacing             delay 1             do shell script ("sips -s format png " &amp; (quoted form of xFileEnd)) -- convert to png         end tell         close thisDoc     end tell end process_file /code/pre  <comment219464> What version of Quicktime? I'm assuming 7.x since you said "pro" in the title, but please clarify. Also, are you actually using the File  Export method, are you doing a screenshot (Command-Option-4) or are you doing Edit  Copy and then pasting into Preview or an image editor? <comment220459> I have included my code in the post. I am trying to avoid any interaction other then dropping the file onto the droplet. I think I am close to where I need to be but at this point it is still not saving out the png files and I am not sure why. <comment220468> Thank you for this. I have added your code to my script. I have modified to to do what I think it should be doing but I am still not getting any file output. <comment220528> Any errors showing in Events/Replies pane of the Applescript Editor? <comment220634> It actually runs without generating any errors but it also is not generating any .png's <comment220660> Well, you copied by code but did not make enough changes. My code was meant to run while QT is already playing... I've modified your code how I think you should change it and I'll update my answer. <comment220706> Thank you Vic. I was getting frames from 1 second in from the beginning and end so is set the position in seconds to 0 and that gave me the starting and ending frames. I really appreciate your help. I have updated the script in the question to reflect the changes. I am trying my hand more and more at apple script and your scripts have helped me tremendously to understand better as I have worked through this. Thanks again. <comment220711> I incorporated this script as well because I am trying to get a handle on scripting. For some reason this script is twice as slow as the one below. Is that because of the scripting additions or the objective c calls? Other then that this worked well and did what I was trying to do. It is appreciated. <comment220713> This script now works and saves the start and end of a .mp4 file as .png's with the words start and end appended to the file name.