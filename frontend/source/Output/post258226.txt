Why /usr/libexec/java_home pointing to jdk9-ea directory if I do not change jdk9-ea directory name <body> I searched Google about code/usr/libexec/java_home/code, the most results are talking about setting environment variable codeJAVA_HOME/code using this executable. But in fact my codeJAVA_HOME/code setting in code.zshrc/code file was not applied to some applications as it expected to be. Because I install JDK9 Early Access, so the executing result of code/usr/libexec/java_home/code was always pointing to my jdk9 JVM directory and some applications just ignore my correct codeJAVA_HOME/code in code.zshrc/code and use jdk9 instead. So these applications always crash because of using jdk9. And this problem can be solved by changing jdk9 directory name and let jdk8 be the first one when I executing codels -l /Library/Java/JavaVirtualMachines/code.  So I am pretty curious about the implementation details of code/usr/libexec/java_home/code. I searched about it on some BSD distributions and I didn't find it. Then I searched Darwin open source project and no results too. So I start doubting if I can find the source code of code/usr/libexec/java_home/code.  I opened code/usr/libexec/java_home/code in binary view and find that it is a Java class file because of the beginning bytes 0xCAFEBABE. Then I recompiled it and failed. So code/usr/libexec/java_home/code start with Java class file magic number but it is not recompilable. Actually the file type of code/usr/libexec/java_home/code is (strongUpdate: It's my misunderstanding. Mach-O executable file use 0xCAFEBABE as well/strong)  precode$ file /usr/libexec/java_home /usr/libexec/java_home: Mach-O universal binary with 2 architectures: [i386: Mach-O executable i386] [x86_64: Mach-O 64-bit executable x86_64] /usr/libexec/java_home (for architecture i386): Mach-O executable i386 /usr/libexec/java_home (for architecture x86_64):   Mach-O 64-bit executable x86_64 /code/pre  Does anyone known more implementation details about this executable file code/usr/libexec/java_home/code? And why it gives out the jdk9's location if I don't change the jdk9's directory name.  <comment322774> IMO some parts of your question are off-topic (i.e. the implementation details). Please rephrase your question to fit to the rules outlined in the [help center](http://apple.stackexchange.com/help/on-topic). <comment322778> @klanomath I have changed the title of this question with a more explicit one.