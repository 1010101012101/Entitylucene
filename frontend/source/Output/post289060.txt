Setting variables in environment.plist <body> I've been trying to come to terms with how to set environment variables needed by launched applications in Sierra, but I'm puzzled.  Following various bits of advice found online, I created a file code~/Library/LaunchAgents/environment.plist/code.  It looks like this:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;   &lt;key&gt;Label&lt;/key&gt;   &lt;string&gt;my.startup&lt;/string&gt;   &lt;key&gt;ProgramArguments&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;sh&lt;/string&gt;     &lt;string&gt;-c&lt;/string&gt;     &lt;string&gt;       launchctl setenv FOO foo       launchctl setenv BAR bar       &lt;!-- ... --&gt;       launchctl setenv PATH /usr/local/opt/scala210/bin:/usr/local/bin:$PATH     &lt;/string&gt;   &lt;/array&gt;   &lt;key&gt;RunAtLoad&lt;/key&gt;   &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  From my experimenting, it appears that nothing less than a system reboot will make changes to this file take effect.  I did find mentions of this command that will supposedly do the trick:  precode$ launchctl load ~/Library/LaunchAgents/environment.plist /code/pre  ...but when I run it I get this response:  precode[my home dir]/Library/LaunchAgents/environment.plist: service already loaded /code/pre  In the documentation for codelaunchctl/code I see mention of a code-F/code flag that seems relevant:  precodeForce the loading or unloading of the plist. Ignore the Disabled key. /code/pre  However, it makes no difference if I include this switch; I get the same output and the file is ignored.  So anyway, rebooting does make the changes take effect (maybe logging out and back in also would? I didn't check), but with one exception: the codePATH/code variable.  That variable just stayed the same no matter how I changed it, and across reboots.  Eventually I stumbled across a Stack Exchange answer that offhandedly warned that changing codePATH/code in this way would be ignored until the Dock was restarted with the codekillall Dock/code command.  So I did that, and rebooted, and strongfinally/strong I had my codePATH/code set correctly.  So, anyway, I suppose my main question would be: Is there any more hassle-free way to update environment variables than the way I outline above?  And a subsidiary question might be: Does the special handling of codePATH/code make any sense at all?  <answer289062> ul liUnload the launch agent:  precodelaunchctl unload ~/Library/LaunchAgents/environment.plist /code/pre/li liModify the plist/env settings/li liLoad the launch agent again:  precodelaunchctl load ~/Library/LaunchAgents/environment.plist /code/pre/li /ul  hr  You have to quit and relaunch Terminal to get the new value of the variable in the Terminal shell.  I recommend to use something like  precode&lt;string&gt;launchctl setenv FOO foo; launchctl setenv BAR bar; launchctl setenv SUP sup&lt;/string&gt; /code/pre  <comment365259> This doesn't work.  I launched Terminal; typed `echo $FOO`; saw `foo`; and exited Terminal.  Then I unloaded `environment.plist` with your `launchctl unload ...` command above, changed the command in that file to `launchctl setenv FOO bar`, saved the file, and loaded the file with your `launchctl load ...` command.  Finally I launched Terminal again, typed `echo $FOO`, and still saw the output `foo`.  ...Ah, if I kill and restart the dock with `killall Dock`, then launch Terminal again, I finally see the updated value of `FOO`.  Bloody hell, what a pain. <comment365268> @Sean Now tested in Sierra and it also works. No need to reboot, or kill an app (except Terminal which has to be relaunched). I'll try to add a work-around or a better solution...