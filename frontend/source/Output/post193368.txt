What is the "rootless" feature in El Capitan, really? <body> I have just learned about the "Rootless" feature in El Capitan, and I am hearing things like "There is no root user", "Nothing can modify code/System/code" and "The world will end because we can't get root".  What is the "Rootless" feature of El Capitan at a technical level? What does it actually mean for the user experience and the developer experience? Will codesudo -s/code still work, and, if so, how will the experience of using a shell as coderoot/code change?  <answer193379> First: the name "rootless" is misleading, since there's still a root account, and you can still access it (the official name, "System Integrity Protection", is more accurate). What it really does is limit the power of the root account, so that even if you become root, you don't have full control over the system. Essentially, the idea is that it's too easy for malware to get root access (e.g. by presenting an auth dialog to the user, which will cause the user to reflexively enter the admin password). SIP adds another layer of protection, which malware can't penetrate even if it gets root. The bad part of this, of course, it that it must also apply to things you're doing intentionally. But the restrictions it places on root aren't that bad; they don't prevent most "normal" system customization.  Here's what it restricts, even from root:  ul liYou can't modify anything in code/System/code, code/bin/code, code/sbin/code, or code/usr/code (except code/usr/local/code); or any of the built-in apps and utilities. Only Installer and software update can modify these areas, and even they only do it when installing Apple-signed packages. But since normal OS X-style customizations go in code/Library/code (or code~/Library/code, or code/Applications/code), and unix-style customizations (e.g. Homebrew) go in code/usr/local/code (or sometimes code/etc/code or code/opt/code), this shouldn't be a big deal. It also prevents block-level writes to the startup disk, so you can't bypass it that way.  The full list of restricted directories (and exceptions like code/usr/local/code and a few others) is in code/System/Library/Sandbox/rootless.conf/code. Of course, this file is itself in a restricted area.  When you upgrade to El Capitan, it moves any "unauthorized" files from restricted areas to code/Library/SystemMigration/History/Migration-(some UUID)/QuarantineRoot//code./li liYou can't attach to system processes (e.g. those running from those system locations) for things like debugging (or changing what dynamic libraries they load, or some other things). Again, not too much of a big deal; developers can still debug their own programs.  This does block some significant things like injecting code into the built-in Apple apps (notably the Finder). It also means that codedtrace/code-based tools for system monitoring (e.g. codeopensnoop/code) will not be able to monitor &amp; report on many system processes./li liYou can't load kernel extensions (kexts) unless they're properly signed (i.e. by Apple or an Apple-approved developer). Note that this replaces the old system for enforcing kext signing (and the old ways of bypassing it). But since v10.10.4 Apple has had a way to enable trim support for third-party SSDs, the #1 reason to use unsigned kexts has gone away./li /ul  If you don't want these restrictions -- either because you want to modify your system beyond what this allows, or because you're developing &amp; debugging something like kexts that aren't practical under these restrictions, you can turn SIP off. Currently this requires rebooting into recovery mode and running the command codecsrutil disable/code (and you can similarly re-enable it with codecsrutil enable/code).  But please stop and think before disabling SIP, even temporarily: do you really need to disable it, or is there a better (SIP-compliant) way to do what you want? Do you really need to modify something in code/System/Library/code or code/bin/code or whatever, or could it go in a better place like code/Library/code or code/usr/local/bin/code etc? SIP may "feel" constraining if you aren't used to it, and there are some legitimate reasons to disable it, but a lot of what it enforces it really just best practice anyway.  References and further info: WWDC presentation on "Security and Your Apps", a good explanation by Eldad Eilam on quora.com, the Ars Technica review of El Capitan, and an Apple support article on SIP, and a deep dive by Rich Trouton (who also posted an answer to this question).  <answer208185> For me, it means DTrace no longer works.  DTrace is similar to ptrace/strace in Linux, in that it allows you to see what a process is saying to the kernel. Every time a process wants to open a file, write a file, or open a port, etc, it needs to ask the kernel. In Linux, this monitoring process happens outside of the kernel in "userland", and thus permissions are quite fine-grained. A user can monitor their own applications (to fix bugs, find memory leaks, etc) but would need to be root to monitor another user's process.  DTrace on OSX however works at the kernel level, making it much more performant and powerful, however it requires root access to add its probes into the kernel and thus do anything. A user cannot trace their own processes without being root, but as root they can not only watch their own processes, but in fact ALL processes on the system simultaneously. For example, you can watch a file (with iosnoop) and see which process reads it. This is one of the most useful features ever for detecting malware. Because the kernel also deals with network IO, the same is true there. Wireshark detects unusual network activity, DTrace tells you the process sending the data, even if its as embedded into the system as the kernel itself.  As of El Capitan however, Apple has deliberately prevented DTrace from working - as in it has been specifically targeted and singled out as something SIP restricts. Why would they do this? Well, previously Apple modified their kernel and DTrace to allow some processes to opt-out of being monitored via DTrace (which upset a lot of security researchers at the time as some processes were now off limits even as root - include malware). Their reason for this was to protect DRM in apps like iTunes since theoretically someone could DTrace and grab un-DRM'd data out of the processes' memory.  However, there was an important work-around that allowed the researchers to keep doing their jobs, and that was to modify the kernel to ignore this opt-out flag, so DTrace could still be used on these processes. This was actually really great because programs trying to evade detection where now lit-up with this no-DTrace flag. Anything Apple or the bad guys wanted to hide was now in plain sight...  But it doesn't work now, so how does this affect you? Well, it will affect you both directly and indirectly. Directly, it will limit your ability to monitor your system. A large number of low-level system administration and monitoring tools (which higher-level tools build upon) will no longer work. The indirect effect however will be much larger - security professionals rely on deep system access to detect the worst kinds of threats. We simply cannot do that any more. It is critical when analysing malware that it doesn't know it's running in a debugger or honeypot. Disabling SIP tells all software, from both the bad guys and Apple, that this system is being watched. No more watching the watchers. If SIP was about security they could have educated users about root - instead they removed it. Ultimately this means that Apple has replaced the 'be all and end all' security barrier of the root password, with the 'be all and end all' SIP protection mechanism. Or if your any good at social engineering, a root password with a reboot...  There's also this: img src="https://i.stack.imgur.com/bZ7IX.png" alt="enter image description here"  <answer209705> System Integrity Protection (SIP) is an overall security policy with the goal of preventing system files and processes from being modified by third parties. To achieve this, it has the following concepts:  ul liFile system protection/li liKernel extension protection/li liRuntime protection/li /ul  strongFile system protection/strong  SIP prevents parties other than Apple from adding, deleting or modifying directories and files stored in certain directories:  precode/bin /sbin /usr /System /code/pre  Apple has indicated that the following directories are available for developers to access:  precode/usr/local /Applications /Library ~/Library /code/pre  All directories in code/usr/code except for code/usr/local/code are protected by SIP.  It is possible to add, remove or change SIP-protected files and directories via an installer package which is signed by Apple's own certificate authority. This allows Apple to make changes to SIP-protected parts of the OS without needing to change the existing SIP protections.   The certificate authority in question is reserved by Apple for their own use; Developer ID-signed installer packages are not able to alter SIP-protected files or directories.  To define which directories are protected, Apple has currently defined two configuration files on the filesystem. The primary one is found at the location below:  precode/System/Library/Sandbox/rootless.conf /code/pre  where coderootless.conf/code lists all the applications and the top-level of directories which SIP is protecting.  img src="https://i.stack.imgur.com/75oc2.png" alt="enter image description here"  strongApplications/strong  SIP is protecting the core apps which OS X installs into Applications and Applications Utilities. This means it will no longer be possible to delete the applications which OS X installs, even from the command line when using root privileges.  img src="https://i.stack.imgur.com/2gOMOm.png" alt="enter image description here"  img src="https://i.stack.imgur.com/9GYgqm.png" alt="enter image description here"  strongDirectories/strong  SIP is also protecting a number of directories and symlinks outside of code/Applications/code and the top level of those directories are also listed in coderootless.conf/code.   img src="https://i.stack.imgur.com/Fh7AE.png" alt="enter image description here"  In addition to protections, Apple has also defined some exceptions to SIP's protection in the rootless.conf file, and those exceptions are marked with asterixes. These exemptions from SIP's protection mean that it is possible to add, remove or change files and directories within those locations.  img src="https://i.stack.imgur.com/1v4Xs.png" alt="enter image description here"  Among those exceptions are the following:  ul licode/System/Library/User Template/code - where OS X stores the template directories it uses when creating home folders for new accounts./li licode/usr/libexec/cups/code - where OS X stores printer configuration information/li /ul  Apple considers this file theirs and that any third parties' changes to it will be overwritten by Apple.  To see which files have been protected by SIP, use the codels/code command with dash capital O in Terminal:  precodels -O /code/pre  SIP-protected files will be labeled as strongrestricted/strong.  img src="https://i.stack.imgur.com/gKopM.png" alt="enter image description here"  One important think to know is that even if a symlink is protected by SIP, that does not necessarily mean that the directory they're linking to is being protected by SIP. At the root level of an OS X El Capitan boot drive, there are several SIP-protected symlinks pointing to directories stored inside the root-level directory named codeprivate/code.  However, when the contents of the codeprivate/code directory are examined, the directories which those symlinks point to are not protected by SIP and both they and their contents can be moved, edited or changed by processes using root privileges.  img src="https://i.stack.imgur.com/mjksi.png" alt="enter image description here"  In addition to the list of SIP exceptions which Apple has set in coderootless.conf/code, there is a second list of SIP exceptions. This list includes a number of directories and application names for third-party products. Similar to coderootless.conf/code, this exclusion list is Apple's and any third parties' changes to it will be overwritten by Apple.  precode/System/Library/Sandbox/Compatibility.bundle/Contents/Resources/paths /code/pre  strongRuntime protection/strong  SIP's protections are not limited to protecting the system from filesystem changes. There are also system calls which are now restricted in their functionality.  ul litask_for_pid() / processor_set_tasks() fail with EPERM/li liMach special ports are reset on exec(2)/li lidyld environment variables are ignored/li liDTrace probes unavailable/li /ul  However, SIP does not block inspection by the developer of their own applications while they're being developed. Xcode's tools will continue to allow apps to be inspected and debugged during the development process.  For more details on this, I'd recommend taking a look at Apple's developer documentation for SIP.  strongKernel extension protection/strong  SIP blocks installation of unsigned kernel extensions. In order to install a kernel extension on OS X El Capitan with SIP enabled, a kernel extension must:  ol liBe signed with a strongDeveloper ID for Signing Kexts/strong certificate/li liInstall into strong/Library/Extensions/strong/li /ol  If installing an unsigned kernel extension, SIP will need to be disabled first.  For more information on managing SIP, please take a look at the link below:  System Integrity Protection – Adding another layer to Apple’s security model  <comment230484> Nice, thanks. I asked this question because I was about to link to that quora article on another Stack Exchange question and then realized that was not the correct move ;-) <comment230485> ...Also this totally makes me want to write a `kext` or something to allow myself to create a binary which I can run in the command line to return to unrestricted access! <comment242476> "What does it actually mean for the user experience and the developer experience?"  I've been running the beta since available, and this is the first I've heard of it. `sudo` and password prompting have worked as normal/previously/expected. So, probably the answer is "most of the time you won't notice; when you do, you'll notice hard." <comment251114> I wonder why you don't just disable SIP if you are keen on DTracing certain programs. <comment251290> *You cant even check, for example, if disk encryption is actually working on your machine, since decryption is done by the kernel and theres now no way around that* So I can't, for example, run `dd if=/dev/disk0 count=2000 | strings`? This seems to contradict the other answer <comment251291> Also, I have downvoted this answer as it doesn't answer the question, namely: **What is the "Rootless" feature of El Capitan at a technical level? Will sudo -s still work, and, if so, how will the experience of using a shell as root change?**. This answer seems to talk only about DTrace <comment251806> I think the answer speaks plainly and precisely to a good part of the question, which is how the experience of using a shell as root will change. Sudo is now pseudo sudo. A layer of architecture has, in fact, been added. Seems relevant to me. And to this man's livelihood. Why down-vote that? <comment252918> Basically you and your users have to disable SIP which will result in the same level of protection as everyone had with Mavericks, and the ability to use dtrace etc as before. Unless Apple decides to remove the ability to disable SIP in future releases I don't see why this should be a problem. OTOH it adds a safety net for 99% of the users out there. <comment252939> What do you want me to see there? The system behaves strange while running in an unsupported configuration? :-) <comment252977> @sas08 I am not saying that this answer doesn't contain useful information, only that it doesn't answer the question. It addresses only one small part of the question (lack of DTrace) and doesn't describe what SIP actually is. <comment252978> @J.J what about `/dev/rdisk0` then? I would be surprised if there's no `/dev` entry which provides access to an actual device... I will have to set up a Mavericks VM and investigate this. I will post a separate question if I do so. <comment253511> @patrix I don't understand the epistemological distinction. What things are and what they do, and why they exist are intimately related. Sure this post starts *en medias res* talking about one feature, but it scopes out well. Asking "how does this change the developer experience?" etc. is in point of fact an open ended and subjective invitation to have developers talk about their experiences. Posing these questions in juxtaposition to a vague and overstated objection "the world will end because we can't root" seems to dismiss the idea of harm; this demonstrates harm to the dev experience. <comment253517> @josh above was @ josh. Derp. Can't fix... Stack's "Comment Integrity Protection" system is preventing me after 5 minutes. <comment253780> @sas08: the answer is *incomplete* in that it addresses only only one of the many effects of SIP and thus is not useful. If the answer correctly answered the question *What is the "Rootless" feature of El Capitan at a technical level?* then I would remove my downvote. <comment254815> I'm not going to add any more info Josh, because I would just be copying what the other answers have said and not really be adding anything to the page. It would perhaps be better if the top answer included some more info about DTrace no longer working, and then I would remove this answer as redundant :) The other answer is just a carbon-copy of arstechnica.com/apple/2015/09/os-x-10-11-el-capitan-the-ars-technica-review/9/ linked in the top comment, so that could go too. But some things in this answer, like DTrace not working even with SIP off as sudo, is no where else on the net but here <comment262535> I just stumbled across this after spending way too much time trying to understand why I could not use dtrace to figure out why `Safari Networking` is eating up an entire CPU. Brought up Brendan Gregg's blog on http://dtrace.org and could not understand all of the permission error messages. Is there any easy way to disable it temporarily? I can disable SELinux temporarily on Linux, can I do it here? <comment262651> if I disable SIP will I get full root or still I am restricted to /sbin, /user, etc directories? @GordonDavisson <comment262693> @androidplusios.design If you disable SIP, root can modify files anywhere in the filesystem. <comment262727> The only thing I have figured out so far is that if you disable SIP for DTrace, you can attach to processes that aren't under restrictive entitlements, which since El Cap is everything that comes with the system (like Safari). There is a "dumb" way, which is to copy all system binaries to a new directory like /rootless (with the same directory structure), then make a chroot for /rootless. Now everything is run entitlement-free and can be attached too. The smarter way is to re-mount your filesystem, but im scared to say how/why because Apple will no doubt lock that loophole down... <comment267405> The funny thing about DRM is that I have been thinking of PT_DENY_ATTACH and how it can be removed by recompiling xnu for years. <comment267557> It's simple - it's a bug mimicking to be a feature. <comment274058> Great answer. This answer solved my various questions several different times after upgrading to El Capitan. <comment277719> Does Apple plan to keep `csrutil disable` functionality around or are there plans to disable this at some point? <comment277875> @Vladimir Sorry, I don't have any inside information on Apple's plans. My guess would be that it'll stick around for the foreseeable future, although I wouldn't be surprised if it (and SIP itself) changed significantly in the next few versions. <comment278311> @GordonDavisson Haha! ;) Thanks for the answer! <comment282719> It would be great when screenshots can be replaced with plain text, see: [Discourage screenshots of code and/or errors](http://meta.stackoverflow.com/q/303812/55075). <comment285534> Oh well, looks like they fixed the "evil mount" bug I alluded to above. Fortunately, the "cat and hundreds-of-mice" game will probably continue for some time to come: http://www.theregister.co.uk/2016/03/30/apple_os_x_rootless/ <comment286453> If someone ever accidentally removes `/usr/local` and finds itself unable to recreate it, see [this answer here](http://apple.stackexchange.com/questions/234307/how-to-recreate-usr-local-with-sip-rootless-mode-en-el-capitan/234308). <comment308376> The claim `It also prevents block-level writes to the startup disk` needs corroboration. Your post is the only thing I can find that says this. <comment308383> @Melab It's mentioned in the WWDC presentation (I fixed the link) at 15:09, and on slide 34 ("Kernel stops processes from ... Writing to block devices backing protected content"). <comment325034> @josh, you can always disable sip to go back to where you were before sip was implemented. <comment350334> There are moments when I hate Apple.  I appreciate making it hard to shoot yourself in the foot (years ago I once accidentally catted a text file into my MBR on Linux), but there are times when you do need to e.g. put an additional link in /usr/bin, and having to go through the process of disabling an otherwise nice protection just for that purpose is too paternalistic and annoying.  An extra dialog with warnings would have been enough. <comment364692> Awesome answer, especially in the point explaining where to look for full list of restricted directories and exceptions.