How to control order of startup items for users at login? <body> I have seen a few applications with mixed reviews that will allow a user to change the order of startup items.  I would simply prefer the "bare metal" method and stick to using the shell or the Open Directory / netinfo editor to do this.  I realize that this isn't controlled via codelaunchd/code so what is the mechanism and where is the preference location for app startup definition?    I have found OS X's restore app/window process to be less than lackluster and I need to guarantee certain apps start first before others (such as ScreenRecycler as I need applications to open on the other display when they fire up).  <answer122567> So since I've not seen any recommendations I'm going to go ahead and put forth the answer that I've gone forward with so far.  The solution so far for me has been Startupizer.  It's not optimal obviously since it is both a paid for solution and it is not a method that is directly available from the OS, but it works and has allowed me to create dependency conditions and various other delays to the order that has been helpful and met my needs.  Hope this helps someone and I certainly hope someone recommends a more OS integral solution soon.  <answer122632> If you're using a shell script to open applications, try something like this:  precodeosascript -e 'launch app "ScreenRecycler"' pgrep -qx Alfred||open -jga Alfred sleep 10 pgrep -qx Mail||open -jga Mail pgrep -qx Transmission||open -jga Transmission /code/pre  You can run the script at login by for example saving the plist below as code~/Library/LaunchAgents/some.label.plist/code.  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;   &lt;key&gt;Label&lt;/key&gt;   &lt;string&gt;some.label&lt;/string&gt;   &lt;key&gt;ProgramArguments&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;bash&lt;/string&gt;     &lt;string&gt;-c&lt;/string&gt;     &lt;string&gt;osascript -e 'launch app "ScreenRecycler"' pgrep -qx Alfred||open -jga Alfred sleep 10 pgrep -qx Mail||open -jga Mail pgrep -qx Transmission||open -jga Transmission&lt;/string&gt;   &lt;/array&gt;   &lt;key&gt;RunAtLoad&lt;/key&gt;   &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  codeosascript -e 'launch app "AppName"/code and codeosascript -e 'activate app "AppName"/code are blocked until the application finishes opening. codelaunch/code doesn't make an application frontmost but codeactivate/code does. If an application like TextEdit or Mail is not running, codelaunch/code and codeactivate/code open a new visible default window. codeosascript -e 'tell app "TextEdit"' -e reopen -e activate -e end/code also reopens a default window if TextEdit is running but has no open windows.  codeopen -jg/code usually opens an application hidden (code-j/code) and without making it frontmost (code-g/code). For some applications like TextEdit and Mail, it opens a new visible window if the application is running but has no open windows. To avoid that, check if the application is already running with for example codepgrep/code. The code-j/code option for codeopen/code was added in 10.8 and it is only shown in the help message and not on the man page.  codelsappinfo launch launchandhide=true nofront=true /Applications/TextEdit.app/code also always opens TextEdit hidden and without making it frontmost. codelsappinfo/code was added in 10.9. I don't know how to use codelsappinfo/code to wait until an application finishes opening.  The settings for login items are stored in code~/Library/Preferences/com.apple.loginitems.plist/code. You can add a login item with AppleScript:  codeosascript -e 'tell application "System Events" to make new login item at end with properties {path:"/Applications/TextEdit.app", name:"TextEdit", hidden:true}'/code  Some applications and processes are started up via property lists in code~/Library/LaunchAgents//code, code/Library/LaunchAgents//code, or code/Library/LaunchDaemons//code. code_com.apple.SMLoginItemBookmarks/code in code/var/db/launchd.db/com.apple.launchd.peruser.$UID/overrides.plist/code is used to configure login items for helper applications used by sandboxed applications like ScreenFlow, DayOne, and TuneUp.  Since 10.7 there has been a relatively long delay before some login items or launchd jobs are started. I don't know any way to reduce it, but KeyRemap4MacBook's FAQ says it is caused by Resume:     h3KeyRemap4MacBook does not work after boot on OS X 10.7. What should I do?/h3      "Resume" feature introduced by Lion delays launching apps at login.      Until KeyRemap4MacBook.app is launched at login, the keyboard layout is not changed. Please wait a minute until menu of KeyRemap4MacBook is shown.   <comment142883> FYI, so far, and I am not happy with this solution, but I sprang and bought a program that handles this for me.  I won't mention the name so far until I potentially get some input here or anyone wants a recommendation as I don't want to be seen as running an ad.  So far it works well, but I would prefer a solution that matches my initial request and can modify the launch services properly without having to rely on a crutch of an application that sits in the startup and just gates app startup (although I must say the time delays and dependency additions of this little dohicky are slick). <comment143054> There isn't likely to be any ordering from Apple. They prefer launchd and let the system decide what order / how fast to launch items as part of the design of that subsystem. Things won't necessarily start in the same order every boot as well. <comment143055> We only ask that people disclose any relationship with a program they recommend (and that it not be the only reason you participate on the site). Honest recommendations are fine as long as they are on-topic and don't read like a late night informercial. <comment143142> This is by far the easiest way to sequence starting programs rather than throwing them all in the startup preference or letting the OS auto-restore them. I should dig up a link on how to prevent auto-open and then this could be a great template for anyone not liking launchd's dependency decisions and loading algorithm.