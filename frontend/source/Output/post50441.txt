Using Automator or AppleScript to encrypt/decrypt with OpenSSL <body> I would like to know how to use Automator or AppleScript to create a droplet that would compress/uncompress (tar.gz) and encrypt/decrypt with OpenSSL files and/or directories dropped in it. The workflow on what the droplet will do to encrypt would be something like this:  ul liFiles/directory is dropped on droplet/li liFiles/directory is compressed/li liA password prompt is presented/li liOpenSSL is used to encrypt file, file is renamed to *.encrypted /li /ul  To decrypt:  ul liFile is dropped on droplet/li liIf file is named *.encrypted, a password prompt is presented. If not, do encrypt workflow/li liFile is decrypted, and renamed/li liFiles is uncompressed/li /ul  Anyone?  <answer50459> I built an applescript droplet to compress &amp; encrypt a folder. You may need to switch cases on compress &amp; decompress and change command to achieve the same.  https://github.com/palaniraja/PassArchive  look at the code - https://github.com/palaniraja/PassArchive/blob/master/PassArchive.app/Contents/Resources/Scripts/main.scpt  My script is basically a little more beautified version of   http://hints.macworld.com/article.php?story=20040923120629702  <answer51123> Actually, Automator is not a bad choice for this, as it allows you to combine AppleScript and shell scripting without actually having to mix them (which leads you straight to escaping hell, after a short stay in quoting purgatory) and pass values between them an orderly fashion. Also, besides a droplet application, Automator will allow you to create a emService/em with excellent integration into Finder:  ol liCreate a new Automator workflow.   ul lieither select “Application” when prompted what type of workflow to create – that will get you a droplet that processes files and folders you send to it, or/li liselect “Service” and set “Accepts selected” to “files and folders” – that will get you an item in the Finder Services and context menu of files an folders (all translations approximate, I’m on a German system)./li /ul/li liAdd a "Run AppleScript” action and edit its contents as follows:  precodeon run {input, parameters}     try         tell application "System Events" to set thePassword to text returned of (display dialog "Please input your password for OpenSSL encryption" default answer "" with hidden answer)     on error errorMessage number errorNumber         if errorNumber is -128 then quit me -- user has canceled         error errorMessage number errorNumber     end try     return (thePassword as list) &amp; input end run /code/pre  – this will prompt the user for the encryption password and pass it as the first argument to the next action./li liAdd a “Run Shell Script” action, setting it to get its input through emarguments/em (not codestdin/code, as is default). Make sure the shell is set to code/bin/bash/code. Edit the script contents as follows:  precode[[ -n $1 ]] &amp;&amp; password="$1" &amp;&amp; shift || exit 0 for f in "$@"; do     if [[ ${f##*.} = "encrypted" ]]; then         fname="${f%.encrypted}"         openssl enc -d -aes-256-cbc -salt -in "$f" -out "$fname".tar.gz -pass pass:$password || continue         tar -xPf "$fname".tar.gz &amp;&amp; rm "$fname".tar.gz || continue     else         fname=$([[ -f $f ]] &amp;&amp; printf "${f%.*}" || printf "$f")         tar -czPf "$fname".tar.gz "$f" || continue          openssl enc -aes-256-cbc -salt -in "$fname".tar.gz -out "$fname".encrypted  -pass pass:$password &amp;&amp; rm -f "$fname".tar.gz || continue     fi done /code/pre  – this will decrypt and untar-gzip code.encrypted/code files, tar-gzip and encrypt all other files and directories with AES 256-CBC encryption and the password given./li /ol  emCaveat Empteor:/em error handling is primitive (basically, the codefor/code loop skips an iteration when it encounters an error), there is no logging and there is no failsafe against wrong password inputs (you might want to ask twice and compare the results, as the shell utility does). Disasters should not happen, though, as files are only deleted when the previous steps complete successfully.  Finally, you might want to investigate alternatives to prompting for a password – a passphrase file on a USB key, say (use code-pass file:/Volumes/volname/passfile/code instead of code-pass pass:$password/code, skip the Applescript step and remove the first line of the shell script), or storing your password in the OS X keychain and retrieving it programmatically (see this answer of mine on emStack Exchange/em for ways to do that).  <comment57868> Yes, I saw your script (actually, I even sent you an email on this yesterday, asking if you could implement it). But the zip encryption is weak. I want OpenSSL AES-256 encryption, that is why I mention OpenSSL. <comment58529> Hi there Martin! I am getting [this error](https://plus.google.com/u/0/102645326406320209975/posts/HB4Uf8fprNQ). <comment58532> @DavidCollantes: that is Automator throwing a hissy fit after trying to use its own, dumbed down `display dialog` (which is missing most of the needed options) – I always forget about that until it bites me in the itinerant. Edited my code to account for it. <comment58534> I get [this next](https://plus.google.com/u/0/102645326406320209975/posts/T645tef8B76), after testing the compiled and saved as program AppleScript. A password prompt comes, which I enter and OK, and then that error next. This is how the full [Automator screen](https://plus.google.com/u/0/102645326406320209975/posts/PgmpAwXjBwo) looks like. <comment58537> @DavidCollantes: my bad again – I should have said the `on run … end run` block is to be left alone. Edited accordingly. <comment58538> @DavidCollantes: if you experience other issues, I’ll be [in chat to discuss them](http://chat.stackexchange.com/rooms/3419/conversation-between-kopischke-and-david-collantes).