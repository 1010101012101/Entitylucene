Run AppleScript from bash script <body> If I wanted to run an AppleScript from within a bash script I could call a file with the list of commands that I require to execute.  precode#!/bin/bash {some commands} osascript file.scpt {other commands} /code/pre  What, however, if I wanted to run commands that needed to be run in sequence from within bash?  An example would be  precode#!/bin/bash echo echo This will open Google Chrome in Kiosk mode   osascript -e "tell application \"Google Chrome\""   osascript -e "activate"   osascript -e     "tell application \"System Events\""   osascript -e         "key down {command}"   osascript -e         "key down {shift}"   osascript -e         "keystroke \"f\""   osascript -e         "key up {shift}"   osascript -e         "key up {command}"   osascript -e     "end tell" echo "Google Chrome is now open in Kiosk Mode" /code/pre  I know this is a very far fetched example, but it works to explain what I am trying to do. Normally, those commands would all be written without their respective escape code\/code characters all over the place and less code"/code around each command. I'd also have them inside of a code.scpt/code file.  A solution I am aware of, is to rewrite the script using code#!/usr/bin/osascript/code instead of bash and go from there, but I want to be able to blend. I have found that I can test for a script file, if it does exist to create one and append each command I need to that file and then execute the required script file from within bash, but that also defeats the purpose.  There is no way that mid-way through a file, I can swap the shell being used with the codeshebang/code line and then swap back after I've executed the commands necessary, is there?  Any insight would be more than welcome.  <answer103627> You can wrap the raw AppleScript in code&lt;&lt;EOD/code... The last codeEOD/code signalling the end of input has to come at the first position in the line.  (BTW, your applescript seemed to be missing an codeend tell/code after codeactivate/code....)  precode#!/bin/bash osascript &lt;&lt;EOD   tell application "Google Chrome"       activate   end tell   tell application "System Events"       key down {command}       key down {shift}       keystroke "f"       key up {shift}       key up {command}   end tell EOD  echo "Google Chrome is now open in Kiosk Mode" /code/pre  <answer103638> The argument for codeosascript -e/code can contain newlines:  precodeosascript -e 'set x to "a" say x' /code/pre  You can also specify multiple code-e/code arguments:  precodeosascript -e 'set x to "a"' -e 'say x' /code/pre  Or if you use a heredoc, codebash/code interprets three characters (code\/code, code$/code, and code`/code) between code&lt;&lt;END/code and codeEND/code but no characters between code&lt;&lt;'END'/code and codeEND/code.  precodeosascript &lt;&lt;'END' set x to "a" say x END /code/pre  Edit:  Since osascript can operate with a heredoc (ie take input from /dev/stdin) then one can just write the script as a whole file and prepend with the correct shebang line:  precode#!/usr/bin/env osascript  set x to "a" say x /code/pre  This also allows you to save your apple script as a actual program in ~/Applications/.app using the following procedure (changing  for your script's name):  precodemkdir -p ~/Applications/&lt;APP_NAME&gt;.app/Contents/MacOS touch ~/Applications/&lt;APP_NAME&gt;.app/Contents/MacOS/&lt;APP_NAME&gt; open -A TextEdit ~/Applications/&lt;APP_NAME&gt;.app/Contents/MacOS/&lt;APP_NAME&gt; /code/pre  Ensure that both the script file in .../MacOS/ and the  matches  <comment121977> Indeed you are correct. I missed the first `end tell` of the script.