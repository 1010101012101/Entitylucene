Multiprocessing in Mac OS X <body> Would Mac OS X be able to distribute processes to the various cores in an Intel i7 Quad Core processor even if the applications are not multi-threaded?  <answer30506> A thread is what the OS sees and what it schedules on a core to run.  Programs can be single-threaded or multi-threaded. Programs can also spawn other programs and communicate with them via process-level I/O techniques like pipes or file handles, etc. But from the OS' perspective these sub-programs are still just collections of threads. It doesn't really matter if the program is spawning multiple threads or if it's spawning sub-processes -- both approaches represent OS-level threads that the OS  will attempt to schedule and execute as efficiently as possible and possibly in parallel.  If you have multiple cores and a program's threads aren't being explicitly locked to a core, then the OS can try run them at the same time, in parallel, across all the cores it has available to it in the current machine. If you have multiple programs running, the OS will schedule all those underlying threads across all the cores it has available to it in the current machine.  Practically speaking there's some amount of I/O, inter-process or inter-thread communication and synchronization that needs to occur and this can cause OS-level threads to block and keep things from running truly parallel all the time. For example: two threads in a multi-threaded program might be pulling values off a shared stack to do some work, so access to the stack has to be co-ordinated to ensure everything is thread safe and that means only one thread can pop from the stack data structure at time. There's a bottleneck in the program's design that's limiting thread parallelism to one here and the OS can't help with that.  The same is true for programs that spawn sub-processes. There may be I/O or inter-process synchronization issues that prevent all spawned sub-processes from truly running in parallel all the time.  <answer30511> If the application itself is not multithreaded then it will stay to a single core.  If you have a number of single threaded applications that are running it's reasonable to assume OS X will distribute them between he cores appropriately.  <comment34992> Ah, but this is the assumption that I am trying to verify. So far it is hard to find facts that back this up. <comment34996> Ian, thanks a lot for your input. Do you think that there would be any advantage over chosing a lower clocked quad over a high clocked dual i7 for tasks such as web development? (switching between Ruby run-time, web app server, tests, Java-based IDE, various browers loaded all at the same time) <comment34997> I would personally take more cores over a higher clock speed. Those tasks aren't generally CPU intensive, so being able to run more concurrent threads would be a greater advantage than being able to run one or two threads a little faster. <comment34998> I can expound upon this a bit: when the OS schedules a thread there's not any guarantee it'll run on the same core every time (unless the thread locks itself to a processor). So a single threaded application will run on any core available when the OS determines that it is time to run that application thread again. Make sense? <comment34999> Answer accepted. Just to clarify, OS X can let these apps run on all 4 cores, even if these tasks (Ruby, etc.) are not coded as multi-threaded apps. I keep reading that unless the applications are programmed as multi-threaded apps, there is no point in having the extra cores. This is why I am asking again. :) <comment35002> Got it. Thanks! <comment35004> @Jason absolutely. From the OS point of view it sees many, many threads from all the different programs. And it'll schedule them all, in parallel if possible. So the Ruby thread and the Apache thread and the Eclipse IDE threads could all be running simultaneously. <comment35005> Let me be a bore and make one last inquiry. What would be the technical reason why an app such as a 3D game would perform less efficiently on a quad than on a dual core. I see that statement over and over again, but without any technical reason to back it up. <comment35013> @Jason My guess is that the game stores a lot of data which it performs calculations on to generate the next frame. If the thread runs on a different core than it did the last time, there is an increased chance that that data won't be in the cache and will take longer to retrieve. Also, I think most places which claim more processors is worthless unless the app supports them are based off of the assumption that most processes take little if any processor time when not being actively used. <comment35017> Perfect. Thanks again. <comment35080> @jason if a program is CPU-bound and not heavily multi-threaded then a multi-core or multi-CPU system isn't going to help the program much, you're better off with a faster CPU over more CPUs. Though truthfully, these days, you can have both fast and multi-core without breaking the bank. <comment35085> Ian, I am going to purchase a mac mini and the choice is between a dual core i7 at 2.7Ghz versus a quad core i7 at 2.0Ghz. So, in this case having the best of both world is unfortunately not an option (my question might also make more sense now). Could you make a recommendation based on my described needs? <comment35088> I realize that this request might be a tall order, as it is very difficult to determine how the above apps would perform together on the respective processors without doing real-world tests first. However, even a hunch would do.