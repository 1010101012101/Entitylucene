Creating files in /tmp changes default group ownership? We are supposed to stop using /tmp? <body> I just noticed:      ~$ touch ~/home.txtbr   ~$ touch /tmp/tmp.txtbr   ~$ ls -l ~/home.txtbr   -rw-r--r--  1 jdough  strongstaff/strong  0 Dec  2 15:09 /Users/jdough/home.txtbr   ~$ ls -l /tmp/tmp.txtbr   -rw-r--r--  1 jdough  strongwheel/strong  0 Dec  2 15:09 /tmp/tmp.txt   Is it unusual that OS X uses the file system to decide the group ownership? I'd expected all files created by a user to have codestaff/code as the group.   I've been tarring cds in code/tmp/code and then putting them in cloud storage. Isn't that a classic use case for code/tmp/code? As users, are we supposed to stop using code/tmp/code? I don't want my group ownership messed with and tmp is now wired to unexpectedly change the group.  Of course, just using code$HOME/tmp/code is fine. But, I'll be sad to stop using code/tmp/code.  <answer218123> I had the same experience when using /tmp but using $TMPDIR worked as expected:  precode$ touch "${TMPDIR}/tmp.txt" $ ls -l "${TMPDIR}/tmp.txt"  -rw-r--r-- 1 luomat staff 0 Dec  3 08:46    /var/folders/8k/0bqq33mn439938qxp7j7c1fc0000gn/T//tmp.txt /code/pre  <comment263661> The group is set on creation so the important code is how did you create the files (But as the answer nots you should use $TMPDIR /tmp is shred between users and so can get clashes in permissions <comment263711> This isn't unusual. Files inherit the group class from the directory in which they are created in. <comment263712> @fd0 got it. thanks!