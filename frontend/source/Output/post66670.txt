Is there a simple way to have separate dock icons for different Chrome Profiles? <body> I am using Google Chrome version 22 on OS X 10.8. I use separate user profiles (created using the native Chrome facility in codeSettings-&gt;Users/code) for my "regular" web browsing, and the web development that I do. I launch my web development profile from the regular Chrome profile window by clicking on the avatar in the top-left-hand-corner:  img src="https://i.stack.imgur.com/NTHd7.png" alt="enter image description here"  At the moment both of these profiles share a single dock icon. However, I would much prefer for each Chrome profile to have its own dock icon, with the windows managed separately - and ideally for the dock icons to be distinguished in some way. Is this easily possible? By 'easy', I mean things like rebuilding Chrome from source are not an option I'll consider.  strongNote/strong: I would like to use the same, stable, version of Chrome for both profiles. It would be OK to have the same version installed twice as long as they can be kept separate and the dock icon distinguished.  <answer66674> Have you tried the strongbeta build/strong? I can't test right now, so I'm not 100% sure it's a different icon - and if not, you can also try the "canary build" -  It shouldn't be so far off the official build in term of rendering so you can trust what you see. And you can make your developer profile the default one.  <answer67050> For having two Chrome running at the same time you need to create a second runnable Google Chrome App.  You can create that second application by running the following script. It comes from this site, I copy and paste for readers' convenience:  precode#!/bin/bash  PROFILE_NAME=$1 mkdir -p "/Applications/Google Chrome $1.app/Contents/MacOS"  F="/Applications/Google Chrome $1.app/Contents/MacOS/Google Chrome $1" cat &gt; "$F" &lt;&lt;\EOF #!/bin/bash  # # Google Chrome for Mac with additional profile. #  # Name your profile: EOF  echo "PROFILE_NAME='$PROFILE_NAME'\n" &gt;&gt; "$F"  cat &gt;&gt; "$F" &lt;&lt;\EOF # Store the profile here: PROFILE_DIR="/Users/$USER/Library/Application Support/Google/Chrome/${PROFILE_NAME}"  # Find the Google Chrome binary: CHROME_APP=$(mdfind 'kMDItemCFBundleIdentifier == "com.google.Chrome"' | head -1) CHROME_BIN="$CHROME_APP/Contents/MacOS/Google Chrome" if [[ ! -e "$CHROME_BIN" ]]; then   echo "ERROR: Can not find Google Chrome.  Exiting."   exit -1 fi  # Start me up! exec "$CHROME_BIN" --enable-udd-profiles --user-data-dir="$PROFILE_DIR" EOF  sudo chmod +x "$F" /code/pre  Save it in a file (let's say codecreate_second_chrome.sh/code in the Desktop folder), open the shell and execute it by passing as parameter the profile folder you want to associate to the second Chrome App. It will be called codeGoogle Chrome profile_folder_name/code. Let's suppose codeGoogle Chrome Development/code:  precode$ cd ~/Desktop $ . create_second_chrome.sh Development /code/pre  Now you can launch the new version of Chrome (codeGoogle Chrome Development/code) from the code~/Applications/code directory. You can set a different icon by right-clicking on the app and selecting 'Get Info'. You will see that this new version has its own icon on the dock and can be docked there if needed.  <answer143481> I tried the script from @Maverick and it partly worked (thanks!) but I ran into some difficulties.  The main problem is that the wrapped copy of Chrome, although it is independent, has its own icon, and works correctly on its own, cannot open URLs sent from other applications, so it doesn't work with Choosy.  Here is what worked for me, to get a second Chrome which can open links via Choosy, for example:  ol liCopy codeLibrary/Application Support/Google/Chrome/code to codeLibrary/Application Support/Google/ChromePersonal/code in your home directory. This is optional; I wanted to transfer over my Chrome User profiles to the new instance.  But if you're OK starting fresh you can skip this./li liCopy codeGoogle Chrome.app/code to another location.  I used code/Applications/Google Chrome Personal.app/code./li liCopy my wrapper.sh script (below) into the app's codeContents/MacOS/code directory./li licodechmod +x wrapper.sh/code/li liModify codeContents/Info.plist/code in this new app to: ul lipoint to the wrapper script (set codeCFBundleExecutable/code value to codewrapper.sh/code)/li lihave a unique codeCFBundleIdentifier/code (just add "Personal" to the existing value)/li lihave a unique codeCFBundleName/code (just add "Personal" to the existing value)/li lihave a unique codeCFBundleDisplayName/code (just add "Personal" to the existing value)/li /ul/li /ol  Here is my modified wrapper.sh script.  Put it at code/Applications/Google\ Chrome\ Personal.app/Contents/MacOS/wrapper.sh/code and then edit the Info.plist as in step 4.  precode#!/bin/bash  # Wrapper script that starts independent instance of Google Chrome for Mac  # To use: copy Google Chrome.app to a new location.  Copy this script into # the Contents/MacOS directory of the copied app.  Edit the copied app's # Contents/Info.plist and change CFBundleExecutable to "wrapper.sh", # and pick a unique CFBundleIdentifier.  # Instance data will be stored here.  You can copy your existing data  # to this location if you want to preserve your existing user profile(s). # You can also change this if you want to store the data somewhere else. INSTANCE_DIR="/Users/$USER/Library/Application Support/Google/ChromePersonal"  # Find the Google Chrome binary: CHOME_BIN="$(dirname "$0")/Google Chrome"  # Start Chrome exec "$CHOME_BIN" --user-data-dir="$INSTANCE_DIR" /code/pre  One caveat: I believe Chrome's auto-update feature will break this every time Chrome updates, meaning you need to re-do steps 3 and 4 after every Chrome update.  <answer172218> None of these answers worked for me in a comprehensive way under Mac OS X Yosemite. Here is my solution, which gives you multiple instances, a dock launch menu for the instances, and different icons for each instance. When you run the script it'll automatically go through all your profiles, and then tell you what to do next.  precode#!/bin/bash  # cdi.sh - Make chrome profiles behave like multiple browsers on Mac OS X #          (Tested on Yoshmite). Make profiles work like seperate applications #          - esp. useful if you want to easily switch between different browsers #          in different virtual desktops / workspaces, or don't want work #          windows mixed in with home windows in the "Window" menu, or want to #          be able to easily see what processes are with a certain profile in #          chrome task manager, or be able to eaisly quit one profile with #          multiple windows open and start where you left of later.  set -e  cd /Users/$USER/Library/Application\ Support/Google/Chrome  CDI="cdi-chrome-multiple-profile-instances-in-dock-with-different-icons.d" APPLESCRIPTS="$CDI/Applescript-Sources" LAUNCHERS="$CDI/Chrome-Launchers" RUNTIMES="$CDI/Chrome-Runtimes" test -d $CDI || mkdir $CDI test -d $APPLESCRIPTS || mkdir $APPLESCRIPTS test -d $LAUNCHERS || mkdir $LAUNCHERS test -d $RUNTIMES || mkdir $RUNTIMES  grep '"username"' Profile*/Preferences Default/Preferences | grep -v '               ' | awk -F : '{print $1";"$3}' | sed 's:/Preferences::g' | sed 's:\@:-at-:g' | sed 's/;\ /;/g' &gt; $CDI/profiles.txt # Like: Profile 1;"webmaster-at-example.org"  echo "Be patient, this involves copying a lot of data..."  while read PROFILE; do  DIR="$(echo $PROFILE | awk -F\; '{print $1}')" # Like: DIR='Profile 1' echo "Working on profile: $DIR"  LINK="$(echo $PROFILE | awk -F\; '{print $2}' | sed 's/\ /\-/g' | sed 's/"//g' | sed 's/^/cdi-profile-/g')" # Like: cdi-profile-webmaster-at-example.org  APP="$(echo $LINK | sed 's/^cdi-profile-//g' | sed 's/$/-DO-NOT-RUN-DIRECTLY-JUST-USE-FOR-CHANGING-ICON-cdi\.app/g')" # Like: webmaster-at-example.org-DO-NOT-RUN-DIRECTLY-JUST-USE-FOR-CHANGING-ICON-cdi.app  SHIM="$(echo $LINK | sed 's/^cdi-profile-//g' | sed 's/$/\.app/g')" # Like: webmaster-at-example.org.app  TXT="$APPLESCRIPTS/$(echo $LINK | sed 's:^cdi-profile-:chrome-:g' | sed 's/$/\.txt/g')" # Like: # cdi-chrome-multiple-profile-instances-in-dock-with-different-icons.d # /Applescript-Sources/chrome-webmaster-at-example.org.txt  test -L "$LINK" || ln -s "$DIR" "$LINK" cd "$LINK" test -L Default || ln -s . Default cd /Users/$USER/Library/Application\ Support/Google/Chrome test -d "$RUNTIMES/$APP" || cp -R /Applications/Google\ Chrome.app "$RUNTIMES/$APP"  ## This section disabled because enabling it makes automatic profile login not work. ## There is a chance someone who knows more about chrome will help at some point; see: ## https://code.google.com/p/chromium/issues/detail?id=460787 ## https://groups.google.com/a/chromium.org/forum/#!topic/chromium-discuss/0HEeMuh8WqA ## https://github.com/lhl/chrome-ssb-osx # Change Bundle ID so desktop assignation works. Not sure if this will survive updates. # CFBundleIdentifier must contain only alphanumeric (A-Z,a-z,0-9), hyphen (-), and period (.) characters. # (Based on fiddling around there also seems to be a length limit.) #UUID="$(echo $APP | md5sum | awk '{print $1}' | tr [0-9] [A-Z] | cut -c 1-4,29-32)" #plutil -replace CFBundleIdentifier -string "cdi.$UUID" -- "$RUNTIMES/$APP/Contents/Info.plist" #plutil -replace CFBundleName -string "$UUID" -- "$RUNTIMES/$APP/Contents/Info.plist" #plutil -replace CFBundleDisplayName -string "$UUID" -- "$RUNTIMES/$APP/Contents/Info.plist" #plutil -replace KSProductID -string "cdi.$UUID" -- "$RUNTIMES/$APP/Contents/Info.plist" # To check: defaults read ~/Library/Preferences/com.apple.spaces.plist app-bindings  echo "on run" &gt; $TXT echo -n "do shell script " &gt;&gt; $TXT echo -n '"' &gt;&gt; $TXT echo -n "/Users/$USER/Library/Application\\\\ Support/Google/Chrome/$RUNTIMES/$APP/Contents/MacOS/Google\\\\ Chrome --user-data-dir=/Users/$USER/Library/Application\\\\ Support/Google/Chrome/$LINK" &gt;&gt; $TXT echo ' &gt; /dev/null 2&gt;&amp;1 &amp;"' &gt;&gt; $TXT echo "quit" &gt;&gt; $TXT echo "end run" &gt;&gt; $TXT test -d "$LAUNCHERS/$SHIM" || osacompile -o "$LAUNCHERS/$SHIM" $TXT  done &lt; $CDI/profiles.txt  echo echo 'Done with automated portion. Now you should manually:' echo echo '1. Add (identical) icons of your choice to each pair of profile Launchers' echo '   / Runtimes in the folder ~/Library/Application Support/Google/Chrome/' echo '   cdi-chrome-multiple-profile-instances-in-dock-with-different-icons.d' echo '   (google for numerous guides on how to change mac os x app icons)' echo echo '2. From the finder, drag the "Chrome-Launchers" folder to the stacks area' echo '   of the dock. Right click on the stack and select "List" for easy viewing.' echo '   Also select "Display as Folder" and give the folder a nice icon.' echo echo '3. BE SURE to only open Chrome via this stack. DO NOT pin the app-area' echo '   Chrome icon(s) to the app area of the dock! DO NOT run "normal" Chrome!' echo echo 'The only exception to (3) is if you need to add a new profile. In that case,' echo 'close all instances, then open the "normal" Chrome, add profile, close, and' echo 'then run this script again.' echo echo 'Note: when you launch first time you will get "Welcome to Google Chrome"' echo '      dialog box. This is normal; do not worry. It will ask if you want' echo '      to set Chrome as default; this applies to that instance of chrome.' echo '      Choosy - http://www.choosyosx.com/ - works great with this!' echo /code/pre  For icons, you can use any PNG (or probably many other formats).   The chrome avatars which you may already be used to are located under "~/Library/Application Support/Google/Chrome/Avatars" - avatar_ninja.png etc.  Or make your own, or use one of the numerous icon sites - I like Easyicon.  Also this looks possibly useful - How to Get Back Avatars in Chrome to Switch User Profiles More Easily - to make the open windows easier to quickly identify (untested).  One thing that isn't working yet is the ability to assign different user profile chrome instances to specific desktops. This is because if the attribute used to do this is changed, the browser is no longer able to automatically log in to that profile when the browser starts up. I've made a forum post and bug report on this issue; it is also a problem for site-specific browsers, so the chrome-ssb-osx project may get this working at some point. I don't have the 10 reputation points needed to include more than 2 links in posts here (help! :-), so you'll have to look at the links to these things in the script above ("This section disabled" section).  <comment78526> I'm not clear on what you're suggesting. Are you suggesting running two different versions of Chrome at the same time? (stable and beta). I'd really rather use stable across the board. Thanks for the suggestion, though. <comment78527> FWIW, I downloaded Chrome from the Beta channel and it has the same icon, so unfortunately that doesn't help me much there either... <comment79016> That doesn't seem to work. I created a new profile for myself called `Development` in `Settings - Users`. This created the directory `~/Library/Application Support/Google/Chrome/Profile 2`. However, executing `open -a "Google Chrome" --args --profile-directory="Profile 2"` still opens the old/original profile, as I can tell from the avatar in the top-right corner. <comment79019> @AndrewFerrier Have you tried to close `command + q` Chrome and repopen it by means of the workflow? It works with me. <comment79021> it works if you do that, yes (i.e. if Chrome is not started at all, it opens the desired profile). But if one profile is already started, executing that command re-opens a window for that profile, irrespective of which profile is specified. That's doesn't help with the question, since the objective is to have both open simultaneously. <comment79182> @AndrewFerrier Thanks for your edit, now the answer it better! Hope it helped you! Luca <comment79184> Thanks, yes. Appreciate the help. <comment79187> @AndrewFerrier Would you like to have two different icons? Correct me if I'm wrong but the icons should be the only problem right? <comment79190> @AndrewFerrier I tried to modify the icon (`command`+`i` on the new App and drag and drop on the right of the Google Chrome Development name) of the second Chrome and I'm not experiencing that problem. <comment79191> neither am I now! Seems I made a mistake, it seems OK now. Will leave it running for a bit, see if I continue to experience problems... <comment108742> FYI, Chrome Canary actually has a different icon, but its less stable (it general works though). <comment108759> While copying the icon worked in the Finder and OSX application switcher, it doesn't seem to have worked in Activity Monitor or Witch. I'm guessing those tools look at the process rather than the app bundle for the icon. Any thoughts on how to fix that? <comment164335> It seems that it works in all cases except drag'n'droping links. When dnd'ing "real" Chrome opens them even if the drop target was other app instance. <comment168972> I'm seeing something similar to @AndreyTatarinov.  If I try to send a URL to the wrapped Chrome, it briefly opens what looks like another instance of the wrapped chrome, which quits immediately.  The wrapped Chrome opens a new window with the default page (not the URL I was trying to open).  This means that the wrapped Chrome doesn't work with, for example, Choosy.  I think it has something to do with LaunchServices not recognizing the wrapped version as an independent application, but I've tried adding an Info.plist with a different `CFBundleIdentifier` and that didn't fix the problem. <comment168979> Hi @Maverik, I think this script mistakes what the `--user-data-dir` option points to.  It points something called `PROFILE_DIR ` to `/Users/$USER/Library/Application Support/Google/Chrome/${PROFILE_NAME}` as if the profile were a chrome user.  But in reality this needs to be up one level.  I think you should call it `CHROME_DATA` or `INSTANCE_DATA` and you should put it at `/Users/$USER/Library/Application Support/Google/Chrome${PROFILE_NAME}`: alongside the existing `Chrome` directory, not inside it. <comment204116> Following these instructions I get an app that won't launch <comment204157> Sorry @TomJNowell!  I guess I must have missed a step.  Probably you have to chmod 755 the wrapper.sh script?  Mine is executable.  If you try that and it fixes the problem for you, let me know so I can update the answer? <comment204212> chmod +x did the trick <comment223648> Since this is getting a bit complex, new stuff will all go to https://github.com/djbclark/chrome-apartheid <comment310973> You can prevent auto updates by changing the ``KSProductID`` key in ``Info.plist``. If you go to the about page, you'll see an "KSOmahaServer app 'com.google.ChromePersonal' info node status 'error-unknownApplication'. ..."; error when trying to manually update. <comment310974> Follow-up: Updates seem to be disabled for me without changing ``KSProductID``. It says there's an update available, then I click Relaunch, and it relaunches to the same version. I don't have Automatic Updates for All Users enabled, so perhaps that's the reason or that I've renamed the executable.