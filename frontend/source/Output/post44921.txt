How to remove or disable a default keyboard layout? <body> Is it possible to remove or disable one of OS X Lion’s default keyboard layouts?  I’m using a custom keyboard layout, and now that I managed to set it as the system-wide default keyboard layout, I’d like to be able to uncheck or remove the built-in “U.S.” keyboard layout that came with OS X. Here’s a screenshot — note that the checkbox is disabled:  img src="https://i.imgur.com/YNnJC.png" alt="Screenshot"  In OS X 10.9, this preference pane has been redesigned, but still there’s no way to “remove” the built-in “U.S.” keyboard layout:  img src="https://i.stack.imgur.com/BzJzr.png" alt="Screenshot"  Since I never use the U.S. keyboard layout, I’d love to get rid of it, i.e. remove it from the Input menu in the menu bar. How can I do this?  hr  strongUpdate:/strong Daniel’s answer doesn’t really answer this question, but it does offer some valuable information regarding this problem:     Mac OS X seems to require at least one keyboard layout that the system recognizes as a “Latin character” layout to be selected.   Assuming this is accurate information (thanks, Daniel!), the question could be rephrased as follows:     strongHow to make OS X consider a custom keyboard to be a Latin character layout?/strong   hr  strongUpdate:/strong I just came across something that might help.  <answer44923> It appears that strongyou cannot do what you want to without some yet-undiscovered hack to the system/strong. Mac OS X seems to require at least one keyboard layout that the system emrecognizes/em as a "Latin character" layout to be selected. This prevents your from being unable to enter your password at the login screen, etc. If you selected French, or Canadian, or another keyboard layout that the system recognizes as Latin characters, you can deselect the US layout.  Your problem is that your custom layout, while containing Latin characters, is not recognized by the system as a Latin keyboard layout, and thus cannot be the only selected keyboard layout. See this question (sadly lacking a great answer) for more information.  Note that a great answer to this question would answer your question also. Alas, my answer here only clarifies what the problem is, but I have no step-by-step solution for you. While such a hack may be possible, I see no evidence that anyone has figured out how to convince Mac OS X that a particular custom keyboard is safe to use as the sole selectable keyboard.  <answer44924> It can be done easily. First change to your custom layout (use menu bar Input menu), emthen/em deselect the U.S. layout.  <answer46447> Here is an idea:  After making sure the keyboard id of your custom layout is set to Roman, make a custom AppleKeyboardLayouts.bundle which contains only that layout and substitute this for the one that comes with the OS. (I don't know myself what is involved in creating a .bundle)  <answer46696> Here's another idea:  A few years ago the bundle(s) for Apple Keyboard Layouts were much easier to edit, and this problem seems to have been solvable:  http://hintsforums.macworld.com/archive/index.php/t-71629.html  Perhaps one could still use the old editable bundle, if you could get one from an old system, in the current OS.  <answer60418> I just came across something that might help. Here goes:  precode$ defaults read /Library/Preferences/com.apple.HIToolbox.plist  {     AppleCurrentKeyboardLayoutInputSourceID = "com.apple.keylayout.Dutch";     AppleDefaultAsciiInputSource =     {         InputSourceKind = "Keyboard Layout";         "KeyboardLayout ID" = 1337;         "KeyboardLayout Name" = QWERTY;     };     AppleEnabledInputSources =     (                 {             InputSourceKind = "Keyboard Layout";             "KeyboardLayout ID" = 26;             "KeyboardLayout Name" = Dutch;         }     );     AppleInputSourceHistory =     (                 {             InputSourceKind = "Keyboard Layout";             "KeyboardLayout ID" = 26;             "KeyboardLayout Name" = Dutch;         }     );     AppleSelectedInputSources =     (                 {             InputSourceKind = "Keyboard Layout";             "KeyboardLayout ID" = 26;             "KeyboardLayout Name" = Dutch;         }     ); } /code/pre  This is on my system, where my custom keyboard layout (named “QWERTY”) is the default. Note that the codeKeyboardLayout Name/code and codeKeyboardLayout ID/code properties refer to the ID and name at the start of the code.keylayout/code file.  As you can see, codedefaults read /Library/Preferences/com.apple.HIToolbox.plist AppleCurrentKeyboardLayoutInputSourceID/code still returns the string code"com.apple.keylayout.Dutch"/code. Is there a list somewhere of the available codecom.apple.keylayout/code values? Is it possible to get such a value for a custom keyboard layout? ’Cause in that case, we could simply override the property.  Also, the codeAppleEnabledInputSources/code, codeAppleInputSourceHistory/code, and codeAppleSelectedInputSources/code properties all seem to ignore the custom keyboard layout, as their values correspond to the native OS X keyboard layout I originally selected when running Setup Assistant.  hr  strongAnother update:/strong Aha! Seems like there’s another codeplist/code file from which we might be able to copy the settings.  precode$ defaults read ~/Library/Preferences/ByHost/com.apple.HIToolbox.*.plist  {     AppleCurrentKeyboardLayoutInputSourceID = "org.unknown.keylayout.QWERTY";     AppleDateResID =     {         smRoman = 2;     };     AppleEnabledInputSources =     (                 {             InputSourceKind = "Keyboard Layout";             "KeyboardLayout ID" = 26;             "KeyboardLayout Name" = Dutch;         },                 {             InputSourceKind = "Keyboard Layout";             "KeyboardLayout ID" = 1337;             "KeyboardLayout Name" = QWERTY;         },                 {             "Bundle ID" = "com.apple.CharacterPaletteIM";             InputSourceKind = "Non Keyboard Input Method";         },                 {             "Bundle ID" = "com.apple.KeyboardViewer";             InputSourceKind = "Non Keyboard Input Method";         },                 {             "Bundle ID" = "com.apple.inputmethod.ironwood";             InputSourceKind = "Non Keyboard Input Method";         }     );     AppleGlobalTextInputProperties =     {         TextInputGlobalPropertyPerContextInput = 0;     };     AppleInputSourceHistory =     (                 {             InputSourceKind = "Keyboard Layout";             "KeyboardLayout ID" = 1337;             "KeyboardLayout Name" = QWERTY;         },                 {             InputSourceKind = "Keyboard Layout";             "KeyboardLayout ID" = 26;             "KeyboardLayout Name" = Dutch;         }     );     AppleNumberResID =     {         smRoman = 2;     };     AppleSelectedInputSources =     (                 {             InputSourceKind = "Keyboard Layout";             "KeyboardLayout ID" = 1337;             "KeyboardLayout Name" = QWERTY;         },                 {             "Bundle ID" = "com.apple.inputmethod.ironwood";             InputSourceKind = "Non Keyboard Input Method";         }     );     AppleTimeResID =     {         smRoman = 2;     }; } /code/pre  As you can see (codeAppleCurrentKeyboardLayoutInputSourceID/code), apparently custom keyboard layouts get values like code"org.unknown.keylayout.FOO"/code where codeFOO/code is the name of the keyboard layout (as specified in the code.keylayout/code file).  So, to let’s try setting all values to our custom keyboard layout, named codeQWERTY/code and with ID code1337/code (specified in the code.keylayout/code file):  precodesudo defaults write /Library/Preferences/ByHost/com.apple.HIToolbox.plist AppleCurrentKeyboardLayoutInputSourceID -string "org.unknown.keylayout.QWERTY" /code/pre  Sadly, this doesn’t seem to work.  strongUpdate:/strong @Lri discovered a reliable method — see his answer.  <answer60521> ol liEnable an input source that is not like your physical keyboard layout from System Preferences (I used Afghan Dari)./li liRun codef=~/Library/Preferences/ByHost/com.apple.HIToolbox*.plist; plutil -convert xml1 $f; open $f -e/code./li liRemove other input sources except the temporarily enabled keyboard layout and your custom keyboard layout./li liLog out and back in./li liRemove the temporarily enabled keyboard layout from the property list./li liLog out and back in./li /ol  img src="https://i.stack.imgur.com/96IYs.png" alt=""  Edit: the method above seems to have stopped working in 10.9. This worked in both 10.9 or 10.8 though:  ol liChange the current input source to your custom keyboard layout./li liOpen code~/Library/Preferences/com.apple.HIToolbox.plist/code (in 10.9) or code~/Library/Preferences/ByHost/com.apple.HIToolbox.*.plist/code (in 10.8 and earlier). You can convert the plist to XML with codeplutil -convert xml1/code./li liRemove the input source or input sources you want to disable from the codeAppleEnabledInputSources/code dictionary. If there is an codeAppleDefaultAsciiInputSource/code key, remove it./li liRestart./li /ol  <answer87829> For the sake of completeness, I filed this as bug ID #11137961 with Apple, and this is the response I got:     strongBug ID #:/strong 11137961br   strongBug Title:/strong Allow disabling default (built-in) keyboard layouts when using a custom one      hr      Engineering has determined that this issue behaves as intended based   on the following information:      If the issue is just getting your keyboard layout recognized as   ASCII-capable, the easiest would be to "bundle" your .keylayout, then   your Info.plist can contain a "KLInfo_" dictionary that   further describes it, like:  precode &lt;key&gt;TISIntendedLanguage&lt;/key&gt;  &lt;string&gt;en&lt;/string&gt;   # BCP 47 language string /code/pre      I'd need to look into this a bit more, but it looks like TIS will scan   the keyboard layout output to produce a USet and produce an initial   idea of ascii-ness by whether it passes the following minimal test:  precode uset_containsRange(uSet, 0x0020, 0x0021) &amp;&amp; uset_containsRange(uSet, 0x002C, 0x0039) &amp;&amp;  uset_containsRange(uSet, 0x003F, 0x005A) &amp;&amp; uset_containsRange(uSet, 0x0061, 0x007A); /code/pre      TIS will also examine the exemplar set for the above indicated locale and require a good dozen or so characters in the range code[a-z]/code.      For some suggestions on bundling a code.keylayout/code, also see   codeTextInputSources.h/code.      If this is still an issue, or you have questions regarding the   resolution of this issue, please update your bug report with that   information.      We are now closing this bug report.   <answer110597> Apple’s response to my bug report, in which I was asking to make it possible to remove the system default keyboard layout if another one is selected through System Preferences:     Engineering has determined that this is not an issue for Apple to   address.      Assuming this custom keyboard layout is bundled (code.keylayout/code is inside   a bundle like codefoo.bundle/Contents/Resources/foo.keylayout/code), then this   could be as easy as inserting into the codeInfo.plist/code's codeKLInfo_/code   dictionary:  precode&lt;key&gt;KLInfo_Qwerty&lt;/key&gt; &lt;dict&gt;   &lt;key&gt;TISInputSourceID&lt;/key&gt;   &lt;string&gt;com.imgur.stack.keyboardlayout.Qwerty&lt;/string&gt;   &lt;key&gt;TISIntendedLanguage&lt;/key&gt;     &lt;string&gt;en&lt;/string&gt;  &lt;/dict&gt; /code/pre      If this layout is needed system-wide (i.e. including password input)   it could be installed in code/Library/Keyboard Layouts//code, rather than the   same location in code~/Library//code.      Please update your bug report to let us know whether this is still an   issue for you.      If you have questions regarding the resolution of this issue, please   update your bug report with them.      Please be sure to regularly check new Apple products for any updates   that might affect this issue.  Again, thank you for taking the time to   submit bugs.  We sincerely appreciate your input.   <answer288484> You can use Ukelele to mark your used layout as one that uses Latin script. Export as a bundle, install and then you will be able to delete the US one.  <comment51096> My custom layout is the one currently in use. As mentioned in the question, I don’t use the U.S. keyboard layout anymore. <comment51098> Thanks for your detailed clarification of the problem! <comment51106> I live without U.S. keyboard layout and had no problem to deselect it. The other customizations I have are non-default, non-US region and language. <comment51109> Can you deselect the keyboard layout that you chose when setting up the Mac initially? <comment51221> Yes, I can if I change region as well. <comment51222> See, that’s the problem. There’s always one of OS X’s built-in keyboard layouts that you cannot delete or disable. <comment51248> What exactly is your "custom keyboard layout"? A newly created one or one of OS X’s built-in? Could you just modify U.S. layout instead of using another one? <comment51350> My custom keyboard layout is a modified version of the built-in U.S. layout. <comment51476> let us [continue this discussion in chat](http://chat.stackexchange.com/rooms/2870/discussion-between-shpokas-and-mathias-bynens) <comment53059> I don't think "Latin" is sufficient.  That is easily accomplished in Ukelele by setting the keyboard ID to Roman.  I suspect your layout also has to be part of the AppleKeyboardLayouts.bundle in system/library/keyboard layouts. <comment69257> @Lri I suspect you are correct, but don't have the hardware to test that. Perhaps there's a reader of this site who can? <comment69698> This worked flawlessly — I didn’t even have to try the backup plan in your last paragraph. Thank you so much! <comment126678> I just came across your http://osxnotes.net/keylayout-files-and-ukelele.html which offers a solution for OS X 10.9. However, it doesn’t seem to work for me. Here’s what the modified `plist` file looks like: http://pastebin.com/raw.php?i=7kWVxXqx After logging out and back in, the default “U.S.” keyboard layout is still enabled. What am I doing wrong? <comment126679> Aha, it does seem to work if you restart the computer instead of just logging out and back in (step 4). Thanks! Would you mind posting a new answer with a link to your resource so you can get the bounty? <comment126704> @MathiasBynens I edited the answer and my website. When I tried the second method again, I also needed to restart to apply the changes. <comment127160> Works fine in OS X 10.9 if you restart your computer. However I had to remove also the temporary layout from the plist file and reboot using 'sudo reboot', otherwise the temporary layout was added back on normal reboot. <comment127161> Checked: my layout meets those criteria but it is not recognised as a possible default layout. So their engineers did not give the full information or gave incorrect information it seems. <comment127445> @Lri On 10.9 I had to delete :AppleEnabledInputSources:0 (the old default layout item) and the :AppleInputSourceHistory: dictionary (using PlistBuddy). No reboot, but only logoff necessary. <comment127454> @DmitryDulepov It is possible to use it as the default layout, but the button to remove the other still won't be activated; you would have to do that manually (see my comment to [Lri's answer](http://apple.stackexchange.com/a/60521/17515) <comment127572> @RolKau, yes but there are other issues later. If you have more than one layout, the new custom layout will not be available in some apps. For example, you will not be able to switch to it in the AppStore's search bar. At least, I could not. <comment172506> The OS X 10.9 procedure also works on OS X 10.10 Yosemite. <comment184222> It doesn't work on Yosemite for me. Whenever I change the file in Xcode it just gets restored after a few seconds. Can anyone explain how you did it exactly? <comment319533> This method worked for me (OS X 10.11 El Capitan) only after I followed these instructions: http://superuser.com/a/869751/119669