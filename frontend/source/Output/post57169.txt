How to auto mount internal SATA hard disk drives after power failure/interruption? <body> In a Mac OS X 10.7.5 (Lion) system with two internal SATA drives, the internal drives are connected via a Highpoint Rocketraid controller and are configured without any RAID thus operating in legacy mode.  Both locally attached SATA hard disk drives are not mounted after the Mac is powered up after a power failure/interruption (unclean shutdown). On the next clean reboot the two local volumes are mounted.  When the drive/volume has no read/write activity, then the volume fails to mount. In case there is no I/O activity on the drive/volume then the drive/volume will mount.  Both local volumes are identical:  precode$ diskutil info disk2s1    Device Identifier:        disk2s1    Device Node:              /dev/disk2s1    Part of Whole:            disk2    Device / Media Name:      Untitled 1     Volume Name:              A    Escaped with Unicode:     A     Mounted:                  Yes    Mount Point:              /Volumes/A    Escaped with Unicode:     /Volumes/A     File System Personality:  HFS+    Type (Bundle):            hfs    Name (User Visible):      Mac OS Extended    Owners:                   Enabled     Partition Type:           Apple_HFS    OS Can Be Installed:      No    Media Type:               Generic    Protocol:                 SCSI    SMART Status:             Not Supported    Volume UUID:              45D248ED-29E3-3344-8B62-4E43499568CE     Total Size:               3.0 TB (3000592979456 Bytes) (exactly 5860533163 512-Byte-Blocks)    Volume Free Space:        3.0 TB (2997719433216 Bytes) (exactly 5854920768 512-Byte-Blocks)    Device Block Size:        512 Bytes     Read-Only Media:          No    Read-Only Volume:         No    Ejectable:                Yes     Whole:                    No    Internal:                 No /code/pre  Partial log:  precodeJul 12 10:32:48 nl3 kernel[0]: jnl: disk3s2: replay_journal: from: 4367872 to: 5375488 (joffset 0x1c3000) Jul 12 10:32:48 nl3 kernel[0]: jnl: disk3s2: journal replay done. Jul 12 10:32:49 nl3 kernel[0]: hfs: Removed 0 orphaned / unlinked files and 329 directories  Jul 12 15:26:15 nl3 kernel[0]: disk3s2: device/channel is not attached. Jul 12 15:26:15 nl3 kernel[0]: /Volumes/Time Machine] [FSLogMsgID 381179371] [FSLogMsgOrder Last]  Jul 12 15:26:15 nl3 kernel[0]: disk3s2: device/channel is not attached. Jul 12 15:26:15: --- last message repeated 10 times --- Jul 12 15:26:15 nl3 kernel[0]: jnl: disk3s2: do_jnl_io: strategy err 0x6 Jul 12 15:26:15 nl3 kernel[0]: jnl: disk3s2: write_journal_header: error writing the journal header! Jul 12 15:26:15 nl3 kernel[0]: disk3s2: device/channel is not attached. Jul 12 15:26:15: --- last message repeated 48 times --- Jul 12 15:26:15 nl3 kernel[0]: 2309.inProgress/.Backup.363792189.590451.log] [FSLogMsgID 662186116] [FSLogMsgOrder Last]  Jul 12 15:26:15 nl3 kernel[0]: disk3s2: device/channel is not attached. Jul 12 15:26:16: --- last message repeated 76 times --- Jul 12 15:26:16 nl3 kernel[0]: 0451.log] [FSLogMsgID 860380055] [FSLogMsgOrder Last]  Jul 12 15:26:16 nl3 kernel[0]: disk3s2: device/channel is not attached. Jul 12 15:26:20: --- last message repeated 56 times --- Jul 12 15:26:20 nl3 kernel[0]: disk3s2: media is not present. Jul 12 15:26:20: --- last message repeated 7 times --- Jul 12 15:26:20 nl3 kernel[0]: jnl: disk3s2: close: journal 0x602ed30, is invalid.  aborting outstanding transactions Jul 12 15:29:00 nl3 kernel[0]: jnl: disk3s2: replay_journal: from: 4588544 to: 4118528 (joffset 0x1d9000) Jul 12 15:29:01 nl3 kernel[0]: jnl: disk3s2: journal replay done. Jul 12 15:47:16 nl3 kernel[0]: jnl: disk3s2: do_jnl_io: strategy err 0xdisk3s2: device/channel is not attached. Jul 12 15:47:16 nl3 kernel[0]: 6 Jul 12 15:47:16 nl3 kernel[0]: jnl: disk3s2: write_journal_header: error writing the journal header! Jul 12 15:47:16 nl3 kernel[0]: disk3s2: device/channel is not attached. Jul 12 15:47:24: --- last message repeated 15 times --- Jul 12 15:47:24 nl3 kernel[0]: disk3s2: media is not present. Jul 12 15:47:24: --- last message repeated 18 times --- Jul 12 15:47:24 nl3 kernel[0]: jnl: disk3s2: close: journal 0x602ed30, is invalid.  aborting outstanding transactions  /dev/rdisk3s2: fsck_hfs run at Thu Jul 12 15:55:59 2012 /dev/rdisk3s2: ** /dev/rdisk3s2 (NO WRITE) /dev/rdisk3s2:    Executing fsck_hfs (version diskdev_cmds-540.1~25). QUICKCHECK ONLY; FILESYSTEM DIRTY  /dev/rdisk3s2: fsck_hfs run at Thu Jul 12 15:55:59 2012 /dev/rdisk3s2: ** /dev/rdisk3s2 /dev/rdisk3s2:    Executing fsck_hfs (version diskdev_cmds-540.1~25).  /dev/rdisk3s1: fsck_hfs run at Thu Jul 12 16:01:55 2012 /dev/rdisk3s1: ** /dev/rdisk3s1 (NO WRITE) /dev/rdisk3s1:    Executing fsck_hfs (version diskdev_cmds-540.1~25). QUICKCHECK ONLY; FILESYSTEM CLEAN /code/pre  And both drives have an identical GUID partitioning schema and HFS+ file system:  precode$ diskutil list /dev/disk0    #:                       TYPE NAME                    SIZE       IDENTIFIER ... /dev/disk1    #:                       TYPE NAME                    SIZE       IDENTIFIER    0:      GUID_partition_scheme                        *3.0 TB     disk1    1:                  Apple_HFS J                       3.0 TB     disk1s1 /dev/disk2    #:                       TYPE NAME                    SIZE       IDENTIFIER    0:      GUID_partition_scheme                        *3.0 TB     disk2    1:                  Apple_HFS A                       3.0 TB     disk2s1 /code/pre  How to automatically mount these hard drives automatically after an unclean shutdown?  <answer92743> h1Boot script/h1  The best thing I can come up with, is a script that will run at boot, and will check whether each Apple_HFS TYPE of volume (disk*s*) is mounted. When the volume isn't mounted, try to repair and mount the volume.  h1Script commands explained/h1  h3List local HFS volumes/h3  The codediskutil list/code command is used to retrieve all local volumes that contain an Apple HFS file system. For example:  precode$ diskutil list | grep ":                  Apple_HFS" | awk '{ print $NF }' disk0s2 disk1s1 disk2s1 /code/pre  h3Is volume mounted?/h3  The codedf -lnh/code command is used to check whether that volume is mounted. When the volume is not mounted, the command returns no (empty) output. And when the volume is mounted, the output is like:  precode$ df -lnh | grep /dev/disk1s1 /dev/disk1s1   3.6Ti   13Mi  3.6Ti     1%    /Volumes/L /code/pre  h1Step by step installation/h1  h3Create bash script (version #2)/h3  precode$ sudo nano /Library/Scripts/BootRepairMount.sh /code/pre  Paste this text into the editor and save it.  precode#!/bin/bash TRIES=0 MAXTRIES=60 until diskutil list &gt; /dev/null;do     TRIES=$(($TRIES+1))     if [ $TRIES -gt $MAXTRIES ]; then         exit $?     fi     sleep 1 done TRIES=0 MAXTRIES=3 for OUTPUT in $(diskutil list | grep ':                  Apple_HFS' | awk '{ print $NF }') do     if [[ -z $(df -lnh | grep /dev/$OUTPUT) ]]; then         echo "$OUTPUT is not mounted, repair and mount"         until diskutil repairVolume $OUTPUT; do             TRIES=$(($TRIES+1))             if [ $TRIES -gt $MAXTRIES ]; then                 break             else                 sleep 1             fi         done         TRIES=0         until diskutil mount $OUTPUT; do             TRIES=$(($TRIES+1))             if [ $TRIES -gt $MAXTRIES ]; then                 break             else                 sleep 1             fi         done         TRIES=0     fi done /code/pre  h3Set the permissions of the script for root access only/h3  precode$ sudo chown -R root:admin /Library/Scripts/BootRepairMount.sh /code/pre  h3Make the script readable and executable for all users/h3  precode$ sudo chmod a=rx /Library/Scripts/BootRepairMount.sh /code/pre  h3Make the script admin writeable and executable/h3  precode$ sudo chmod u=rwx /Library/Scripts/BootRepairMount.sh /code/pre  h3Test run the script/h3  precode$ /Library/Scripts/BootRepairMount.sh /code/pre  h3Create a .plist file for launchd to run on boot/h3  precode$ sudo nano /Library/LaunchDaemons/nl.probackup.bootrepairmount.plist /code/pre  And paste this text into the editor window.  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;nl.probackup.bootrepairmount&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;/Library/Scripts/BootRepairMount.sh&lt;/string&gt; &lt;/array&gt; &lt;key&gt;UserName&lt;/key&gt; &lt;string&gt;root&lt;/string&gt; &lt;key&gt;UserGroup&lt;/key&gt; &lt;string&gt;wheel&lt;/string&gt; &lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true&gt;&lt;/true&gt; &lt;key&gt;Debug&lt;/key&gt; &lt;true&gt;&lt;/true&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  h3Change launchd plist permissions/h3  precode$ sudo chown -R root:wheel /Library/LaunchDaemons/nl.probackup.bootrepairmount.plist /code/pre  h3Load the plist into launchd/h3  precode$ sudo launchctl load /Library/LaunchDaemons/nl.probackup.bootrepairmount.plist /code/pre  h3Confirm that the plist is loaded/h3  precode$ sudo launchctl list | grep .bootrepairmount /code/pre  If the plist name appears, like:  precode851 -   nl.probackup.bootrepairmount /code/pre  itâ€™s installed.  h2Stop running script on boot/h2  To remove the .plist, in other words stop the script from being run at boot, type the following:  precode$ sudo launchctl unload -w /Library/LaunchDaemons/nl.probackup.bootrepairmount.plist /code/pre  hr  h1All in one line - copy and paste - installation/h1  precodefile=/Library/Scripts/BootRepairMount.sh;{ echo \#\!/bin/bash; echo TRIES=0; echo MAXTRIES=60; echo until\ diskutil\ list\ \&gt;\ /dev/null\;do; echo $'\t'TRIES=\$\(\(\$TRIES+1\)\); echo $'\t'if\ \[\ \$TRIES\ -gt\ \$MAXTRIES\ \]\;\ then; echo $'\t'$'\t'exit\ \$\?; echo $'\t'fi; echo $'\t'sleep\ 1; echo done; echo TRIES=0; echo MAXTRIES=3; echo for\ OUTPUT\ in\ \$\(diskutil\ list\ \|\ grep\ \':\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Apple_HFS\'\ \|\ awk\ \'\{\ print\ \$NF\ \}\'\); echo do; echo $'\t'if\ \[\[\ -z\ \$\(df\ -lnh\ \|\ grep\ /dev/\$OUTPUT\)\ \]\]\;\ then; echo $'\t'$'\t'echo\ \"\$OUTPUT\ is\ not\ mounted,\ repair\ and\ mount\"; echo $'\t'$'\t'until\ diskutil\ repairVolume\ \$OUTPUT\;\ do; echo $'\t'$'\t'$'\t'TRIES=\$\(\(\$TRIES+1\)\); echo $'\t'$'\t'$'\t'if\ \[\ \$TRIES\ -gt\ \$MAXTRIES\ \]\;\ then; echo $'\t'$'\t'$'\t'$'\t'break; echo $'\t'$'\t'$'\t'else; echo $'\t'$'\t'$'\t'$'\t'sleep\ 1; echo $'\t'$'\t'$'\t'fi; echo $'\t'$'\t'done; echo $'\t'$'\t'TRIES=0; echo $'\t'$'\t'until\ diskutil\ mount\ \$OUTPUT\;\ do; echo $'\t'$'\t'$'\t'TRIES=\$\(\(\$TRIES+1\)\); echo $'\t'$'\t'$'\t'if\ \[\ \$TRIES\ -gt\ \$MAXTRIES\ \]\;\ then; echo $'\t'$'\t'$'\t'$'\t'break; echo $'\t'$'\t'$'\t'else; echo $'\t'$'\t'$'\t'$'\t'sleep\ 1; echo $'\t'$'\t'$'\t'fi; echo $'\t'$'\t'done; echo $'\t'$'\t'TRIES=0; echo $'\t'fi; echo done; } &gt; ~/out_file;cat ~/out_file | sudo tee $file;rm ~/out_file;sudo chown -R root:admin $file;ls -l $file;sudo chmod a=rx $file;sudo chmod u=rwx /$file;file=/Library/LaunchDaemons/nl.probackup.bootrepairmount.plist;sudo launchctl unload -w $file &amp;&gt;/dev/null;{ echo \&lt;\?xml\ version=\"1.0\"\ encoding=\"UTF-8\"\?\&gt;; echo \&lt;\!DOCTYPE\ plist\ PUBLIC\ \"-//Apple//DTD\ PLIST\ 1.0//EN\"\ \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\&gt;; echo \&lt;plist\ version=\"1.0\"\&gt;; echo \&lt;dict\&gt;; echo \&lt;key\&gt;Label\&lt;/key\&gt;; echo \&lt;string\&gt;nl.probackup.bootrepairmount\&lt;/string\&gt;; echo \&lt;key\&gt;ProgramArguments\&lt;/key\&gt;; echo \&lt;array\&gt;; echo \&lt;string\&gt;/Library/Scripts/BootRepairMount.sh\&lt;/string\&gt;; echo \&lt;/array\&gt;; echo \&lt;key\&gt;UserName\&lt;/key\&gt;; echo \&lt;string\&gt;root\&lt;/string\&gt;; echo \&lt;key\&gt;UserGroup\&lt;/key\&gt;; echo \&lt;string\&gt;wheel\&lt;/string\&gt;; echo \&lt;key\&gt;RunAtLoad\&lt;/key\&gt;; echo \&lt;true\&gt;\&lt;/true\&gt;; echo \&lt;key\&gt;Debug\&lt;/key\&gt;; echo \&lt;true\&gt;\&lt;/true\&gt;; echo \&lt;/dict\&gt;; echo \&lt;/plist\&gt;; } &gt; ~/out_file;cat ~/out_file | sudo tee /$file;rm ~/out_file;sudo chown -R root:wheel $file;sudo launchctl load -w -F $file;sudo launchctl list | grep .bootrepairmount /code/pre  <comment109125> A bash script improvement might be to replace the `sleep` command with a loop that waits until the `diskutil` command returns more than 1 (=osx system boot drive)(?) result. <comment110153> The bash script (and one liner) in this answer have been improved to version #2, that does poll `diskutil` and then tries to repair and mount each volume up to 3 times.