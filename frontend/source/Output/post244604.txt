Launch daemon not processing program arguments <body> I have been trying to make a change (for port forwarding/redirecting) to the codepfctl.conf/code file and have it ( the code/etc/pfctl.conf/code file) loaded at startup. The codepfctl.conf/code has been been confirmed to be working as expected because issuing codesudo pfctl -ef /etc/pfctl.conf/code leads to the desired behavior (requests to one port get forwarded to the other).   That codepfctl/code itself is actually loaded at startup is also confirmed because doing codelaunchctl list | grep pf/code shows codecom.apple.pfctl/code in the output. However, the desired forwarding behavior is not achieved directly after startup. It happens only on doing codepfctl -f /etc/pfctl.conf/code after startup. Oddly enough, the output of codepfctl -ef /etc/pfctl.conf/code still says codepf already enabled/code.   Therefore, I concluded that while pf is loaded at startup, the daemon seems to not load from the conf file. The body of the launch daemon codecom.apple.pfctl.plist/code now looks like:   precode&lt;plist version="1.0"&gt; &lt;dict&gt;      &lt;key&gt;Disabled&lt;/key&gt;      &lt;false/&gt;      &lt;key&gt;Label&lt;/key&gt;      &lt;string&gt;com.apple.pfctl&lt;/string&gt;      &lt;key&gt;WorkingDirectory&lt;/key&gt;      &lt;string&gt;/var/run&lt;/string&gt;      &lt;key&gt;Program&lt;/key&gt;      &lt;string&gt;/sbin/pfctl&lt;/string&gt;      &lt;key&gt;ProgramArguments&lt;/key&gt;      &lt;array&gt;          &lt;string&gt;/sbin/pfctl&lt;/string&gt;          &lt;string&gt;-e&lt;/string&gt;          &lt;string&gt;-f&lt;/string&gt;          &lt;string&gt;/etc/pf.conf&lt;/string&gt;      &lt;/array&gt;      &lt;key&gt;RunAtLoad&lt;/key&gt;      &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  Having checked the discussion at  Getting launchd to read program arguments correctly it was informative but not practically helpful in this instance - I have already tried editing the program arguments of the plist file to include the full path to the pfctl executable (as can be seen in the code above - first line of the arguments array) but to no avail. I have also added an argument (second line of arguments array) to actually launch pfctl based on the discussion at this gist. The daemon also seems to be configured correctly according to the instructions at Apple developer docs. In accordance to the developer docs (which state that the program tag is required when the program arguments are not supplied and vice versa), I also tried removing the program tag while leaving the program arguments array in place (with the path to the executable as the first argument) - but this had no effect either.   emPuzzlingly, the shipped version of the codepfctl.plist/code file (which can be assumed to be most likely correct) had both the program tag and the program arguments tag, apparently in contradiction to the dev docs (or maybe I misunderstood the docs)./em  So now I am completely at a loss. Any help would be most appreciated!  strongAdditional info:/strong Not sure this is relevant, but just in case it is: the anchor file (created by me) which is referenced by pf.conf looks like:  precoderdr pass on lo0 inet proto tcp from any to 127.0.0.1 port =80 -&gt; 127.0.0.1 port 8888   /code/pre  So is there a possibility that the network interface is not yet active and addresses have not been assigned at the time the daemon runs? If so, how can it be fixed?  <comment301499> Looks to me like you have the path to pfctl twice in there. Remove the one from program arguments? <comment301536> Yes, in this snippet, that is indeed the case. The default (stock version) was indeed what you said - remove it from the program arguments. Since it didn't work, I tried adding it to the arguments after reading the (linked) manual. However, I have also tried having the full path in the program arguments tag but not in the program tag (removed the program tag entirely). None of the combinations worked sadly. <comment301540> Did you try putting it all in the program tag and just leaving the whole arguments dict out of it? Also, when it's running, how does ps wwaux look?