PuTTY Equivalent for Mac <body> Is there a good PuTTY (free telnet / ssh client) equivalent for OS X?  I know that I can just use terminal and an codessh/code command, but I want some sort of application that will store connection info, passwords, logs, etc for me, much like PuTTY.  Does this exist?  <answer69633> Yes. There is new kid in town:  http://www.royaltsx.com/main/home.aspx  <answer70382> PuTTY is a great Windows frontend, not to mention the need for an SSH client in the first place. On Linux, OS X, and most other UNIX-y based environments, SSH is generally purely command line, but still amazingly powerful.  The SSH client allows you to store an amazing amount of properties based on a given hostname, even global defaults, in the "ssh_config" client file. This file doesn't exist by default (per the comments on the question), but should be written at code~/.ssh/config/code.  That path equates to:br code~/code, your home directory, it expands on my system to code/Users/jason/code.br code.ssh/code, the leading dot makes it hidden. If you're in Terminal and in your home directory, you can simply run codecd .ssh/code and enter it.br codeconfig/code is the file name, it is a plain text file with configuration parameters.  I use this file to control tunnels I always use, the private key needed for the connection, the username (if it differs from my local username), etc.  See the manpage, either via codeman ssh_config/code on your own machine which will contain the most appropriate version, or you can view it online from OpenBSD's Site.  Some example contents from my ssh config file are:  precodeControlMaster auto ControlPath ~/.ssh/sockets/master-%r-%h-%p VisualHostKey yes  Host serve     Hostname 8.8.8.8     User        jason     IdentityFile ~/.ssh/id_rsa     LocalForward 5901 localhost:5901 /code/pre  Whitespace is purely personal preference, it is not required except to separate Keys from Values.  The first three lines are global properties, they affect every SSH connection. The second section is a host-specific configuration.  The codeHost/code line specifies the host tag you will use when invoking codessh/code. Ex. codessh serve/code. When running that, it loads all the properties listed until the next codeHost/code line.  Since codeserve/code is not necessarily a DNS name, I specify the codeHostname/code that it should actually connect to (no, not actually mine). codeUser/code is self explanatory and there just to be explicit, and the codeIdentityFile/code is the path to the Private Key file it uses to connect.  Lastly, codeLocalForward/code sets up a port forwarding rule that I send through the SSH tunnel.  The various syntaxes are all documented on the man page.  There is no mechanism for defining a plain text password. Password entry is ALWAYS interactive when setting up the SSH connection. If you want to log in automatically, set up Private Key Authentication. Storing plain text passwords is stupid, always.  I use this to great effect. And the best part? All your SSH configurations are incredibly portable, it's just one file that you have to backup/retain, and move between system to system! Not so portable to Windows, but who really likes dealing with the registry anyway?  <answer70391> I have no experiences with this App: strongZOC/strong - I only did a quick Google on "OS X telnet GUI" and got a link to this product as the first hit - but it seems to do the same as PuTTY.  There is a 30 days trial available.      ZOC is a professional SSH/telnet client and terminal emulator. With its impressive list of emulations it lets you easily connect to hosts and mainframes, using communication methods like secure shell, telnet, serial cable or modem/isdn.      Its sleek user interface has many ways of making your life easier. In its own way, ZOC is the Swiss Army Knife of terminal emulators: versatile, robust, proven.      Key Benefits:      ul   liTabbed sessions with thumbnails/li   liCustomizable to meet your preferences and needs/li   liScripting language with over 200 commands/li   liCompatible with Windows 7 and OS X Mountain Lion/li   liAdministrator friendly (deployment, configuration)/li   liNow $79.99 with attractive bulk discounts/li   /ul      Key Features:      ul   liEmulations: VT220, xterm, Wyse, QNX, TN3270, TN5250, .../li   liCommunication: SSH, Telnet, Modem, Serial Cable, .../li   liFile Transfer: SCP, Zmodem, Xmodem, Ymodem, Kermit, .../li   liClick here to find out more about ZOC's features.../li   /ul   <answer76706> You might want to consider:  h2Spackle (free, SourceForge link)/h2  This is a Java-based version of PuTTY, available for Mac and Linux.  <answer76737> Jason's answer is definitely the way to go, but I'd like to point out a feature of Terminal that may be useful.  Within Terminal, you can make a direct connection to a remote machine similar to the way PuTTY does, without first opening a terminal window on the local machine. Simply select Shell-New Remote Connection... (cmd-shift-K). In the window that pops up, you can add any SSH server to the right-hand column, including aliases defined in the ~/.ssh/config file.  Using Jason's example, you would select "Secure Shell" as the service on the left, and then add "serve" to the list of servers on the right.  In the future, you can open the dialog box (much like the main PuTTY window) and double-click the entry for the server you want to connect to. The only difference between this and PuTTY is that you put custom configuration settings in the ~/.ssh/config file, which I see as a huge advantage.  <answer128580> strongvSSH/strong is a strongPuTTY/strong-based OS X app.   ul liCan almost everything that strongPuTTY/strong can/li liMulti-tab multi-window interface/li liMacros support (you shell scripts as menu items for quick access)/li liiCloud synchronization (connections, macros and keys) with strongvSSH/strong and strongSSH control/strong apps for iOS/li /ul  Available on the Mac AppStore.  <answer141352> You can install PuTTy on OS X with Homebrew:  precodebrew install putty --with-gtk+ /code/pre  And then run it from terminal as codeputty/code.  If you don't have Homebrew, you can install it from Terminal:  precoderuby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" brew doctor /code/pre  <answer144154> Why not using MacPorts (https://www.macports.org/)? They have ported putty. You'll need to install MacPorts first, but once you've done that you can run:  precode&gt;sudo port install putty /code/pre  and you'll have putty available on your Mac.  <answer163621> Any terminal program could work with this answer, but I recommend iTerm2.  To store connection info and login with a single short command (no password typing required), you could use a strongkey-login/strong combined with an "strongalias/strong".  To use key-login on a server  Create an alias/shortcut  Once you have an ssh-key on your server and your Mac, you could login with a command such as:  precodessh username@10.0.0.1 /code/pre  Using an alias within ~/.bash_profile you could shorten the command with an alias such as:  precodealias s10="ssh username@10.0.0.1" /code/pre  Then in iTerm2 you only need to execute a command:  precodes10 /code/pre  to log into the server at 10.0.0.1 using ssh key login.  To store your session log (commands you've run) iTerm2 does this automatically, but you can adjust the amount of session logs you'd like to keep within Preferences - Default profile - Terminal - Scrollback buffer.  Tick the box for Unlimited scrollback if you prefer.  You can also store your logs indefinitely, between sessions by saving them to files.  Preferences - Default profile - Miscellaneous - Automatically log session input to files in [your chosen file on drive].  <answer251159> I have ported Putty to Mac as a native application bundle, so no need for macports or terminals if your not a technical user.  More information with screen-shots is here : http://www.wine-reviews.net/2016/08/putty-for-mac-os-x-now-available.html  Cheers,  <comment80889> Technically, SSH does all that by means of `ssh_config` (`~/.ssh/config`), but I'll keep my neckbeard at bay and understand that editing a plain text file with a defined format is not for everyone. I give PuTTY a lot of credit for it's setup (and a lot of grief too, admittedly). <comment80894> Could you expand on this answer? Adding more information about what this program does and how it answers the question would be good. From a brief look at the site, it appears to be more of a remote desktop client. If it does SSH, that's great, but some more information would improve this answer. <comment81519> I'm not able to locate this file.  Could you expand on this as an answer? This could be a viable solution. <comment81686> It isn't free, but many formers co-workers of mine swore by [JellyFiSSH](http://www.m-works.co.nz/jellyfissh.php) for managing connection info. It's currently $4 in the [Mac App Store](https://itunes.apple.com/us/app/jellyfissh/id416399476?mt=12). <comment109972> -1 not even good information there (not even sure it's an ssh client). still beta, preorder. <comment150601> Welcome to Ask Different! Please read the help center regarding [self-promotion](http://apple.stackexchange.com/help/behavior) and include a disclaimer if you are the author of the product in your answer. <comment155153> Seems not to be working with OSX Mavericks. <comment155424> This is not free ($4.99) <comment312141> If using wine it is not a native app - porting implies recoiling.