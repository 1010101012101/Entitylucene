How to adjust the compiler for c++11 on 10.8 <body> Originally, I posted my question on Stack Overflow.Compile R package It seems that when installing the emR library(Boom)/em I always get that error relating to compile error:     fatal error: 'future' file not found include  1 error generated   So I thought that might be the solution, where Michael suggests to change the compiler by simply telling "the compiler to use it using -stdlib=libc++ and tell the linker to link against it using -lc++." Source: Blog  I'm somehow lost on that and can't really implement it. May I ask for some assistance?  I tried that as well:  codewget https://raw.githubusercontent.com/zeromq/cppzmq/master/zmq.hpp/code  codemv zmq.hpp /usr/local/include//code  I'm using Mac OSX 10.8.5 with Xcode version: 5.1.0, Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn) Target: x86_64-apple-darwin12.6.0.  Here is the link to the Boom package,a C++ library for Bayesian modeling.  <comment262171> This question belongs on StackOverflow. <comment262172> Why is that? I just ask how to adjust the compiler on 10.8.6 <comment262183> This is clearly on topic here. Whether it fits on SO is irrelevant unless the asker wants it moved there. @ Googme - can you link to the boom package specifically or list the steps you follow to download and install this on a new user on the Mac in question? Also - are you OK with R 3.2.1 or do you need to work through the issues in porting the newer R onto an older OS and toolchain? <comment262185> Hi @ bmike, yes I'm Ok with R 3.2.1. I used install.packages("Boom") Because the package itself is on CRAN. So it seems therefore, that my C++ compiler might be the issue. Originally, I had installed the Command Line Tools as well as Xcode. And marco from SO (above link) has related that to "This is almost certainly due to the missing --std=c++11 flag" which I do not fully understand even after spending hours with googling. <comment262204> Perfect, I might have time to try and reproduce your error. Getting compiler flags to be included is a bit of a pain if you're not up on how a specific package likes to construct the compiler options.