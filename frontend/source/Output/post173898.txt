Repurposing "menu" button on Windows keyboards used in OS X <body> Windows keyboards map pretty intuitively to OS X, leaving only the "context menu" button a little purposeless. I would like the menu key to behave as another Command key.  strongHow does one define what the "context menu" key on Windows keyboards does in OS X?/strong     img src="https://i.stack.imgur.com/zkLik.png" alt="enter image description here"      On this keyboard, the "context menu" key is directly under the "." (period/greater than) key; on the bottom row between "alt" and "ctrl" on the right side, two keys to the left of the "left arrow" key. What does it do in OS X, and what is it called?   <answer174092> It has neither purpose nor name in OS X.   Maybe Karabiner could do it, if you can figure out what key code it sends - try Key Codes to see if it generates anything usable.  <answer280677> I found that Seil works to change the "context menu" key to the 'Option' function (I presume it would work to change to 'Command' as well, although I have not tried it) in El Capitan.   In 'System Preferences... | Keyboard' I changed the 'Option' to 'Command' and 'Command' to 'Option', so that the keys are in the same order as on my MacBook Pro, to facilitate "muscle memory".   Then in 'Seil Preferences | Setting | Keys on non-Apple keyboard' I checked 'Enable Application Key (Menu Key)' and set the keycode to '54' (according to 'Seil' this is 'Right Command', but probably because of the switch in 'Keyboard' it functions as 'Option'.  So that gives me this:  img src="https://i.stack.imgur.com/KdMOc.png" alt="Keyboard"  <answer285305> To expand on @Tetsujin's answer: you can indeed achieve this with Karabiner. Here are some detailed instructions.  In short: go to the Misc &amp; Unistall tab, open private xml, change it to:  precode&lt;?xml version="1.0"?&gt; &lt;root&gt;   &lt;item&gt;     &lt;name&gt;Menu key to option right&lt;/name&gt;     &lt;identifier&gt;private.menu_key_to_OPTION_R&lt;/identifier&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::PC_APPLICATION, KeyCode::OPTION_R&lt;/autogen&gt;   &lt;/item&gt; &lt;/root&gt; /code/pre  Go back to the Change Key tab, click Reload XML, and strongtick the new mapping you just made/strong at the top of the list.  emKarabiner has its own keyboard EventViewer in the Misc tab, so you don't need KeyCode./em  <answer290731> Karabiner doesn't seem to support OS Sierra yet but Karabiner Elements does. Installing it takes a bit of work but once you've done that you can map "application" to e.g. "right_command" to make it work like you described.  <answer295904> I use strongMacOSX 10.11.6 El Capitan/strong (from a broken Mac mini) on an stronghp-2570p EliteBook/strong, so the Windows menu-key isn't recognized as "PC_APPLICATION" but simply as "FN" = function key.br Unfortunately this key blocks secondary keys so I had to do some more elaborate twitching to get where I wanted:  Using strongKarabiner/strong (with integrated strongEventViewer/strong for information on keys/names/windownames) I reused the key to:br  – mimic strongæ-i/strong in Finder (repeat for strongclosing/strong)br  – mimix strongæ-i/strong in VLC ( – " – )br  – do stronghistory-back/strong in Safaribr Further I made other non-menu-key changes:br  – strongredefined some keys/strong that aren't labeled correctly on my strongGerman keyboard/strongbr  – made access to strongpageUp/Down "one-handed"/strong on my keyboard (not shown)    I'll probably find some more simplifications in other applications over time ...br I used this "individual" code in "private.xml" (details: see post by antoine):  precode&lt;!-- 1st item redefines &lt;,&gt;,^,° for my keyboard (effective for further items !!!) &lt;item&gt;       &lt;name&gt;Switch_specialKeys_^_°&lt;/name&gt;     &lt;identifier&gt;private.Switch_specialKeys_^_°&lt;/identifier&gt;         &lt;autogen&gt;__KeyToKey__ KeyCode::BACKQUOTE, ModifierFlag::SHIFT_L, KeyCode::GERMAN_U_UMLAUT, ModifierFlag::SHIFT_L | ModifierFlag::OPTION_L&lt;/autogen&gt;         &lt;autogen&gt;__KeyToKey__ KeyCode::BACKQUOTE, KeyCode::6, ModifierFlag::SHIFT_L | ModifierFlag::OPTION_L&lt;/autogen&gt;         &lt;autogen&gt;__KeyToKey__ KeyCode::DANISH_DOLLAR, KeyCode::BACKQUOTE&lt;/autogen&gt;         &lt;autogen&gt;__KeyToKey__ KeyCode::BACKQUOTE, KeyCode::DANISH_DOLLAR, ModifierFlag::SHIFT_L&lt;/autogen&gt; &lt;/item&gt;  &lt;!-- Next 2 items differentiate "Cmd-i/-w" via (not-)AXWindow for dual use --&gt; &lt;item&gt;     &lt;name&gt;WinR-FNDR æ-I&lt;/name&gt;     &lt;identifier&gt;private.WinMenu_to_Cmd-I&lt;/identifier&gt;     &lt;uielementrole_not&gt;AXWindow&lt;/uielementrole_not&gt;     &lt;only&gt;FINDER&lt;/only&gt;         &lt;autogen&gt;           __KeyToKey__ KeyCode::FN, KeyCode::I, ModifierFlag::COMMAND_L         &lt;/autogen&gt; &lt;/item&gt; &lt;item&gt;     &lt;name&gt;WinR-FNDR æ-W&lt;/name&gt;     &lt;identifier&gt;private.WinMenu_to_Cmd-W&lt;/identifier&gt;     &lt;only&gt;FINDER&lt;/only&gt;     &lt;uielementrole_only&gt;AXWindow&lt;/uielementrole_only&gt;         &lt;autogen&gt;           __KeyToKey__ KeyCode::FN, KeyCode::W, ModifierFlag::COMMAND_L         &lt;/autogen&gt; &lt;/item&gt;  &lt;!-- For VLC the &lt;uielementrole_only&gt; elements are "AXWindow" for the main      window and "AXRadioButton" for its information window. --&gt;  &lt;!-- My shortcut for Safari's "history-back" consists of this definition:      &lt;autogen&gt;         __KeyToKey__ KeyCode::FN, KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L     &lt;/autogen&gt;      --&gt; /code/pre  For PC applications running under CrossOver the application names aren't recognized by Karabiner, so I used &lt;appdef&gt; to (re)define their names and &lt;windownamedef&gt; to address a particular window; these definitions were then available in &lt;only&gt; and &lt;windowname_only&gt; tags.  <comment204660> It has neither purpose nor name in OS X. My Win keyboard actually has a second Windows key there, with that one next to it to the right. Maybe [Karabiner](https://pqrs.org/osx/karabiner/) could do it, if you can figure out what key code it sends - try [Key Codes](http://manytricks.com/keycodes/) to see if it generates anything usable <comment204919> We have a special word for information like this here at SE, sir, and that word, sir, is *answer*! Should you be so kind as to supply this information using the answer box, I shall certainly accept it as such! <comment204942> Glad it helped - one rather crisp & dry answer provided, below :) <comment204943> Key Codes reports code 110 for the "context menu" button, and in deed Karabiner traps and repurposes it like I wanted! <comment373700> Karabiner has EventViewer integrated and offers to copy its findings to clipboard. I found KeyCodes a little confusing as it displays much more than needed by Karabiner. (See my "own" answer below.)