What versions of OS X are affected by Heartbleed? <body> What versions of OS X come default with the affected versions of OpenSSL?  All Internet traffic right now is clogged with the same generic information in regards to the Heartbleed bug, without any attention paid to Macintosh in the environment. I am looking for information on Mac OS X client as well as Mac OS X server. Right now it's impractical for me to check all the Macs in the environment for their specific version of OpenSSL, but I already have the Mac OS X version information for the affected machines.  <answer126918> I have run codeopenssl version/code on every Mac I could get my hands onsup1/sup and all of them show:  precodeOpenSSL 0.9.8y 5 Feb 2013 /code/pre  …including the current latest version: OS X 10.9.2.  Therefore I can conclude that strongno version of OS X is affected/strong by Heartbleed.  supsup1/sup and also ones I couldn't and just had SSH — still tested though, production machines are important! All in all I tested around 30 machines with various versions of OS X./sup  <answer126924> No versions of OS X are affected (nor is iOS affected). Only installing a third party app or modification would result in a Mac or OS X program having that vulnerability / bug in OpenSSL version 1.0.x  hr  Apple deprecated OpenSSL on OS X in December of 2012 if not earlier. No version of OpenSSL that is vulnerable to CVE-2014-0160 (a.k.a the Heartbleed Bug)  Apple provides several alternate application interfaces that provide SSL to Mac developers and has this to say about OpenSSL:     OpenSSL does not provide a stable API from version to version. For this reason, although OS X provides OpenSSL libraries, the OpenSSL libraries in OS X are deprecated, and OpenSSL has never been provided as part of iOS. Use of the OS X OpenSSL libraries by apps is strongly discouraged.   Specifically, the latest version of OpenSSL shipped by Apple is strongOpenSSL 0.9.8y 5 Feb 2013/strong which does not appear to have the bug from newer versions of OpenSSL back ported to the code for Apple's version of the library.  The PDF of this documentation has some clearly written advice for developers and some sections that's useful for professionals or the security minded user as well.  ul liOpenSSL for Mac Developers and PDF version of Apple's Cryptographic Services Guide/li /ul  Considering this, the only remaining issue would be additional software that were built against OpenSSL, e.g. several in Homebrew (codebrew update/code followed by codebrew upgrade/code) or MacPorts (codeport self update/code followed by codeport upgrade openssl/code) to update to the patched 1.x version of openSSL.  Also, you could use mdfind/mdls to check on files named openssl in case you have other applications that bundle that library as Apple recommends rather than depending on the "safe" version Apple still ships with OS X.  precodefor ff in `mdfind kMDItemFSName = "openssl"`; do echo "#### $ff"; mdls $ff | grep kMDItemKind; done /code/pre  <answer126952> While OS X doesn't ship with the affected releases of OpenSSL, it's still strongly encouraged to do a codeopenssl version/code in case one may have been installed as part of some  third party package.  For example, my computer reported codeOpenSSL 1.0.1f 6 Jan 2014/code because it had been included as a dependency for something I had installed through MacPorts. codesudo port upgrade outdated/code solved this, of course.  <comment148669> This is more a concern for web servers than clients used to connect to them. Your information can be compromised even if your machine doesn't have the Heartbleed version of OpenSSL. <comment148670> @Mark true, but what happens when someone wants to run an app that turns their machine into a webserver, and uses the built in version of OpenSSL? Mac apps maybe not so much, but that's why I asked about OS X server as well. Mobiles are likely to be more effected though b/c a lot of mobile apps try to implement that functionality. <comment148673>  A missing bounds check in the handling of the TLS heartbeat extension can be used to reveal up to 64k of memory to a connected client or server. **Only 1.0.1 and 1.0.2-beta releases of OpenSSL are affected including 1.0.1f and 1.0.2-beta1.** via [openssl.org](https://www.openssl.org/news/secadv_20140407.txt), (emphasis added). So as grgarside said... <comment148674> @dwightk The question was about which versions of *OS X* have one of the effected OpenSSL version. The versions of OpenSSL that are effected are well known, thanks though. <comment148710> For those who use MacPorts, they've released an updated OpenSSL as well. Running `port selfupdate` followed by `port upgrade openssl` will get you the fixed 1.0.1g version. <comment148778> @CoreDumpError Thanks for that - I did embed your commands in the answer so that people see it clearly right next to the homebrew "recipe". <comment148786> I was showing 1.0.1e. Thanks for the tip. <comment148873> OS X it is (not OSX). <comment148911> However, the whole question largely misses the point that it isn't client machines that are in danger, but servers. If you are accessing a server that has been compromised, then it doesn't matter whether you run MacOS X or Windows 95, you are accessing a server that might be leaking any information the server has about you. It's only of interest if you are using your own Mac as a server. <comment148912> -1, `...the whole question largely misses the point that it isn't client machines that are in danger...` not entirely true; I specifically ask for Server versions as well, and it's been mentioned [here](http://apple.stackexchange.com/questions/126916/what-versions-of-os-x-are-affected-by-heartbleed/127056?noredirect=1#comment148670_126916) about the possibility of client machines being vulnerable. This is also not a real answer, so should have been a comment to the question. <comment148913> Not true. The exploit can be used _by_ malicious servers _against_ clients which use OpenSSL to make the connection. <comment148914> @gnasher729 There is no reason you can't ask a different question about the point you feel is missing. This Q&A is narrow and focused on what versions of OS X might have their memory contents exposed to the network by a programming bug. It's not meant to be a general risk assessment for any Mac user or even about any larger picture. <comment148918> It’s also worth noting that Apple’s client software uses Secure Transport, Apple’s own code, *not* OpenSSL; the same goes for any software using Cocoa or Core Foundation APIs to communicate over the 'Net. <comment149053> Curiosity: do you know why Apple stopped using OpenSSL? <comment149054> FWIW - an unrelated bug was found in Apple's SSL code less than 2 months ago: http://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/ <comment149639> @Peter Mortensen: Fixed :) <comment149646> And, if you have 1.x, then ideally you'll see `OpenSSL 1.0.1g 7 Apr 2014` for the safe/patched version.