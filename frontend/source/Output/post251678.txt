DNS Resolution Fails for ping and curl, but not dig <body> I'm running DNSMasq as a local DNS server, so I can resolve code*.local.pcfdev.io/code (as discussed here Using PCF Dev Offline with Mac OS X). Everything worked when I first set things up.  A couple of days later, after a few restarts of my MacBook, whilst offline I can no longer resolve things like codeapi.local.pcfdev.io/code using codecurl/code or codeping/code. However, codedig/code does the right thing.  precode$ dig api.local.pcfdev.io  ; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; api.local.pcfdev.io ;; global options: +cmd ;; Got answer: ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 46877 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0  ;; QUESTION SECTION: ;api.local.pcfdev.io.       IN      A  ;; ANSWER SECTION: api.local.pcfdev.io.    0       IN      A       192.168.11.11  ;; Query time: 1 msec ;; SERVER: 127.0.0.1#53(127.0.0.1) ;; WHEN: Tue Sep  6 10:17:44 2016 ;; MSG SIZE  rcvd: 53  $ curl api.local.pcfdev.io curl: (6) Could not resolve host: api.local.pcfdev.io /code/pre  I've tried adding code-AlwaysAppendSearchDomains/code as an argument to code/usr/sbin/mDNSResponder/code in code/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist/code and restarted the mDNSResponder with codelaunchctl/code, but to no avail.  hr  strongUPDATE 1/strong  There is definitely something listening on the right local IP:  precode$ nslookup api.local.pcfdev.io Server:     127.0.0.1 Address:        127.0.0.1#53  Name:   api.local.pcfdev.io Address: 192.168.11.11  $ ping api.local.pcfdev.io ping: cannot resolve api.local.pcfdev.io: Unknown host  $ telnet 192.168.11.11 80 Trying 192.168.11.11... Connected to 192.168.11.11. Escape character is '^]'.  HTTP/1.1 400 Bad Request  Connection closed by foreign host. /code/pre  hr  strongUPDATE 2/strong  After trying the suggestion below of removing all DNS servers from Network Preferences except code127.0.0.1/code, I can't resolve anything. I managed to get some debug logging out of codemDNSResponder/code:  precodemDNSResponder[91]:  74: DNSServiceCreateConnection START PID[32612](ping) mDNSResponder[91]:  74: Error socket 75 created 00000000 00000001 mDNSResponder[91]:  74: DNSServiceQueryRecord(15000, 0, api.local.pcfdev.io., Addr) START PID[32612]() mDNSResponder[91]:  74: Error socket 75 closed  00000000 00000001 (0) mDNSResponder[91]:  74: DNSServiceQueryRecord(api.local.pcfdev.io., Addr) ADD    0 api.local.pcfdev.io. Addr mDNSResponder[91]:  74: Cancel 00000000 00000001 mDNSResponder[91]:  74: DNSServiceQueryRecord(api.local.pcfdev.io., Addr) STOP PID[32612]() mDNSResponder[91]:  74: DNSServiceCreateConnection STOP PID[32612](ping) /code/pre  I did also observe that as explained in the proposed answer, codenslookup/code and codedig/code don't cause anything to be logged by codemDNSResponder/code, but other tools (codeping/code, codecurl/code) do.  So it seems like for whatever reason either codednsmasq/code isn't working (I can establish a TCP connection to code127.0.0.1:53/code) or codemDNSResponder/code isn't using it.  hr  strongUPDATE 3/strong  codeetc/resolve.conf/code ceases to exist when my wifi adapter is active, but I'm not connected to a network. Could this be why CLI tools don't use the local codednsmasq/code server?  <answer251683> emdig/em on the one hand and emcurl/ping/em on the other hand are retrieving data from different hosts:  emdig/em queries a DNS server – in your case your localhost (127.0.0.1) – for a database entry: the IP address related to the FQDN api.local.pcfdev.io. The host itself doesn't have to run or even exist at all.  emcurl/ping/em try to resolve an IP-address with mDNSResponder or by other means and finally operate on/interact with the remote host. If the host 192.168.11.11 doesn't run or doesn't exist at all, both will fail.  Now, either the DNS entry is wrong (api.local.pcfdev.io has another IP than 192.168.11.11) or the DNS entry is correct but the host 192.168.11.11 is not running.  hr  Adding em-AlwaysAppendSearchDomains/em as an argument to /usr/sbin/mDNSResponder in em/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist/em is not recommended. Instead you should add it to /Library/Preferences/com.apple.mDNSResponder.plist (source: codeman mDNSResponder/code):     To cause mDNSResponder to run with these optional arguments when it launches on OS X 10.11 (El Capitan) and later, set the AlwaysAppendSearchDomains or NoMulticastAdvertisements boolean keys to true in /Library/Preferences/com.apple.mDNSResponder.plist and reboot.   In your case it's not necessary at all to set this key, because it's not the cause of your problem.  hr  After digging into VirtualBox, PCF Dev (failing repeatedly with some "wrong credentials" trying to log into the VM) and dnsmasq I recommend to devolve DNS queries to dnsmasq only:  ul liIn System Preferences  Network  Interface  DNS server remove all DNS servers except 127.0.0.1 and apply the changes. You may also configure a second emLocation/em with a 127.0.0.1 only setup and keep your current DNS server in the other configuration./li liadd a file /usr/local/etc/resolv.dnsmasq.conf with the content  precode#use your preferred DNS servers here. In the example I use some Google name servers nameserver 8.8.8.8 nameserver 8.8.4.4 /code/pre/li liadd coderesolv-file=/usr/local/etc/resolv.dnsmasq.conf/code at line ~46 of /usr/local/etc/dnsmasq.conf/li liadd or move codeaddress=/.local.pcfdev.io/192.168.11.11/code at/to line ~80 of /usr/local/etc/dnsmasq.conf/li lirestart dnsmasq with:  precodesudo launchctl stop homebrew.mxcl.dnsmasq sudo launchctl start homebrew.mxcl.dnsmasq /code/pre/li /ul  <comment312991> Thanks for taking the time to answer. There is definitely something listening on `192.168.11.11`; the actual public DNS entry for `*.local.pcfdev.io` always points back to the same local IP, so as soon as I connect to the inforwebs `curl` must be getting an answer from _that_ DNS server and is able to figure out what IP address to use. <comment312992> It seems like `curl`, `ping`, and the other binaries I want to hit this thing are using one means of looking up DNS entries (which isn't using the `dnsmasq` server on localhost), and `nslookup` and `dig` are using another means.  I guess I need to learn more about mDNSResponder! <comment312993> @EngineerBetter Do you have any other entries in System Preferences  Network  Interface  DNS than 127.0.0.1? - I'm gonna install the whole suite (VBox, PCF Dev etc.) and check this... Any special config? <comment313076> Thanks again for taking the time to help me with this. Question has been updated, still having no luck. <comment317655> Is your network adapter down by chance? If you go to 'Network' in System Preferences, is there a green dot next to the adapter that dnsmasq is configured for use in? <comment317656> Well, I'm on a train with no wi-fi, so presumably. <comment317657> Specifically, is the wifi adapter turned off? If so, please try again with the wifi adapter turned on (even though it might not actually be connected to the internet). For the setup to work, dnsmasq needs to be a DNS server on the network interface *in use*. <comment317659> Interesting, will give it a go. Thanks!