AppleScript alternatives <body> I've recently discovered AppleScript. AppleScript affords a simple, natural way to programmatically simulate keyboard-and-mouse interaction with Mac applications. AppleScript is great, however it suffers from the following problems:  ol liThe latest stable release is from 2014, and last year the AppleScript product manager was laid off and his position was eliminated./li liThe official documentation has not been updated since January 2016, and all of the tutorial and reference books that are dedicated to AppleScript date no later than 2010 (with the exception of this one, which seems to be a copy-and-paste of some stackexchange Q&amp;A with the AppleScript tag). /li liScript Editor, the built-in AppleScript development environment, has no debugging capabilities. There seems to be just one commercial IDE for AppleScript*. It looks amazing and has all the debugging features that one would expect from a modern IDE, but it costs $100, which would be too expensive for my pocket even if Apple did not seem to be phasing out this programming language (see bullet point #1)./li /ol  Are there any alternatives to AppleScript? Is there an actively developed and supported programming language with a good, cheap IDE, and good, up-to-date documentation, that makes it possible to simulate keyboard-and-mouse interaction with Mac applications in a quick and easy way? Something, maybe, like the Apple counterpart for Microsoft's VBA (Visual Basic for Applications) for their Office suite on Windows?  hr  * It appears there's another third-party AppleScript IDE: Smile. Unlike Script Editor, Smile is free of charge.  <answer281108> First of all: DON'T PANIC :)  No, there are no good/useful/less painful alternatives to Automator/AppleScript. At least not if you really need to automate some workflow within the UI.   <answer281149> Since Yosemite, OS X/macOS also supports JavaScript as an inter-process scripting language--officially known as emJavaScript for Automation/em, also referred to as emJXA/em. The documentation (and some would say, the implementation) is somewhat lacking compared to AppleScript, but if you're already more familiar with JavaScript than AppleScript, then it might be an option.  Like AppleScript, JXA also offers an ObjC bridge allowing you to use Cocoa APIs in your JavaScript.  One advantage is that there are many more editors and IDEs out there designed for JavaScript coding than there are for AppleScript, though Script Editor and Automator probably still have the edge for debugging JXA-specific stuff.  Official resources:  ul liMac Scripting Essentials (covers AppleScript and JavaScript)/li liJXA Release Notes/li /ul  Some unofficial resources:  ul lihttps://github.com/dtinth/JXA-Cookbook/wiki /li lihttps://www.macstories.net/tutorials/getting-started-with-javascript-for-automation-on-yosemite//li lihttps://hackmag.com/coding/getting-to-grips-with-javascript-automation-for-os-x//li lihttps://tylergaw.com/articles/building-osx-apps-with-js/li lihttps://stackoverflow.com/questions/tagged/javascript-automation/li /ul  <comment353673> AppleScript *is* the counterpart of VBA :-) What kind of problems do you intend to solve with AppleScript or whatever alternative people might propose? There are some tools available but the specific one heavily depends on your intentions. <comment353675> @patrix: Take this for instance. I've recently had the need to perform the following on a list of 8000 corrupt PNG image files: 1. Open the file in Preview, 2. Save it back. This simple procedure was enough to correct the files' corrupt META info. Using AppleScript I was able to do this very easily. <comment353691> I'm hoping with the acquisition of Workflow for iOS, Apple is aiming to cleanup and unify automation of macOS and iOS. One can dream, eh? <comment353695> Reports of AppleScript's demise may be premature.  Its design dates from Mac OS 7.1 IIRC and it is interdependent with Mac application IPC.  Shell scripts can run snippets of AppleScript using the osascript command.  By extension C, C++ and Objective-C have the same capability.  However, that would be cumbersome compared to (I believe) AppleScript APIs available to all those languages.  And I haven't even considered at Swift yet.  From O'Reilly "Applescript and Python are quite different, but can be used together to make very efficient tools without compromising the modularity of Python". <comment353702> @DAVincent: What do you mean by "And I haven't even considered at Swift yet"? That Swift has a convenient AppleScript API? Or that Swift is particularly cumbersome in comparison with AppleScript? <comment353704> Sorry.  I meant I myself haven't taken the time to find out what the plan is with Swift.  My money would be on a convenient API soon, if not already.  And if Apple don't do it, nothing would stop someone else doing it. <comment353714> @DAVincent: You quoted a source that claimed that AppleScript and Python can be used together. According to [this page](https://wiki.python.org/moin/MacPython/AppleScript) the only recommended high-level Python-AppleScript module is [AppScriptModule](https://wiki.python.org/moin/MacPython/AppscriptModule). However, according to [the appscript module homepage](http://appscript.sourceforge.net/), it "is no longer developed or supported, and its use is not recommended for new projects". So it appears there isn't any viable high-level Python-AppleScript interoperability module at the present time. <comment353758> If you want an IDE for AppleScript, look at ScriptDebugger from Late Night Software (http://latenightsw.com). It has debugging and breakpoints etc, and is FAR more capable than Apple's ScriptEditor. It is commercial, but well worth if if you are a serious scripter. You can also use many of Objective-C's methods in AppleScript, which gives you a LOT of additional built in methods to use, but does add complexity to your script. Also check out http://macosautomation.com for other tips.