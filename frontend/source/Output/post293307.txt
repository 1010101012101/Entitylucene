Applescript run from menu bar? <body> I am aware of the Script Editor menu. That is not what I'm looking for.  Is there a way to run an Applescript from the menu bar? I can save it as a file and run it from the Script Editor menu, and I can save it as an application and stick it in my dock. Is there a file format that allows it to run from the menu bar, as many applications do? Or a way to edit the code that does the same thing?  <answer293310> There is a little-used "Services" menu (in the menu under the application's name) and you can save scripts as services and make them available in the services menu for either a specific application .  There is also the concept of applications that are "attachable," these applications allow you to add scripts to the application's own menu commands. But applications that are attachable seem rare.  Does any of that fit what you are looking for?  <answer293319> Normal AppleScript as a script or AppleScript application created in Script Editor is not supported as a Menu Bar app. You'd have to use Cocoa-AppleScript or build an app in Xcode (or use a third-party launcher) if you don't want to use the Script menu in the Menu bar.   Here's an example app done in Xcode using Swift: WeatherBar.  One long time trusted app that does this is FastScripts, and although it's looks like the Scripts menu it does offer additional functionality. It can be run as a free app, up to 10 keyboard shortcuts, or upgraded for $9.95 to unlock unlimited keyboard shortcuts.  I have no affiliation with Red Sweater Software, LLC, other then as a user of FastScripts as a free app.  <answer293383> Depending on what exactly you want to do with your apple script, maybe bitbar could be suitable for your purpose.   In general this application lets you display the output of a variety of scripts in the menu bar - many scripts are already finish but you can also write your own.   But it can also be used to execute codeapplescripts/code. I use it to execute an codeapplescripted/code saved as codeservice/code by calling it through a little bash script:   precode#!/bin/bash echo "blub" echo "---" echo "1 | bash=/Users/username/Library/Services/Space_1 terminal=false" /code/pre  <answer293392> Cocoa-AppleScript as a script or AppleScript application created in Script Editor supports Menu Bar app. This script runs on macOS 10.12 (maybe runs on 10.10.x, 10.11.x). This script can be saved as application.  precode--AppleScript: menu bar script -- Created 2017-03-03 by Takaaki Naganoya --2017 Piyomaru Software use AppleScript version "2.4" use scripting additions use framework "Foundation" use framework "AppKit" --http://piyocast.com/as/archives/4502  property aStatusItem : missing value  on run     init() of me end run  on init()     set aList to {"Piyomaru", "Software", "", "Takaaki", "Naganoya", "", "Quit"}     set aStatusItem to current application's NSStatusBar's systemStatusBar()'s statusItemWithLength:(current application's NSVariableStatusItemLength)      aStatusItem's setTitle:""     aStatusItem's setHighlightMode:true     aStatusItem's setMenu:(createMenu(aList) of me) end init  on createMenu(aList)     set aMenu to current application's NSMenu's alloc()'s init()     set aCount to 1     repeat with i in aList         set j to contents of i         if j is not equal to "" then             set aMenuItem to (current application's NSMenuItem's alloc()'s initWithTitle:j action:"actionHandler:" keyEquivalent:"")         else             set aMenuItem to (current application's NSMenuItem's separatorItem())         end if         (aMenuItem's setTarget:me)         (aMenuItem's setTag:aCount)         (aMenu's addItem:aMenuItem)         if j is not equal to "" then             set aCount to aCount + 1         end if     end repeat      return aMenu end createMenu  on actionHandler:sender     set aTag to tag of sender as integer     set aTitle to title of sender as string      if aTitle is not equal to "Quit" then         display dialog aTag as string     else         current application's NSStatusBar's systemStatusBar()'s removeStatusItem:aStatusItem     end if end actionHandler: /code/pre  hr  I previously edited the original emcode/em, posted by Piyomaru, just to the point it would compile and wanted to add some additional information to make the example emcode/em more useful for anyone relatively new to AppleScript.  Presently in the example emcode/em, if saved as an emapplication/em it has no emcode/em to quit the emapplication/em, it only removes the menu bar object. So, in the codeactionHandler/code emhandler/em of the emscript/em, add the following to the codeelse/code embranch/em of the codeif/code emstatement/em, after the existing emcode/em:  precode        if (name of current application) is not "Script Editor" then             tell current application to quit         end if /code/pre  It's coded so if/when run from within Script Editor it will not attempt to close Script Editor. You can use it without the codeif/code emstatement/em block and use just codetell current application to quit/code if you're not going to run it from within Script Editor.  Because this emscript/em is using Cocoa-AppleScript, once run from within Script Editor, it must be compiled again just before saving it in order to flush the C and Objective-C pointers created by the Cocoa-Applescript emcode/em, since pointers cannot be saved in the script. Just click the hammer icon on the Toolbar, or: Script Editor  Script  Compile   âŒ˜K  Additionally, when saved as an emapplication/em you must check the strongStay open after run handler/strong emcheck-box/em when saving it, and by default the app's Dock Tile will show in the Dock when running. As this might be unwanted behavior for a menu bar app, use the following emcommand/em in Terminal to add the necessary emkey/em to the app's strongInfo.plist/strong file so it will not show in the Dock.  precodedefaults write /Applications/name_of_app.app/Contents/Info.plist LSUIElement -bool yes /code/pre  ul liReplace codename_of_app/code with the actual name you saved it as, and if necessary change the path if not in code/Applications/code./li liNote that if you drag the app to the Dock, its Dock Tile will still show on the Dock, just won't have a open indicator under it when open. This added emkey/em to the Info.plist file is to keep the Dock Tile from showing on the Dock when running, when the app has not been dragged to the Dock in the first place./li /ul  In the codeactionHandler/code emhandler/em of the original example emcode/em, it just displays a dialog box with the menu item number that was clicked, which certainly fine for example emcode/em, however, I'd like to show a different example how to have separate emcode/em execute based on which menu item was clicked. The following example emcode/em could replace the entire codeactionHandler/code emhandler/em in the original emscript/em:  pre class="lang-none prettyprint-override"codeon actionHandler:sender     set aTitle to title of sender as string     if aTitle is equal to "Quit" then         current application's NSStatusBar's systemStatusBar()'s removeStatusItem:aStatusItem         if (name of current application) is not "Script Editor" then             tell current application to quit         end if     else if aTitle is equal to "Piyomaru" then          --  # Your code to run for this menu choice goes here:      else if aTitle is equal to "Software" then          --  # Your code to run for this menu choice goes here:      else if aTitle is equal to "Takaaki" then          --  # Your code to run for this menu choice goes here:      else if aTitle is equal to "Naganoya" then          --  # Your code to run for this menu choice goes here:      end if end actionHandler: /code/pre  Now this could be written differently, i.e. "Quit" as an codeelse/code or codeelse if/code at the bottom, but I did it this way because I want all other menu commands to be an codeelse if/code choice, even though logically any other given menu command is more likely to be clicked then "Quit". For me, I think it's easier to add/edit/remove the menu command's emcode/em when written this way. It's just a personal preference, so do it as you feel what's right for you.  A discussion note from the AppleScript Language Guide:     An emif/em statement can contain any number of emelse if/em clauses; AppleScript looks for the first Boolean expression contained in an emif/em or emelse if/em clause that is emtrue/em, executes the statements contained in its block (the statements between one emelse if/em and the following emelse if/em or emelse/em clause), and then exits the emif/em statement.      An emif/em statement can also include a final emelse/em clause. The statements in its block are executed if no other test in the emif/em statement passes.   For the most part of the original example code, you should only have to modify two line of code in the codeinit/code emhandler/em:  precodeset aList to {"Piyomaru", "Software", "", "Takaaki", "Naganoya", "", "Quit"} /code/pre  ul liThis sets the name of the menu commands in their order, and code""/code is for a separator./li /ul  For a different icon:  precodeaStatusItem's setTitle:"" /code/pre  ul liChange the "" to something else you prefer, from: Script Editor  Edit  Emoji &amp; Symbols/li /ul  Hopefully it's obvious that the codeif/code statement block in the codeactionHandler/code emhandler/em will correspond to the codeaList/code in the codeinit/code emhandler/em, so match the names in the codeaTitle is equal to/code  in the codeactionHandler/code emhandler/em to the names in the codeaList/code in the codeinit/code emhandler/em.  The rest of the emcode/em should not need to be modified, although it certainly can if need be or wanted.  <comment370041> Nope. I'm looking for an application that runs from the menu bar itself, not a service. Do you have the Speedtest app? Something like that, where the app itself is in the menu bar, not just launched from it. <comment370067> FastScripts is nice in that it lets you assign keyboard shortcuts for your menu items. Apple's "Script Editor menu" stopped letting you assign shortcuts to its menu items years and years ago, <comment370166> I edited your answer because as written is would not compile, it should now. Also, this script uses Cocoa-AppleScript, not normal or standard AppleScript alone. +1 though. <comment371125> I can't save it - either as script or application.  I have done the compile step, but keep getting: The document "xxx" could not be autosaved. C and Objective-C pointers cannot be saved in scripts.  What am I doing wrong? <comment371290> AppleScript document file can not save C and Objective-C pointers in it. So, you have to edit AppleScript (ex.add blank lines or delete blank lines), then you can save it. It is a normal operation for Apple genuine Script Editor. <comment371431> @user3439894 Was that edit really necessary?