How to determine the absolute path to a file in a shell script <body> I am writing a generic script that can get passed both absolute and relative (to the current working dir) paths to existing files.  I need a fail-safe way to turn all those passed paths into absolute paths because I need to pass the paths to the "open" command, which in won't pass the current directory to the launched app.  One idea I had is to check if the path starts with a "/", and if not, then I'd prepend the current working dir's path to it.  However, I wonder if there's a smarter solution to this. Also, as I'm quite inexperienced with shell scripting and related tools, I don't even know how to test for a variable's value to start with "/". I'm looking for a portable solution to run on multiple Mac, so installing extra tools or configuration would be less than ideal.  Can someone suggest a standard script using only shipping tools that takes a variable (let's call it $path) and turns it into a absolute path if it's not already absolute?  <answer82133> I'm not sure if this answer will be comprehensive enough for your needs, but this is what I would doâ€¦   strong--DISCLAIMER: I haven't tested this in SH/BASH/Anything so just use this as a framework please.  Feel free to edit the question after you've got it working!--/strong  You can test if the supplied script argument begins with a character using something like codeif [[ $a == "/*" ]]/code.  Since all relative paths carry with them the assumption that the working path is the parent directory, if you know the path is emnot/em already absolute you can use codepwd/code, emassuming the script or parent process hasn't changed the working directory/em.  If the issue of the working directory changing is significant, you'll have to use a function like codefind/code.  hr  Some additional notes that might get you on the right path to solving your issue: https://unix.stackexchange.com/questions/6435/how-to-check-if-pwd-is-a-subdirectory-of-a-given-path  http://www.unix.com/shell-programming-scripting/36200-getting-full-path-relative-path.html  https://stackoverflow.com/questions/2172352/in-bash-how-can-i-check-if-a-string-begins-with-some-value  Hope this puts you in the right direction!  <answer82134> No - a path is just a string and you have to parse it to decide if it's absolute or relative to $PWD or ~  See these for more context in case my answer is too short.  ul liWhy is my applescript for checking if a file exists failing?/li li&quot;readlink&quot; gets the original path of a symlink; what&#39;s the equivalent for Mac aliases?/li lihttps://superuser.com/questions/205127/how-to-retrieve-the-absolute-path-of-an-arbitrary-file-from-the-os-x/li /ul  <answer82136> One option would be to install coreutils and use codegreadlink -f/code. It resolves symlinks and it works with code/Foo//code or code~/foo.txt/code if they don't exist, but not with code/Foo/foo.txt/code if code/Foo//code doesn't exist.  precode$ brew install coreutils $ greadlink -f /etc /private/etc $ greadlink -f ~/Documents/ /Users/lauri/Documents $ greadlink -f .. /Users $ greadlink -f //etc/..//// /private $ greadlink -f /Foo /Foo $ greadlink -f /Foo/foo.txt $  /code/pre  This doesn't resolve symlinks, and it doesn't work with code/Foo/foo.txt/code either.  precodeabspath() {   if [ -d "$1" ]; then     ( cd "$1"; dirs -l +0 )   else     ( cd "$(dirname "$1")"; d=$(dirs -l +0); echo "${d%/}/${1##*/}" )   fi }  abspath /etc # /etc abspath /Foo/foo.txt # doesn't work abspath /Foo # works abspath . abspath ./ abspath ../ abspath .. abspath / abspath ~ abspath ~/ abspath ~/Documents abspath /\"\ \' abspath /etc/../etc/ abspath /private//etc/ abspath /private// abspath //private # //private abspath ./aa.txt abspath aa.tar.gz abspath .aa.txt abspath /.DS_Store /code/pre  codedirs -l/code performs tilde expansion. codedirs +0/code prints only the top directory if there are other directories in the stack. You could also replace the subshells with something like codeold="$PWD" ... cd "$old"/code.  Ruby's expand_path works with all paths that don't exist, but it doesn't resolve symlinks.  precode$ ruby -e 'print File.expand_path ARGV[0]' ~/aa/bb /Users/lauri/aa/bb$  /code/pre  <comment94730> Okay, I forgot about the cases where the path could start with "~". In my case, I know I won't run into this case, but for the sake of a helpful general answer I'll keep waiting for someone who has a overall solution. Supposedly, the "realpath" command can do that, which is available on Linux, it appears, but not on OSX. <comment94731> Yes, thanks for the test for the leading slash. That'll be enough for me to make my own script working. I only now realize that I was asking the question in a more general way, and so I'll see if someone come up with a solution that covers all cases before I mark the best answer. <comment94732> What language(s) do you prefer for your script? Perhaps that script has a function to call for handling path expansion. <comment94733> Both realpath and readlink do not handle path expansion on OS X. Unless you find a package in [homebrew](http://mxcl.github.com/homebrew/) or some other open source package to compile and call, you'll want to handle it in your shell script or do your processing on Linux. <comment94753> I saw your post already on the older question that bmike linked to. I've now taken mschrag's version, though, and that satisfies my needs well. <comment94755> A simple "sh" script is fine, and it should only use features that are available on any recent OS X, i.e. installing extra tools is not an option. Basically, the scripts gets the file ref passed as an argument ($1) and I want to turn it into an abs path I can pass to the "open" command. <comment94757> Don't use quotes around `/*` in the pattern match -- within quotes, it treats the asterisk literally rather than as a match-all wildcard. <comment94758> I like [@Lauri Ranta's](http://apple.stackexchange.com/a/82136/5472) take on rolling your own solution. It's quite powerful. <comment94774> Are you sure that open does not keep the calling processes current directory - man open - the examples explicitly say  current working directory. (if not I think Apple needs a bug report) <comment94948> @Mark, it's my own app that is launched by the open cmd and then tries to open the passed files, so it may also be that I did something wrong there.