How to get the fully resolved path of a symbolic link in Terminal? <body> I have a tangled mess of python installations on my laptop.  I was looking at the executables in code/usr/local/bin/code and they are all symbolic links to code../../../Library....../code  There's some weird behavior surrounding this.  If I do codels -lhaG/code I see code---&gt;/code and the relative path to the right of the symlinks:  precodelrwxr-xr-x  1 root  wheel    69B Dec  7 22:29 python3 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.1/bin/python3 /code/pre  However, I can't seem to get any of the command line tools to resolve that path and display the actual path to python3.  I've found some tidbits here and there regarding use of codepwd -P/code and the codefind/code utility to do this.  The problem is that these don't seem to work on OS X the way that people describe them working on linux (i.e. outputting the full path to the symbolic link).  They just print the symbolic links path for me:  precodeFantasticMrFox:bin robert$ pwd -P python3 /usr/local/bin FantasticMrFox:bin robert$ find `pwd -P` -name python3 /usr/local/bin/python3 /code/pre  Any ideas on what's going on here?  <answer4822> This resolves recursively and returns an absolute path:  precode$ python &gt;&gt;&gt; import os &gt;&gt;&gt; os.path.realpath("/usr/local/bin/python3") /code/pre  Or the non-interactive version:  precodepython -c "import os; print(os.path.realpath('/usr/local/bin/python3'))" /code/pre  <answer13059> Maybe this discussion on Stack Overflow is of help: How to resolve symbolic links in a shell script In particular, please consider this answer.  <answer13098> I think that codepwd -P/code and codereadlink/code are going to be your friends for this task.  "How can I get the behavior of GNU's readlink -f on a Mac?" is a handy resource.  codepwd -P/code only works if you're inside the symlink directory:  precode14:07:13 jason@mac ~ $ cd bin 14:08:08 jason@mac bin $ pwd -P /Users/jason/Applications /code/pre  codereadlink/code works by specifying the target (thus it can be used against files):  precode14:09:03 jason@mac ~ $ readlink bin Applications  14:09:34 jason@mac ~ $ readlink /var private/var /code/pre  The output of codereadlink/code appears to be relative to the strongparent/strong of the specified target.  Ex: The parent of code/var/code is code//code, so codeprivate/var/code is correct, relative to code//code. Per my above example of codebin -&gt; Applications/code, both are in my Home Directory, no matter where I run it, the output is the same.  <answer118838> You may use codereadlink -f/code. It recurses through all the links. Suppose the link is to a path that is further a link. You would like to have the final absolute path.   <comment4744> When builtins fail you, resort to scripting... Nice. Definitely works: `$ python -c "import os; print os.path.realpath('bin')"` `/Users/jason/Applications`. I symlink ~/bin to ~/Applications in order to have a unified .bash_profile/$PATH across Mac and *nix systems. <comment5411> this is great and it works well!  I would mark it as the answer except I also want to know if there's a way to do this in the shell like you can on other *nix systems. <comment5702> How do you do it on other *nix systems? Also, Python is installed nearly universally on Linux systems nowadays. <comment6404> @vxjasonxv the stuff I found at the time I was messing with this suggested that the `pwd` and `find` commands I talked about in the question resolve the full path on systems other than OS X.  I haven't tested them though. <comment133172> readlink does not recurse through the case where the symlink points to other symlinks. I would not call that "fully resolved" <comment138567> Huh? What are you exactly saying? <comment138571> The correct syntax for what @DINESH SEHRA is saying is to use `read link -f python3` for example, and it will buffer the full symbolic link for you. <comment294396> Clearly not posted by a OS X user as `-f` never existed on OS X version of readlink.