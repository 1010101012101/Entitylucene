OS X - 'Clickable' script to erase files? <body> I use Latex to write my documents. Latex creates MANY auxiliary files to compile a document. I often times want to clean my working directory.  When I was working on Windows, I used to keep a .bat file in the working directory that looked like this:  precodedel *.aux del *.pdf del *.log del *.bak del *.gz del *.bbl del *.blg /code/pre  which I could just click on to get rid of all auxiliary files.  Now, I want to do the same on my Mac. I have created a .sh file like this:  precode#!/bin/bash  cd `pwd`  echo "Cleaning files..."  rm *.aux rm *.bak rm *.bbl rm *.blg rm *.gz rm *.log rm *.pdf  echo "Done!" /code/pre  which I know I can run (i.e. invoke from command line), but I cannot click on - which is more convenient because not always I will be using Terminal.  How can I convert this script into a "clickable" one?   I appreciate any input!  <answer194640> Based on this reference (https://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in), I ended up solving my problem with the following code:  precode#!/bin/bash  DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" &amp;&amp; pwd )  echo "Cleaning files..."  cd $DIR rm *.aux rm *.bak rm *.bbl rm *.blg rm *.gz rm *.log rm *.pdf  echo "Done!"  #read -p "Press [Enter] to continue..." /code/pre  It works very well to clean all the nasty files left behind by Texmaker!  <answer194772> Create a text file like this:  precode#!/bin/bash  cd "$(dirname "${BASH_SOURCE[0]}")" || {     echo "Error changing directory." &gt;&amp;2     exit 1 }  echo "Cleaning files..."  rm *.aux rm *.bak rm *.bbl rm *.blg rm *.gz rm *.log rm *.pdf  echo "Done!" /code/pre  Give it a ".command" extension, and add execute permission to it. This will make it automatically open and run in Terminal when it's double-clicked.  Note that there are two important differences (and one minor one) between this and @thiagoveloso's script:  ul liIt uses double-quotes around the path it's codecd/codeing to, which will prevent problems if any directory names contain spaces (which is entirely normal on OS X)./li liIt checks for errors while codecd/codeing, and if there was a problem it exits (rather than deleting files in an unexpected location). emAlways/em check for errors on any script command that affects what the rest of the script will do; codecd/code is a good example of this./li li(Minor) It codecd/codes directly to the script's directory (rather than codecd/codeing there, capturing that location in a variable, then codecd/codeing there emagain/em based on the variable)./li /ul  <comment232204> `chmod +x myfile.sh` now you should. You can also assign an icon using the get info menu so it will look nice :) <comment232214> Thanks for the suggestion. However, when I click on the file, the program invoked still is textedit. <comment232216> you may need to go to Get Info, and change the default program there <comment232219> Thanks, it worked now. However, the `rm` commands were not applied in the current directory. I guess they were executed in the home dir. Luckily, I did not have any file that matches the to be deleted file extensions. Any sugestions on the script to run on the directory it was invoked from? <comment232222> add this code: `cd "pwd"` but replace the " with backticks <comment232223> Still no good. I've updated the code I'm using on the original post. I guess it's hard for the terminal to "detect" the directory the click came from... <comment232224> perhaps instead use: `cd $(dirname $0)`. Something like http://pastebin.com/eQR3GG6N <comment232231> Let us [continue this discussion in chat](http://chat.stackexchange.com/rooms/25555/discussion-between-thiagoveloso-and-vihan1086). <comment232440> Thanks for the answer. The error checking contribution was definitely a nice improvement!