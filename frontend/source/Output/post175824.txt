How to get correct file permissions from Macports pip installs? <body> Macports sets up the ownership of its Python site-packages directory as coderoot.wheel/code with world-readable permissions.  Python packages instally via codeport install/code have the same  precode# ls -l -d /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages drwxr-xr-x  151 root  wheel  5134 Mar  8 10:56 /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages /code/pre  This of course prevents individual users from using pip install  to add packages, which is just fine since that really ought to be done as root.  However, if one uses emsudo/em or a root shell to codepip install/code, the packages are installed by codepip/code as readable only by coderoot.wheel/code (740).  precode% sudo pip install BeautifulSoup ... % ls -l -d   /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/BeautifulSoup.py -rw-r-----  1 root  wheel  79567 Mar  8 11:09 /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/BeautifulSoup.py /code/pre  This precludes my user account from actually importing or using the package (*).  How can I get empip/em to always put reasonable permissions on installed packages?  strongUpdate (edit)/strong  I have reworded the question to emphasize that it is about codepip/code installs only.  I would also like to emphasize here that the problem is emnot/em about needing write permission to the modules.  The problem is that the modules are being installed without emread/em permissions.  (*) A hack to fix it is to codechmod a+rX/code the proper permissions (744/755) onto the newly installed package files  strongUpdate 2 (solution)/strong  As suggested by both Mark and Ian, and confirmed in a quick test, this has to do with the umask for root.  Here is the documentation on how to change code/etc/sudoers/code for OSX.  Note that it is not necessarily a good idea to change the umask for all sudo instances!  <answer175829> You can use virtualenv to create a local "copy" of the Python installation that's owned and easily manipulated by you. The advantage to using virtualenv is you can make many copies of the same version of Python, but with different versions of similar packages installed, and then switch between them with the virtualenv command line.  This lets you use different versions of libraries in different projects or incompatible libraries.  To install virtualenv:  precodesudo pip install virtualenv /code/pre  And now you can use it yourself, without sudo, to create a virtual python owned by you:  precodemkdir -p ~/Development/mypythonproject cd ~/Development/mypythonproject virtualenv .venv source .venv/bin/activate /code/pre  For example:  precodeIanCsiMac:~/Development/keybase-python |ruby-2.1.2| [git::develop] &gt; which python /usr/local/bin/python  IanCsiMac:~/Development/keybase-python |ruby-2.1.2| [git::develop] &gt; source .venv/bin/activate  (.venv) IanCsiMac:~/Development/keybase-python |ruby-2.1.2| [git::develop] &gt; which python /Users/ian/code/keybase-python/.venv/bin/python  (.venv) IanCsiMac:~/Development/keybase-python |ruby-2.1.2| [git::develop] &gt; deactivate  IanCsiMac:~/Development/keybase-python |ruby-2.1.2| [git::develop] &gt; which python /usr/local/bin/python /code/pre  You can virtualenv-install in your code~/code directory if you want a default python that you control to be available at all times like so:  precodecd ~ virtualenv venv /code/pre  And now you've got code~/venv/bin/pip/code available to you. You can modify your code~/.bash_profile/code and add:  precodesource venv/bin/activate /code/pre  Right at the end of it to have your virtualenv available by default in your shell.  <comment207465> The permissions you see are correct and reasonable. If you install to anywhere but your home directory (e/g/ /opt) then the files are for more than one user and so should not be writeable by normal users. For individual users they should set up virtualenv and install into their virtualenvs <comment207625> @Mark: If those permissions are both correct and reasonable, then why do you think they differ from the permissions on packages installed via `port install`? <comment207627> Sorry I missed that - I would still use virtualenv and only install in Macports directory packages installed by Macports and not pip <comment207628> I agree `virtualenv` is nice (or [Continuum Analytics'](https://store.continuum.io/cshop/anaconda/) `conda` even more), but that's really answering a different question.  In addition, I rather doubt `virtualenv` can work properly when the packages in question are not readable.  I'll check on that. <comment207633> I just tested on Debian Linux (OSX machine is not to hand)-- `virtualenv` creates a raw environment without _any_ of the installed packages, so the permissions issue does not arise.  Thus, one gets to try and install `scipy`,  `numpy` etc. manually.  (`conda` is a little friendlier about this sort of thing) <comment207639> @BrianB `virtualenv` works just fine if the packages are read-only. Yes, if you need packages that are backed by C-compiled libraries you can try `conda` (which, under the hood, uses `virtualenv` itself). <comment207696> that' is kind of my point.  These packages are being installed by `pip` with no read permissions whatsoever.  As you say, read-only would be fine!  (I think a lot of people are misreading the original question, and believing that I am asking about write permissions, so I will change the emphasis). <comment207703> @BrianB I got what you were saying. It's an unfortunate side effect of using `sudo`. You could change the `umask` for `root` temporarily when you call `sudo pip ...` so it doesn't happen, but you really want to remember to change it back when you're done. <comment207711> Is this simply the umask setting so only readable by user and group and not all (i.e. 022 ) see this [SO question](http://stackoverflow.com/questions/11161776/pip-inconsistent-permissions-issues) <comment207712> I was starting to wonder that about the umask, too, so I will be checking tonight.