How to get macOS Wi-Fi device name programmatically in Bash script? <body> precodebash% networksetup -listnetworkserviceorder An asterisk (*) denotes that a network service is disabled. (1) SAMSUNG Modem (Hardware Port: Modem (SAMSUNG_MDM), Device: SAMSUNG_MDM)  (2) Ethernet (Hardware Port: Ethernet, Device: en0)  (3) FireWire (Hardware Port: FireWire, Device: fw0)  (4) Wi-Fi (Hardware Port: Wi-Fi, Device: en1)  (5) Bluetooth PAN (Hardware Port: Bluetooth PAN, Device: en2) /code/pre  This is good for reading but how do I get 'en1' programmatically in a Bash script so I can use the device name in a cron job?  <answer267956> You can pipe the output  codegrep/code codeawk/code and codecut/code as an option:  precodenetworksetup -listnetworkserviceorder | grep -i "Wi-Fi, Device" | awk '{ print $5 }' | cut -c 1-3 /code/pre  You can also use codesystem_profiler/code to get details about your AirPort adapter:  codesystem_profiler SPAirPortDataType/code  Then, you can again, pipe that output through grep to get your adapter:  codesystem_profiler SPAirPortDataType | grep Interfaces -A1/code  <answer267967> In your question I know you used codenetworksetup -listnetworkserviceorder/code however I'd use codenetworksetup -listallhardwareports/code instead as it's easier to parse the output using codeawk/code, by itself, with a minimum of coding so as to avoid multiple empipes/em using several other emcommands/em as offered in the other answer and should be robust enough to produce consistent output until Apple changes the output format of codenetworksetup -listallhardwareports/code, if they ever do.  As an example on my system, codenetworksetup -listallhardwareports/code shows the following:  precode$ networksetup -listallhardwareports  Hardware Port: Bluetooth DUN Device: Bluetooth-Modem Ethernet Address: N/A  Hardware Port: Display Ethernet Device: en3 Ethernet Address: xx:xx:xx:xx:xx:xx  Hardware Port: Display FireWire Device: fw0 Ethernet Address: xx:xx:xx:xx:xx:xx  Hardware Port: Wi-Fi Device: en0 Ethernet Address: xx:xx:xx:xx:xx:xx  Hardware Port: Bluetooth PAN Device: en2 Ethernet Address: N/A  VLAN Configurations =================== $  /code/pre  Looking at the relevant lines of output:  precodeHardware Port: Wi-Fi Device: en0 /code/pre  The easiest way to get codeen0/code, in this example is:  precodenetworksetup -listallhardwareports | awk '/Wi-Fi/{getline; print $2}' /code/pre  It can be assigned to a variable:  precodewifiDevice="$(networksetup -listallhardwareports | awk '/Wi-Fi/{getline; print $2}')" /code/pre  You can then use code$wifiDevice/code later in the script to represent codeen0/code, in this example.  Obviously on your system, based on the output in your question, code$wifiDevice/code would be: codeen1/code  hr  If you want to use codenetworksetup -listnetworkserviceorder/codethen you can use codeawk/code, by itself, in this manner:  precodenetworksetup -listnetworkserviceorder | awk '{gsub(/\)/, "")}/Wi-Fi, Device/{print $5}' /code/pre  However, I'd use my first example over this.  hr  I'd also stay away from using codesystem_profiler/code in this case, as it takes considerably longer for the output to be generated then when using codenetworksetup/code.  <comment336294> Not terribly robust; I was hoping for some more built-in function with options to get that. For example, the behavior of 'grep' on different machines can vary, making the following cut command not always correct. <comment336295> Help me understand this - you don't know how to get this in bash, but you know it's not "robust" enough.  What exactly do you want to do because now your question is lacking substantial details.  What "built in function" would you like? <comment336301> Instead of piping the output of `networksetup -listnetworkserviceorder` first to `grep`, then to `awk`, then to `cut`, just use `awk` for the whole process, e.g.: `networksetup -listnetworkserviceorder | awk '{gsub(/\)/, "")}/Wi-Fi, Device/{print $5}'` <comment336334> Good answer, but `system_profiler` doesn't take any more time to generate the output when you specify the data type that you want:  `system_profiler SPAirPortDataType`  What takes the time is when it has to generate *all* the data types. <comment336344> @Allan, I'm not talking about running `system_profiler` with no argument! I'm comparing the actual time it takes running `networksetup -listallhardwareports` vs. `system_profiler SPAirPortDataType`, where e.g. on my system the former is instantaneous in comparison to the latter, `0m0.025s` vs. `0m3.296s`! At ~130 times faster, it's no contest and why I made the remark.