How Do I Fully Flush Cached Redirects From Safari? <body> I have a device with a web-based control panel, and accidentally set it to redirect all codehttp/code pages to codehttps/code, even though some don't work over codehttps/code. Although I've since corrected this, Safari seems to have memorised the redirect and is refusing to forget it, instead constantly attempting to redirect me to the invalid codehttps/code address.  I've already closed Safari, cleared code~/Library/Caches/com.apple.Safari//code and code~/Library/Cookies/HSTS.plist/code but it still seems to be remembering the redirect when I re-open it.  Where else could Safari be storing this information? I can access the correct page via Firefox or Chrome, so it may not be a system wide service, or if it is it's not one that the other browsers use.  Unfortunately because the web-panel is provided by a device I don't believe I can adjust headers or setup a redirect back to the correct URL, which seem to be options offered in other similar questions, so I really need to find out where this data is being stored so I can destroy it with fire.  <answer227718> If you enable Develop menu in Safari preferences, you can clear cache from there (CMD+ALT+E).  Can you confirm that opening the device's control panel in Safari's Private window (or different web browser) works correctly?   <answer227784> You will have good results if you use the command line to codecurl/code the device to make sure it's not doing the redirection. Safari doesn't really have an engine to rewrite addresses - especially if you go into private browsing to remove any history, cookies, etc...  If you're not sure you have cleaned your safari enough, you can also test by opening system preferences and making a clean/new user account on the Mac and test the site on a totally clean version of Safari after logging out of your normal user.  <answer267533> Here's an idea!  You say you can't undo the redirect by setting the server to redirect https requests back to http (as you don't have admin access to do so).  But what if you emtrick/em safari into connecting to a different server that offers this reverse redirect?  You could set this up in your local machine's code/etc/hosts/code file.  For example let's say the current cached redirect is from codehttp://example.com/code to codehttps://example.com/code.  Now set up or identify a url that you can request on any server in the world that redirects from https back to http.  Let's say that server has the address of codehttps://redirecting.example.com/code.  Then look up the IP address of coderedirecting.example.com/code.  In Terminal you can do like this:  precodehost redirecting.example.com /code/pre  You get a result something like this:  precoderedirecting.example.com has address 69.69.69.69 /code/pre  Now open up your /etc/hosts file and add a new line that points requests for example.com at the ip address of redirecting.example.com, like so:  precode### point host example.com at the ip address of redirecting.example.com 69.69.69.69 example.com /code/pre  Save your changes and clear your DNS cache in terminal like so:  precodesudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder; say DNS cache flushed /code/pre  Then in Safari make a request for codehttps://example.com/code the response should be a redirect back to codehttp://example.com/code, at which point (fingers crossed) your Safari redirect from 6 months ago will be overwritten.  When done remove the line you added to your /etc/hosts file and flush your DNS cache again.  <answer267627> Try this then, go to Step 1: Go to ~/Library folder, Step 2 :Delete Safari folder from ~/Library/Application Support, Step 3: Delete below folders from ~/Library/Caches, Step 4: then Delete ~/Library/Safari folder P.S:Keep safari closed during the above operations   <answer267783> So I've found a workaround to the problem, though this isn't a definitive answer to the actual question so I will not mark it as such until I can find more information.  It turns out that the file code~/Library/Cookies/HSTS.plist/code was indeed the source of the problem as I suspected, however deleting it from the affected user account doesn't work, even with Safari closed, as it is recreated after an unknown amount of time, complete with the offending entry that was forcing the invalid redirect.  So my solution was the following:  ol liMake sure you have at least one other user account on your Mac (if not, create one)./li liLogout of the affected user account./li liLogin to a different user account (a guest account may not be sufficient, depending upon restrictions)./li liFind out the short-name of your affected user account; if you don't know then the best way to check is to look under System Preferences - Users. Usually if will be the full name, lower-cased and with no spaces, so if your full name is "John Smith" then the short-name may be "johnsmith"./li liOpen a window in Terminal, type codesu shortname/code replacing "shortname" with the short-name of the affected user-account. Hit enter and, when prompted, enter the password for the affected account./li liNow type the next command coderm ~/Library/Cookies/HSTS.plist/code and hit enter, this will delete the HSTS storage file./li liFinally type codeexit/code, hit enter and close Terminal./li /ol  At this point you can now log back into the affected user account and the offending HSTS redirect should be gone for good.  Now, while this provides a usable workaround, I'd really like to know why deleting the HSTS.plist file from my affected account didn't work; the fact it is recreated means some background process is responsible for it, which means it should be possible to delete the file from the affected user account by simply stopping that process, deleting the file, then relaunching the process.  Anyone have any ideas which process is responsible for the code~/Library/Cookies/HSTS.plist/code file? Once we know that it should be possible to give a simpler fix to the problem.  <answer285468> Based on @Haravikk's answer: https://apple.stackexchange.com/a/267783/62907     Anyone have any ideas which process is responsible for the ~/Library/Cookies/HSTS.plist file?   fs_usage can help:  precode❯❯❯❯ sudo fs_usage | grep HSTS 16:11:03    HFS_update      /Users/quanta/Library/Cookies/HSTS.plist                                         0.000238   nsurlstorage 16:11:03    HFS_update      /Users/quanta/Library/Cookies/HSTS.plist                                         0.000009   nsurlstorage 16:11:03  open              /Users/quanta/Library/Cookies/HSTS.plist                                         0.016268   nsurlstorage 16:11:03    HFS_update      /Users/quanta/Library/Cookies/HSTS.plist                                         0.000008   nsurlstorage 16:11:03    HFS_update      /Users/quanta/Library/Cookies/HSTS.plist                                         0.000003   nsurlstorage 16:11:03  access            /Users/quanta/Library/Cookies/HSTS.plist                                         0.000011   dbfseventsd 16:11:04  lstat64           /Users/quanta/Library/Cookies/HSTS.plist                                         0.000008   fseventsd 16:11:08    HFS_update      /Users/quanta/Library/Cookies/HSTS.plist                                         0.000006   nsurlstorage 16:11:08    HFS_update      /Users/quanta/Library/Cookies/HSTS.plist                                         0.000002   nsurlstorage 16:11:08  open              /Users/quanta/Library/Cookies/HSTS.plist                                         0.000144   nsurlstorage 16:11:08    HFS_update      /Users/quanta/Library/Cookies/HSTS.plist                                         0.000002   nsurlstorage 16:11:08    HFS_update      /Users/quanta/Library/Cookies/HSTS.plist                                         0.000003   nsurlstorage 16:11:08  access            /Users/quanta/Library/Cookies/HSTS.plist                                         0.000021   dbfseventsd 16:11:09  lstat64           /Users/quanta/Library/Cookies/HSTS.plist                                         0.000042   fseventsd /code/pre  So, we can:  precodelaunchctl unload /System/Library/LaunchAgents/com.apple.nsurlstoraged.plist /code/pre  then:  precoderm -f ~/Library/Cookies/HSTS.plist /code/pre  and try again.  <answer288002> Based on quanta’s answer:  I wasn’t able to use codelaunchctl unload /System/Library/LaunchAgents/com.apple.nsurlstoraged.plist/code because I have System Integrity Protection enabled:  precode$ launchctl unload /System/Library/LaunchAgents/com.apple.nsurlstoraged.plist /System/Library/LaunchAgents/com.apple.nsurlstoraged.plist: Operation not permitted while System Integrity Protection is engaged /code/pre  However I was able to work around it by doing the following:  ul licodekillall nsurlstoraged/code (stops your user’s nsurlstoraged process; I actually ran codesudo killall nsurlstoraged/code, but I suspect it isn’t necessary to stop the system’s nsurlstoraged as well, since the cache is in the user Library folder)/li licoderm -f ~/Library/Cookies/HSTS.plist/code (deletes the HSTS cache)/li licodelaunchctl start /System/Library/LaunchAgents/com.apple.nsurlstoraged.plist/code (restarts nsurlstoraged)/li /ul  <answer295545> After trying all of these solutions, what worked for me was:  ul liRemove all instances of the domain from Safari's history/li liQuit Safari/li liDelete code~/Library/Cookies/HSTS.plist/code/li liRestart/li /ul  <comment277731> Unfortunately the develop menu option doesn't seem to clear the redirect, neither does closing Safari and manually deleting `~/Library/Caches/com.apple.Safari` so the redirect must be getting stored somewhere else. HSTS was the feature I accidentally enabled but I've already deleted `~/Library/Cookies/HSTS.plist`. <comment277732> There's definitely no redirect (the feature I'm trying to connect to doesn't support HTTPS at all, which is why enabling HSTS for the entire device was a terrible, terrible mistake); I can connect just fine from other user accounts and browsers, so there's something stored somewhere on my main account that is caching this :( <comment325075> “Safari doesn't really have an engine to rewrite addresses” — I’ve currently got the same problem occurring in Safari with a website hosted on my laptop, and curl (along with Firefox, Chrome, and a Private Browsing window right there in Safari) on the same user account loads the site just fine. So it must be *something* to do with Safari itself. <comment325090> See also http://apple.stackexchange.com/questions/153503/safari-8-not-clearing-redirect-data <comment334787> Have you tried trashing/moving aside your `~/Library/Safari` folder and seeing if that fixes the problem? If it does, you can experiment with items inside the folder until you find the culprit file. <comment334806> How did you set the redirect? With an extension or is there a setting in Safari for that? <comment335586> Does the redirect still happen with a private browsing window? <comment335670> @AllInOne interesting idea, but unfortunately it still happens under private browsing. <comment335672> @owlswipe the redirect was the result of mistakenly enabling HSTS on the server (which tells the browser to always use https), however not all of the services on the device support https, hence my problem, as Safari keeps trying to switch to https and then fails because it can't connect. I disabled HSTS, and removed the `~/Library/Cookies/HSTS.plist` file that's supposed to handle it, but it still happens in Safari. <comment335843> Answers on Ask Different need to be more than just a link. It's okay to include a link, but please summarize or excerpt it in the answer. The idea is to make the answer stand alone. <comment335921> While it's a nice idea it doesn't solve the real problem; I'm not looking for workarounds, but rather I want to know where this redirect is being cached such that Safari continues to use it even though it is no longer valid (the server does not have HSTS enabled, I simply enabled it briefly by mistake). It **must** be stored somewhere, but I can't figure out where. <comment335922> This is not what I would call a workaround, as I expect it will solve *the actual problem*.  It only works around the fact that you don't have control of the device.  But I do hear you -- it would be nice to be able to clear the cached setting directly.  Does Safari Technology Preview also exhibit the bad behavior? <comment336007> Thank You for letting me know @patrix <comment336070> Unfortunately so; I don't think it's a problem with Safari itself as such, but rather some macOS service that it depends upon, as it does indeed appear that `~/Library/Cookies/HSTS.plist` was the culprit, but deleting it from the affected account doesn't work (as it is recreated some time later, complete with bad redirect). Not sure what process is doing it though. <comment362874> Thanks! This worked for me. I deleted HSTS.plist many times (closing/restarting Safari before and after) and it was always being recreated with exactly the same contents as before. Unloading nsurlstoraged first, then deleting the plist and restarting nsurlstoraged gave me a clean plist. <comment372849> I can also confirm this answer doesn't fix it <comment372850> You could improve this by mentioning you need to quit and relaunch Safari for it to work. Also rather than delete the HSTS.plist I just deleted the problem domain key.