Time in milliseconds since epoch in the terminal <body> How do I get the time since the epoch, in milliseconds, in the OSX terminal?  The Linux/Ubuntu equivalent is codedate +%s.%N/code:  precodeLinux $ date +%s.%N 1403377762.035521859 /code/pre  Which does not work in my OSX terminal:  precodeOSX $ date +%s.%N 1403377800.N /code/pre  <answer135743> In OS X, just run codedate +%s/code as OS X doesn't support any more precision than this in codedate/code's output and any excess precision not supported by the internal representation is truncated toward minus infinity.  If you want milliseconds output, you can use the following command, although the output is just corrected by appending zeros rather than adding precision due to the aforementioned reason. The following does output correct milliseconds on systems which support the necessary precision.  precodeecho $(($(date +'%s * 1000 + %-N / 1000000'))) /code/pre  supSource for above command: Unix.SE – How to get milliseconds since Unix epoch/sup  If you just want a command that appends the right number of zeros in OS X, you can use:  precodedate +%s000 /code/pre  <answer135749> The codedate/code program in OS X is different than GNU's coreutils codedate/code program. You can install coreutils (including gnu-date), then you will have a version of codedate/code that supports milliseconds.  As the installation from source can be a hassle for native OS X users I advise you to use Homebrew.  To install these tools using Homebrew run this oneliner in your terminal:  precoderuby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" /code/pre  Homebrew is now installed (it is wise to follow the installer's suggestions after installation). Now we will install coreutils using codebrew/code.  precodebrew install coreutils /code/pre  As the installation says, all commands have been installed with the prefix 'g' (e.g. gdate, gcat, gln, etc etc). If you really need to use these commands with their normal names, you can add a "gnubin" directory to your PATH (code~/.bash_profile/code) like:  precodePATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH" /code/pre  You can now run  precodegdate +%s.%N /code/pre  and this will output your time since the epoch in milliseconds.  <comment160937> OS X doesn't support `%-N`, so that doesn't do anything (and could cause trouble if the shell variable `$N` is set). Just use `date +%s000` (or `date +%s.000` if you want the decimal point). <comment160938> @Gordon Yes, I mentioned this, but if OP is looking for a portable solution that does work successfully on systems which are capable of that precision, the above command works. Of course you could simply append zeros to the output but copying that to other systems which may support the extra precision would not be ideal. <comment160939> Ah, I see. But since OS X's `date` command just passes `%-N` through as `N`, it can interfere with the calculation. Try setting `N=7000000000000000000`, then try the command... This is an unlikely case in practice, but I'd feel safer with something that didn't depend on the environment. <comment160940> @Gordon Indeed, setting the variable would break it—I suppose the specific variable could be reset just before the command is run, but resetting variables like that is something every good script should do before running commands anyway, imo, just in case. Of course, this is all based on my assumption that the OP wants a script—edited answer to include the literal appending of zeros. <comment160991> Nice. I didn't even have to add the path, `gdate` was installed in `/usr/local/bin/gdate`. <comment161010> That's what you would expect. All the binaries are installed with the g prefix. In the path I provided all the same gnu-coreutils are without the g prefix. So if you add it in your path like PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH" it will replace the originals. So OS X `date` becomes GNU `date` (instead of gdate) <comment161011> Fine that it worked out. <comment161012> The OP asked for "time since the epoch, in milliseconds", this is an answer on how to add zero's to a string. Not the same. Although explained in the post, not an answer to the question. <comment161013> @CousinCocaine This answer is for scripting. Installing your own `date` works fine on your machine, but is useless against portable scripting. For portability, this provides the closest possible value. <comment161035> @GeorgeGarside for scripting and portability on OS X you are right. <comment332014>  I disagree with the "for portable scripting" rationale for this answer.  This is not a complete answer on its own.  It should be an addition to the accepted answer.  Since homebrew installs the GNU date tool as `gdate`, it doesn't conflict with the existing `date` tool.  A portable script that needs millisecond times could test for the presence of `gdate` and use it. It would fall back to `date` if necessary, using the `+%s.000` format.  A *very* portable script would test the output of `date` and verify it contains the necessary information, which would allow it to run on various OSes. <comment332016> Technically, the `+%s.%N` format gives the seconds down to nanosecond precision, not milliseconds.  After I used brew to install `gdate`, I checked the manpage to see whether milliseconds was available.  It's not.  It also didn't say that a precision for `%N` could be specified, but I tried it anyway.  I found that the command to get the seconds down to millisecond precision only (i.e., three decimal places) is `gdate +%s.%3N`.