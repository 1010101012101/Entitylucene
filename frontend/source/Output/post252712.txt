Setting up automatic red / green notifications for continuous testing and TDD? <body> emNote: this was originally posted under stackoverflow, and someone sensibly downvoted it since it's really OS X specific.  So I'm reposting it over here, since it's been generally helpful./em  I like doing Test Driven Development (TDD), and so I would like a way for my test suite to run whenever I make a change to a source file or test file.  In addition, I'd like the results of the test to display in an ephemeral "Growl" style window in the corner of my screen, showing a green icon if all tests passed and a red icon if one or more tests fail.  I know there is such a mechanism for node.js in mocha, and for ruby environments there's guard-rspec. But how do I create one for my [fill in the blank] testing environment under OS X?  <answer252713> Under OS X, you can create a simple solution using two off-the-shelf utilities: codefswatch/code and codeterminal-notifier/code and three simple bash scripts.  Here's how:  h2download fswatch and terminal-notifier/h2  precode$ brew install fswatch $ brew install terminal-notifier /code/pre  h2set up project directories/h2  My project directories are laid out as follows, but of course you can choose alternate strategies:  precode$PROJECT_ROOT/   logs/   lib/   scripts/     icons/   tests/ /code/pre  h2create three bash scripts/h2  h3file: scripts/run-tests/h3  This is a simple script that invokes your framework's tests.  In this case we're running python's codeunittest/code, but you can customize it to suit your needs:  precode#!/bin/bash # Run unit tests over the test directory  PROJECT_ROOT=$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." &amp;&amp; pwd )  PYTHON=python                                                           # customize for your needs export PYTHONPATH="$PROJECT_ROOT/lib"                                   # customize for your needs ${PYTHON} -m unittest discover --start-directory "$PROJECT_ROOT/tests"  # customize for your needs /code/pre  h3file: scripts/growl-tests/h3  This script invokes coderun-tests/code and captures stdout and stderr in log files.  It then displays a growl-like message based on the results of coderun-tests/code. You must customize this script to parse the results of coderun-tests/code and decide whether to display a red or green icon.  The example shown here parses the output of Python's codeunittest/code.  If you use a different system, you'll need to make appropriate changes to the script.  precode#!/bin/bash # Run tests and display results in a "growl"-like window.  PROJECT_ROOT=$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." &amp;&amp; pwd ) TEST_RUNNER="$PROJECT_ROOT/scripts/run-tests" STDOUT_LOG="$PROJECT_ROOT/logs/unittest_stdout.log" STDERR_LOG="$PROJECT_ROOT/logs/unittest_stderr.log"  # Run the tests, copy stdout and stderr to STDOUT_LOG and STDERR_LOG # respectively $TEST_RUNNER &gt; &gt;(tee "$STDOUT_LOG") 2&gt; &gt;(tee "$STDERR_LOG" &gt;&amp;2)  # Capture the exit status of TEST_RUNNER.  We will use this for the # red / green distinction in our Growl display. TEST_STATUS=$?  # The following lines are specific to the Python `unittest` output, # and aren't required for the red / green display.  We extract a few # extra bits of info so the Growl window can display something like: #     Ran 452 tests in 8.300s #     FAILED (failures=3)  # extract "Ran n tests in n.nnns" TEST_SUMMARY=`tail -3 "$STDERR_LOG" | head -1`  # extract "OK" or "FAILED (failures=n)" TEST_RESULT=`tail -1 "$STDERR_LOG"`  # Compose the two strings to make the entire message GROWL_MESSAGE="$TEST_SUMMARY $TEST_RESULT"  # Pick a sound and an icon based on TEST_STATUS if [ $TEST_STATUS -eq 0 ] ; then     GROWL_SOUND="Submarine"     GROWL_ICON="$PROJECT_ROOT/scripts/icons/GreenBead.png" else     GROWL_SOUND="Purr"     GROWL_ICON="$PROJECT_ROOT/scripts/icons/RedBead.png" fi  # Now display the results in a Growl-like window echo "$GROWL_MESSAGE" | terminal-notifier -sound $GROWL_SOUND -contentImage $GROWL_ICON /code/pre  h3file: scripts/autorun-tests/h3  This script invokes codegrowl-tests/code once at startup, and then again whenever some file is modified.  Under most circumstances, this file may be used verbatim without any modification.    precode#!/bin/bash # Run tests automatically whenever files change in the PROJECT_ROOT  PROJECT_ROOT=$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." &amp;&amp; pwd ) TEST_RUNNER="$PROJECT_ROOT/scripts/growl-tests"  # run tests once at startup "$TEST_RUNNER"  # Run tests whenever anything under PROJECT_ROOT changes # Note that we explicitly exclude the log files, since they get # written as a result of running the tests.  If we didn't exclude # them, fswatch would retrigger continuously. fswatch --one-per-batch "$PROJECT_ROOT" --exclude logs | xargs -n1 -I{} "$TEST_RUNNER" /code/pre  h2add icons to make it pretty/h2  Put these icons in your scripts/icons directory.  These will be used as the red and green icons in the Growl window.  scripts/icons/GreenBead.png:  img src="https://i.stack.imgur.com/A1pLs.png" alt="GreenBead.png"  scripts/icons/RedBead.png:  img src="https://i.stack.imgur.com/OZAA2.png" alt="RedBead.png"  h2to run it/h2  Simply open a terminal window and launch autorun-tests:  precode$ scripts/autorun-tests /code/pre  <comment314425> Even it's specific to OS X, if it's about programming, I think SO would be still a good place. One random DV shouldn't discourage you to ask there. Since it's TDD, [SQA](http://sqa.stackexchange.com/) is another site to consider to ask.