How to have sshd re-read its config file (without killing ssh connections)? <body> How can I get the ssh server to re-read its configuration file (code/etc/sshd_config/code), without killing existing ssh connections?  EDIT: If I run codekill -HUP &lt;SSHD_PID&gt;/code I emkill/em the connection.  <answer199794> sshd doesn't "re-read" it's configuration file, it restarts itself (refer to man sshd(8)), however, it shouldn't kill the child/connections if you sent the SIGHUP to the PARENT of them all. That is when you are talking about sshd that binds to port 22, as in the "usual" with Linux/FreeBSD/etc. [there are exceptions and sysadmin reasons why to follow the MacOSX type route]  strongHOWEVER/strong MacOSX have launchd as the one that listens to and handles port 22 (from my 10.10.4 machine):  precodeBlackYos:~ hvisage$ sudo lsof -i :22 Password: COMMAND  PID    USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME launchd    1    root   57u  IPv4 0xdb59a664e4b34941      0t0  TCP blackyos:ssh-&gt;hvs:39093 (ESTABLISHED) launchd    1    root   58u  IPv4 0xdb59a664e4b34941      0t0  TCP blackyos:ssh-&gt;hvs:39093 (ESTABLISHED) launchd    1    root   62u  IPv6 0xdb59a664c78cd671      0t0  TCP *:ssh (LISTEN) launchd    1    root   66u  IPv4 0xdb59a664c78d2e21      0t0  TCP *:ssh (LISTEN) launchd    1    root   67u  IPv6 0xdb59a664c78cd671      0t0  TCP *:ssh (LISTEN) launchd    1    root   68u  IPv4 0xdb59a664c78d2e21      0t0  TCP *:ssh (LISTEN) ssh     1262 hvisage    3u  IPv4 0xdb59a664e59313b1      0t0  TCP blackyos:51628-&gt;hvs:ssh (ESTABLISHED) sshd    1272    root    4u  IPv4 0xdb59a664e4b34941      0t0  TCP blackyos:ssh-&gt;hvs:39093 (ESTABLISHED) sshd    1272    root    5u  IPv4 0xdb59a664e4b34941      0t0  TCP blackyos:ssh-&gt;hvs:39093 (ESTABLISHED) sshd    1274 hvisage    4u  IPv4 0xdb59a664e4b34941      0t0  TCP blackyos:ssh-&gt;hvs:39093 (ESTABLISHED) sshd    1274 hvisage    5u  IPv4 0xdb59a664e4b34941      0t0  TCP blackyos:ssh-&gt;hvs:39093 (ESTABLISHED) /code/pre  It is launchd that might need to be "restarted" on macosx, or told about different ports to listen on for sshd, as launchd will spawn a new sshd for each port 22 connection that comes in.  check the following:  precodeBlackYos:~ hvisage$ sudo ps -ef |grep -i ssh   501  1263     1   0  6:46PM ??         0:00.06 /usr/bin/ssh-agent -l     0  1272     1   0  6:46PM ??         0:00.40 sshd: hvisage [priv]   501  1274  1272   0  6:46PM ??         0:00.03 sshd: hvisage@ttys004   501  1262   570   0  6:46PM ttys001    0:00.05 ssh -v hvs   501  1303  1275   0  6:50PM ttys004    0:00.00 grep -i ssh BlackYos:~ hvisage$ /code/pre  I've ssh'd to my router and back to demonstrate the issue, and you'll notice that the two processes are already "owned" by me. Compare this to a Linux system (my roouter) where you'll notice the third "real" sshd that is owned by root:  precodehvisage@hvs:~$ ps -ef |grep -i ssh root      4053     1  0 Jul11 ?        00:04:22 /usr/sbin/sshguard -i /var/run/sshguard.pid -l /var/log/auth.log -w /etc/sshguard/whitelist -a 40 -p 420 -s 1200 root     16244 30219  0 18:46 ?        00:00:00 sshd: hvisage [priv] hvisage  16249 16244  0 18:46 ?        00:00:00 sshd: hvisage@pts/0 hvisage  16563 16250  0 18:52 pts/0    00:00:00 grep -i ssh root     30219     1  0 Aug09 ?        00:00:00 /usr/sbin/sshd hvisage@hvs:~$ /code/pre  <answer239398> Following line checks the configuration first and gets the PID of the main process keeping all others (tested in Linux, zsh):  precodeif /usr/sbin/sshd -t; then kill -HUP `ps aux | grep "/usr/sbin/sshd" | grep -v grep | awk '{ print $2 }'`; fi /code/pre  <answer293674> Simply:   precode~# kill -HUP $(pidof sshd) /code/pre  <comment103773> Have you tried sending a hangup signal: `kill -HUP PID of sshd`? According to `man sshd`: `sshd rereads its configuration file when it receives a hangup signal, SIGHUP`. (You can find the PID of `sshd` with `ps -ef|grep sshd`. If there's more than one `sshd` process, send `HUP` to all of them.) <comment103777> (see my latest edit) <comment104781> Yes, you are right, if you HUP an `sshd` process that has an open connection, `sshd` terminates. However, sending a HUP signal to the main `sshd`, that is, the parent `sshd` that forks a new daemon for each incoming connection, will have the desired effect. On OS X, though, there's no main `sshd`: `sshd` is started by `launchd` through `launchproxy` with option `-i`, which tells `sshd` that it's run from `inetd` and started on demand, when `launchd` receives a request. With this setup, **every SSH connection gets a freshly started `sshd` configured with the newest version of its config file.**