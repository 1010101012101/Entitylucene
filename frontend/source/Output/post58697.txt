How does 'stuck' (in results of 'top') relate to 'not responding' (in Activity Monitor), 'spin' or 'hang'? <body> In results of codetop/code commands, I sometimes see emstuck/em.   Apple's top(1) OS X Manual Page does not explain this use of the word.   How, if it all, does emstuck/em relate to the following?   ol liemnot responding/em – may be seen in Activity Monitor, in the Force Quit Applications dialogue of loginwindow, and so on/li licode.hang/code files – may be present at code/Library/Logs/DiagnosticReports/code/li licode.spin/code files – may be present at code/Library/Logs/DiagnosticReports/code/li /ol  hr  There's an an accepted answer for the first point. Answers relating to points 2 and 3 will be appreciated.   <answer58718> There is usually no correlation between a emstuck/em process of codetop/code and a non-responding application:  ul liemstuck/em means that the process is currently un-interruptible which usually is the case if the process is waiting for a disk or network data block to be read (or similar low-level stuff). Technically speaking the process is executing in kernel space (aka Unix kernel) and can not be interrupted (so even a codekill -9/code wouldn't have any impact). Usually these emstuck/em states only last milliseconds (as you can see in codetop/code as well because the number of emstuck/em processes changes with every display cycle)./li liemnon-responding applications/em can be emtoo/em busy to reply to any event OS X throws at them./li /ul  I see one situation where a emstuck/em process corresponds to a non-responding application: A process can be emstuck/em for a very long time, perhaps stuck endlessly, without any possibility to kill it. This usually is the result of some programming error, e.g. improper disconnection from a networked device then the kernel keeps trying to read from it. In cases like this even a forced termination will not remove the process.  <answer58754> h1Process state U, TH_STATE_UNINTERRUPTIBLE and Linux process state D/h1  Someone else drew attention to MacOS top: “stuck” means “uninterruptible” | nelsonslog     … codeTH_STATE_UNINTERRUPTIBLE/code, which I believe is   what codeps/code reports as process state “U”. I’m guessing this is what Linux   calls “D” for “Device Wait”. In which case, in most cases the process   is fine, it’s waiting for some I/O to complete. …   The Ubuntu man page for ps confirms a process state code –     codeD    Uninterruptible sleep (usually IO)/code   – with no other mention of emuninterruptible/em.  In FreeBSD/Linux Linux Kernel Cross-Reference:   ul liTH_STATE_UNINTERRUPTIBLE/li /ul  I found a 2002 discussion The Answer Gang 83: How to kill a process in uninterruptible sleep state? (highlights) that fits nicely with the observations made by @patrix.   Last but not least, a 2004 post [X-Unix] PS and Stuck Processes (highlights) mentioning strongWindowServer/strong, which fits nicely with the hang-related question that prompted me to post the question here:   ul liMacBook Pro with Mountain Lion freezes frequently (full screen Flash in Chrome, Messages, HTC on USB)/li /ul  <comment67619> Thanks – if *stuck* is synonymous with *uninterruptible*, then I'm familiar with that state. `uninterruptible` is commonly seen when I key Control-T ([SIGINFO](http://en.wikipedia.org/wiki/SIGINFO)) whilst running `fsck_hfs` from the command line. More on `SIGINFO` in Apple's [termios(4) OS X Manual Page](http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man4/termios.4.html). <comment67620> Related to this answer, a question in Stack Overflow may be of interest: [How to identify not responding process programatically](http://stackoverflow.com/q/2366190/38108). <comment67635> I had a look at the source code of top: uninterruptible is the same as stuck. <comment67653> Gotcha – [highlights](http://diigo.com/0s4ik) from [libtop.c](http://www.opensource.apple.com/source/top/top-73/libtop.c) in open source for Mac OS X 10.7.4.