How to manually 'install' a command-line based Java application consisting of an executable and several auxiliary modules? <body> I'd like to use Briss, a Java application for cropping pdf files. The application consists of a compressed folder containing several Java .jar files. Presumably one of them is the executable, and the others are auxiliary modules that the executable uses. The application has a GUI, but is run from the Terminal by running the following command line:  precodejava -jar briss-0.9.jar /code/pre  How can I 'install' this application so that I can run it by typing the above command in a freshly opened Terminal window?  One way to do it would be to dump all the .jar files inside code/usr/local/bin/code, but I'd rather not pollute the codebin/code folder with a horde of files, and also I'd like to keep the files together, so that, for instance, the application can be easily and cleanly 'uninstalled'.  <answer284531> Copy the files to somewhere static such as ~/Applications, then add the following to your profile:  precodealias briss="java -jar /path/to/briss-0.9.jar" /code/pre  Then you can run ‘briss’ from Terminal from anywhere.  You may need to create ~/Applications if you haven't used it before. Upon creation, macOS automatically gives the folder the Applications folder icon. The location of your profile depends on your shell — the default macOS shell is bash and the profile is code~/.bash_profile/code.  <comment358810> I've followed your suggestion: When I open a new Terminal window and execute `cat .bash_profile`, the resulting output ends with the line `alias briss="java -jar ~/Applications/briss-0.9/briss-0.9.jar"`. However, running `briss` from the same Terminal window results in the following message: `-bash: briss: command not found`. <comment358811> @Evan Have you restarted your shell, or sourced the profile again (`. ~/.bash_profile`)?