What exactly does kernel_task do? <body> I'd just like to know what it is that kernel_task is responsible for. Also, what's an acceptable maximum RAM and CPU use for it?  <answer37375> It accumulates all the CPU time for input/output (i/o) processing delays and calculations as well as scheduling of processes and threads. On the 2014 and newer Macs it also exists to throttle the CPU - when the temperatures in the processor are too warm, kernel task is assigned "no work" and shows high CPU busy to let the processor idle and not overheat the computer. This is most noticeable on the portable line - especially the MacBook without any sort of fan or blower to cool the processor.  If you watch it after a reboot you will see it starts with minimal RAM and CPU needs and instead grows only when other programs run and need the system services.   To slim it down, shut off unneeded ports (WiFi, bluetooth, etc... ) as well as idle / unused programs. If things don't settle down, consider rebooting to ensure no task is stuck or leaking memory.  If you have programs doing real work, they will cause the kernel to use both memory and processor time - just watch as you start things to see which other programs are causing this behavior. It's rarely an issue with the kernel - even with badly performing programs - that can't be solved by logging out and back in again. The kernel_task cleans up well and generally takes care to only use the resources needed by the workload.  <answer92682> Mac OS X Internals: A Systems Approach - Amit Singh - Google Books:     the kernel uses the task and thread abstractions to divide its functionality into various execution flows. The kernel uses a single task—the emkernel task/em—with multiple threads that perform kernel operations such as scheduling, thread reaping, callout management, paging, and Unix exception handling. Thus, xnu is a monolithic kernel containing markedly different components such as Mach, BSD, and the I/O Kit, all running as groups of threads in a single task in the same address space.   http://lists.apple.com/archives/darwin-kernel/2010/Sep/msg00014.html:     The kernel task is not a real task.  It represents the kernel, which is   the core of the operating system.  The bulk of what it does occurs at the   direct request of an application.  Every time you allocate a large block   of memory, open or close a file, read or write a file, pull data over the   network, create a new process or thread, etc., your application performs a   system call.  These calls cause the kernel to do work for your   application.  Much of that work is billed to the kernel task, but it   really is being done by your application, albeit indirectly.   <comment42382> Best to measure your RAM and CPU use after a safe boot to get a measure of what your system runs at when idle. <comment42383> Thanks! Would you say 700-750 MB of RAM is acceptable for it? I have plenty free, but I'd like to know if there's anything I should do anyway. <comment42385> Not necessarily. On my main MacBook Pro, it can swell to 2 GB at times when I'm really running a lot of involved programs. Even then, I don't often have to reboot but once a month or so. (2.66 Core 2 Duo / 8 GB RAM) <comment42389> According to Tyler, it is a "representation of the microkernel itself." If you want a more specific answer, he goes on to say that "it seems to be the basic (virtual/)memory manager for Mac OS X on top of Mach." You'll be hard pressed to find a definitive answer unless you speak to a high-level Apple engineer. The public has only pieced together this process. Source: http://bleepsoft.com/tyler/index.php?itemid=43