Grant non-admin sudo privilege, but with `~` being his own home~ <body> I have heard it to be adviced that, with the general idea of least privilege, Unix-like users should create another account emwithout/em sudo privilege, in addition to the built-in account emwith/em sudo privilege.  In Mac, this translates to be: one should create a staff account for daily use, in addition to the admin account that comes with the computer, being reserved only when necessary.  For concreteness, say codebruce/code is a staff, which I use daily, and codebatman/code is an admin, which I use only when necessary.  strongBut how can I, while logging in codebatman/code, perform sudo tasks, on behalf of codebruce/code, that is to say with codebruce/code's own code~/code and code$(whoami)/code just as if I were logging in as codebruce/code with privilege?/strong   To illustrate this, define code/User/bruce/test.sh/code:  precode#!/usr/bin/env bash  whoami cd ~ &amp;&amp; pwd ls ~/Library/Preferences/Preferences/ /code/pre  (Yes, I have done codechmod 744 test.sh/code) I chose the last line for artificial illustration purpose that, normally it seems, code~/Library/Preferences/Preferences//code is not accessible to a staff (i.e., a non-admin).  What I intend to receive, is codebruce/code, code/Users/bruce/code, and successful codels/code output.   hr  The first attemp is that, indeed, if I open codebruce/code's terminal, but codelogin/code the bash of codebatman/code (in order to get sudo privilege), and run  precodesudo /Users/bruce/test.sh /code/pre  I get coderoot/code, code/Users/batman/code, and successful codels/code output of code~/Library/Preferences/Preferences//code, showing that the home is batman's; this is no wonder.   Or, a possible duplicate (a) asserts that codesudo -i -u bruce/code enables me to execute commands as codebruce/code.  But no! If I (as above) open codebruce/code's terminal, codelogin/code the bash of codebatman/code, and run  precodesudo -i -u bruce /Users/bruce/test.sh /code/pre  I get codebruce/code, code/Users/bruce/code, and codels: : Permission denied/code.  Yet another possible duplicate (b) states that codesudo -H -u bruce/code uses bruce's home.  Well, again when I open codebruce/code's terminal, codelogin/code the bash of codebatman/code, and run   precodesudo -H -u bruce bash /Users/bruce/test.sh /code/pre  I too get codebruce/code, code/Users/bruce/code, and codels: : Permission denied/code.  hr  The reader might think my request is unreasonable; but I just want to know whether it is possible to temporarily grant sudo privilege to a staff -- which may be convenient at times.  For example, if this can be done, when I am doing some short script I need no longer avoid code$(whoami)/code or code~/code, making it more flexible.  Or, when I run a short script what site I googled suggests, nor do I have to replace code$(whoami)/code by codebruce/code and/or code~/code by code/Users/bruce/code.   The last time, as far as I recall, I was irritated by the restriction of privilege, is probably when I ran a layperson-made script I googled, in order to install a LaTeX font.   However, at present I can recollect one instance only.  That is, after I, while logging in batman, codebrew/code-ed something using codehomebrew/code (for it requires sudo privilege), and codelogout/code-ed back as bruce and codebrew/code-ed something other.  Homebrew complained a large number of incorrect permissions of certain folders under code/usr/local/code, and urged me to run codesudo chown -R $(whoami) blablabla/code.  It seemed to me that codebrew/code had set certain permission to codebatman/code's own, and it drove me crazy to fix them one by one.   What do you do to get around the moment, for example, that codebrew/code requires sudo, while using a staff account?  Or, after all, is the practice that daily-used account should contain least privilege, simply unrealistic?   <answer262632> There is a flaw in bruce's home folder probably: the permissions of ~/Library/Preferences/Preferences are wrong. Therefore the script doesn't work as expected.  Check the following output in my environment executing the script logged in as admin. I slightly modified the script and replaced codels ~/Library/Preferences/Preferences/code by codels -la ~/Library/Preferences | grep "loginwindow"/code  precode/Users/bruce/bin/sh/test-env.sh batman /Users/batman -rw-------    1 batman  staff     192 27 Nov 13:42 com.apple.loginwindow.plist -rw-------    1 batman  staff     198 24 Okt 21:43 loginwindow.plist  sudo /Users/bruce/bin/sh/test-env.sh root /Users/batman -rw-------    1 batman  staff     192 27 Nov 13:42 com.apple.loginwindow.plist -rw-------    1 batman  staff     198 24 Okt 21:43 loginwindow.plist  sudo -i -u bruce /Users/bruce/bin/sh/test-env.sh bruce /Users/bruce -rw-------    1 bruce  staff      95 27 Nov 13:40 com.apple.loginwindow.plist -rw-------    1 bruce  staff     198 27 Nov 13:36 loginwindow.plist  sudo su bruce /Users/bruce/bin/sh/test-env.sh bruce /Users/bruce -rw-------    1 bruce  staff      95 27 Nov 13:40 com.apple.loginwindow.plist -rw-------    1 bruce  staff     198 27 Nov 13:36 loginwindow.plist $USERNAME = root #check this by entering `env` in the shell additionally  sudo su -l bruce /Users/bruce/bin/sh/test-env.sh bruce /Users/bruce -rw-------    1 bruce  staff      95 27 Nov 13:40 com.apple.loginwindow.plist -rw-------    1 bruce  staff     198 27 Nov 13:36 loginwindow.plist $USERNAME = &lt;empty&gt; /code/pre  hr  Also: there is a major misunderstanding how sudo/su really works. Your admin batman strongnever/strong runs a command "on behalf" of another user. If you enter "sudo some_command" or "sudo -i -u user some_command" it's always the super user's elevated position (and the privilege of an admin to run sudo as determined by the sudoers file and "make himself super user" temporarily) which "executes the command successfully on behalf of another user".  If you have to execute commands with escalated privileges on a daily base with your non-admin user, add him to the sudoers file and add a restricted number of commands only.  Example (control Apache web server):  precodebruce ALL=(ALL) /usr/sbin/apachectl /code/pre  or without the requirement to enter a password after executing codesudo apachectl/code as bruce:  precodebruce ALL=(ALL) NOPASSWD: /usr/sbin/apachectl /code/pre  Or modify the scripts appropriately to stay within bruce's realm.  That said the advice/practice that "the daily user shouldn't be a sudoer" is still valid.  hr  Homebrew is a different beast: it's designed to be installed by one user only - an admin user. Most apps/executables provided by the homebrew environment can be launched by a standard user after modifying the user's $PATH though or using the full path.  Several how-tos exist how to set up homebrew as a multi-user environment (e.g. My Homebrew Multi User Setup). I don't know if this still applies to newer OS X systems/brew versions.  <comment328979> Then I regard the "daily use should be non sudoer" advice a BS. Such practice is encouraged [here](http://apple.stackexchange.com/questions/243991/what-point-is-there-in-using-an-everyday-non-admin-account-on-os-x) and [here](http://forums.macrumors.com/threads/why-shouldnt-i-use-my-mac-as-an-administrator.1705441/). This sound s nice, but in practice this is too restricted. I cannot even install apps; I thought if I need `sudo` I have only to `su`, but as you said `homebrew` is a single-user designed. <comment328984> The point is that installing Apps is an infrequent process and is more risky as installing the wrong exectuable could install malware - so this needs to be a different previledge to normal access of documents <comment329074> @klanomath I don't understand your last phrase, you have a typo? Anyway I have `chown /Users/bruce/Library/Preferences/Preferences/` and it is alright! <comment329115> I probably messed up permissions while trying to use `chown` to correct the disorder `brew` gives. p.s. the `bruce` and `batman` are contrived because I don't want to reveal my name, sorry for making it more difficult to read (if any), though I think I did not make mistake replacing them. <comment329117> @Aminopterin ;-) If you don't want to reveal your usernames it's more convenient - and everybody understands it immediately -  to use *admin* (admin user), *user* (standard user) and root (which is a fixed name anyway). <comment329120> Haha, I thought that before, but I am afraid newcomers (who are new to the terminal perhaps) would think `admin` and `user` are *literal*, so I think `bruce` and `batman` are clearer --- probably it's just me : P