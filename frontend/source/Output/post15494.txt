how to setup Mass Virtual Host using VirtualDocumentRoot on Snow Leopard <body> Running Snow Leopard, I have enabled the build in apache(with indexing) and php, and installed and enabled mysql. I have setup my sites in the code~/Sites/code directory, named:  ul liwww.site1.dev/li liwww.site2.dev /li /ul  It all works,codelocalhost/code shows the index linking to them.  Now I want to set up virtual hosts in the most simple way. I would like that typing codewww.site1.dev/code in the url bar serves me the site in that directory.  So I outcommented the include vhosts rule in the codehttpd.conf/code file, and in the codehttpd-vhosts.conf/code pasted this code based on the apache docs:  precodeNameVirtualHost *:80  &lt;VirtualHost *:80&gt;     DocumentRoot /Users/me/Sites UseCanonicalName off  VirtualDocumentRoot /Users/me/Sites/%0 AllowOverride All  RewriteEngine On &lt;/VirtualHost&gt; /code/pre  Yet my browser can't find the server. What am I doing wrong? I did notice that in my sharing system prefs the IP my ISP gives me, and their domain is included in the link created there to access my sites folder. I would expect a simple localhost there not an ipaddress....  <answer15499> You need to update you codehttpd-vhosts.conf/code to something like this:  precode&lt;VirtualHost *:80&gt;     DocumentRoot "/Users/me/Sites/www.site1.dev"     ServerName www.site1.dev &lt;/VirtualHost&gt; &lt;VirtualHost *:80&gt;     DocumentRoot "/Users/me/Sites/www.site2.dev"     ServerName www.site2.dev &lt;/VirtualHost&gt; /code/pre  Having each domain separately in your config allows you to have separate server options for each, e.g. Rewrite config, separate log files, etc.  Then, update your code/etc/hosts/code and add this at the end:  precode127.0.0.1   www.site1.dev 127.0.0.1   www.site2.dev /code/pre  This step is particurarily important as this is where your OS looks first when resolving domain names. Otherwise it will not know what www.site1.dev is.  Then simply restart the server by disabling Web Sharing and enabling it again.  To make sure your config works you can check apache logs (codeaccess_log/code and codeerror_log/code) via Console.app (Files  /private/var/log  apache2).  <comment16843> This is the hard way you had to do it in apache1, apache2 supports automatic virtual hosts, so you can just drop a directory in, and it will be served. See [this](http://alen.mobi/blog/2009/09/16/snow-leopard-web-developer/) tutorial <comment16844> Yes, but gives you more control. You can skip first part, but still need to do the second - `/etc/hosts`. <comment16846> I can see how the tutorial you linked doesn't include `hosts` config. This is because it uses BIND DNS. If you do this though, you won't be able to use full domains as you want (http:// www.site1.dev). You'd have to use "local" domains (http:// site1.local). <comment16852> thats'OK, however I read somewhere that the BIND wasn't even necessary? You could set it up without adding lines to the host file ? <comment16854> Not that I know of. http:// localhost/ only works then, this would mean that you'd need to access your sites using http:// localhost/www.site1.dev/ <comment16870> When I simply name my sites directories `site1` and `site2` without activating virtualhosts, I can just access them like that. But then they are all on the same server. Which creates problems for serversite scripting.   When activate virtualhosts and create the virtualdocumentroot <comment16873> I can still access them the same way, but then they are on their own server, correct? When I don't need to access my sites from another computer on my network, then a proper url setup with hostfiles doesn't offer me any advantage except a nice url? <comment16881> Well, if you don't use VirtualHosts and only use folders `site1` and `site2`, you're still able to use all the things server-side scripting gives you, this includes .htaccess config. It's all matter of having correct paths, that's it. <comment16882> If you set up VirtualDocumentRoot and if you still use the same path, then nothing changes, and by accessing via folder (and not domain) it's still as if VirtualDocumentRoot wasn't set. As far as I'm concerned VirtualDocumentRoot setup (one you seem to after) won't properly work without BIND DNS or manually updating hosts file for each domain. Now, when it gets into accessing the site from other computers in the network, it's whole other story... Neither BIND DNS nor hosts file won't make any difference, as they apply only to your local machine's setup. Other computers are not affected. <comment16890> So if I don't mind uncorrect paths, and the serverside applications I run are intelligent enough not to choke on that, I could just use folders. If I want nice automatic urls; I found a way for automatic host files using [bonjour](http://postpostmodern.com/instructional/a-smarter-mamp/#comment-1578). <comment16895> fixing [documentroot](http://jbenner.net/blog/quick-tip-get-proper-document-root-when-using-mod-vhost-alias) might be needed