How to locate a file in Spotlight using folder and file name? <body> I often want to navigate to a file or folder that does not have a unique name. Instead, the parent folder in combination with the file or foldern name makes it unique. Here are a few examples:  ul liI want to open codereadme.txt/code in the folder called codeABC/code rather than codereadme.txt/code in the folder called codeCDE/code or codeFGH/code./li liEach year I teach a subject where the folders are organised codesubjectname/2011/code, codesubjectname/2012/code, etc. I want to be able to search codesubjectname 2012/code because code2012/code is not unique./li /ul  When i enter a part of the path and the filename into Spotlight, the file is not found. Spotlight does not seem to treat path information as relevant to the search.  ul listrongWhat is a quick way of navigating to a file using spotlight when its name is not unique but you know a word or partial word that appears in its path?/strong   /li listrongAlternatively, is there another strategy for quickly locating a file or folder by name and a word in the file or folder's path?/strong/li /ul  hr  Update, I have read that Spotlight treats the path in a special way. It can't be used in constructing searches.  precodekMDItemPath Complete path to the file. This value of this attribute can be retrieved,  but can't be used in a query or to sort search results. This attribute canâ€™t  be used as a member of the valueListAttrs array parameter for MDQueryCreate  or MDQueryCreateSubset. Value Type:      CFString Framework:       CoreServices/CoreServices.h Header:      MDItem.h Availability:    Available in OS X v10.4 and later. /code/pre  <answer71414> If you're comfortable opening the terminal you could run the command  precodelocate ABC/readme.txt /code/pre  and it will give you the full file path to any files on your machine that are named readme.txt in a folder named ABC.  While you're there you can copy and past the path as an argument to the codeopen/code command and it will open it for you.  Taking it one step further you can use the output of codelocate/code as the arguments for codeopen/code with codexargs/code  precodelocate ABC/readme.txt | xargs open /code/pre  Will open all files that have ABC/readme.txt on your machine just as if you had double-clicked them.  <answer71426> Thank you to @nine9ths for pointing out the codelocate/code command as one option. Here are a few additional observations.  h2Partial matching and multiple search terms/h2  I often have folders where I can only partially remember names of files and folders. And the folders may not necessarily be in the immediate parent folder (i.e., it might be the parent of the parent folder). One way of performing a boolean type partial matching search is to combine piped codegrep/code commands. For example:  precodelocate AB | grep readme /code/pre  would pipe (code|/code) all paths that match AB into codegrep/code. The remaining paths would also match  codereadme/code. Thus, this would match codeABC/foo/readme.txt/code, codeABC/foo/readme.md/code and codeABC/readme.txt/code.  h2Case insensitive search/h2  Spotlight search appears to be case insensitive which generally seems convenient. For the same behaviour with codelocate/code and codegrep/code use the code-i/code flag.  precodelocate -i AB | grep -i readme /code/pre  codegrep/code commands can be repeatedly applied to further filter the results.  h2Selecting a path from a list/h2  In some cases, even after several greps, I find that I can still be left with a handful of matches and I just want to select one of them from the list. There are various ways of selecting a single line by number. Here a couple of options for selecting for example line 4 of some list of paths from a codelocate search/code  precodelocate AB | grep readme | awk 'NR==4' /code/pre  h2Opening a selected path/h2  As @nineths notes once a single file is obtained, the output can then be opened with a default application:  precodelocate foo | xargs open /code/pre  or with a specified program on the path such as Vim  precodelocate foo | xargs mvim /code/pre  codexargs/code does not work, at least by default, if the path includes a space. Another option is to send the path to the clipboard and paste it somewhere (e.g., into an Alfred search or a Finder Go to folder dialog box).  precodelocate foo | pbcopy /code/pre  h2Alternative to command-line selection and opening/h2  Presumably there are several alternatives to using the command-line to select and open a path from the list of returned paths.  ul liIn iTerm2 holding the command key and clicking a URL or file/folder path will open the URL or file in the default application./li /ul  h2Customisation of locate/h2  This tutorial from Geek Stuff discusses various customisations to the codelocate/code command (e.g., filtering out certain directories and filetypes).  h2Potential to use mdfind instead/h2  In general all the examples using locate above could be replaced with codemdfind/code. codelocate/code generally references additional system files whereas codemdfind/code accesses those files indexed by Spotlight. codemdfind/code is case insensitive by default, which I generally find convenient. codemdfind/code also has additional search options e.g., you can add codekind:fol/code for folders. The main difference is that codemdfind/code only searches the file name. Thus, if path information is being used to limit the search, then that must appear in the subsequent piped codegrep/code filters.  For example, if I wanted to find a the folder called code2012/code where codesubjectname/code appears in the path the following would work  precodemdfind name:2012 kind:fol | grep subjectname /code/pre  Note that codename:/code seemed to be required because the text was all numbers.  h2Summary thoughts/h2  ul listrongSpeed/strong: The codelocate/code command runs faster than the codefind/code command but at a similar speed to codemdfind/code./li listrongAbility to filter/strong: If you have information to partially match on the file name or you want to use additional search tools codemdfind/code seems better (assuming the file is indexed by Spotlight)./li /ul  In general all these approaches seem a little bit fiddly and have a fair amount of unnecessary syntactical overhead.  <answer215161> You may want to check out Findspot. Findspot supports full path searching so you can include the folder name and filename in your query.  Here is a screenshot of Findspot using your example:  img src="https://i.stack.imgur.com/Siah1.png" alt="enter image description here"  <comment82948> +1 Thanks. I knew about `find` but not the `locate` command. <comment82950> One thing I should add, `locate` is driven from the locatedb which needs to be periodically updated. Apparently this maintenance has been removed from the scripts that it ran in prior to 10.6, you may need to enable it like this `sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist`  http://osxdaily.com/2011/11/02/enable-and-use-the-locate-command-in-the-mac-os-x-terminal/ <comment82952> Yes. The first time I tried to run `locate` on Lion it prompted me to run the command you mention. <comment83008> Note, there is no single file requirement for `xargs open` you can pipe a list of files and it will open every one. This can be useful or dangerous. You can also specify an application to open them with (if it doesn't already have a command line equivalent) with `open -a appname`