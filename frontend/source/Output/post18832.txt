ssh-under-cron stops working in OS X 10.7 Lion <body> Just upgraded from Snow Leopard to Lion, and my cron jobs that use ssh have stopped working.  It appears that ssh-agent is no longer functioning as expected.  Here's a bowdlerized version of my called-from-cron script that worked great under Snow Leopard:  precode#!/bin/bash whoami # just to verify I'm running as myself, not root ssh-agent # just to see what it outputs     eval `ssh-agent` ssh -vvv REMOTESERVER ls /code/pre  When run from the command prompt, this script works as expected.  When run from cron, it doesn't work.  The ssh-agent output looks normal:  precodeSSH_AUTH_SOCK=/tmp/ssh-QRxPUMRxbu/agent.17147; export SSH_AUTH_SOCK; SSH_AGENT_PID=17148; export SSH_AGENT_PID; echo Agent pid 17148; Agent pid 17150 /code/pre  But the codessh -vvv/code output shows that it fails right when the private key should be read:  precodedebug1: Server accepts key: pkalg ssh-dss blen 818 debug2: input_userauth_pk_ok: fp ... debug3: sign_and_send_pubkey: DSA ... debug1: PEM_read_PrivateKey failed debug1: read PEM private key done: type &lt;unknown&gt; debug1: read_passphrase: can't open /dev/tty: Device not configured debug2: no passphrase given, try next key /code/pre  In other words, it's expecting me to type in the passphrase for code~/.ssh/id_dsa/code, which of course doesn't work in cron jobs.  This all worked in Snow Leopard.  Note that I've got Keychain Access setup so that codessh/code, codessh-agent/code, and codessh-add/code are allowed to read my passphrase for my code.ssh/id_dsa/code file - as a result I can SSH from a terminal prompt without ever having to enter my passphrase.  Is this issue that I need to run codessh-add/code at some point in my login process?  Running it from a standard bash prompt doesn't help the cron job out (although, oddly, it does prompt me for my passphrase ... which I would think isn't necessary b/c of the Keychain Access configuration).  NOTE 1 - before redirecting me - I'm aware there's a similar question here ( Mac OS X Lion and sshpass) but it's specifically about a program codesshpass/code that I don't use (although I believe that question would be answered by this one as well).  NOTE 2 - I can't create the "cron" tag b/c I lack sufficient rep.  If someone with sufficient suction could do so &amp; tag this question, that would be great.  NOTE 3 - I realize that passphrase-less SSH keys would solve my problem; however I'd prefer not to go this route.  <answer18853> I would expect enhanced security like sandbox and changes to further move things to 64 bit is causing unexpected grief.   It's not an answer, per se, but launchd is getting all the love from apple these days.   It's not fixing the cron issue, but is more stable as well as more people can help with it.   <answer39614> Adding the following code to your bash shell  script will fix the problem:  declare -x SSH_AUTH_SOCK=$( find /tmp/launch-*/Listeners -user your_user -type s | head -1 )  Replace "your_user" with your own user name.  This code sets the correct value for SSH_AUTH_SOCK that informs "ssh" or "scp" about how to communicate with "ssh-agent" when the shell script is started out of "cron".  <answer56825> For anyone who ends up on this page, I realized I should post the answer:  Using launchd instead of cron does indeed fix the authorization problem.  Your user launchd jobs (which run only when you are logged in) correctly use the SSH agent information that was unlocked via your keychain as part of login (as part of standard OS X key management, no other software required).  To minimize my interactions with launchd, I created a single launchd job that calls a bash script.  In this way I can simply edit the script without dealing with launchd.  Here's the launchd file:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;   &lt;key&gt;Label&lt;/key&gt;   &lt;string&gt;com.mycron.hourly&lt;/string&gt;    &lt;key&gt;ProgramArguments&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;/Users/john/bin/cron.hourly&lt;/string&gt;   &lt;/array&gt;    &lt;key&gt;Nice&lt;/key&gt;   &lt;integer&gt;1&lt;/integer&gt;    &lt;key&gt;StartInterval&lt;/key&gt;   &lt;integer&gt;3600&lt;/integer&gt; &lt;!-- start every X seconds --&gt;    &lt;key&gt;RunAtLoad&lt;/key&gt;   &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  I saved the file to code~/Library/LaunchAgents/com.mycron.hourly.plist/code, and then loaded it with:  precodelaunchctl load ~/Library/LaunchAgents/com.mycron.hourly.plist /code/pre  Once loaded, it will run right away and then again every 60 minutes.  If you follow the same procedure, you'll want to change the `ProgramArguments' string with the right path to your script.  <answer231923> For anyone finding this now, trying to make this work in El Capitan, and still reluctant to turn your one-line cron job into a launchd script, Werner Antweiler's answer still works  but the path changed. The below worked for me:  precodedeclare -x SSH_AUTH_SOCK=$(find /var/folders/*/*/*/*/agent.* -user your_user -type s | head -1) /code/pre  strongNOTE/strong: remember to replace your_user with your username!  It wouldn't let me submit this as a comment on his answer as I lack the reputation but I didn't want to leave her without updating this as it definitely helped me finally set it up.  strongEdit:/strong March 30, 2016  After testing this for a while, I need to add that this only works once the agent has been used at least once during that login. Initiating an ssh connection or manually running ssh-agent is enough to do it. A startup script can also be used if you want it to run automatically. I created a startup.sh that just runs ssh-agent and then used Script Editor to save a .app with the following and added the resulting app to my login items:  precodedo shell script "/path/to/startup.sh" /code/pre  <comment20622> cron is gone. See the launchd tag here for all sorts of help (do make the move - it handles ports, enviromnent and much more so much better than cron ever did) - I do hope someone has a solution, but the cron mojo here is aging for certain. <comment20625> cron still runs in Lion ... but you're right, I should make the move.  A 10+ line XML file to do the work of a single LINE of crontab is pretty lame, though.  Maybe in 10 years they'll switch plist files to JSON, and there will be much rejoicing, and 10 years after that they'll go back to crontab, and the BSD greybeards will laugh.  I suppose I'll be a BSD greybeard by then... <comment20639> Just switched to launchd, works a charm.  The called script doesn't need to interact with ssh-agent at all - you can just jump straight into the ssh command after the hashbang.  If your comment were an answer, I would accept it =) <comment20643> JSON certainly shines over XML in many cases, but all the plists that came before likely forced the issue. I'm just tickled we have a unified, efficient, structured data based replacement. cron and at sure served us well for ages! <comment44753> I have been searching high and low for additional web resources but I always end up back on this post. Surely someone has more to contribute to the discussion? I have tried to use a simple plist to run my shell script but then mailx doesn't send my notifications. I still like cron and I use it in Ubuntu all the time. I don't want to go back to 10.6 but this issue is killing me. I don't like being forced into using launchctl and having to learn what feels to me like a very expansive framework to basically automate shell scripts. Anyone have any new insights? <comment44754> Switching to launchctl fixed my issue completely, so I stopped worrying about cron.  If I recall correctly, [this page](http://www.macgeekery.com/tips/all_about_launchd_items_and_how_to_make_one_yourself) was what I used.  Generating a run-this-script plist file for launchctl is pretty straightforward. <comment65510> Very nice [answer there](http://apple.stackexchange.com/a/56825/5472). Thanks for posting it. <comment65644> Indeed, cron is deprecated at least in Lion.  Kudos for finding the answer - launchctl can be difficult to break into initially. <comment102416> This solved the problem that I was having where scp would not work via launchd in a shell script despite it working fine via the regular command line (iTerm or Terminal). Excellent tip. <comment102417> Get 'Lingon X' or LaunchControl and `launchd` will be much easier to deal with. <comment290995> I'm solving this right now, and this isn't the best way. launchd apparently is the way to go, but for cron, you want to set up your ssh key (with passphrase) in your keychain. Once you've done that, just logging in to the Mac sets everything up. The socket path you posted is where they're kept if YOU run ssh-agent manually (and type your passphrase manually). On El Cap, once keychain is loaded, find the socket via `ls /private/tmp/com.apple.launchd.*/Listeners`. You don't have to do anything except login to mac. <comment292109> launchd definitely is the "official" way to do it but for those who want to continue using cron, this does serve as a viable workaround. In my testing, simply logging in was not enough to cause a keychain-saved key to function via cron. The path you listed definitely does exist though. If that's generated as soon as you log in and still works for cron, it likely is enough to be able to skip the startup script method I listed. Certainly worth testing at the least - thanks! <comment292171> I put this in place for a backup process, and it's been running cleanly -- across reboots -- for over a week now. <comment311441> Just for the record, on El Captain 10.11.2: `zsh: no matches found: /tmp/launch-*/Listeners`