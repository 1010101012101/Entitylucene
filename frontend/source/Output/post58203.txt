Mountain Lion with Java 7 only <body> I performed a clean installation of Mountain Lion and installed JDK7.  codejava -version/code in Terminal returns codejava version "1.7.0_05"/code correctly, still Java Preferences and some other Java programs (such as Eclipse) result in prompts to install Java SE 6.  I can start Eclipse perfectly from the command line with Java 7.  Is there a way to get this working without having to install Java 6?  <answer58601> h1Mountain Lion with Java 7 alone/h1  You're on the right track …   h2Without installing Java 6/h2  … prompts to install, as described in the question, are to be expected.   So my short answer is yes, you can have Java 7 alone; but not without an installation of Java 6.   Try:   ol liallow Apple's installation of Java/li liremove, from the two directories below, the version(s) of Java that are no longer required:   /Library/Java/JavaVirtualMachines  /System/Library/Java/JavaVirtualMachines/li /ol  (For a case such as this, I reckon you can safely ignore the usual advice to not interfere with code/System/code stuff.)  <answer58841> JDK 7 will be installed under /Library/Java/JavaVirtualMachines/1.7.0.jdk, JDK 6 under /System/Library/Java/JavaVirtualMachines.  To trick OS X to accept Java 7 instead of proposing to install Java 6 a simple symlink is enough:  precodesudo mkdir /System/Library/Java/JavaVirtualMachines sudo ln -s /Library/Java/JavaVirtualMachines/1.7.0.jdk /System/Library/Java/JavaVirtualMachines/1.6.0.jdk /code/pre  Most Java Programms will run with this little hack without the need to install Java 6.  OS X's Java Preferences (and maybe some others) will not as it seems to explicitly check the version of the JVM when it is started.  <answer69237> Note: if you have something that really needs java6 and won't work with java7, then you might want to hold-off on installing java7. The reason is it might be a little tricky to try to keep both 6 and 7 on same macintosh, as the 7 pkg does some messing with some of the apple-6-java items, as detailed below. So, I'll be looking for some step-by-step instructions on keeping 6 and 7 on same mac before rolling this out... See also http://reviews.cnet.com/8301-13727_7-57533880-263/java-preferences-missing-after-latest-os-x-java-update/ on Oct 18, 2012.  DETAILS The preinstall shell script in jre-7u9-macosx-x64.dmg just removes the Apple pref-pane (as well as plug-in), without warning, below.  precode#!/bin/bash PLUGIN_BASEDIR=/Library/Internet\ Plug-Ins PLUGIN_NAME=${PLUGIN_BASEDIR}/JavaAppletPlugin.plugin MKDIR=`which mkdir` RM=/bin/rm # Remove the symlink before installation forcing ystem Preferences.app to refresh its cache PREF_PANE_NAME=JavaControlPanel.prefpane PREF_PANE_DEST=/Library/PreferencePanes/ # Actually removes the symlink if [[ -h "${PREF_PANE_DEST}/${PREF_PANE_NAME}" ]]; then      ${RM} -rf "${PREF_PANE_DEST}/${PREF_PANE_NAME}" fi # Create the /Library/Internet Plug-Ins if not present if [[ ! -d "${PLUGIN_BASEDIR}" ]]; then      ${MKDIR} -p "${PLUGIN_BASEDIR}" fi # If Apple's plugin is present, then delete it if [[ -h "${PLUGIN_NAME}" ]] &amp;&amp; [[ -d "${PLUGIN_NAME}" ]]; then     ${RM} -rf "${PLUGIN_NAME}" fi /code/pre  === And the post install script sets up a symlink ===  precode#!/bin/bash LN=`which ln` CHOWN=`which chown` PLUGIN_FILEPATH=/Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin PREF_PANE_NAME=JavaControlPanel.prefpane PREF_PANE_SRC=/Library/Internet\ Plug-       Ins/JavaAppletPlugin.plugin/Contents/Home/lib/deploy/JavaControlPanel.prefpane PREF_PANE_DEST=/Library/PreferencePanes/ if [ ! -h "${PREF_PANE_DEST}/${PREF_PANE_NAME}" ]; then     ${LN} -s "${PREF_PANE_SRC}" "${PREF_PANE_DEST}" fi ${CHOWN} -R root:wheel "${PLUGIN_FILEPATH}" /code/pre  <comment67646> Java 7 is installed under /Library/Java/JavaVirtualMachines while Java 6 is under /System/Library/Java/JavaVirtualMachines  Deleting 1.6.0.jdk from /System/Library/Java/JavaVirtualMachines results in the installation dialog poping up again. What seems to work is to make a symlink 1.6.0.jdk (under /System/...) to the 1.7.0.jdk (under /Library/...). Java Programs that do not check the Java version run fine (Java Preferences blocks at start as it seems to check if Java 5 or 6 is installed) <comment67660> Cool – would you like to add your own answer? Please vote mine down – I won't take offence – the guess was clearly incorrect for the question, a vote down will help other users to not make similarly mistaken guesses for Java-related issues. <comment70356> The second line should not have "su", it should be "sudo ln -s ....." <comment83937> I just did a fresh install including JDK 7u9, and it was installed to `/Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk`; the instructions worked fine otherwise. <comment91668> Watch out for doing the symlink... Apple released 1.6 security update recently. If you apply this update from Apple, the symlink seems to fool the update and installs 1.6 update into where the symlink points to, i.e. Oracle's 1.7. <comment92851> This is really messed up. Why on earth is this still not fixed? Isn't increased security the main motivation for why Apple gave up control over the Java update procedure? Why then does OSX still prompt me to install an outdated Java? Yikes! <comment100241> @gentmatt Java 7 is not a simple update for Java 6 - it is more like changing OSs. SOme things will break using the larger version and both major versions are updated for security fixes <comment100242> This could break things if a Java program requires Java 6 and not 7 it could break when you use the other version. <comment104103> @gentmatt Apple didn't want Java anymore and essentially abandoned it.  Oracle chose to pick up the ball. <comment114178> It's still stupid to require Java 6, given that it's now deprecated… <comment138736> Here is a better solution if you are on Mavericks: http://stackoverflow.com/questions/19563766/eclipse-kepler-for-os-x-mavericks-request-java-se-6 <comment195585> For a similar problem, I found that adding empty folders at “/System/Library/Java/JavaVirtualMachines/1.6.0.jdk” and “/System/Library/Java/Support/Deploy.bundle” were enough to make OS X to use the Oracle JDK.