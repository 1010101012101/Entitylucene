How can I pipe HTML content to Safari via the command line? <body> I have a situation in which I'm getting HTML content via a pipe.  I'd like to display it in a browser window.  But the obvious step,   precodesomethingThatProducesHTMLonStdout | open -f -a "Safari" /code/pre  does not work: Safari displays the content, but as emplain text/em; it does not render the HTML. I know for a fact that my HTML content is valid HTML content.  In fact, it is easy to demonstrate this problem with a trivial test case:  precodeecho "&lt;html&gt;&lt;body&gt;foo&lt;/body&gt;&lt;/html&gt;" | open -f -a "Safari" /code/pre  does the same thing – displays plain text, not rendered content.  I'm at a loss as to why Safari insists on doing this.  What is the secret to making it render the HTML?  Note: strongI know I can make this work by saving the content to a temporary file and then opening the temporary file./strong  I want to make it work strongwithout using a temporary file/strong, if it is possible.  <answer294947> You can use something like  precodeecho '&lt;html&gt;&lt;body&gt;&lt;h2&gt;Hi, there!&lt;/h2&gt;foo&lt;/body&gt;&lt;/html&gt;' &gt; /tmp/x.html &amp;&amp; open -a "Safari" /tmp/x.html /code/pre  I entered some HTML that contains an exclamation mark to show that you need to use single quotes for the shell, otherwise it will interpret this as a history recall. Yes, longer and you need a file name, but you can use your codesomethingThatProducesHTMLonStdout/code tool from your question.  <comment371237> I'm surprised to learn that Safari does read *anything* from `stdin` at all, most Cocoa applications don't. You could try with process substitution (see `man bash` for details) but I don't know whether it's worth the hassle. <comment371247> Ah, did some further digging. The problem is that `open -f` creates a temporary `.txt` file from standard input, and Safari always seems to open `.txt` files as text (and not as HTML), as can be easily tested by running `open -a Safari any-html-file.txt`. <comment371250> I don't think this is possible without saving it to a temporary file since Safari can only open URLs to files (locally or on a server). You could however simply make a small bash script which you can pipe the stdout to that creates this temp file and opens it with Safari <comment371252> Well, foo! That's annoying. Thank you for discovering this. If you post this as an answer (i.e., "it can't be done"), I'll be happy to accept it. <comment371254> @M.J.K Thanks, and yes, I know I can create a temporary file, but the point of my question is precisely to try to _avoid_ temporary files.... <comment371258> I guess it could work if you got the local web server involved, if you piped the output to a file that's part of the local website. E.g. pipe it to `~/Sites/outputfile.html`, keep your browser pointed at `http://127.0.0.1/~user/outputfile.html`, then refresh the page as required, either manually or by some fancier on-demand means. (I forget how apache is configured by default in macOS, so those pathnames may not be accurate.) <comment372261> The very last thing said in the OP was "_Note: I know I can make this work by saving the content to a temporary file and then opening the temporary file. I want to make it work without a temporary file, if it is possible._", so your answer only echoes what mhucka already knows! <comment372262> Exactly what @user3439894 wrote. I'm going to edit my question to put that part in bold face :-) <comment372267> Actually `open -f` also uses a temporary file...