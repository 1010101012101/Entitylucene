How do I recompile Bash to avoid Shellshock (the remote exploit CVE-2014-6271 and CVE-2014-7169)? <body> Given that Bash 3.2 (the version shipped by OS X) is vulnerable to the remote execution exploit known as "Shell Shock" (CVE-2014-6271 and CVE-2014-7169) how do I rebuild Bash and secure my system ahead of an official Apple patch?  UPDATE: Note that Apple has now released the official patch. See below for details.  <answer146851> h1Status/h1  Apple has released Bash security fixes for Shellshock and related vulnerabilities as "OS X bash Update 1.0". They can be installed through normal system update for people using OS X Mountain Lion v10.8.5 or OS X Mavericks v10.9.5 (they are included in Security Update 2014-005) and can also be installed manually. Official Apple fixes are also available for OS X Lion v10.7.5 and OS X Lion Server v10.7.5 but those are only available via manual download. The security fixes are available via different URLs based on the operating system version:  ul lihttp://support.apple.com/kb/DL1769 - Mavericks (10.9.5 and above)/li lihttp://support.apple.com/kb/DL1768 - Mountain Lion (10.8.5)/li lihttp://support.apple.com/kb/DL1767 - Lion &amp; Lion Server (10.7.5)/li /ul  (If new patches are released, put them here but please keep these existing ones as well for reference.)  strongThe Apple patch takes care of Shellshock and several other vulnerabilities and is fine for most people./strong tl;dr people can stop reading here.  HOWEVER, the attention drawn to bash by the Shellshock bug has caused many researchers to take a hard look at bash and more and more (hard to exploit) vulnerabilities keep being found. If you are highly concerned about security (because maybe you are running OS X Server to host a publicly available web site) then you may want to (try to) keep up with the vulnerabilities and patches as they keep rolling in by compiling bash yourself. Otherwise, don't worry about it.  Look for Apple to release another update to bash some time in the future when the dust settles on finding further vulnerabilities.   hr  An official set of patches of bash itself for bash 3.2, patches 52, 53, and 54 (which correspond to Bash 4.3 patches 25, 26, and 27) are available which fix both CVE-2014-6271 and CVE-2014-7169, as well as the 'Game over' displayed below. This has been tested by me (@alblue) and the post has been updated accordingly (and then additional updates were made: see revision 41 for the post that stops at patch 54).   Many additional vulnerabilities have been reported against bash. According to Michal Zalewski's post if you have patch 54 (and presumably Apple's official patch) strong"there's no point in obsessing about the status of these individual bugs, because they should no longer pose a security risk:"/strong  ul liCVE-2014-6271 - original RCE found by Stephane. Fixed by bash43-025 and corresponding Sep 24 entries for other versions./li liCVE-2014-7169 - file creation / token consumption bug found by Tavis. Fixed by bash43-026 &amp; co (Sep 26)/li liCVE-2014-7186 - a probably no-sec-risk 10+ here-doc crash found by Florian and Todd. Fixed by bash43-028 &amp; co (Oct 1)./li liCVE-2014-7187 - a non-crashing, probably no-sec-risk off-by-one found by Florian.  Fixed by bash43-028 &amp; co (Oct 1)./li liCVE-2014-6277 - uninitialized memory issue, almost certainly RCE found by Michal Zalewski. No specific patch yet./li liCVE-2014-6278 - command injection RCE found by Michal Zalewski. No specific patch yet./li /ul  It gets pretty confusing. Fortunately Chet Ramey, the official bash maintainer, posted a CVE to patch mapping. His post refers to patches for bash 4.3, I (@OldPro) have translated them to patches for bash 3.2, which is what is applicable to OS X. Also, since this post he has released patch 57, so I added that below:  pre class="lang-none prettyprint-override"code bash32-052      CVE-2014-6271                           2014-09-24  bash32-053      CVE-2014-7169                           2014-09-26  bash32-054      exported function namespace change      2014-09-27 ("Game Over")  bash32-055      CVE-2014-7186/CVE-2014-7187             2014-10-01  bash32-056      CVE-2014-6277                           2014-10-02  bash32-057      CVE-2014-6278                           2014-10-05 /code/pre  See David A. Wheeler's post for a timeline and greater detail.   @alblue posted build instructions through patch 55. I (@OldPro) added patch 56 and 57 to the instructions but have not tested it.  h1Testing for the original Vulnerability/h1  You can determine if you are vulnerable to the original problem in CVE-2014-6271 by executing this test:  pre class="lang-none prettyprint-override"code$ env x='() { :;}; echo vulnerable' bash -c 'echo hello' bash: warning: x: ignoring function definition attempt bash: error importing function definition for `x' hello /code/pre  The above output is an example of a non-vulnerable codebash/code version. If you see the word codevulnerable/code in the output of that command your codebash/code is vulnerable and you should update. Below is a vulnerable version from OS X 10.8.5:  img src="https://i.stack.imgur.com/FCgFT.png" alt="Screenshot of bash terminal showing vulnerability in 10.8.5"  h1Testing for the new Vulnerability/h1  There has been an update to the original post and Bash 3.2.52(1) is still vulnerable to a variation of the vulnerability, defined in CVE-2014-7169   pre class="lang-none prettyprint-override"code$ rm -f echo $ env X='() { (a)=&gt;\' sh -c "echo date"; cat echo sh: X: line 1: syntax error near unexpected token `=' sh: X: line 1: `' sh: error importing function definition for `X' Thu 25 Sep 2014 08:50:18 BST /code/pre  The above output is an example of a vulnerable codebash/code version. If you see a date in the output of that command your codebash/code is vulnerable.  h1Disabling auto-imported functions to prevent "Game Over"/h1  Researchers noted, without classifying it as a vulnerability, that a script could hijack a function in a subshell using auto-imported functions:  pre class="lang-none prettyprint-override"code$ env ls="() { echo 'Game Over'; }" bash -c ls Game over /code/pre  The above code on an affected system would display codeGame Over/code instead of the directory listing you would expect from codels/code. Obviously, codeecho 'Game Over'/code could be replaced by any nefarious code you want. This became know as the "Game Over" bug.  Prior to the availability of patch 54, both NetBSD and FreeBSD disabled auto-importing bash functions by default, partly to prevent "Game Over" but mainly to contain any further errors in the parser (such as CVE-2014-7169) as they were continuing to be discovered, and added a new command line flag code--import-functions/code to re-enable the old default behavior. I (@alblue) have prepared a patch (against 3.2.53) for others to use if they want to adopt this behaviour as well and have included it below. By default this patch is not enabled in the build script below. I (@OldPro) believe this patch is no longer necessary or a good idea, because it breaks backwards compatibility and the vulnerabilities it protects against are very well addressed by patch 54 and earlier patches, and enabling this unofficial patch prevents future patches from being applied.   (Note to question editors; please do not enable this by default, as it is an unofficial patch.)  a0c5c4d66742fddd0a35001cb91798a5fbf8a2f5  import_functions.patch  The patch can be enabled by running codeexport ADD_IMPORT_FUNCTIONS_PATCH=YES/code before running the build. Note that strongemenabling this patch will disable patch 54 and any future patches/em/strong because future patches cannot be guaranteed to be compatible with the unofficial patch.  h1Apple Patch has Game Over vulnerability, sort of/h1  As pointed out by @ake_____ on twitter the official Apple patch is still vulnerable to environment clobbering of executables:  pre class="lang-none prettyprint-override"code$ env '__BASH_FUNC&lt;ls&gt;()'="() { echo Game Over; }" bash -c ls Game Over /code/pre  Users should decide for themselves how important this is. I (@OldPro) think it is nothing to worry about because there is no known exploit for this behavior (it was not even given a CVE identifier) because in general unprivileged remote attackers cannot set the emname/em of an environment variable and attackers with privileges cannot use this to gain privileges they do not already have (at least not without exploiting an additional vulnerabiltiy).   To provide a little background, bash allows you to define functions, and furthermore allows you to export those functions to subshells via the codeexport -f/code command. This used to be implemented by creating an environment variable with the same name as the function with its value set to the function definition. So  pre class="lang-none prettyprint-override"code$ ls () { echo 'Game Over'; } $ export -f ls $ echo $ls Game Over /code/pre  This happened because codeexport -f ls/code created an environment variable named codels/code. The "Game Over" vulnerability was that you could directly create this environment variable without having to first define the function, which meant if you could inject the right variable name you could hijack a command. Apple tried to fix this by making it hard to create a variable with the right name. The official bash patch 54 actually makes it impossible to create a variable with the right name by using variable names that include code%/code which is a character not allowed in a variable name, effectively putting exported function definitions in a different, reserved namespace.  If none of the above makes sense to you, don't worry about it. You are fine with the Apple patch for now.  h1System Binaries/h1  OS X 10.9.5 (the latest stable release at the moment) ships with Bash v3.2.51:  pre class="lang-none prettyprint-override"code$ bash --version GNU bash, version 3.2.51(1)-release (x86_64-apple-darwin13) Copyright (C) 2007 Free Software Foundation, Inc. /code/pre  You can obtain and recompile Bash as follows, providing that you have Xcode installed (and have run codexcodebuild/code at least once before to accept the license):  pre class="lang-sh prettyprint-override"code$ # If you want to disable auto-imported functions, uncomment the following $ # export ADD_IMPORT_FUNCTIONS_PATCH=YES $ mkdir bash-fix $ cd bash-fix $ curl https://opensource.apple.com/tarballs/bash/bash-92.tar.gz | tar zxf - $ cd bash-92/bash-3.2 $ curl https://ftp.gnu.org/pub/gnu/bash/bash-3.2-patches/bash32-052 | patch -p0     $ curl https://ftp.gnu.org/pub/gnu/bash/bash-3.2-patches/bash32-053 | patch -p0   $ # See note above about ADD_IMPORT_FUNCTIONS_PATCH $ [ "$ADD_IMPORT_FUNCTIONS_PATCH" == "YES" ] &amp;&amp; curl http://alblue.bandlem.com/import_functions.patch | patch -p0 $ [ "$ADD_IMPORT_FUNCTIONS_PATCH" == "YES" ] || curl https://ftp.gnu.org/pub/gnu/bash/bash-3.2-patches/bash32-054 | patch -p0 $ [ "$ADD_IMPORT_FUNCTIONS_PATCH" == "YES" ] || curl https://ftp.gnu.org/pub/gnu/bash/bash-3.2-patches/bash32-055 | patch -p0 $ [ "$ADD_IMPORT_FUNCTIONS_PATCH" == "YES" ] || curl https://ftp.gnu.org/pub/gnu/bash/bash-3.2-patches/bash32-056 | patch -p0 $ [ "$ADD_IMPORT_FUNCTIONS_PATCH" == "YES" ] || curl https://ftp.gnu.org/pub/gnu/bash/bash-3.2-patches/bash32-057 | patch -p0 $ cd .. $ # Note: DO NOT ADD SUDO TO XCODEBUILD HERE $ xcodebuild $ build/Release/bash --version # GNU bash, version 3.2.57-release $ build/Release/sh --version   # GNU bash, version 3.2.57-release $ sudo cp /bin/bash /bin/bash.old $ sudo cp /bin/sh /bin/sh.old $ sudo cp build/Release/bash /bin $ sudo cp build/Release/sh /bin /code/pre  (Note: you can run this by copy-and-pasting the above code block, going into Terminal and then running codepbpaste | cut -c 2- | sh/code. Always take care when running random scripts from the internet though ...)  After this, the Bash version should be v3.2.57:  pre class="lang-none prettyprint-override"code$ bash --version GNU bash, version 3.2.57-release (x86_64-apple-darwin13) Copyright (C) 2007 Free Software Foundation, Inc. /code/pre  For security, and after testing, I recommend that you codechmod -x/code the old versions to ensure they aren't re-used, or move them to a backup site.  precode$ sudo chmod a-x /bin/bash.old /bin/sh.old /code/pre  Other answers have solutions for those using MacPorts or Homebrew; these don't fix the problem, they just install additional versions of Bash. Please see those answers if you want to upgrade those specifically.  h1Thanks/h1  Thanks to Chet, who looks after bash, and has been making these patches available. Thanks to everyone else who has commented on this and improved it over time.  Now Apple has released the real fix, though this might still be useful. Because they only released a fix for Lion and up, and the official patch provides GNU bash, version 3.2.53(1)-release (x86_64-apple-darwin13), however, the Game over bug is still somewhat vulnerable. At this point, rebuilding your own version of Bash against 3.2.57 is probably more secure than relying on Apple's patch, unless you do it wrong.  <answer146859> h1OS X 10.6.8 - Snow Leopard/h1  The post of @AlBlue is very complete. However, on my OS X 10.6.8 server his fix will not work. Apple has no fix for 10.6.8 and the steps explained by @AlBlue do not work with Xcode 3.2.6 (which is the latest version for Snow Leopard). I recieve an error:  precode** BUILD FAILED **  The following build commands failed: sh:     CodeSign /Users/bas/bash-fix/bash-92/build/Release/sh bash:     CodeSign /Users/bas/bash-fix/bash-92/build/Release/bash (2 failures) /code/pre  For this reason I am using brew.sh. Please comment your thoughts when you have a better solution for OS X 10.6.8 Snow Leopard. See also the comment of @Jerome, he had a successful patch on OS X 10.6.8 Snow Leopard using @AlBlue's solution. Anyway:  First install brew with the following oneliner:  precoderuby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" /code/pre  Update codebrew/code  precodebrew update /code/pre  Now just install the latest version of codebash/code and replace the current one:  precodebrew install bash sudo sh -c 'echo "/usr/local/bin/bash" &gt;&gt; /etc/shells' chsh -s /usr/local/bin/bash sudo mv /bin/bash /bin/bash-backup sudo ln -s /usr/local/bin/bash /bin/bash /code/pre  You can set the default login shell 'codeCommand (complete path)/code' for the Terminal.app in its preferences (kbdCommand/kbdkbd,/kbd) img src="https://i.stack.imgur.com/mOiUG.png" alt="enter image description here"  hr  note: In the comments some users do not think this method is appropriate. But for me this is the only comprehensible method for upgrading BASH on OS X 10.6.8 Snow Leopard.  <answer146864> h1Macports/h1  This gets you a bash version 4.3.28(1) which patched both vulnerabilities (CVE-2014-6271 and CVE-2014-7169) as well as some subsequently discovered ones. This is useful if you have changed shells to use Macports bash to get the version 4 features.  It will not solve the issue of standard OS scripts as the have code#!/bin/sh/code or code#!/bin/bash/code as the first line. This sort of issue is why Macports tries not to use Apple's supplied versions of programs as Macports tends to be updated quicker e.g. it has a newer version of bash)  You can make terminal use this as in the Homebrew answer  To install macports follow these instructions which arebr 1. Install Xcode and the Xcode Command Line Toolsbr 2. Agree to Xcode license in Terminal: sudo xcodebuild -licensebr 3. Download MacPorts pkg for your version of OS X: links are on the pagebr 4. Run the pkg  When you have macports installed you need to latest versions, this is done by running   precodesudo port selfupdate /code/pre  and recompile or get the latest binaries by  precodesudo port upgrade outdated /code/pre  <answer146943> NOTE regarding the official Apple OS X bash Update 1.0: This software update only brings the official Apple bash version to 3.2.53. The 3.2.54 patch revision offers the following change:     This patch changes the encoding bash uses for exported functions to   avoid clashes with shell variables and to avoid depending only on an   environment variable's contents to determine whether or not to   interpret it as a shell function.   For users who have already patched the system with 3.2.54 binaries, you may either replace your compiled binaries with the Apple patch or you can leave things as they are but it is ill-advised. Although Apple left their binary versioning at 3.2.53, strongthe Apple patch DOES contain the fix for the below exploit test:/strong  codeenv X='() { (a)=&gt;\' sh -c "echo date"; cat echo/code  This means that the Apple official 3.2.53 binary contains equivalent security to the vanilla GNU 3.2.54 binary. An unfortunate point of confusion, but it is what it is. Apple's fix is not half-baked. It appears to be a complete fix for the problem. As such, the below roadmap to compiling vanilla codebash/code and codesh/code from GNU source should be considered a historic artifact and possibly consulted as a template for how to do patches in the future should they be necessary.  strongNOTE: With the vanilla GNU source, codesh/code has privilege elevation problems that cause failures in various installers, e.g., Adobe Flash. I strongly recommend sticking with the Apple-patched binaries. Consider this patch scheme to be deprecated and ill-advised./strong  There is a new GNU bash 3.2.55 patch that describes the following fix:     Bug-Description:      There are two local buffer overflows in parse.y that can cause the shell   to dump core when given many here-documents attached to a single command   or many nested loops.   We leave it up to the gentle reader to determine whether to sit with the official Apple-patched binaries or roll your own to deal with the new possible exploits. Personally, strongI will be sticking with the Apple binaries./strong  hr  This post details how to compile and install a vanilla codebash/code and codesh/code on OS X. I chose this route as following examples detailing using Apple-specific source did not leave me with the correct patch revision. YMMV. This vanilla installation is, however, targeted at replacing the OS X binaries such that when Apple does finally release a security update, these vanilla replacements will be usurped by by their proper Apple counterparts.  My base configuration is:  OS X Lion 10.7.5 and Xcode 4.6.3 with all command-line utilities installed.  My steps to fix this were:  Download the base bash source code for 3.2.48 from:  https://ftp.gnu.org/gnu/bash/bash-3.2.48.tar.gz  Download the bash3.2.49, .50, .51, .52, .53, .54 and .55 patches from:  https://ftp.gnu.org/gnu/bash/bash-3.2-patches/  I saved them as $filename.patch, e.g., bash3.2.50.patch.  CD into your download directory and …  Unpack the main source branch:   precodetar xzvf bash-3.2.48.tar.gz  cd bash-3.2.48 /code/pre  Assuming that you've renamed your downloaded patch files as described earlier,   precodecp ../*.patch . /code/pre  Then …  precodefor file in *.patch ; do   patch -p0 &lt; $file done /code/pre  This should show successful patches of various files. If not, be prepared to do some exploration and investigation.  Next:  precodesudo cp /bin/bash /bin/bash_old sudo cp /bin/sh /bin/sh_old sudo chmod -x /bin/bash_old sudo chmod -x /bin/sh_old /code/pre  That basically backed up your old, vulnerable bash and sh shells and removed their executable privilege. That gives you the capacity to restore the commands as necessary, but removes their ability to do damage in the meantime.  Next:  precode./configure --prefix=/ ; make ; sudo make install /code/pre  This should correctly configure, compile and install the new bash binary into /bin. After it's done, exit Terminal and reopen.  You should, all things happy and smiling, be able to codebash --version/code and now see 3.2.55, e.g.:  precodeGaia:Downloads trane$ bash --version GNU bash, version 3.2.55(1)-release (i386-apple-darwin11.4.2) Copyright (C) 2007 Free Software Foundation, Inc. /code/pre  The exact output in the command above will differ depending on your version of OS X.  You should also be able to test your vulnerability against codebash/code and find that it is fine.  NOTE: We've only fixed bash so far, but the code/bin/sh/code executable is still in its vulnerable state. Merely copying codebash/code atop codesh/code is a Linux style of doing things. OS X's codesh/code implementation has some differences from codebash/code, however, so you'll want to drag out the compiler again. Further information on how codebash/code and codesh/code differ in OS X can be found here:  https://apple.stackexchange.com/a/89327/91441  In your download directory do:  precodemake clean /code/pre  In your favourite editor, open the file codeMakefile.in/code and scroll to line 99. We're going to change the Program line so that the binary we output is codesh/code instead of codebash/code like so:  precodeProgram = sh$(EXEEXT) /code/pre  Save it and then  precode./configure --prefix=/ --enable-xpg-echo-default --enable-strict-posix-default make ; sudo make install /code/pre  Now you'll have built codesh/code almost exactly as Apple would.  One final note: On some (all?) systems, Apple generally seems to place the codebashbug/code executable in code/usr/bin/code. Our compile will have put it into code/bin/code. So, the final steps here:  precodesudo mv /usr/bin/bashbug /usr/bin/bashbug_old sudo chmod -x /usr/bin/bashbug_old sudo mv /bin/bashbug /usr/bin/bashbug /code/pre  <answer147035> First, patching bash and sh for this vulnerability is likely to break some scripts on your Mac. You really don't need to do this unless you are are offering web services to the public internet directly from your Mac. So if it is really not necessary, wait until there is an official security update from Apple.  Being warned, here are some instructions on how to do this update using Brew on Mavericks 10.9.  First confirm that you are using an outdated bash:  precode$ which bash /bin/bash $ /bin/bash --version GNU bash, version 3.2.51(1)-release (x86_64-apple-darwin13) Copyright (C) 2007 Free Software Foundation, Inc. /code/pre  The most current bash is 4.3.25  If you don't have Xcode installed, you'll need the Xcode command line tools, which can be installed by  precode$ xcode-select --install /code/pre  Or from the developer portal.  To install Brew (http://brew.sh):  precode$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" /code/pre  Then do:  precode$ brew doctor /code/pre  Follow any instructions if there are problems. Many common problems are addressed here.  Then update brew to the latest list of packages:  precode$ brew update /code/pre  To get the latest bash 4.3.25:  precode$ brew install bash /code/pre  This installs bash into code/usr/local/Cellar/bash/4.3.25/bin/bash/code  The old codebash/code and codesh/code still exists at code/bin/code, so after installing you'll rename the old executables to a new file.  precode$ sudo mv /bin/bash /bin/bash_old $ sudo mv /bin/sh /bin/sh_old /code/pre  If you are very paranoid, you can remove execute permissions on the codebash_old/code  precode$ sudo chmod a-x /bin/bash_old /bin/sh_old /code/pre  Then create a symbolic link to the new bash 4.3.25 that brew installed.  precode$ sudo ln -s /usr/local/Cellar/bash/4.3.25/bin/bash /bin/bash $ sudo ln -s /usr/local/Cellar/bash/4.3.25/bin/bash /bin/sh /code/pre  Reboot and it is complete.  A warning — this may break some existing shell scripts that might rely on bash 3.2 or the differences that the Mac codesh/code has over the linux codesh/code. There is a much more sophisticated answer to replacing bash and sh from sources, from an answer by @TraneFranks in this same thread.  <answer147625> You can follow the instructions here: https://github.com/tjluoma/bash-fix Basically, do the following in a Terminal:  precodecurl -s https://raw.githubusercontent.com/tjluoma/bash-fix/master/bash-fix.sh | zsh -f /code/pre  <answer147630> For anyone struggling with compiling from source, as of September 29th, Apple has officially released patches for Mac OS X 10.9.5, 10.8.5 as well as 10.7.5:  ul liOS X bash Update 1.0 – OS X Mavericks/li liOS X bash Update 1.0 – OS X Mountain Lion/li liOS X bash Update 1.0 - OS X Lion/li /ul  <comment173035> However this will not change the version of bash that is used when you start the terminal or started by any other script . scripts tend to have #!/bin/sh or bash at the top so ignore PATH <comment173037> also some scripts rely on bash 3 and don't work with bash 4 (macports has fixed bash 4.3.25 which I assume home-brew has updated to <comment173040> The OP did not ask for specific version 3 or 4. This is just another way to do it. <comment173042> Not the solution I chose, but +1 for useful information like the "Shells open with" preference. <comment173043> Yes it is as you need to provide a bash 3.x to fix the issue <comment173044> Fixed the PATH and default Terminal shell <comment173050> You're not updating `sh` as well -- you need to do that too. `/bin/sh` != `/bin/bash`. Many tools shell out to `/bin/sh` when you run system commands. Ruby's `system()` call, for example, uses `/bin/sh` when you have a shell expansion character that needs to be expanded in the string. You're playing a losing game using Homebrew to update your system binaries IMO. You should update Homebrew's `bash` *in addition to* doing a proper update of the system binaries. <comment173057> Bear in mind that OSX 10.8 and 10.9 use Bash 3.2, so for direct consistency I went with 3.2 as the version. This also based it on Apple's official build for the prior version, which may include extras like extended attribute awareness etc. <comment173061> Since this is about fixing a security vulnerability in existing binaries, and this doesn't replace/fix the vulnerable binaries, I fail to see how this solves the problem. <comment173062> It foxes the macports version - and was really in request to IanC's comment <comment173065> Yes. We should be listing the fixes for all the places `bash` usually comes from on OS X -- so the system fix, the Homebrew and the MacPorts fix. Possibly Fink as well. I'd personally prefer it if this was made as an edit to @AlBlue's answer. So it's all one, most correct, answer. <comment173066> @InaC these should be separate as the answers do differ and one large one can;t be checked - e.g see me saying this does not fix Apple's bash and the home-brew answer copying Homebrew bash over OSX. In effect they are separate questions <comment173067> See my edit to @AlBlue's answer. I disagree these should be separate. <comment173158> `sudo port selfupdate` without a space between self and update... <comment173171> Answers need to stand alone; links are okay but you also need to summarize the content. <comment173172> Not to whine or anything, but when the question is "how to do I recompile bash" and my answer is "click the following link to the answer to that question, it seems that the summary requirements stand. <comment173198> FWIW, under 10.6.8 with Xcode 3.2.6, configure completes without warning of any missing software, but the compilation throws warnings in one of the patched files (variables.c) and then fails with a ton of link errors involving `_rl_` symbols. <comment173201> Sorry to hear that, Seth. I hope you can solve it; otherwise, you're out of luck. Apple stopped supplying Snow Leopard updates at the end of last year. <comment173211> Got it: the readline library included with bash is not compatible with 10.6.  Install GNU readline instead and then hack the bash makefile to use it.  Install readline: ftp://ftp.cwru.edu/pub/bash/readline-6.3.tar.gz   In bash, after doing configure, in Makefile, set `READLINE_LIB = /usr/local/lib/libreadline.a` and do a clean compile.  Then strip and copy the new bash binary on top of `/bin/bash` and `/bin/sh` <comment173219> EXCELLENT, Seth. Glad to see it! <comment173305> Addendum: In the bash Makefile, it is also necessary to set `HISTORY_LIB = /usr/local/lib/libhistory.a`.  Otherwise bash will be dynamically linked to the /usr/local version of libhistory. <comment173313> Note that the version downloadable from the Apple opensource page has custom changes to make it work on OSX. I would not recommend using the vanilla upstream bash as otherwise you're not replacing like-for-like. <comment173347> Patching from 3.2.51 to 3.2.52 is going to cause way less damage than upgrading to 4.3.anything. <comment173351> I warn that it may break some scripts, but 4.3.25 is what Brew installs as current — I'm trying to offer a version that is easy(er) to install that doing it from scratch. And you can always restore by renaming the old executables back. <comment173352> Apple makes many changes to optimize the open source utils on the system. That said, I can't see where a vanilla `bash` would somehow fail to behave itself just because the kernel is different. In any case, I consider my solution to be temporary; eventually, Apple will get around to patching the problem and my compiled binaries will be replaced (which is my main reason for compiling into `/bin` in the first place. <comment173358> This bug is exploitable by a malicious DHCP server (e.g. WiFi hotspot) and can completely pwn your computer, so it's worth fixing ASAP. Other answers have better instruction for replacing `/bin/bash` and `/bin/sh` that will likely cause fewer problems than upgrading to Brew's latest bash. <comment173369> The Mac may not be vulnerable to the DHCP attack. <comment173387> The DCHP server attack is only possible if your DHCP client uses Bash scripts, which the OSX implementation does not. <comment173453> Does 4.3.25 also solve the followup CVE? <comment174001> Executing random shell scripts from random github accounts is not how you get to more secure situation on any machine. You want to trust the end point. <comment174004> Thanks!  This may be easier than recompiling for many / most. <comment174014> @AlBlue Agreed. Also while not completely clean in it’s patching—as some have pointed out—this is far better than nothing. And far safer than some novice compiling source code in a panic. <comment174017> As usual, the Software Update propagation delay is in full effect. I wonder how long the packages will take to show up. It's refreshing to see that Apple responded pretty quickly to this issue! <comment174018> I have to agree with Ian here. It's really easy to introduce some dramatic damage through untrusted shell scripts, such as the problems that these CVEs describe. <comment174019> @TraneFrancks “As usual, the Software Update propagation delay is in full effect.” I really do not understand how an organization that and push U2’s full album to all iOS users can somehow choke on a less than 4MB security update. <comment174020> @JakeGould: Heh. Yeah, that's a giggle. I just checked Software Update on this Lion system and it claims the system is up-to-date. Same with another Mountain Lion system here. <comment174022> @TraneFrancks Ummm, if you follow the links above you can download directly from Apple. No need to wait for Software Update. <comment174024> @JakeGould: Just did that and now see that the version is only 3.2.53 rather than 3.2.54. Apple is still a step behind. <comment174026> @TraneFrancks You should read the comment I made above where I state, **“Also while not completely clean in it’s patching—as some have pointed out—this is far better than nothing.”** So basically I see this as fine for now & for the majority of panicked users out there. <comment174033> @JakeGould: I concur. I merely noted the difference as downgrading from 3.2.54 to 3.2.53 may be undesirable for those who have already patched their systems. <comment174038> I have an old system with OS X v10.4 and Bash 2.05b, so I can't upgrade to the latest Bash or latest OS X.  I followed the instructions here and downloaded the source for Bash 2.05b along with the ten patch files.  I applied the patches and built Bash.  I needed the kluge for the readline library above.  Patch 008 is one of the key patches for this vulnerability, and among other things it fails function definition attempts from environment variables, with the error message `internal_warning ("%s: ignoring function definition attempt", from_file);` <comment174039> `strings` on the newly-built Bash verifies that the new error message `ignoring function definition attempt` is present.  Yet, if I run the new bash and then enter the vulnerability check, it still shows vulnerable. <comment174043> @jetset: Did you restart the currently open Terminal instance? To test whether things are okay, compare output from `bash --version` with `echo $BASH_VERSION`. If the latter is a lower version, restart Terminal. <comment174058> I didn't install the newly-built Bash; I wanted to verify that it fixed the problem first.  So I just invoked it using `./bash` and then in it I ran the vulnerability test. <comment174059> Both the old Bash and the newly-built one report the same version (which makes sense since I manually applied the 2.05 patches): `~/bash/bash-2.05b$ ./bash --version` `GNU bash, version 2.05b.0(1)-release (powerpc-apple-darwin8.11.0)` `~/bash/bash-2.05b$ /bin/bash --version` `GNU bash, version 2.05b.0(1)-release (powerpc-apple-darwin8.0)` <comment174060> But the newly-built Bash has the new error message while the old Bash doesn't:  The new Bash has the string:  `~/bash/bash-2.05b$ strings ./bash | grep 'ignoring function definition attempt'%s: ignoring function definition attempt`  The old Bash does not: `~/bash/bash-2.05b$ strings /bin/bash | fgrep 'ignoring function definition attempt' ` <comment174062> Apple has released a fix: http://support.apple.com/kb/DL1769 <comment174073> The OS X bash Update 1.0 patch mentioned above is specific to OS X 10.9.5 or later — Here's all of them: [OS X 10.7.5](http://support.apple.com/kb/DL1767) (Lion), [OS X 10.8.5](http://support.apple.com/kb/DL1768) (Mountain Lion), [OS X 10.9.5](http://support.apple.com/kb/DL1769) ( Mavericks). <comment174079> If you run the three variations of the vulnerability tests and they do not come up, you're fine. The newest 2.05b patches definitely address these CVEs. <comment174082> Yes, I had the links added 9 hours ago but they were incorrectly deleted.  http://apple.stackexchange.com/revisions/146849/10 <comment174126> Strongly disagree with this spreading of FUD.  READ all shell scripts before executing them, and only from https://. <comment174135> You might want to change the download links to `https://` <comment174140> @CousinCocaine: Yes, I might indeed. Thank you. <comment174281> Can anyone help figure out why a freshly-recompiled Bash 2.05b with all ten patches applied still shows as vulnerable according to the tests?  The `strings` command verifies that the binary has the patches. <comment174283> @jetset: Did you use the `patch` command to apply your patches as detailed above? I recall you elsewhere saying that you did your fixes 'manually'. <comment174286> Yes, I successfully applied all ten patches, as verified by checking the sources.  The `strings` command on the resulting binary shows it has the new error message `ignoring function definition attempt` which was added by patch 008. <comment174288> What _exactly_ is the output from running the 3 exploit examples? <comment174296> created a gist https://gist.github.com/dnozay/395dcdef05c6b4b1836a which has most of the steps and already has the patches included (and should work on OSX 10.6). <comment174301> The output from each of the three exploit tests is identical on old and patched Bash:      `$ ./bash`     `$ env x='() { :;}; echo vulnerable' bash -c 'echo hello'`     `vulnerable`     `hello`      `$ rm -f echo`     $ env X='() { (a)=\' sh -c "echo date"; cat echo     sh: X: line 2: syntax error near unexpected token `='     sh: X: line 2: `'     sh: error importing function definition for `X'     Tue Sep 30 17:35:25 PDT 2014      `$ env ls="() { echo 'Game over'; }" bash -c ls`     `Game over` <comment174302> Let us [continue this discussion in chat](http://chat.stackexchange.com/rooms/17540/discussion-between-jetset-and-trane-francks). <comment174310> You haven't moved your compiled bash to `/bin` yet, have you? The exploits are testing your system `bash`, not the `bash` in your compiled-but-yet-to-be-installed binaries. Either install the binaries or change ALL the `bash` instances to `./bash`. <comment174311> To quote a famous Simpson, "DoH!"  Of course the tests still showed vulnerable, because each of them invokes the system `bash` or `sh` so I need to modify the tests to invoke the local `./bash` instead.  If I do that, it all works. <comment174313> Install your binaries and you're good to go. Remember to restart Terminal to be sure that your current shell is running the new binary. <comment174314> I see @TraneFrancks posted the same solution at the same time I realized it.  Thanks everyone for the help. <comment174372> Regarding the differences between Apple and GNU builds: At least under 10.8.5, replacing Apple /bin/sh with the patched GNU bash will cause the Adobe Flash installer to fail at `authexec[460]: executing /bin/sh`.  But this problem does not occur under 10.6.8, which has no Apple patch.  So it at least appears that the Apple patches are preferred on later systems, but the GNU patches may work for 10.6.8. <comment174387> I've upgraded three 10.6.8 machines with no hitch according to the capture and recompile BASH instructions provided in AlBlue's answer as appeared on Friday sept. 26 (i.e. without # ADD_IMPORT_FUNCTIONS_PATCH).  Doing a brew update will update that version if you installed one that way - are you certain the system bash is not used elsewhere? If not, the pick AlBlue's solution <comment174415> @Jerome, I recieve an error on the `xcodebuild` step. I run xcode 3.2.6. At first it seems to build, but then I get an error: ** BUILD FAILED ** The following build commands failed: sh: CodeSign /Users/user/bash-fix/bash-92/build/Release/sh bash: CodeSign /Users/user/bash-fix/bash-92/build/Release/bash  This is were I am stuck, any ideas? <comment174432> I'm running 3.2.6 myself on all instances.  I understand the build fails when running `xcodebuild`? If so, I did not experience that.  I have few solid suggestions to give you aside: check if you have multiple bash builds, consider cleaning up (brew uninstall) and possibly re-install xcode...  then start the patch process anew. <comment174446> Note for the last edit macports seems to have corrected it self - I got a good build <comment174472> I concur that these Apple patches are preferred. They completely address the Shellshock exploit. <comment174475> Not only do I concur, @SethNoble, I was able to reproduce the problem. The Adobe installer works fine with the Apple-patched bash/sh 3.2.53. <comment174545> @Jerome, a cleaning up (brew uninstall) and re-install of xcode and the above described patch process resulted in the same error. But I must have something odd going on on my system cause I have not seen this error elsewhere. <comment174681> I guess the only way of knowing is to build the same on another machine.  I have no idea no what may be going on; I can only instinctively say that when you touch some things with Apple's OS x interface, as above, hurt happens. <comment174772> @dnozay Thanks for your gist! Please update it to include patches 55 and 56 (already out) and 57 (due out soon). <comment174777> @OldPro, please ping me when 57 is out and i will update it. <comment174896> @dnozay Patch 57 is out https://ftp.gnu.org/pub/gnu/bash/bash-3.2-patches/bash32-057 <comment179926> I've had *serious* job control issues with hand-built stock bash-4.3 on Snow Leopard (If I start emacs and then suspend it, I cannot resume it with 'fg').  I have since downloaded the Snow Leopard source for bash from https://opensource.apple.com/release/mac-os-x-1068/, applied the patches from http://ftp.gnu.org/gnu/bash/bash-3.2-patches/, and rebuilt to much better effect. <comment179938> @mormegil, thanks for sharing and the URLs.