Why are Script Editor .scpt files not saved as plain text files? <body> The Script Editor (formerly AppleScript Editor pre-Yosemite 10.10) saves code.scpt/code files as binary files, not plain text files.  It makes working with them in source code control systems somewhat cumbersome.  Does anyone know why this is the case? Is there some long-standing history that necessitated this file format be something other than plain text files?  <answer181061> In short, code.scpt/code allows backward compatibility. Plus, applescript/javascript (etc) can saved with the same extension, given that codeScript Editor/code now supports javascript.  To decompile code.scpt/code in shell:  https://github.com/rupa/applescript/blob/master/decompile.sh  The most relevant part:  precodeosadecompile /code/pre  Textmate is a third-party editor that can read code.scpt/code:  https://github.com/textmate/textmate/blob/master/Applications/decompile_as/src/decompile_as.mm  The most relevant part:  precode[[OSAScript alloc] initWithCompiledData:]; /code/pre  This function comes from codeOSAScript.h/code, apart of OS X SDK. In codeOSAScript.h/code, there is this lengthy comment:     Given a URL that locates a compiled script, script application, or script source, create and return an autoreleased script data descriptor with its contents. You may use the descriptor to create a script with -[OSAScript initWithScriptDataDescriptor:...]. This enables you to create a script with a specific OSALanguageInstance. You may use +[OSALanguage languageForScriptDataDescriptor:] to get the language for the script data, which may then be used to create or select an appropriate language instance for an OSAScript. Script source data may be compiled by -[OSAScript initWithScriptDataDescriptor:...], or you can coerce the descriptor to a string (using NSAppleEventDescriptor methods) and explicitly create an OSAScript with the source.   + (NSAppleEventDescriptor *)scriptDataDescriptorWithContentsOfURL:(NSURL *)url AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER;   Basically, when saved code.scpt/code, an codeOSALanguageInstance/code descriptor is also saved in the file.   If a file is saved as code.applescript/code/text, the system will compile it with lastest version of applescript language. A script, for example, written for an older version of OS X may not work on a new version because some functions have become obsolete. With code.scpt/code, the system/app have pick out what version of applescipt it's meant for.  From 10.10, javascript can be saved in code.scpt/code and be executed correctly.  <answer181062> William R. Cook's paper contains an excellent history and insight from those involved with AppleScript in 1989.  What follows is fun and speculative.  h2Conservation of Space and Processing/h2  AppleScript was written at a time when every byte and bit was valuable. OS X's lazy encoding as property list formats would be wasteful in the eyes' of those early developers.  The binary format provided a pre-parsed form that avoided duplicating the complex, error prone, and time consuming parsing process with each load from disk. Better to load directly into memory and run.  h1Adaptive/h1  Saving in a binary format allowed AppleScripts to be tied to the underlying AppleEvent codes rather that their dictionary of long form terminology.  This would allow an AppleScript written and saved against one version of an application to automatically update to terminology changes between versions of the targeted applications.  An integer object might be called 'integer' in the script but saved as the four character code 'codeintÂ /code' in the binary representation. The four character code coming from the AppleScript dictionary provided by the operating system.  If a future AppleScript terminology decided to alter the user facing word for integer, the binary representation could map to the newer name.  A flip side to this is possible to see today. Write an AppleScript against an application's dictionary. Then remove the application entirely from your Mac. What do you see in Script Editor upon opening the script?  At least in recent versions, AppleScript Editor showed chevrons surrounding the four character code. The code has been remembered and highlighted. Not the user facing terminology.  This is probably not the primary benefit but a possible benefit.  h1Modern Bias/h1  It is worth acknowledging our modern bias for text documents. Experience has taught many of us that storing valuable content in a binary format carries risk. Binary formats are often poorly documented, opaque to the end user, and difficult to open when the owning software is not maintained.  When AppleScript and it's binary format were created, this bias was not yet formed. Storage and computational limits were very real and every kilobyte or thousands of cycles saved were worthwhile.  h1History and Origins/h1  The stories of AppleScript's origin are wonderful but difficult to track down these days. AppleScript tried to be a friendly, English language like, language and was breath taking in its vision; the actual implementation was harder to get right!  ul liAppleScript by William R. Cook/li liAppleScript - a story worth telling/li /ul  <comment198657> I dont know the why of it but as commented [here](https://apple.stackexchange.com/questions/146927/saving-applescripts-as-scripts-versus-text?rq=1), you could write a hotkey/script macro to save as text instead. It's a pain but doable... <comment215398> In the Save panel you can save scripts in several different formats, including plain text. <comment215700> Great answer, imho <comment355294> Got ` errOSASourceNotAvailable (-1756).` what does that mean?