Under 10.8 which file stores the environment variables? <body> This has been this way since 10.6. There is no code.bashrc/code file in the home dictionary but the environment variable codePATH/code indeed exists as the result of this command shows:  precode$ echo $PATH /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin /code/pre  Anyone know how/where OS X stores environment variables?  <answer57904> You could make your own code.profile/code or code.bashrc/code file to set environment variables for your user.  <answer57907> The system-wide default path is in code/etc/paths/code. The default on a 10.8 system contains the following:     /usr/bin      /bin      /usr/sbin      /sbin      /usr/local/bin   To add additional system-wide codePATH/code entries, you could change that file, but a better option would be to add a file with the additional path entries to directory code/etc/paths.d/code. That user-created file will be protected during any upgrades/patches, which may replace a customised code/etc/paths/code with an Apple-distributed version.  Alternatively, you could put the appropriate codePATH/code modifying statements in code/etc/profile/code or code/etc/bashrc/code (in the case of bash, it will only use the latter if the former doesn't exist). Any other system-wide environment changes can be done using those files as well.  User-specific configuration can be put in code$HOME/.bashrc/code or code$HOME/.bash_profile/code.  strongNote:/strong In the above, I've assumed you're using bash - if you're using csh or zsh, you'll need to adjust their configuration files (the information about code/etc/paths/code and code/etc/paths.d/code remains valid, however).  <answer57908> Where setting environmental variables for a shell which file you use is dependent on what shell you are running.  To determine what shell your running in the Terminal try:  codeecho $SHELL/code  Once you have that you can read the manual page for your shell, which is likely going to be bash.  codeman bash/code   If you are running bash, this segment from the bash manual will be helpful.     When  bash  is  invoked as an interactive login shell, or as a non-interactive shell with the --login          option, it first reads and executes commands from the file strong/etc/profile/strong, if that file exists.   After          reading  that  file,  it looks for strong~/.bash_profile/strong, strong~/.bash_login/strong, and strong~/.profile/strong, in that order, and          reads and executes commands from the first one that exists and is readable.  The  --noprofile  option          may be used when the shell is started to inhibit this behavior.   <comment66621> So I can store the long uri of my computer lab in a variable <comment66623> You can easily create a `.bashrc` in your home folder yourself, can't you? <comment66670> On OS X, `.bash_profile` is indeed the correct name for the configuration file. <comment66876> `.bashrc` is still used for non-login interactive shells (see the manual page for more information).