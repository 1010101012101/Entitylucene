What is standard for os x filesystem? e.g. /opt/ vs. /usr/ <body> What does and should go into code/opt//code and what should/does go into code/usr//code?  My understanding is that code/usr//code used to be for user home directories, but since that exists in code/Users//code - what is the purpose now?  Is there a manual or guide to what all of the built-in directories should be used for?  Like what is code/home//code, or code/net//code?  <answer119265> strongIs there a manual or guide to what all of the built-in directories should be used for? Like what is /home/, or /net/?/strong  Take a look at the File System Programming Guide for the most up-to-date information and at codeman hier/code in Terminal, which provides a "historical sketch" of the filesystem hierarchy (it's included at the end of this answer for reference).  A comment to your question mentions the Filesystem Hierarchy Standard. You will probably come to the conclusion, after perusing File System Programming Guide and codeman hier/code, that OS X doesn't follow the FHS, that's more of a Linux thing. Of course, there are similarities between the FHS and the filesystem layout in OS X because of the common UNIX origin, but the differences are striking. OS X doesn't use any of these:  ul licode/boot/code - Kernel is in code//code (code/mach_kernel/code)/li licode/home/code - OS X uses code/Users/code instead/li licode/root/code - OS X uses code/var/root/code instead/li /ul  and code/opt/code isn't mentioned not one time in any document (more on code/opt/code below.)   A further distiction between OS X and a FHS-compliant OS is the use of code/private/code, for example code/etc/code is a symlink to code/private/etc/code.  About code/net/code: It is an automounter map (listed in code/etc/auto_master/code), see Wikipedia for more information.  strongWhat does and should go into /opt/ and what should/does go into /usr/? My understanding is that /usr/ used to be for user home directories, but since that exists in /Users/ - what is the purpose now?/strong  Although code/usr/code was used in the past to place the home directories of the users, that's no longer the case.  Nowadays, code/usr/code contains user commands (in code/usr/bin/code for normal users and code/usr/sbin/code for administrative users, like coderoot/code), shared libraries (code/usr/lib/code), man pages (code/usr/share/man/code), executables that shouldn't be run directly by users (code/usr/libexec/code) and other stuff.  It also offers a subdirectory, code/usr/local/code, to place programs, libraries and other files that don't come with the base OS.  code/opt/code has a very similar role to code/usr/local/code and they seem interchangeable. However, from my experience working with other Linux/UNIX sysadmins, there seems to be a empreference/em for code/usr/local/code in BSD-based UNIX OSs.  strongSo this is my take on it:/strong OS X is BSD-based and consequently I'd use code/usr/local/code. Note that you can create a program directory and then symlink commands to code/usr/local/bin/code, etc, for example:  precode/usr/local/mysql /usr/local/mysql/bin/mysqladmin /usr/local/mysql/lib/libmysqlclient.so /usr/local/bin/mysqladmin -&gt; ../mysql/bin/mysqladmin /usr/local/lib/libmysqlclient.so -&gt; ../mysql/lib/libmysqlclient.so /code/pre  This used to be usual practice in Linux and UNIX too, but the FHS explicitely forbids it: if you wish to install third party packages in their own directory hierarchy you should usecode/opt/&lt;package&gt;/code instead. Note that FHS-compliance requires to put configuration files in code/etc/opt/&lt;package&gt;/code and variable files in code/var/opt/&lt;package&gt;/code.  So, on OS X, I'd recommend that you stick to code/usr/local/code as described above.  I'm aware of add-on software like Cisco VPN and XQuartz that install in code/opt/code, so the above distinctions start to blur.  strongcodeman hier/code/strong  As mentioned above this is codeman hier/code:  precode A historical sketch of the filesystem hierarchy.  The modern OS X filesystem is documented in the  ``File System Programming Guide'' available on Apple Developer.   /             root directory of the filesystem   /bin/         user utilities fundamental to both single-user and multi-user environments   /dev/         block and character device files                 fd/  file descriptor files; see fd(4)   /etc/         system configuration files and scripts   /mach_kernel  kernel executable (the operating system loaded into memory at boot time).   /sbin/        system programs and administration utilities fundamental to both single-user and multi-                user environments   /tmp/         temporary files   /usr/         contains the majority of user utilities and applications                 bin/      common utilities, programming tools, and applications                include/  standard C include files                           arpa/       C include files for Internet service protocols                          hfs/        C include files for HFS                          machine/    machine specific C include files                          net/        misc network C include files                          netinet/    C include files for Internet standard protocols; see inet(4)                          nfs/        C include files for NFS (Network File System)                          objc/       C include files for Objective-C                          protocols/  C include files for Berkeley service protocols                          sys/        system C include files (kernel data structures)                          ufs/        C include files for UFS                 lib/      archive libraries                libexec/  system daemons &amp; system utilities (executed by other programs)                local/    executables, libraries, etc. not included by the basic operating system                sbin/     system daemons &amp; system utilities (executed by users)                share/    architecture-independent data files                           calendar/  a variety of pre-fab calendar files; see calendar(1)                          dict/      word lists; see look(1)                                      web2        words from Webster's 2nd International                                     words       common words                           man/       manual pages                          misc/      misc system-wide ascii text files                          mk/        templates for make; see make(1)                          skel/      example . (dot) files for new accounts                          tabset/    tab description files for a variety of terminals; used in the term-                                     cap file; see termcap(5)                          zoneinfo/  timezone configuration information; see tzfile(5)   /var/         multi-purpose log, temporary, transient, and spool files                 at/        timed command scheduling files; see at(1)                backups/   misc. backup files                db/        misc. automatically generated system-specific database files                log/       misc. system log files                 mail/      user mailbox files                run/       system information files describing various info about system since it was                           booted                            utmpx       database of current users; see utmpx(5)                 rwho/      rwho data files; see rwhod(8), rwho(1), and ruptime(1)                spool/     misc. printer and mail system spooling directories                            mqueue/     undelivered mail queue; see sendmail(8)                 tmp/       temporary files that are kept between system reboots                folders/   per-user temporary files and caches /code/pre  <answer230942> When I read of code/opt/code (often associated with code/opt/local/code for MacPorts) and of 'standard' uses of paths, I think also of Fink, which has been around since at least 2001. Fink popularlised use of the following path:   code/sw/code  h2An example of careless use of a nonstandard part of the file system hierarchy on Mac OS X/h2  h32003-02-06/h3  Virex 7.2, free to all .Mac members, infamously overwrote Fink libraries:      This is very bad. Fink users, don't install this …   precode/Volumes/Virex 7.2.dmg/Virex 7.2.pkg 328 % lsbom Contents/Resources/Virex\ 7.2.bom | grep sw ./sw    40775   0/80 ./sw/lib        40775   0/80 ./sw/lib/libcrypto.0.9.6.dylib  100644  0/80    945416  3192711062 ./sw/lib/libcurl.2.0.2.dylib    100644  0/80    634480  510417796 ./sw/lib/libcurl.2.dylib        100644  0/80    634480  510417796 ./sw/lib/libdl.0.dylib  100644  0/80    15124   4193639260 ./sw/lib/libssl.0.9.6.dylib     100644  0/80    261776  3001832603 /code/pre  Other discussions of the incident, including respect for licensing, included:   ul lihttp://article.gmane.org/gmane.os.apple.fink.devel/3203//li livirex 7.2 available at .mac - Ars Technica OpenForum (2003-02-06)/li liWarning: Virex 7.2 could break your fink - Ars Technica OpenForum (2003-02-07)/li liMcAfeehelp.com :: View topic - Virex 7.2 for OS X (dot Mac) 'sw' folder in wrong place. (2003-02-07)/li /ul  h32003-04-16/h3  A Fink news item:      strongVirex problem resolved/strong      McAfee has released Virex 7.2.1, which no longer overwrites the main Fink directory code/sw/code. Fink users should continue to avoid Virex 7.2.      Early reports indicate that upgrading Virex from 7.2 to 7.2.1 still leaves some problems however. If you upgrade Virex with Fink not installed, and subsequently wish to install Fink, you will need to delete the code/sw/code directory by hand before installing. And if you upgrade Virex with Fink already installed, you should immediately run strongfink reinstall openssl-shlibs dlcompat-shlibs curl-ssl-shlibs/strong to restore files which the Virex upgrade may have deleted.    h32003-05/h3  Release Notes for McAfee Virex Version 7.2.1 made no mention of the problems caused to users of Fink.   As a side note …  h32004-08-31/h3  Observations that Virex 7.5 was no longer available to .Mac members.   hr  h2BSD-related/h2     … OS X … My understanding is that code/usr//code used to be for user home directories …   That's still true for operating systems such as FreeBSD and PC-BSD.   Whilst code/usr/home//code is not explicit at https://www.freebsd.org/cgi/man.cgi?query=hier&amp;sektion=7&amp;manpath=FreeBSD+10.2-RELEASE the path is exemplified in documents such as:   ul listrongFor People New to Both FreeBSD and UNIX®: 3. Looking Around/strong /li /ul  <comment139071> Does http://apple.stackexchange.com/questions/80902/where-should-shell-tools-be-installed answer your query? <comment139073> Thanks @bmike, it does answer my immediate issues, but I'd still be curious if anyone has compiled a more complete/exhaustive description. <comment139074> Did you follow the link to The [Filesystem Hierarchy Standard](http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard)? <comment139086> @zelanix yes, and it still doesn't adequately address OS X <comment139150> So, for example, `/usr/X11/` is not recommended? <comment139154> Thanks so much, this is perfect <comment139164> @zhermes I'm glad you found it useful. <comment139183> @GEdgar Yes, `/usr/X11` has always been the standard location for X11 in many UNIX and Linux distributions, including OS X. It has been used in the past by Apple itself, on 10.5.8 there was a package called `com.apple.pkg.X11User` that provided X11 in exactly that path. My MacBook Pro still has a X11 package named `com.apple.pkg.X11redirect` installed in `/usr/X11`, I guess from "Lion" or "Mountain Lion", since X11 is no longer included with OS X (http://support.apple.com/kb/HT5293). <comment258788> Note that usr has a backcronym of UNIX system resources, and that's a more apt description of the directory than "user." I'd add this as a minor comment but I don't have the reputation. <comment258833> @lefenzy There seems to be two different types of answers when it comes to "usr": it's an acronym and stands for "Unix System Resources" or it means "user". According to http://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/usr.html "some people may now refer to this directory as meaning 'User System Resources' and not 'user' as was originally intended." I don't know which one is true, maybe all of them are correct to some extent... I'll just leave it here as a comment. <comment281926> For readers who do not have OS X (for `man hier`): Apple's [Mac OS X manual page for hier(7)](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man7/hier.7.html)