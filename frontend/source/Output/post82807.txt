How to cleanly remove Homebrew <body> How can I cleanly remove Homebrew. I might have a faulty older installation, and I'd like to have a fresh start.  <answer82808> Try this in your Terminal:  precodecd `brew --prefix` rm -rf Cellar brew prune rm `git ls-files` rm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributions rm -rf .git rm -rf ~/Library/Caches/Homebrew /code/pre  More info about this topic can be found in the Homebrew FAQ.  <answer128576> Here is a much better solution for removing Homebrew: https://gist.github.com/SteveBenner/11254428  precode#!/usr/bin/env ruby # # Locates and removes Homebrew installation # http://brew.sh/ # # Author: Stephen Benner # https://github.com/SteveBenner # require 'optparse' require 'fileutils' require 'open3'  $stdout.sync = true  # Default options options = {   :quiet     =&gt; false,   :verbose   =&gt; true,   :dry_run   =&gt; false,   :force     =&gt; false,   :find_path =&gt; false }  optparser = OptionParser.new do |opts|   opts.on('-q', '--quiet', 'Quiet mode - suppress output.') do |setting|     options[:quiet]   = setting     options[:verbose] = false   end   opts.on('-v', '--verbose', 'Verbose mode - print all operations.') { |setting| options[:verbose] = setting }   opts.on('-d', '--dry', 'Dry run - print results, but perform no actual operations.') do |setting|     options[:dry_run] = setting   end   opts.on('-f', '--force', 'Forces removal of files, bypassing prompt. USE WITH CAUTION.') do |setting|     options[:force] = setting   end   opts.on('-p', '--find-path', 'Output homebrew location if found, then exit.') do |setting|     options[:find_path] = setting     options[:quiet]     = true   end   opts.on('-h', '--help', '--usage', 'Display usage info and quit.') { puts opts; exit } end optparser.parse! $quiet = options[:quiet] # provides access to option value within methods  # Files installed into the Homebrew repository BREW_LOCAL_FILES = %w[   .git   Cellar   Library/brew.rb   Library/Homebrew   Library/Aliases   Library/Formula   Library/Contributions   Library/LinkedKegs ] # Files that Homebrew installs into other system locations BREW_SYSTEM_FILES = %W[   #{ENV['HOME']}/Library/Caches/Homebrew   #{ENV['HOME']}/Library/Logs/Homebrew   /Library/Caches/Homebrew ] $files = []  # This function runs given command in a sub-shell, expecting the output to be the # path of a Homebrew installation. If given a block, it passes the shell output to # the block for processing, using the return value of the block as the new path. # Known Homebrew files are then scanned for and added to the file list. Then the # directory is tested for a Homebrew installation, and the git index is added if # a valid repo is found. The function won't run once a Homebrew installation is # found, but it will accumulate untracked Homebrew files each invocation. # # @param  [String] cmd       a shell command to run # @param  [String] error_msg message to print if command fails # def locate_brew_path(cmd, error_msg = 'check homebrew installation and PATH.')   return if $brew_location # stop testing if we find a valid Homebrew installation   puts "Searching for homewbrew installation using '#{cmd}'..." unless $quiet    # Run given shell command along with any code passed-in via block   path = `#{cmd}`.chomp   path = yield(path) if block_given? # pass command output to your own fancy code block    begin     Dir.chdir(path) do       # Search for known Homebrew files and folders, regardless of git presence       $files += BREW_LOCAL_FILES.select { |file| File.exist? file }.map {|file| File.expand_path file }       $files += Dir.glob('**/{man,bin}/**/brew*')       # Test for Homebrew git repository (use popen3 so we can suppress git error output)       repo_name = Open3.popen3('git remote -v') do |stdin, stdout, stderr|         stderr.close         stdout.read       end       if repo_name =~ /homebrew.git|Homebrew/         $brew_location = path       else         return       end     end   rescue StandardError # on normal errors, continue program     return   end end  # Attempt to locate homebrew installation using a command and optional code block # for processing the command results. Locating a valid path halts searching. locate_brew_path 'brew --prefix' locate_brew_path('which brew') { |output| File.expand_path('../..', output) } locate_brew_path 'brew --prefix' do |output|   output = output.split($/).first   File.expand_path('../..', output) end  # Found Homebrew installation if $brew_location   puts "Homebrew found at: #{$brew_location}" unless options[:quiet]   if options[:find_path]     puts $brew_location     exit   end   # Collect files indexed by git   begin     Dir.chdir($brew_location) do       # Update file list (use popen3 so we can suppress git error output)       Open3.popen3('git checkout master') { |stdin, stdout, stderr| stderr.close }       $files += `git ls-files`.split.map {|file| File.expand_path file }     end   rescue StandardError =&gt; e     puts e # Report any errors, but continue the script and collect any last files   end end  # Collect any files Homebrew may have installed throughout our system $files += BREW_SYSTEM_FILES.select { |file| File.exist? file }  abort 'Failed to locate any homebrew files!' if $files.empty?  # DESTROY! DESTROY! DESTROY! unless options[:force]   print "Delete #{$files.count} files? "   abort unless gets.rstrip =~ /y|yes/i end  rm =   if options[:dry_run]     lambda { |entry| puts "deleting #{entry}" unless options[:quiet] }   else     lambda { |entry| FileUtils.rm_rf(entry, :verbose =&gt; options[:verbose]) }   end  puts 'Deleting files...' unless options[:quiet] $files.each(&amp;rm) /code/pre  <comment95474> I would check that the `cd \`brew --prefix\`` goes to a folder that you don't have normal git files checked in since an old / malfunctioning setup might fail and the deletion of `git ls-files` could delete something other than the remains of your brew. <comment95476> I updated the link in my answer. Basically, every file you've added there manually well be left intact. <comment95479> Excellent - calling that out explicitly is a great addition. +2 if I could. <comment95531> I did read the documentation, I just thought that might be an useful question to ask for future reference. I do have problems with the instructions though, which I posted as a separate question: http://apple.stackexchange.com/questions/82863/homebrew-loaderror-no-such-file-to-load <comment150597> Welcome to Ask Different! While the link you provided may answer the question, it is better to include the answer here and provide the link for reference. Link-only answers can become invalid if the linked page changes. I've edited your question to include what I believe was the solution that you were referring to, however if it wasn't please quote the relevant section. Also, could you expand on *why* your solution is better? <comment150792> It's more than a few lines so I thought including the code would be cumbersome, but I'm happy to do so in the future. It's better because there are files and directories not caught by the posted answer which my script will remove. It is provides utility for the user via CLI options, searches more exhaustively for brew locations, and is coded so as to make it easy to modify in case you want to improve the script. <comment281571> See also http://superuser.com/questions/203707/how-to-uninstall-homebrew-mac-os-x-package-manager which has answers that describe a "now canonical" way to remove homebrew <comment281599> @rogerdpack Comments may get deleted anytime, can you please post an answer describing the new method? <comment282393> Note that the link to the Homebrew FAQ should be updated from https://github.com/mxcl/homebrew/wiki/FAQ/1ef6c2cf55db89252949c7bb2908abe093a3414a to https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/FAQ.md (I can't edit or add comments). <comment319130> Now there's a script for that: https://github.com/Homebrew/brew/blob/master/docs/FAQ.md