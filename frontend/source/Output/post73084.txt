Incorrect Terminal.app output for long lines with tabs <body> When I run the following command in Terminal.app:  precodeecho -e "a\tb\tc\td\te\tf\tg\tyo" /code/pre  I should get the following output (using a 40-column window so that lines don't wrap here, and replacing tabs with spaces so that the correct amount of space is shown here):  precodea       b       c       d       e        f       g       yo /code/pre  But instead, I get this output:  precodea       b       c       d       e       y o /code/pre  As you can see, the codef/code and codeg/code are missing.  After trying various strings, I think the problem is that a tab at the end of a line does not advance the output to the next line, but instead leaves the output cursor one character before the line end.  For example (still assuming a 40-column terminal), 4 tabs puts the cursor at position 32 of line 1.  Another tab should put the cursor at position 0 of line 2, but instead the cursor is at position 39 of line 1, leaving room for one more character to be printed—and even at that point, the cursor is not advanced to the next line, so another tab will put us back to position 39.  Hence, an unlimited number of (single-character + tab) strings will be silently ignored.  I've experimented with a variety of:  ul lishells (including codebash/code, codesh/code, and codecsh/code)/li literminal widths (including 40 columns, 80, and many others)/li literminal types (including codevt100/code and codexterm-color/code)/li literminal character encodings (including codeUTF-8/code and codeascii/code)/li literminal settings (including codeEscape non-ASCII input/code)/li /ul  Also, a friend ran similar commands on a Linux system with a different terminal, and did not encounter the same bug.  Anybody know how to fix this?  I'd be much obliged, as this bug is making it might tricky to debug some home-made shell scripts running on tab-separated files.  <answer82931> This has to do with line breaks. Terminal is looking for either a space, or a continuos string of characters to make a line break. In this case the first opportunity it sees to break the line is between the y and the o. The "y" is shown because the last character in an extended line is shown in the last place to hint the user that something is happening there.  Workarounds...  You could try:  precodeecho -e "a \tb \tc \td \te \tf \tg \tyo" /code/pre  and everything will appear as you'd expect it.  also something like  precodeecho -e "ab\tcd\tef\tgh\tij\tkl\tmn\tyo" /code/pre  should break between the "k" and "l"  Still this is odd behavior and defiantly worth a bug/radar report  <comment84885> For reference I see the same behaviour as you in OS X's built-in Terminal.app, but [iTerm2](http://www.iterm2.com/) seems to soft-wrap the tabs onto a new line as you would expect. <comment85596> You may want to submit a bug report to Apple. I am able to replicate this issue, and it is definitely not supposed to happen... <comment85695> @maniacyak, thanks. I made the switch, and I'm enjoying iTerm2. <comment85696> @daviewales, thanks for verifying the issue; I may just do that. <comment85938> It’s a question of interpretation of the terminal specification(s). Terminal interprets a particular clause to mean that the cursor should not advance to the next line when tabs are written at the end of a line, but that surprises some people and should perhaps be treated as a bug and adjusted to interpret the rules differently. <comment85950> @daviewales I filed a bug report a couple of hours ago.  I don't think I can share the link here, but I'll keep this thread apprised of any results. <comment85951> @ChrisPage Interesting.  Out of curiosity, which specification, and which clause?  I could see that behavior, but the surprising thing to me is that a single non-whitespace character wouldn't advance to the next line.  I guess the other surprising thing is that a tab can cause the cursor to go backwards. <comment86149> Well, there may be two separate issues involved. What I was referring to is that the VT100 User Guide http://vt100.net/docs/vt100-ug/table3-10.html says of tab “Move the cursor to the next tab stop, or to the right margin if no further tab stops are present on the line”. As far as I am aware, the VT100 does not line-wrap tabs. The issue with a character at the last tab stop not advancing to the next line may be a bug no matter how you interpret the VT100 docs, but it may also be viewed as a valid outcome of the fact that the cursor doesn’t advance to the next line when the character is output. <comment86150> i.e., the tab moves the cursor to the “margin,” which is sort of a virtual position to the right of the last column (though it displays the cursor at the last column), then a graphic character is written, which places the character in the last column and then moves the cursor to the margin (not the next line). Printing another graphic character will move the cursor from the margin to the start of the next row, where the character will be placed. But, since the tab moves the cursor to the margin again, there are never two characters in a row to cause the line to wrap. <comment86152> The tab effectively moves the cursor on top of the preceding graphic character, as if you’d sent any other control code that places the cursor at that position, and the next graphic character replaces the character in the last column. In any case, one or both of these behaviors may be considered “correct,” but if there are no real-world compatibility issues with changing the behavior to wrap, then it’s probably reasonable to treat the current behavior(s) as a bug and make one or both of them behave as you expected. <comment86371> @ChrisPage Thanks for the link.  Regarding the interpretation of "margin", I could sort of see that reasoning, but it still seems strange to me that, if the cursor is at the margin, neither a tab character nor any other character moves the cursor to the next line.  Anyway, thanks. <comment86372> The Apple Developer Bug Reporting Team replied to my bug report and said it was a duplicate of an existing bug.  Alas, I cannot see the details for the original bug, so I don't know anything other than that it is still an open bug. <comment86809> “…if the cursor is at the margin…” Perhaps I need to clarify: If the cursor is in the margin and you print another graphic character, it does go to the next line, as in your example when you print “yo”. The tab character is a control character that moves the cursor to the next tab stop, and according to the VT100 docs it does not wrap, so tabs at the end of the line keep moving the cursor to the last column. i.e., the tab moves the cursor from the margin to the last column, so the next graphic character is written to the last column and the cursor is moved to the margin again. <comment86810> …“fixing” this behavior essentially means wrapping tabs, even though the VT100 did not, by making a tab move the cursor to the next line if it is currently in the margin, just as graphic characters currently do. <comment87010> @ChrisPage I would be content with that definition of margin: that it is the position where the next graphic character will wrap to the next line and be printed there.  However, either that isn't the definition of margin that Terminal.app uses, or a tab at the end of the line doesn't place the cursor there.  If it did, the *first* graphic character would wrap rather than the second, and I wouldn't be complaining about dropped characters. :-) <comment87038> That *is* the definition of the margin. I misspoke earlier: tabs at the end of the row do not move to the margin, they move to the last column. Then a graphic character is printed in the last column and the cursor moves to the margin, then a tab moves the cursor to the last column, then a graphic character is printed and moves the cursor to the margin, etc.