to run latest emacs in terminal by typing "emacs" <body> Question:  Because I use emacs-live, I used homebrew to install emacs-24.3. Now everytime I want to launch emacs of version 24.3 in terminal, I have to type "emacs-24.3" --- if I just type "emacs", it launches the original updated emacs came with Mac OS.  how can I configure these so that I only need to type "emacs" and launch the one installed by homebrew?  I use emacs in terminal, so the workaround that installing GUI version of emacs is not the solution what I am looking for. I use OSX Lion.  Note:  Solved the issue by reading this post! the point was to restart my terminal after doing what you guys suggested...  For future visitors I will just post full procedure for solving this issue.  Solution:  ol liAdd following line in .bash_profile: codePATH="/usr/local/bin:$PATH"/code as this post explained./li liClose the terminal and restart again. If you don't restart, you will be stuck as I did :-)/li /ol  <comment120922> You need to alter your PATH to put /usr/local/bin on the front - which is a duplicate <comment120926> @Mark I did put /usr/local/bin on top of the rests, but it doesn't fix the problem -- typing emacs won't invoke the one installed by brew. Also followed instruction in your link but doesn't fix the problem as well... <comment120928> → Seven: please insert the output of `echo ${PATH}` so as to understand why this question already dealt with (  http://apple.stackexchange.com/questions/49389/amending-path-so-that-usr-local-bin-is-ahead-of-usr-bin ) doesn't help you correctly. <comment120930> @Mark Just figured out I didn't restart my terminal! If you can post what you suggested in comment, I want to accept your post as answer :-) <comment120931> @danielAzuelos Thanks Daniel, I just realized that I didn't restart my terminal looool!! <comment120936> → Seven: you don't have to. Every modification of `.bash_profile` must be followed by: another window opened (to check your shell is  still working) and `. ~/.bash_profile` to load it in your actual shell. <comment120992> @danielAzuelos replace the and in the last sentence with an or <comment120995> → Mark: this is an `and` because, the 1st trick is to ensure that the `~/.bash_profile` is error proof, the 2nd trick is to use it now that one knows it is OK. Perhaps should I put it in bold ;). In fact it isn't an `and` but an `&&`.