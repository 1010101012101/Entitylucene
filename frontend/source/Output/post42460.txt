How can I kill a process by its name? <body> Sometimes I notice that the process codePython/code hung up. Then I'll kill it via the Activity Monitor and everything is fine.  I'd like to kill that process in the Terminal instead. However, looking up the codePID/code seems kind of unecessary because there's only one process by the name codePython/code.   Is it possible to kill a process by its unique name?  <answer42461> You should be able to run the command codesudo killall Python/code.   You need to run as root because Python belongs to root, not the user.  <answer42467> You can kill Applications by using Activity Monitor.app, being the GUI solution. That would be a simple "force quit". However, that doesn't always work out for different reasons in some situations!  The command-line solution as mentioned in the comment above holds a lot more options for the user. codesudo killall Python/code or if it is a running program-process codesudo killall /Applications/Whatever.app/code forces the the process to quit as well.   You can also force a process to quit, using its assigned strongPID/strong. In the case of Activity Monitor.app it would be codekill 25794/code or codekill -9 25794/code  img src="https://i.stack.imgur.com/qI0lR.jpg" alt="enter image description here"  strongSome more details:/strong  The kill program in Terminal simply force quits a program, as though by remote control. (It even works when you SSH into your Mac from a remote location. Follow the kill command with the process ID number (short PID) of the program you want to terminate.  Unless you also use sudo, you can kill only programs you “own”—those running under your account. (The operating system itself—root—is always running programs of its own, and it’s technically possible that other people, dialing in from the road, are running programs of their own even while you’re using the Mac!)  The code-9/code flag is a “non-catchable, non-ignorable kill.” In other words, it’s an industrial-strength assassin that accepts no pleas for mercy from the program you’re killing.   <answer42476> Although it emdoes/em use PID, I find the following to be pretty efficient:  codeps aux | grep "String or name of process"/code    This line returns a host of information about the matching process(es), and you can codekill/code or whatever from there.    <answer116650> precodesudo killall -s SIGINT "process name" /code/pre  If you can't be a sudo because it will ask for password and I feel you don't want that in a script. pkill come for rescue :)  precodepkill -9 "process name" /code/pre  <comment48263> I did that: `No matching processes belonging to you were found` <comment48264> The Python process doesn't belong to your user. Try it as root instead: `sudo killall Python`. <comment48266> @HenningJ Sudo worked for some reason. I just saw that the process does belong to me. I could kill the process without `sudo` when I killed it using it's `PID`. Why? <comment48269> I'm thinking it's because using a PID isn't user/root specific, whereas a process name is. I'll edit this answer to reflect `sudo`. <comment155801> This also worked for multiple identically named processes, nice