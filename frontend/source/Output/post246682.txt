echo command works fine at terminal but not from shell script <body> precode#!/bin/bash # the echo command below work fine when copy pasted into terminal # but behaves differently when run from sh script   echo "starting and running from script file" echo "&gt;AM749299_ADV_12_X73487_A_0p" &gt;&gt; map_all.txt;  /code/pre  These two lines work fine as expected. first one to screen, second to file.  precodecurl "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&amp;id=AM749299&amp;rettype=fasta&amp;from=17651&amp;to=17792" | awk 'NR&gt;1'  &gt;&gt; map_all.txt;  /code/pre  This works fine, and appends downloaded text to the same output file. But next echo doesn't work as the previous. Shows error file not found   precodeecho "&gt;GU191019_ADV_12_X73487_A_0p" &gt;&gt; map_all.txt;   error: can't open file &gt;GU191019_ADV_12_X73487_A_0p /code/pre  but next line works fine outputting the downloaded text to file  precodecurl "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&amp;id=GU191019&amp;rettype=fasta&amp;from=17842&amp;to=17983" | awk 'NR&gt;1'  &gt;&gt; map_all.txt;  /code/pre  tried possible solutions from : Why `echo -n` doesn&#39;t work in this script on mac terminal?  precode# replace echo with /bin/echo # did not work # replace echo with printf  # alternative from the same post  # still the same problem , taking the text as file name or command # still error with : added semicolons after each line of command, or \r\n instead of just \r at end of lines (assuming lines are not separated properly) # added one extra bogus echo line to screen before output to file  #    echo "--------xxxyyyzzz-----" # before the echo line to output file # that echo shows fine in terminal, no error, but not output file doesn;t receive the echo "&gt;text"  # try removing the &gt; mark from the text, assuming a problem, replaced with qqq (no symbol; and can later replace in texedit) # still error for each of those echo lines # echo: command not foundline 44: /code/pre  commands saved in file hello_world.command,  run as ./hello_world.command from terminal  <comment304307> it's not necessary to put `;` at the end of the line in shell scripts, but's that shouldn't cause the problem. What happens if you replace the `"` with `'` in the `echo` statement? And oh, did you create and edit the script on OSX only or did you copy it from another computer? What happens if you delete the three lines with `curl`/`echo`/`curl` from the script and replace them with a version copy/pasted from your question above? <comment304308> I just copy/pasted the five lines of your script (`echo/echo/curl/echo/curl`) into a script on my Mac, it run without problems creating an output file with 10 lines. So I would assume that you got some special characters or whatever hidden in your script somewhere. <comment304312> I create the lines in microsoft excel (there are only three things changing in each of the curl lines), pasted into text edit, and then saved as command file. I copy pasted about 40 lines from the command file into terminal in one go and they work fine, but not from script. I have ~800 lines so trying to avoid copy pasting them in so many batches. <comment304313> Microsoft Excel is not the best app to be using to write _code_ in. Try using [TextWrangler](http://www.barebones.com/products/textwrangler/) or [Sublime Text](https://www.sublimetext.com). That's not to say I haven't built out some blocks of code in a spreadsheet however I always copy from the spreadsheet into an application that strips/replaces formatting not conducive to be run in the environment it's going to be run. <comment304314> Thank you for the suggestion. I guess there could be a simpler sed or awk based command for my purpose. If I save the 4 columns from excel into a csv or tab separated file then :       for each line; first value goes to the echo command; and rest 3 values are added to a fixed command at 3 positions as variables. But I am beginner there too, so will take a while to figure that out. <comment304315> Sorry, that moved to a different question now, and does not find a solution to original question. Will find usage of sed or awk. Thank you. <comment304327> Ended up with running the commands mimicking manual way, one line at a time from the file by reading from python, line by line, and passing to os.sys("command")