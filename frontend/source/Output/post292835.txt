How to store proxy credentials on macOS so they are used by system services? <body> I'm using macOS Sierra 10.12.6 behind a corporate NTLM proxy. My browser and other applications are using the system proxy settings, in which I have saved my username and password for authenticating with the proxy. This is working fine.  There is a persistent problem with system services that try to access information on the internet and don't see to have access to the proxy credentials in my user account. I see the following popup every couple of minutes, and whatever I do (updating my credentials in System Preferences, or pressing "Not Now"), the popup keeps coming up again and again:  img src="https://i.stack.imgur.com/qDBWi.png" alt="Proxy Authentication Required"  The text in the popup reads:     Proxy Authentication Required      Enter the password for the HTTP proxy http://xxx.xxx.xxx.xxx:yyyy in System Preferences.   What can I do to stop this popup from appearing?  Things I have tried so far:  ul liUpdated my credentials in System Preferences (emNetwork  Advanced  Proxy/em)/li liCopied the credentials entries from my emlogin/em keychain to the emSystem/em keychain, since I read a recommendation for that in a blog post or forum question./li /ul  None of these has worked, I get this popup every couple of minutes, and there does not seem to be a pattern to when it shows up.  strongUpdate 1:/strong  As soon as I enter my credentials by clicking the emSystem Preferences/em button in the above dialog (which I can force by e.g. opening Safari and starting to type a URL in the location box), emtwo/em records are created in the emlogin/em keychain, both with identical content:     @ xxx.xxx.xxx.xxx (username)    Internet Password     Today, 09:10    --    login   Both records look identical, with the same name and attributes. Both show that the application that requested this is codeAuthBrokerAgent/code:  img src="https://i.stack.imgur.com/jDmKB.png" alt="Keychain Access Control"  strongUpdate 2:/strong  I've also tried this suggestion: https://discussions.apple.com/message/23848961#message23848961, copying the authentication entries from the emlogin/em keychain to the emsystem/em keychain and then rebooting, but it did not fix it. In fact, the dreaded "Proxy Authentication Required" box showed up again while typing this...  strongUpdate 3:/strong  I've used Wireshark to take a look at the traffic between my machine and our proxy:   ul liThe proxy returns with a code407 Proxy Authentication Required/code and codeProxy-Authenticate: NTLM/code, which is in line with my expectation, since our proxy uses NTLM./li liSome examples I've seen in the traffic (e.g. iCloud) then send back an codeNTLMSSP_NEGOTIATE/code response./li liThe proxy comes back with an codeNTLMSSP_CHALLENGE/code request/li liThe service responds with codeNTLMSSP_AUTH/code and my username, which it must have gotten from somewhere./li liThe proxy finally responds with a code200 Connection established/code/li /ul  To me, this shows that in general the proxy authentication works fine, if the system can get the username and proxy from somewhere. The question remains how/where to store the username/password so that all system services can find it. Some system services (I assume) don't have any means to find the proxy credentials where I'm currently storing them.  <answer295184> Run the following command from codeConsole.app/code:  precodenetworksetup -setwebproxy "Your Interface Name" "web proxy hostname or IP"  8080 on username password /code/pre  You will be asked about keychain access. Agree to add the record into keychain and you will have an access without the password all the time when your keychain is emopen./em  <answer295195> This is most likely expected behavior if your system/network administrator has configured the proxy force authentication that requires more than just a basic authentication scheme.  From Microsoft's page Handling Authentication under emAbout HTTP Authentication/em section:     There are two general types of authentication schemes:       ul   liBasic authentication scheme, where the user name and password are sent in   cleartext to the server. /li   liChallenge-response schemes, which allow for a   challenge-response format./li   /ul      Challenge-response schemes enable more secure authentication. If a   request requires authentication using a challenge-response scheme, the   appropriate status code and Authenticate headers are returned to the   client. The client must then to resend the request with a negotiate.   The server would return an appropriate status code with a challenge,   and the client would then require to resend the request with the   proper response to get the requested service.   If the proxy you are using utilizes the embasic authentication/em scheme, what's saved in your keychain will suffice to authenticate you.  If a emchallenge response/em scheme is being used, you will most likely have to provide more info - in this case - re-enter your password - to authenticate; and this is what you are seeing.  h3NTLM Authentication Process/h3  This is much more than just emstoring/em credentials.  The client must emgenerate/em a response based upon a emgenerated/em request from the server.  Following is a emvery abridged/em description of the authentication process from the client/server perspective per  Microsoft's documentation     ul   liThe client sends the user name to the server (in plaintext)./li   liThe server generates a 16-byte random number, called a challenge or nonce, and sends it to the client./li   liThe client encrypts this challenge with the hash of the user's password and returns the result to the server. This is called the   response./li   liThe server sends the following three items to the domain controller:          ul   liUser name    /li   liChallenge sent to the client     /li   liResponse received from the client/li   /ul/li   liThe DC validates the encrypted challenge and response.  If authenticated, access is granted./li   /ul   The third step above, strongemrequires/strong the client to hash a random number it got from the server./em  This inherently means there's nothing to be stored on your macOS client.  At a very minimum, you need to be joined the Active Directory domain.  This means you need Kerberos support enabled and configured properly for your specific organization.  There's a key phrase in the "Handling Authentication" document I linked above:     If authentication is required, the INTERNET_FLAG_KEEP_CONNECTION flag   should be used in the call to HttpOpenRequest. The   INTERNET_FLAG_KEEP_CONNECTION flag is required for NTLM and other   types of authentication in order to maintain the connection while   completing the authentication process. strongIf the connection is not   maintained, the authentication process must be restarted with the   proxy or server./strong   sup(Emphasis mine)/sup  Based on your the symptoms being presented it appears that your organization requires authentication to the proxy; your username/password are valid, but it keeps (re)asking for authentication.  It's probably because you are losing the connection state and having to do this all over again.  Which further emphasizes the point....  strongTo solve this issue, you will need to contact your network admin to assist you with the authentication issues./strong  <comment369436> Related question: https://apple.stackexchange.com/questions/117556/proxy-login-popups-on-mavericks <comment372613> I've tried this, but it does not fix the issue. The command sets the proxy config for my user, and stores the authentication in my user's `login` keychain. Right after I did this, the proxy authentication dialog I show above popped up again. Your suggested fix does not fix the issue for me. <comment372619> What proxy are you using?  I remember (from a different past life) that a proxy we were using had the ability to disallow storing of passwords thereby **forcing** the user to authenticate each and every time.  This could be the case. <comment372627> because your login keychain is locked or you have double records <comment372719> The login keychain is unlocked, I double-checked that. The point about double records might be valid, though. I deleted all records for the proxy authentication that I found in the login and system keychains, but as soon as I type in my password once in the dialog in my original post, I end up with two records in the login keychain, both with exactly the same data. If I delete one, it comes back when I enter my credentials again. <comment372720> How can I find out which authentication scheme is being used? Is there an HTTP header that I could look at when an application is talking to the proxy? Can I do this in Chrome's network console, or do I have to use something like Wireshark? <comment372729> Do you have a wireshark installed? Could you please dump all negotiations between your osx and proxy server and a keychain records (security find-generic-password -g -s your_proxy_definition)? I have strong feeling that proxy authentification appears by https, not by http. Did you tried to define your proxy url as https? <comment372730> I tried the `security` command you listed - it does not find anything. It does if  I change the `find-generic-password` command to `find-internet-password`, since the Keychain lists the entry as of kind "Internet password". <comment372731> The proxy URL is set up as http://xxx.xxx.xxx.xxx, that's the way it's been working e.g. from command line. I'll try to capture something using Wireshark. <comment372735> More than likely, you would need to use Wireshark.  Keep in mind, it may also be encrypted traffic. <comment372738> I've added some info from what I've seen in Wireshark to the question. <comment372739> I've added some info from what I've seen in Wireshark to the question. <comment372767> Looks like it was similar bug in 10.10 <comment372769> Looks like it was similar bug in 10.10 https://support.apple.com/kb/DL1785?locale=en_US. So, did you tried f.e use Firefox proxy settings, behaviour is different? (you can use systemwide proxy and manually enter proxy settings there <comment372785> Tried Firefox, no change... <comment372811> Both variants, systemwide proxy in Firefox and internal Firefox settings for http proxy? <comment372898> Yes, both - neither did work. <comment372900> Thanks for adding more info on NTLM to your answer. I understand NTLM, and from what I can see from the Wireshark output, it is working - the challenge/response you describe is being done, e.g. for Dropbox or iCloud services. I'm still not sure which service is popping up the repeated proxy credential dialogs. Your answer contains a lot of info, but does not really help me so far. <comment372925> `Connection Established` != `Access Granted`.  The people who can *confirm* that this is working is your system/network admin(s) in your IT department.