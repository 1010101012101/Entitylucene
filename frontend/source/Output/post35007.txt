How to manage multiple ssh sessions with ease on Mac OS X <body> At my upcoming job i will handle many servers with SSH access. It will be like ~100-120 hosts, with different username on most of the hosts, and i'm pretty sure i will not remember each host domain name, not to mention which username is on each host.  Is there a tool for Mac OS X (Lion preferably) which would allow me to define a session for each host (in a session i mean username and some ssh options), show list of such sessions and connect on click/select automatically?   <answer35011> There are two ways I manage, or have seen people manage, SSH data:  Good 'ole, command line, plain text, ssh_config file.  Create a file called codeconfig/code inside code~/.ssh/code. You can specify global parameters by putting them above any host declarations. When I started using MacPorts, I had to explicitly define a default SSH Private Key to use automatically when connecting, so as the very first line of the file I put;  precodeIdentityFile ~/.ssh/id_rsa /code/pre  When you define custom rules for hosts (and you can even use * as a wildcard), it looks something like this:  precodeHost prod-*   User jason   Port 2222   LocalForward 5901 localhost:5901   IdentityFile ~/.ssh/work-id_rsa /code/pre  Then when I run codessh prod-script/code for example, all the rest of the rules get applied automatically.  hr  A lot of people who don't want to manually manage all their stuff in such a cumbersome manner quickly find JellyfiSSH. (Mac App Store Link. The same people also became very annoyed when it stopped being downloadable for free.)  JellyfiSSH gives you GUI access to emalmost/em everything that can be specified in the command line or ssh_config file. JellyfiSSH is just a configuration storage app for organization purposes, because it generates the commands based off the options you set and upon clicking connect, opens a new terminal window with all of your options defined on the command line. JellyfiSSH emis not/em a terminal app on it's own.  <answer35014> You can make files such as codeExample.command/code then make it executable: codechmod 755 Example.command/code and double-click the file to open a connection:  precode#!/bin/sh  exec /usr/bin/ssh username@example.com  exit 0 /code/pre  If you just want to be able to connect from the command line using an alias (easy to remember word), you can set those up in ~/.ssh/config  precodeHost foo HostName some.really.long.hostname.here.com Port 22 User bigfun /code/pre  Then you can connect using the host codefoo/code  precodessh foo /code/pre  Or you can just make functions in your shell configuration file (~/.bashrc or ~/.zshenv):  precodes1 () {     ssh -v username@example.com } /code/pre  then you can connect to codeexample.com/code just by typing codes1/code at the command line, and it will use level 1 verbosity.  Lastly, you could use ssh auto-completion, but the syntax for that will depend on your shell of choice. A quick google for 'ssh autocomplete YourShellHere' should turn up some examples.  h3Use a passphrase and the OS X Keychain/h3  The most important thing, IMO, is to setup ssh to work with a passphrase. OS X has great keychain integration built-in since Leopard.  precodessh-keygen -t dsa -f ~/.ssh/id_dsa -C "you@exampledomain.com"  cat ~/.ssh/id_dsa.pub | ssh you@host.domain 'cat â€“ &gt;&gt; ~/.ssh/authorized_keys' /code/pre  (Source: http://www.paosborne.com/blog/?p=369.)  Then when you ssh to a new machine, the OS X keychain will prompt you for your ssh passphrase  See also http://www.dribin.org/dave/blog/archives/2007/11/28/ssh_agent_leopard/ for a fuller description. The article is older, but Lion works the same way.  h3Don't forget Dropbox/h3  If you log into multiple machines, you can sync your code~/.ssh/config/code file via Dropbox. I keep mine in code~/Dropbox/etc/ssh/config.txt/code and then I do:  precodecd ~/.ssh ln -s ../Dropbox/etc/ssh/config.txt config /code/pre  I do the same thing as with my ~/.zshenv:  precodecd ln -s Dropbox/etc/zshenv.sh .zshenv /code/pre  In fact, I put all my shell scripts in ~/Dropbox/bin/ and added that to my $PATH too, just to cover all my bases.  <answer128581> You can try strongvSSH/strong app for Mac OS X (strongPuTTY/strong-based).   ul liManage connection list (host, port, username, password, keys and a lot of other settings)/li liCan almost everything that strongPuTTY/strong can/li liMulti-tab multi-window interface/li liMacros support (you shell scripts as menu items for quick access)/li liiCloud synchronization (connections, macros and keys) with strongvSSH/strong and strongSSH control/strong apps for iOS/li /ul  Available on the Mac AppStore.  <comment39909> JellyfiSSH looks like app i was looking for. Thanks! <comment39972> Dropbox is a great place to store shell scripts that I don't want to manage in git / on GitHub. Thanks for sparking that 'aha' moment, TJ! <comment150602> Welcome to Ask Different! Please read the help center regarding [self-promotion](http://apple.stackexchange.com/help/behavior) and include a disclaimer if you are the author of the product in your answer. <comment150642> How does this actually allow a clickable list of sessions? If you could edit out some of the generic marketing and focus this to the exact question at hand, it will likely get a better reaction. <comment269163> FYI: `man ssh_config` from the Terminal will provide OpenSSH SSH client configuration files information as available on your current system installation.   Which, at the time of the comment, is more recent than the above developer link.