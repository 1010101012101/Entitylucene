Cloning OS X encrypted drive <body> I've used codedd/code on Linux to make a block for block bootable copy of a LUKS encrypted volume which created a bootable encrypted clone. I'm trying to achieve the same on a Filevault2 volume, codedisk0/code as internal disk. I want to write this to an identically sized partition on an external USB disk.  I made the destination partition a GUID Journaled extended HFS+ journaled to match the original volume. The codedd/code finished but the partition is unusable, doesn't unlock, mount or boot.  I'm thinking of reformatting the partition as DOS and writing over it with codedd/code again. Would it be safe to hope the partition will inherit the desired scheme from the source? It takes 4 hours to write 250GB and wanted to see if anyone else had done this before.  Filevault2 reconfigures the single partition on disk0, to add the recovery partition after 10.7 giving you something like this:  precode/dev/disk0 #:                       TYPE NAME                    SIZE       IDENTIFIER 0:      GUID_partition_scheme                        *250.1 GB   disk0 1:                        EFI                         209.7 MB   disk0s1  2:          Apple_CoreStorage                         249.2 GB   disk0s2  3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3 /dev/disk1 #:                       TYPE NAME                    SIZE       IDENTIFIER  0:                  Apple_HFS Macintosh HD           *248.9 GB   disk1 /code/pre  codedisk1/code is the encrypted data of the core storage logical volume. This is similar to what happens in LUKS on Linux.  So my hope is to get this into a partition on a shared 1 TB external drive. Any thoughts on what format to make that partition would be appreciated.  <answer221928> Just to rectify one thing: emdisk1/em is strongnot/strong the encrypted data. Disk1 is a mounted "virtual" volume with its own disk identifier. This volume is unlocked and as such unencrypted if you are a legitimate user. It's based on inferior encrypted data structures residing in disk0s2.  To clone (and subsequently decrypt) FileVault2 volumes successfully three objects/data structures are important:  ol liSuperior LVM structures in disk0s2 (the CoreStorage Volume Group)/li liThe emRecovery HD/em partition. It contains some intermediate keys which are necessary to extract the final keys to unlock the FileVault2 volume./li liThe encrypted data itself/li /ol  To clone a FileVault2 volume you may either codedd/code the CoreStorage LVG strongand/strong the Recovery HD or copy the unlocked FileVault2 volume to a second volume with emrsync/em or emDisk Utility/em/a disk cloner like emCarbon Copy Cloner/em.  strongdd:/strong  ol liOpen Terminal and enter codediskutil list/code./li liEnter codesudo gpt -r -vv show /dev/diskX/code with emdiskX/em: the disk with the CoreStorage LVG containing the FileVault2 Logical Family/Volume/li liNow attach a second (external) disk (emdiskY/em) and replicate the GUID partition table of the source (diskX) to the target disk (size, type etc.) with codegpt/code./li liRecheck the identity of the GUID partition table of diskX and diskY/li liEnter:br codedd if=/dev/rdiskXs1 of=/dev/rdiskYs1/code to copy the EFI partitionbr codedd if=/dev/rdiskXs2 of=/dev/rdiskYs2/code to copy the CoreStorage LVGbr codedd if=/dev/rdiskXs3 of=/dev/rdiskYs3/code to copy the Recovery HD/li lidone/li /ol  strongDisk Cloner/strong  This will not create an identical disk (same intermediate/final keys etc.) but a volume containing identical data.  ol liBoot to a Recovery HD, an installer thumb drive or a second full-blown OS X volume./li liEnter the unlock key of the FileVault2 volume while booting./li liAttach the external disk and create a sufficiently dimensioned normal volume with an appropriate tool./li liOpen emDisk Utility/em (or emCarbon Copy Cloner/em if use a full OS X system)/li liRestore the source volume (the unlocked FileVault2 volume) to the destination disk./li liReboot to the external drive./li liOpen System Preferences - Security and enable FileVault./li /ol  <comment135833> Welcome to Ask Different! Please could you copy-paste Terminal output into a code block - one long line of output is very difficult to read. <comment136712> OK, I've edited the output to be more readable... <comment268823> Should not `dd if=/dev/rdiskX of=/dev/rdiskY` replace steps 2..5 of dd variant? <comment268920> I understand if the destination is smaller, but should not it work is destination is equal or bigger? <comment268954> Small test of copying 4 partitions from a smaller ram disk to a bigger ram disk seems to move everything as expected <comment268960> @tig You are right for most cases. But the usage of  `dd` is error prone - especially for non-pros. I prefer to publish the 1 partition to 1 partition `dd` command here. Think of an encrypted volume & Recovery HD **and** a subsequent BOOTCAMP partition or non-allocated disk space as source and a already partitioned disk with some free space (just enough space for the three partitions at the beginning of the target disk or in between).