OS X Terminal – Open Tab in current directory, troubles with umlauts <body> I run OS X 10.7.5. I am currently experiencing an issue with Terminal. I have enabled the option to open new tabs in the current working directory. However, this does not work as expected, when the path of the current working directory contains one or more umlauts. For instance, being in a directory codeUni/Semester\ 7/C++/Übung\ 2/code and hitting codeCmd-T/code to open a new tab places me in the directory I most recently codecd/codeed to, e.g. codeUni/Semester\ 7/C++/code or something. Same thing if I am in a subdirectory of codeÜbung\ 2/code.  Another symptom (at least they appear to be related) is that when quitting Terminal while in a directory containing umlauts, on reopening it will start in my home directory, not even in the closest parent without umlauts as in the new tab case.   I've read that some people have troubles with Tab-autocompletion and umlauts. I do not, it works just fine, and I do not know if that is related.  Configuration-wise, I set the option emStartup/em in emPreferences  Settings  Shell/em to code/opt/local/bin/bash -l/code (because the preinstalled bash version is outdated, removing this made no difference in behaviour). The option emShells open with/em in the preferences is set to default, I do not know if that is relevant.  Now, the question: Does anyone know how to make Terminal work with umlauts such that I don't always have to renavigate to my working directory upon opening a new tab? It seems weird to me that I should be the first one to have that problem, I did not manage to google anything up.  strongEDIT/strong: I now upgraded to Yosemite. The problem persists. I cannot believe no one else has this problem. I also logged in as guest user to obtain default settings and the same thing happens.  <answer155530> What ended up solving my problem is simply not using Terminal and switching to iTerm. It has everything Terminal has except the bugs and the latest update ironed out some annoyances with Yosemite. As of yet I have seen no reason to choose Terminal over iTerm.  <answer218535> Prior to OS X El Capitan 10.11, the code in code/etc/bashrc/code arranges to send an escape sequence at each prompt to tell Terminal what the current working directory is, but this code only percent-encodes spaces, which means that it doesn't work with characters that are not valid URL characters, which includes any non-ASCII characters like “Ü”:  precodeupdate_terminal_cwd() {     # Identify the directory using a "file:" scheme URL,     # including the host name to disambiguate local vs.     # remote connections. Percent-escape spaces.     local SEARCH=' '     local REPLACE='%20'     local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"     printf '\e]7;%s\a' "$PWD_URL" } /code/pre  On 10.11 and later, the code has been moved to code/etc/bashrc_Apple_Terminal/code and has been updated to percent-encode all characters that require it, so it can now work with characters like “Ü” (your example case works for me on 10.11.1):  precodeupdate_terminal_cwd() {     # Identify the directory using a "file:" scheme URL, including     # the host name to disambiguate local vs. remote paths.      # Percent-encode the pathname.     local url_path=''     {         # Use LC_CTYPE=C to process text byte-by-byte. Ensure that         # LC_ALL isn't set, so it doesn't interfere.         local i ch hexch LC_CTYPE=C LC_ALL=         for ((i = 0; i &lt; ${#PWD}; ++i)); do             ch="${PWD:i:1}"             if [[ "$ch" =~ [/._~A-Za-z0-9-] ]]; then                 url_path+="$ch"             else                 printf -v hexch "%02X" "'$ch"                 # printf treats values greater than 127 as                 # negative and pads with "FF", so truncate.                 url_path+="%${hexch: -2:2}"             fi         done     }      printf '\\e]7;%s\\a' "file://$HOSTNAME$url_path" } /code/pre  [iTerm 2 apparently reads the working directory from the shell process state. This has the advantage that it works without any shell setup; however, it isn't guaranteed to be correct (there's no reason a shell's current working directory has to actually match the cwd it uses when executing a command, at any given moment), it doesn't work through indirect connections like codessh/code or shells running within editors or screen multiplexers, and it can't read the directory from processes owned by other users—for example, if you use codesudo -s/code to create a root shell, it can't read the working directory from the root shell process. Furthermore, the program state only includes a file descriptor for the open directory, not the path that the shell is using for code$PWD/code, so you won't actually get the path you used to navigate to the current directory in some cases—e.g., if you traversed through a symbolic link.]  <comment178813> About your shell bug, see: http://apple.stackexchange.com/questions/146849/how-do-i-recompile-bash-to-avoid-shellshock-the-remote-exploit-cve-2014-6271-an <comment238216> http://apple.stackexchange.com/a/128999/139153 solved the same issue to me <comment238226> @ppcano I have the same definition in my `/etc/bashrc` so this does not seem to be the problem. <comment264866> Note that the bug was fixed in OS X El Capitan 10.11. <comment264867> Note that the bug was fixed in OS X El Capitan 10.11. <comment264871> @ChrisPage Please do not include answers into the question, it confuses both users and the search function. If applicable, post a separate answer instead (or a comment, which is probably enough here). <comment264874> @patrix: What answer? I updated the question to improve it, by noting that the problem being described only applies to a certain range of OS versions and was fixed more recently. It's exactly the sort of note I see others adding to questions. <comment264875> @patrix: In general, it's important to identify which software version(s) an issue applies to, and it's specifically important to let readers of a question know when it only applies to past versions. Had the OP updated their question to note this, would you have removed their edit? I see this type of update note in many questions. <comment264903> @ChrisPage Other questions may have the same problem, and yes, I would have removed the remark even if the OP had made the edit :-) "It's fixed in 10.11" is an answer, not part of the problem, so it shouldn't be added to the problem description. The OS version the question applies to is already encoded in the tags ("lion" in this case). <comment264971> @patrix: The note doesn't literally mean “it's fixed,” the note really means “this question only applies to versions before N” or “this question applies to versions N through M.” This type of Q&A is really a bug report in the form of a question. In fact, it's two questions: “is this a bug?” and “is there a workaround?” Bug reports are essentially about specific versions of software and should include version information in the question. But don't worry, I don't expect us to have a protracted discussion in the comments. I'll look for or create a Meta Q&A about this. <comment264972> @patrix: That's a good point about the OS version tags, though that only tells you the versions it's known to apply to and doesn't tell you definitively which versions it doesn't apply to. Moreover, major OS release names aren't as specific or accurate as actual version numbers. Minor releases of, say, “lion” exist almost solely to fix bugs in the initial release of “lion”, yet they are all named “lion”. Perhaps SE needs a version-range field to complement the tags.