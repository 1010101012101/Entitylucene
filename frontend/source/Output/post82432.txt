Applescript dialog, Bash alias/function <body> I'm trying to create a short alias for creating System dialogs from the Terminal. I tried to create a Bash function (since an alias didn't seem to take arguments) and add it to my .bash_profile, but it's failing me.  My latest attempt is:  precodedialog() {     DIALOGVAR='tell app "system events" to display dialog "'$@'"'     CMD="osascript -e 'tell app \"system events\" to activate' -e '$DIALOGVAR'"     $CMD } /code/pre  But when I execute it via the Terminal, I get  precode0:1: syntax error: A unknown token can’t go here. (-2740) /code/pre  Even though echo'ing the codeCMD/code variable gives me a properly formatted command:  precodeosascript -e 'tell app "system events" to activate' -e 'tell app "system events" to display dialog "foo bar"' /code/pre  Perhaps I'm doing something wrong, perhaps there's an easier way to achieve this. All I'm trying to do is to create an easy to execute command that displays dialogs.  EDIT: Alternative attempt didn't lead to anything either. This one works for arguments without spaces, but fails for multiple arguments.  precodesysdialog() {     osascript -e "tell app \"system events\" to activate" -e "tell app \"system events\" to display dialog \"$@\"" } /code/pre  <answer82450> You can use the run handler to pass arguments:  precodedialog() {     osascript -e 'on run args     try     tell app "SystemUIServer" to display dialog (item 1 of args)     end     activate app (path to frontmost application as text)     end' "$1" } /code/pre  If you want to call it like codedialog a b/code (instead of codedialog 'a b'/code), change code$1/code to code$*/code.  System Events quits automatically when it is not used, and there is a small delay when it is opened, so telling it to display the dialog would sometimes be slower.  Without the try block there would be an error if the user presses a cancel button. Without codeactivate/code the previously focused window wouldn't get focus back when the dialog is closed.  You can use something like this to display text dialogs:  precodeanswer=$(osascript -e 'try tell app "SystemUIServer" set answer to text returned of (display dialog "" default answer "") end end activate app (path to frontmost application as text) answer' | tr '\r' ' ') [ -z "$answer" ] &amp;&amp; exit /code/pre  <answer103622> Try this;  precode#!/bin/bash dialog() {   DIALOGVAR=$('tell app "System Events" to display dialog "'$@'"')   CMD=$("osascript -e 'tell application \"System Events\" to activate'"; "osascript -e '$DIALOGVAR'")   $CMD   } /code/pre  <comment95135> Part of the problem is coming from storing the command in a variable before executing it; see [BashFAQ 050: I'm trying to put a command in a variable, but the complex cases always fail!](http://mywiki.wooledge.org/BashFAQ/050) <comment99545> And the the problem with the second approach also has its root in the intricacies of Bash’s argument parsing: `"$@"` expands to *a list of several word arguments*, which is not what you want. Use `"$*"` instead, which expands to *a single word argument*. See the BashWiki articles [Arguments](http://mywiki.wooledge.org/Arguments) and [Quotes](http://mywiki.wooledge.org/Quotes). @GordonDavisson, care to turn your comment into an answer? <comment99551> @kopischke: Actually, I don't think I have anything to add to @Lauri Ranta's answer (which I've already voted for) -- she includes the `$*` trick, and also includes a run handler trick (which makes it more robust about special characters in the message) that I didn't think of. <comment99577> @GordonDavisson I agree Lauri’s answer is neat, but it does not explain *why* OP’s approaches are failing (literal vs. syntactical quoting, word splitting on parameter expansion of `"$*"` vs. `"$@"`), which you pointed out.