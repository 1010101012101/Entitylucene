Built-in GUI-based ASCII only editor for OS X <body> I am trying to programmatically invoke an OS X editor from a script which:  ul lidoes not add smart quotes or any non-ascii characters while editing/li liwill work "out of the box" on any standard mac system/li liallows the user to click the mouse to position the cursor/li /ul  Sadly Nano and friends do not allow cursor positioning, and Apple lost its mind with TextEdit upgrades and really destroyed that editor!  My best hope is that there is some programatic way to configure TextEdit to behave as an ASCII editor.  Alternatively, is there a third party editor whose license allows that I can include with my script to serve this need?  ===== USAGE CONTEXT  I have a python script that runs 'out-of-the-box' on any mac.  Now I want that script to invoke an editor on an ASCII file that I need stay as an ASCII file.br I don't want to require the user to do manual configuring, I want the script to initialize itself.  Ideally it would not change any global environment settings, but I can give that second requirement up, if I have no choice.  <answer188245> h2TextEdit/h2  You mention that Apple lost its mind with TextEdit. In what way specifically? Anyway, I would suggest TextEdit:  ul liIt can open any code.txt/code file as plain text/li liIt works out of the box/li liIt allows users to use the mouse/li /ul  You can list your current preferences programatically like:  precodedefaults read com.apple.TextEdit /code/pre  You can always set the preferences programatically like this:  precodedefaults write com.apple.TextEdit RichText 0 /code/pre  img src="https://i.stack.imgur.com/6shXG.png" alt="TextEdit preferences"  Keep in mind that your system settings for quotes can sometimes interfere with the smart quotes settings in TextEdit. To disable smart quotes systemwide:  ul liGo to System preferences - Keyboard/li liGo to the 'Text' tab/li liUncheck the 'Use smart quotes and dashes' box/li /ul  img src="https://i.stack.imgur.com/xcDGK.png" alt="Disable Smart Quotes"    <answer188246> h2HTML/Javascript/h2  A way to do some simple text editing independent of the system is using a combination of HTML and Javascript. This is Ascii as simple as it gets.  The code below is shamelessly stolen from the thiscouldbebetter.wordpress.com, and will give you some direction on how to implement this.  precode&lt;html&gt; &lt;body&gt;  &lt;table&gt;   &lt;tr&gt;&lt;td&gt;Text to Save:&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;     &lt;td colspan="3"&gt;       &lt;textarea id="inputTextToSave" style="width:512px;height:256px"&gt;&lt;/textarea&gt;     &lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Filename to Save As:&lt;/td&gt;     &lt;td&gt;&lt;input id="inputFileNameToSaveAs"&gt;&lt;/input&gt;&lt;/td&gt;     &lt;td&gt;&lt;button onclick="saveTextAsFile()"&gt;Save Text to File&lt;/button&gt;&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;td&gt;Select a File to Load:&lt;/td&gt;     &lt;td&gt;&lt;input type="file" id="fileToLoad"&gt;&lt;/td&gt;     &lt;td&gt;&lt;button onclick="loadFileAsText()"&gt;Load Selected File&lt;/button&gt;&lt;td&gt;   &lt;/tr&gt; &lt;/table&gt;  &lt;script type='text/javascript'&gt;  function saveTextAsFile() {   var textToWrite = document.getElementById("inputTextToSave").value;   var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});   var fileNameToSaveAs = document.getElementById("inputFileNameToSaveAs").value;    var downloadLink = document.createElement("a");   downloadLink.download = fileNameToSaveAs;   downloadLink.innerHTML = "Download File";   if (window.webkitURL != null)   {     // Chrome allows the link to be clicked     // without actually adding it to the DOM.     downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);   }   else   {     // Firefox requires the link to be added to the DOM     // before it can be clicked.     downloadLink.href = window.URL.createObjectURL(textFileAsBlob);     downloadLink.onclick = destroyClickedElement;     downloadLink.style.display = "none";     document.body.appendChild(downloadLink);   }    downloadLink.click(); }  function destroyClickedElement(event) {   document.body.removeChild(event.target); }  function loadFileAsText() {   var fileToLoad = document.getElementById("fileToLoad").files[0];    var fileReader = new FileReader();   fileReader.onload = function(fileLoadedEvent)    {     var textFromFileLoaded = fileLoadedEvent.target.result;     document.getElementById("inputTextToSave").value = textFromFileLoaded;   };   fileReader.readAsText(fileToLoad, "UTF-8"); }  &lt;/script&gt;  &lt;/body&gt; &lt;/html&gt; /code/pre  <answer188303> h1Any texteditor &amp; textutil/h1  Still intrigued by your problem I found the following solution. There is a Terminal app called codetextutil/code and it allows to convert richtext to plane text.  ul liEdit and save your 'Rich' text anyway you want to (like in TextEdit)./li liUse the commandline codetextutil/code to convert your rich text to normal text  precodetextutil richtext.rtf -convert txt /code/pre/li liYou can also pipe the codetextutil/code output through codesed/code to replace smartquotes and do whatever your want with it  precodetextutil richtext.rtf -convert txt -stdout | sed s/[”“]/'"'/g /code/pre  img src="https://i.stack.imgur.com/4216X.png" alt="rich text"/li /ul  Becomes:  codeHello, this is rich Text with "smart" quotes/code  <answer209608> Nano allows curser positioning. Of course, this is because strongTerminal itself provides this option/strong. Simply Option+Click where you need it to go. This was previously an option you had to enable in the Terminal Preferences, but for the last few OS X versions, is enabled by default (or hardcoded). It will work in most command line programs, including other editors like vim or emacs.  Another option that's enable by default is codeScroll Alternative Screen/code. It lets interactive screens like codeman/code or codenano/code be scrolled instead of scrolling the terminal screen. This works with scrolling from a touchpad or a scroll wheel or a magic mouse wheel as well.  <comment222712> Do you intend to distribute the script and editor commercially or publicly? Would you accept a [GNU GPL](https://www.gnu.org/licenses/gpl.html) licensed editor? Are you comfortable learning a little Objective-C or Mac app development? <comment222714> `emacs`? It has a simple mouse mode: https://stackoverflow.com/questions/5710334/how-can-i-get-mouse-selection-to-work-in-emacs-and-iterm2-on-mac <comment222729> I tried your solution, but it did not seem to work.  I was able to set the default, and I could see that the default was set.  but even after reboot if I touched 'file.txt' and then did an 'open file.txt'  TextEdit would open up, but then I typed quotes, they were smart quotes, not ASCII quotes.  (I can edit your response to show the exact commands and responses if that if valuable) <comment222730> In what way didn't it work? <comment222731> Smart quotes are part of your preferred system settings. You have smart quotes to default. I'll update the answer. <comment222732> As I say I am trying to "programmatically invoke an OS X editor from a script"   so your answer of using "$ defaults write ..."  was on the right track.  I am going to clarify the use case in my question above.  I have a script that runs 'out-of-the-box' on any mac.  Now I want that script to invoke an editor on file that I need stay as an ASCII file.  I don't want any user twiddling of the interface during setup.  Best if I can not disturb the user's setting of their applications, but I can forgo this second request if I must. <comment222733> I understand. Good luck <comment222735> Can't you just accept rich text and convert it to plain ascii in the background? <comment222736> Hah, you answered twice, with to very different approaches.  this one is certainly out of the box!  It is possible I can adapt it.  my challenge is I need to invoke it from a script, and tell it what file it is editing,  then have it be easy for the user to save that file.  Not sure if it is possible to communicate into the JS app from the outside... I don't think it has access to ARGV on the browser invocation, or the osx 'open' statement. <comment222738> perhaps one could have a fix file in /tmp that contained the name of the file to edit?  getting pretty hacky, but perhaps that could work --- do you have other thoughts about such an adaptation.   (just to be clear, what I wish is that I could do the equivelent in my code:    os.system("open -a  myfile.txt")  and this present the user with an editor on that file <comment222739> It should be possible: `open -a Safari file.html` hardecode the txt path and embed javascript in html <comment222750> **nano** has the mouse positioning, just `⌥ ALT` + Click to place the cursor . <comment222850> Thanks!  this is perhaps the best of the lousy options and Apple has left me with.  (this is why I feel they have lost their mind.  A UNIX based OS, w/o a text editor that comes out of the box is just stupidity!)  What I can do is kick off a process which busy loops waiting for the file to be updated, when it is updated, then I can run textutil to convert the file, then I need to forcably kill the editor process, so the user does not edit the file again after I have converted it.  The whole thing is just gross, but I think you have landed on the best solution to needless problem Apple created <comment222851> @GrahamMiln GPL is so draconian, I hate to do that to my project....  not really expecting commercial, but I hate the stickiness of that contract. <comment222852> @IanC.  this is a good idea.  I cannot add to the users .emacs file since I do not want to damage their environment just to run my editor, still I can change $HOME for this emacs instance, or perhaps use some command line options to force emacs to only read a specific configuration.  Thanks for this idea. <comment252855> Not just `nano`, but `pico`, `emacs` and `vim` (all built-in) also allow cursor positioning using the mouse with option+Click. <comment252856> @DanOblinger is it acceptable if users have to option+click to reposition the cursor with the mouse? <comment252858> @drfrogsplat I tried to say that, but the wording was blah. Updated. Also, pico is simply symlinked to nano since 10.3 (iirc), as is vi to vim <comment252878> thanks, my goal was to allow non programmers to edit a text file.  I worry that each of those editors are a bit wonky to save file and exit.  it is really sad that this capacity was stripped from the mac.  (textedit would be the perfect editor, but I need to programmatically permanently change the configuation of the target machine--to disable smart quotes.  no so cool. <comment291145> Xcode? Overkill in terms of storage space, but if emacs option above won't do then...