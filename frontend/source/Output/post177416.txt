Is it possible to change the SSH_AUTH_SOCK path? <body> I would like to have the codessh-agent/code socket inside my home directory, but currently it is created inside code/private/tmp/code.  I see that the agent is managed though codelaunchctl/code and this plist: code/System/Library/LaunchAgents/org.openbsd.ssh-agent.plist/code, but I don't know how to modify this file to have the socket, for example, at code~/.ssh-agent.sock/code.  <answer177417> I ended up with the following plist:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;org.openbsd.ssh-agent&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/usr/bin/ssh-agent&lt;/string&gt;         &lt;string&gt;-l&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;Sockets&lt;/key&gt;     &lt;dict&gt;         &lt;key&gt;Listeners&lt;/key&gt;         &lt;dict&gt;             &lt;!--                  &lt;key&gt;SecureSocketWithKey&lt;/key&gt;                  &lt;string&gt;SSH_AUTH_SOCK&lt;/string&gt;             --&gt;             &lt;key&gt;SockPathName&lt;/key&gt;             &lt;string&gt;/Users/myusername/.ssh-agent.sock&lt;/string&gt;             &lt;key&gt;SockPathMode&lt;/key&gt;             &lt;integer&gt;384&lt;/integer&gt; &lt;!-- 0600b8 in decimal --&gt;             &lt;key&gt;SockPathGroup&lt;/key&gt;             &lt;integer&gt;0&lt;/integer&gt;         &lt;/dict&gt;     &lt;/dict&gt;     &lt;key&gt;EnvironmentVariables&lt;/key&gt;     &lt;dict&gt;         &lt;key&gt;SSH_AUTH_SOCK&lt;/key&gt;         &lt;string&gt;/Users/myusername/.ssh-agent.sock&lt;/string&gt;     &lt;/dict&gt;     &lt;key&gt;EnableTransactions&lt;/key&gt;     &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  The only downside is the need for an hard coded username. If somebody know how to solve this as well...  I just overwrote the default file at code/System/Library/LaunchAgents/org.openbsd.ssh-agent.plist/code, then I executed the following commands:  precodelaunchctl unload /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist launchctl load /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist launchctl start org.openbsd.ssh-agent /code/pre  <answer177419> You could do this basically in two possible ways without tweaking plist files:  ol liIf you always use bash in the Terminal and you want to enable that, set the path to your socket global in code/etc/bashrc/code for all users:  precodeexport SSH_AUTH_SOCK=${HOME}/.ssh-agent.sock /code/pre/li liSet the codeSSH_AUTH_SOCK/code variable in the user's code.bashrc/code script. Same way as in no. 1./li /ol  So whenever a user logs in with the command-line and has bash executed, the user always has its AUTH Socket set in the home directory. You may have to do it for other shells in similar ways AND you always have to ensure that the agent directory exists. Of course I cannot guarantee that this will work with GUI clients aka CyberDuck as well.  <answer242169> I end up with a .bashrc script:  precode# Predictable SSH authentication socket location. SOCK="$HOME/.ssh/agent_sock" AGENT_ENV="$HOME/.ssh/agent_env" if ! ps -x | fgrep -v fgrep | fgrep -q $SOCK; then     rm -f $SOCK     ssh-agent -a $SOCK &gt; $AGENT_ENV fi eval $(cat $AGENT_ENV) /code/pre  And sounds like this wont work for GUI as well.  Updating plist is too painful on El Capitan (Reboot to recovery &amp; SIP disable - reboot - edit plist &amp; test - reboot to recovery &amp; SIP enable - reboot), so for those who is OK to have this solved for shell only - this is a working solution.  <comment209864> The problem is not configuring my environment, but more starting the ssh-agent with the correct path. <comment210027> Ok, I got it. You want to use the system procedures, not implementing your own. Because the last thing I would have told you was "ssh-agent -a SOCKPATH". That worked for me when testing it on the command line withing iTerm2. <comment210232> Exactly. The downside is that, as you already pointed out, it will only work for that iTerm2 session and not for other GUI apps. <comment297710> how did you edit /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist ? mine is locked (even for root), on latest el-capitan.