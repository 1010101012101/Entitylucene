Making an "on save" action (in Office on Yosemite) or IDing changed files in a watched directory? <body> Using PowerPoint, I have slideshows that I need to share with non-Mac, non-Office users. I want to automate the process of generating a PDF in a given folder (call it codetarget/code) whenever I save a slideshow in another given folder (call it codesource/code).  I'm currently doing it via a LaunchAgent that watches codesource/code and calls an AppleScript upon changes to that folder. This is the essence of the AppleScript that performs the save:  precodeon run {subject}     tell application "Microsoft PowerPoint"         set pres to the active presentation         if pres is not missing value then             set pdfFile to my getPdfName(subject, name of pres) as string             -- getPdfName is a function I wrote that generates the path to save to             save active presentation in (pdfFile as string) as save as PDF             return pdfFile         end if     end tell end run /code/pre  This is flawed, because it assumes that PowerPoint is open, that the change to my codesource/code folder is the result of saving a file in PowerPoint, and that the file I saved is the active presentation. Among other things, PowerPoint saves temp files in the same folder, and every tempfile save alters the codesource/code folder, triggering a PDF save that I don't want.  I'd rather be able to either  ol lihook into the save action, so that I know saving is what triggered the script, or/li liidentify (in the AppleScript) what changed in the directory, so I can see if the file that changed was the codeactive presentation/code (and ignore the event otherwise)./li /ol  Almost all changes to the slideshow files I care about will be locally triggered by saving in PowerPoint, and I don't mind dealing manually with the few changes that aren't.  So, is it possible to do either (1) or (2) as described above? Or, is there another method that might work better? 