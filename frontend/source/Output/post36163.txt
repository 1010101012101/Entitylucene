AppleScript "Kill" Command Error <body> I am attempting to run an AppleScript every 24 hours to close a running application and restart it. I have used the following code successfully with other Apps:  precode repeat   delay 84600   set app_name to "APPLICATION NAME"   set the_pid to (do shell script "ps ax | grep " &amp;amp; (quoted form of app_name) &amp;amp; " | grep -v grep | awk '{print $1}'")   if the_pid is not "" then do shell script ("kill -9 " &amp;amp; the_pid)   delay 30   tell application app_name to activate   end repeat /code/pre  However, when I run this script I get the error that Kill: argument must be process or job id.  When I check the value of the_pid, it returns with the correct PID, however, it returns more than one PID. For example, it return 5430 and 5960, one which corresponds to the application and the other to CrashReporter. Hence, I believe that kill command fails due to more than one PID being present in the the_pid variable.  Does anyone know how to get around/fix this? How to make kill accept the the_pid variable when it contains more than one PID? Is it a matter of formating?  I know I can always use killall and pass the name of the application but there is no technical reason why this should not work.  <answer36245> You can do what you are trying to do using the codekillall/code command and referring directly to the application's name.  precoderepeat  delay 84600  set app_name to "APPLICATION NAME"  do shell script "killall " &amp; app_name  delay 30  tell application app_name to activate end repeat /code/pre  <answer40005> It is clear that what ever your app name is. Is also in a CrashReporter processes information.  Which I cannot replicated for obvious reasons.. (What is you app by the way)   You could just add  emgrep -v CrashReporter/em    precode repeat       delay 84600       set app_name to "APPLICATION NAME"       set the_pid to (do shell script "ps ax | grep " &amp; (quoted form of app_name) &amp; " | grep -v grep | grep -v CrashReporter | awk '{print $1}'")       if the_pid is not "" then do shell script ("kill -9 " &amp; the_pid)       delay 30       tell application app_name to activate       end repeat /code/pre  UPDATE:  Actually thinking about it you can use pure Applescript to get the pid of the app.  For example; if I ran your original code while looking for my app 1Password. I would get two pids. Because 1Password runs a agent em1PasswordAgent/em  In my script above I would invert grep (-v) to exclude anything with the word emAgent/em.  I could if I wanted to stick with a do shell script and run.  precodeset the_pid to (do shell script "ps ax | grep  " &amp; (quoted form of (app_name &amp; space)) &amp; " | grep -v grep |awk '{print $1}'") /code/pre  Notice I add a space to the end of the app name.  But what seems the best way is running with pure applescript;  precode tell application "System Events" try         get unix id of process "1Password"             --&gt; 8123 end try     end tell /code/pre  This will give me exactly what I am looking for. Because it is looking only for the "1Password".  You should use a try block on this sort of script. If the app is not running you will get an error.  <comment41332> Thank sebthedev, that's what I am currently doing. However, I still don't understand why the AppleScript fail when done using the "kill" command and passing more than one PID. What's interesting is that when I run it from the terminal it works, but not the AppleScript. That's whats so annoying. Thank you for your time. <comment41370> @user16301 What I've suggested to you uses the `killall` command, as opposed to the `kill` command. `killall` (I believe) kills apps in a different way.  Have you tried using my script instead? <comment42359> Is there some reason that `tell application app_name to quit` doesn't work? <comment45285> This will work for most apps and should work for the OP's specific app. But, for general use, the main problem with this method, compared to using `killall`, is that if support processes within the .app bundle are running, grep will return those pids along with the main process. One way to get around that could be to specify part of the path to the executable inside the .app bundle rather than just the app name. E.g. "Final Cut Pro" returns 5 pids, but "MacOS/Final Cut Pro" returns only 1 pid. <comment45318> @joelseph Good points which I did realise.. But I have also updated my answer with another option.