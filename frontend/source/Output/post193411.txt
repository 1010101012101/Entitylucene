Update bash to version 4.0 on OSX <body> Is it possible to actually update bash to version 4.0 in OSX Yosemite?  precodeecho $BASH_VERSION 3.2.57(1)-release /code/pre  This article and this thread refer to the same question, but they install a new shell side-by-side with the old one. Is there a way to directly update the old bash shell?  <answer193413> Is it possible to actually update bash to version 4.0 in OSX Yosemite? Yes.  ol liDownload / Install homebrew http://brew.sh/ by running this command in terminal.  precoderuby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" /code/pre/li liQuit and reopen your terminal. then type   precodebrew install bash /code/pre/li liChange the default shell via the terminal gui with the literal path of your new bash (EDIT: I have yet to find a CLI way that works )/li /ol  img src="https://i.stack.imgur.com/4OUTN.png" alt="enter image description here"  Is it possible to actually update bash to strongemAppleâ€™s provided bash/em/strong version 4.0 in OSX Yosemite?  EDIT: No. Not in the way the op is asking. E.g upgrade the current install by way of replacing itself.  It has been noted in other answers that Apple has not updated bash due to licensing issues. However downloading an updated and separate version of bash and using it as your default shell is the canonical solution, for most interpreters. Take python for example. You do not upgrade 2.7 to 3.5 you download a separate version and change your default.   <answer197172> Apple will not update Bash, because the latest version is licensed under GPLv3, which Apple cannot use. They have updated most of their other shells though. ZSH for example is mostly up to date.  <answer292760> As @William said in his answer, Apple does not provide bash 4 due to GPL restrictions. You can install bash 4+ however and also can make it your default shell (including for Terminal and iTerm2) by doing the following.  First install the newer version of bash. There are various ways of doing that, I prefer Homebrew.  ul liInstall Homebrew as described at http://brew.sh.  /li liInstall bash using codebrew install bash/code./li /ul  Bash is now available and the active shell for the current session. You can find where it is located by running codewhich bash/code. In my case it is at code/usr/local/bin/bash/code. This new bash can now be used in scripts by using a Shebang with the new bash path at the start of scripts. You can also use it for specific profiles in Terminal/iTerm2 using the steps described in @user136952's answer.  precode#!/usr/local/bin/bash ...your script... /code/pre  I'm assuming this what you mean by "side by side" in your question. To make bash the default you need to do two more steps.  First, add that bash path to your code/etc/shells/code file. As described in /etc/shells, this file has the list of valid login shells. Before the new bash can be the default it has to valid. After adding the new bash path my code/etc/shells/code looks like the following:  precode# List of acceptable shells for chpass(1). # Ftpd will not allow users to connect who are not using # one of these shells.  /bin/bash /bin/csh /bin/ksh /bin/sh /bin/tcsh /bin/zsh /usr/local/bin/bash /code/pre  Finally we can use chsh to make it the default shell. You can read more about this in Change the Shell in Mac OS X Terminal, but the actual command is very straightforward.  precodesudo chsh -s /usr/local/bin/bash /code/pre  Now the new bash is our default shell. If you open Terminal or iTerm2 and run codebash --version/code you should see the new version. Note the "License GPLv3+" which is why Apple doesn't bundle it with macOS.  precode$ bash --version GNU bash, version 4.4.12(1)-release (x86_64-apple-darwin16.6.0) Copyright (C) 2016 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt; /code/pre  <comment230549> There is no need to do that. In fact, it is always a good idea to keep the original one. Two or more versions of bash can be installed at the same time, and you can set whichever one you like to be the default <comment230550> This does not work. <comment230571> If I'm correct @user136952 refers to the exact same instructions as the two links I provided in my question. It installs an extra version of bash and does not upgrade the existing one, although it is possible to use it as your main shell by chsh. <comment230576> @user3439894 `bash --version` does change, but underneath it's still using the old `bash`, because when you `echo $BASH_VERSION`, it still shows you are using version 3.x. No clue why this is the case. <comment230587> This does not directly update the shell as the OP asked but installs another shell in /usr/local/bin <comment230600> @Young Roger, Okay, I see what you're getting at and of course adding `/usr/local/bin/bash` to `/etc/shells` and then in a Terminal using `chsh -s /usr/local/bin/bash` sets it as the `$USER` default shell.  Is that acceptable for you? <comment230601> Essentially Apple's Software Update would be responsible for changing the version of BASH on the system, like it did with the update to BASH for Shellshock.  So unless Apple provides an update then there is no direct way to update to the latest version of GNU BASH that came installed as part of OS X.  An indirect way would be to download it yourself, by one means or another, and instal it and then set it as your default shell.  Whether or not you choose to remove the shipped version or Apple updated version, that's up to you. <comment230644> Updated my answer to show make the setting stick, based on @user3439894's comment. <comment230646> Apple will not update Bash, because the latest version is licensed under GPLv3, which Apple cannot use. They have updated most of their other shells though. ZSH for example is mostly up to date. <comment235697> Answer posted! :) <comment300334> [This](https://gist.github.com/samnang/1759336) helped me upgrade to Bash version 4 after installing `bash` with `Homebrew`. <comment348189> This worked for me to install the latest Bash Version, but somehow my old aliases and environment vars were not available. To make old stuff work, I had to go to System Preferences - Users & Groups - Click the lock - Right click your user - Advanced Options - and paste `/usr/local/bin/bash` in the login shell field.