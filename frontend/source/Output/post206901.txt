Using MAMP 3.4, how do I upgrade to Apache 2.4 and OpenSSL 1.0.2 to meet the ATS iOS 9 requirements? <body> I've just installed MAMP 3.4 on Yosemite but the Apache version inside is still 2.2. Is there a way to upgrade to Apache 2.4? Moreover I have installed through brew openssl 1.0.2 but MAMP Apache still starts with version OpenSSL/0.9.8zg. Why? I need this updates in order to meet new ATS iOS 9 requirements.  <answer206977> h2For Mac OS X Yosemite/h2  ol liUpdate openssl by brew to version = 1.0.2d/li liTLS 1.2 works strongonly with/strong apache 2.4 and actually MAMP is still given with apache 2.2. strongSOLUTION:/strong download and install the latest version of AMPPS which runs a version of apache 2.4.x/li licreate a self signed certificate with sha256 (as requested by iOS 9) with  codeopenssl req -x509 -nodes -sha256 -days 365 -newkey rsa:2048 -keyout server.key -out server.crt/code/li /ol  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and save codeserver.key/code and codeserver.crt/code into code/Applications/AMPPS/apache/conf/code  ol start="4" liBe sure that ssl modules are loaded inside httpd.conf file of AMPPS/li liEdit file code/Applications/AMPPS/apache/conf/extra/httpd-ssl.conf/code adding:/li /ol  br /  precode&lt;VirtualHost localhost:443&gt;    DocumentRoot "/Applications/AMPPS/www"    ServerName localhost    SSLEngine on    SSLProtocol all -SSLv2 -SSLv3    SSLHonorCipherOrder on    SSLCertificateFile "/Applications/AMPPS/apache/conf/server.crt"    SSLCertificateKeyFile "/Applications/AMPPS/apache/conf/server.key" &lt;/VirtualHost&gt; /code/pre  inside   precode&lt;IfModule ssl_module&gt; ... &lt;/IfModule&gt;  /code/pre  ol start="6" liiOS 9 simulator will annoy you each time you use NSURLSession raising an error 9813 saying that the certificate is not valid (because is self signed). So in each class where you are going to use NSURLSession do, for example, the following:/li /ol  br /  precodeclass LoginService: NSObject, NSURLSessionDelegate {  func URLSession(session: NSURLSession,     task: NSURLSessionTask,     didReceiveChallenge challenge: NSURLAuthenticationChallenge,     completionHandler: (NSURLSessionAuthChallengeDisposition, NSURLCredential?)     -&gt; Void) {      completionHandler(NSURLSessionAuthChallengeDisposition.UseCredential, NSURLCredential(forTrust: challenge.protectionSpace.serverTrust!)) }  ...  func requestLoginWithURL (requestURL: NSURL, completionHandler: (success: Bool?) -&gt; Void) {     let configuration =     NSURLSessionConfiguration.defaultSessionConfiguration()      let urlRequest: NSURLRequest = NSURLRequest(URL: requestURL)      let session = NSURLSession(configuration: configuration, delegate: self, delegateQueue:NSOperationQueue.mainQueue())      /*     dataTaskWithRequest: creates an HTTP request for the specified URL request object, and calls a handler upon completion.     */     let task = session.dataTaskWithRequest(urlRequest, completionHandler: { (data: NSData?, response: NSURLResponse?, error: NSError?) -&gt; Void in  ... } /code/pre  where the function codeURLSession/code is a delegate which will prevent the app from crashing because of the self signed certificate and it will accept anyway.  <answer246776> As of July 21, 2016, there is a pre-release available of MAMP PRO 4 which includes OpenSSL 1.0.2, get the pre-release here:  https://www.mamp.info/en/pre-release.html  <comment249581> Interesting - I would have to wonder if this would be easier with a VM - using Vagrant or something to help instead of using MAMP altogether? Either way, I suggest you answer your own question by moving your edited-in solution to an answer. This will make it clearer for other users who are in search of a similar solution. <comment249582> Thank u for your comment. I'm afraid I don't know what Vagrant is but the idea of a VM maybe is quite good. Anyway remember that MAMP can't be used because actually it runs only apache 2.2 while apache 2.4.x is strictly required for TLS 1.2 <comment249592> Ah - I missed that all important note in your answer. [Vagrant](https://www.vagrantup.com/) just helps you manage VMs. You would write some provisioning scripts which would build your machine with the tools that you would need, and then `vagrant up` to run all of them and boot the VM. <comment249595> I understand, thank you for your explanation. Unfortunately I know nothing about VMs and generally low level programming :( <comment304440> At last!! This is a very good piece of news! Thank you mate! <comment304454> You're welcome, I was in the same position as you so had to share this info :)