Is there a Fortran compiler/emulator for iOS? <body> Has anyone come across a Fortran 77 emulator or compiler for iOS devices?  <answer40534> Perhaps it's best done with a pre-compiler translating Fortran to C (and integrate that into Xcode as a separate build step). One such tool is e.g. http://www.greatmigrations.com/tools_gmFortran.aspx    Maybe one can also have a look at the gnu fortran compiler, as far as I remember it also started out as a precompiler translating Fortran to C. http://gcc.gnu.org/fortran/  <answer157502> It can be accomplished using the Dragonegg plugin for GCC (frontend), a generic LLVM installation (backend), and the Apple linker.  I have been able to successfully build and run a 64-bit Fortran application on iOS 8.1 built on Mac OS X 10.10 using GCC 4.8 and LLVM 3.5.  The process is not very straightforward and requires a number of hacks and some scripting, but the high-level steps are:  ol liInstall GCC 4.8 from HPC for Mac OS X into /usr/local/li liInstall Clang/LLVM 3.5 from llvm.org into /usr/local/li liDownload the Dragonegg source code from the LLVM website/li liBuild dragonegg.so and install it to /usr/local/lib/gcc/x86_64-apple-darwin12.5.0/4.8.1/plugin/li liDownload GCC 4.8.1 sources/li liBuild libgfortran for arm64 using a combination of Apple clang for C/C++, Dragonegg for Fortran, and some wrapper scripts to piece together the compilers/li liInstall libgfortran.dylib and libgfortran.3.dylib to /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS8.1.sdk/usr/lib/li liInstall libgfortran.3.dylib on the iPhone under /usr/local/lib/li /ol  Now if you got this far, compile a Fortran source file into an iOS binary using:  ol ligfortran -O3 -fplugin=dragonegg -fplugin-arg-dragonegg-llvm-codegen-optimize=3 -fplugin-arg-dragonegg-emit-ir -S -o main.s main.f/li lillc -mtriple arm64-apple-darwin -filetype=obj -o main.o main.s/li lild -arch arm64 -syslibroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS8.1.sdk -lSystem -lgfortran main.o -o main/li /ol  Precompiled binaries for Dragonegg and libgfortran can be found here: http://download.zeroepoch.com/gfortran-ios/gfortran-ios.tar.bz2  strongUPDATE: The precompiled binaries archive now contains fat libraries (armv7s, arm64) and some bug fixes to the wrapper scripts./strong  <comment45851> Why would you *want* one? <comment185186> I found this link useful for building dragonegg.so, http://stackoverflow.com/questions/26009274/dragonegg-on-mac-os-x-issues <comment186459> FYI, I was able to compile all of the Fortran benchmarks from SPEC FP for iOS using this method. <comment205195> Could you be more specific with your 6th step, build libgfortran for arm64? I'm trying to find a way to built it but I did not succeed. <comment205402> I had to get this work done quickly so I didn't take notes, but I didn't want to lose the binaries.  I just remember I had to hack the source quite a bit.  The majority of the trouble was setting the fortran compiler to my wrapper script since gfortran has some fortran libraries inside. <comment272472> Thank you very much for the idea. It works. Regarding the 8th step, I was not able to copy the dylib into the proposed location. I had to change the location like this: `install_name_tool -id @executable_path/../Frameworks/libgfortran.3.dylib libgfortran.3.dylib`. In XCode a Copy build step is needed. Copy libgfortran.3.dylib and set the destination to _Executables_. <comment273704> I am not able to use _libgfortran.3.dylib_ on the iOS device: `test4.app/libgfortran.3.dylib: mach-o, but wrong architecture`. Any ideas? <comment273843> timomeinen, I only have pre-built binaries for armv7s and arm64.  If you built them yourself you will need both compiled libraries.  If you're making a real app you might even need armv7 as well.  You combine them with lipo.  I was only using this on a jailbroken device at the SSH prompt. <comment277560> Tried to compile [ARPACK](http://www.caam.rice.edu/software/ARPACK/) using your pre-built binaries and linker exits with error: `Undefined symbols for architecture arm64: "etime", referenced from: second in second.o`. Could you, please point me to the right direction to where should I look for the problem? <comment277836> Andriy, It sounds like the ARPACK library or something related is using a function that doesn't exist on iOS called "etime".  I've never seen that function before so I'm not sure what it does.  You might want to look at rewriting that code to use gettimeofday or something similar. <comment329679> @FakeName Numeric and machine learning libraries, as a few examples.