How do I use homebrew less instead of system less? <body> I've installed codeless/code via  precodehomebrew install less /code/pre  but codeless/code starts the system version of codeless/code, not the one installed via homebrew. codewhich less/code shows:  precode$ which -a less /usr/local/bin/less /usr/bin/less /code/pre  where code/usr/local/bin/less/code is a symlink to code../Cellar/less/487/bin/less/code (homebrew codeless/code) and code/usr/bin/less/code  is the system codeless/code. codeecho $LESS/code returns nothing. How can I start homebrew codeless/code instead of system codeless/code by default?  <answer281106> If homebrew is correctly installed code/usr/local/bin//code is checked before code/usr/bin//code. Check this with codeecho $PATH/code, this will show you the path's the OS is trying to find the command you entered and it is trying them in the order that is shown.  strongemA little fancier/em/strongbr using the bash shell:  precodeecho $PATH | awk '{ n = split($0, paths, ":"); for (i=0; ++i &lt;= n;) print i, paths[i] }' /code/pre  (using the fish shell):  precodeecho $PATH | awk '{ n = split($0, paths, " "); for (i=0; ++i &lt;= n;) print i, paths[i] }' /code/pre  This will show an numbered list of the path's tried. Mine shows  precode1 /Users/peter/.gem/ruby/2.0.0/bin 2 /usr/local/sbin 3 /usr/local/bin 4 /usr/bin 5 /bin 6 /usr/sbin 7 /sbin 8 /Library/TeX/texbin /code/pre  The system will traverse the directories in the above order looking for commands, in your case codeless/code. If it's not in the first one, it will try the next one until it runs out of options and throw up an error.  So if your codeecho $PATH/code shows similar results as mine you are using the homebrew version of less.  <answer281116> This might be due to bash's hash table of commands in codePATH/code still using the old value. Remove the hash of codeless/code, or clear the hash, so that bash re-searches codePATH/code:  precodehash -d less # or, hash -r /code/pre  You can also manually add a path to the table:  precodehash -p /usr/local/bin/less less /code/pre  From the Bash manual (emphasis mine):     If the name is neither a shell function nor a builtin, and contains no   slashes, Bash searches each element of code$PATH/code for a directory   containing an executable file by that name. strongBash uses a hash table to   remember the full pathnames of executable files to avoid multiple codePATH/code   searches/strong (see the description of codehash/code in Bourne Shell Builtins). strongA   full search of the directories in code$PATH/code is performed only if the   command is not found in the hash table./strong   <comment353681> In the Unix spirit, small tools that do one job and do it well-  `echo $PATH | tr ':' '\n' | nl` <comment353718> That's much more elegant. I didn't know about `nl`, and as they say _when you have a hammer, everything looks like a nail_. <comment353730> why would you want to? <comment353761> @WalrustheCat the macOS version of `less` is from 2013, specifically version 458. The current Homebrew version is 487. Some enhancements have been made and bugs have been fixed between versions. <comment353863> @ ssdecontrol exactly. @WalrustheCat why I would want to doesn't really matter, or does it? However, if you think replacing system less might have undesired side effect, please share your thoughts. <comment353865> Worked like a charm. `$hash -d less` resulted in `-bash: hash: less: not found` but `$hash -r` did the job. <comment353866> `/usr/local/bin` is indeed checked before `/usr/bin` but the /usr/bin/less was in the bash's hash table so I had to `$hash -r`. <comment353924> @Cpt_Jauchefuerst just curious mang <comment355256> This question / answer would also apply to other programs like e.g. nano