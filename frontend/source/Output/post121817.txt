How to fix curl: (60) SSL certificate: Invalid certificate chain when using sudo <body> So since the Mavericks upgrade curl has more issues with certificates.  When trying to curl a file from my web server with it's self-signed certificate it was getting the error "SSL Certificate: Invalid certificate chain".  This was corrected by adding the certificate to my system keychain and setting it to always allow SSL, information I found here and here.  This works fine and when I curl a file it downloads properly.  However if I run curl with sudo before (e.g I have a script which needs to be run with sudo and does a curl in it) then I'm back to the same error message.  I'm guessing that root doesn't read from the system keychain perhaps?  Does anyone know a way to fix this?  <answer122613> f you store your CA certificates on the filesystem (in PEM format) you can tell curl to use them with  precodesudo curl --cacert /path/to/cacert.pem ... /code/pre  You can also turn off the certificate verification with  precodesudo curl --insecure ... /code/pre  strongEdit: Updated with regard to feedback/strong  If you want to set this permanently, you should create a code.curlrc/code files and place in your home directory. codesudo/code commands may need this file in code/var/root/code The file takes the same options as the command line but without the dashes. One option per line:  precodecacert=/path/to/my/certs.pem /code/pre  <answer122661> One way to fix this is to let codecurl/code disregard the certificate chain checking altogether:  precode$ sudo curl -k https://example.com /code/pre  <answer122779> Root doesn't read from the current user trust settings, but there are both an admin trust settings and root-user-specific trust settings. (These are also distinct from the emsystem/em trust settings.) Note, also, that certificate trust settings are somewhat distinct from just adding a certificate to a keychain; you can mark a cert as trusted without fully adding it. (The exact situation here is not clear to me, and the docs I've seen are vague.)  You can mark a cert as trusted for your current user as  precode$ security add-trusted-cert /path/to/cert.pem /code/pre  but that doesn't help with root. The solution, as you might now guess, is either to codesudo/code the above, which then marks it as trusted for the root user specifically:  precode$ sudo security add-trusted-cert /path/to/cert.pem /code/pre  or to use the code-d/code flag to add it to the admin trust settings:  precode$ security add-trusted-cert -d /path/to/cert.pem /code/pre  (OS X will pop up a password dialog to confirm this one.)  Either of the latter two seems to be sufficient for codesudo curl/code.  Reference: https://developer.apple.com/library/mac/Documentation/Darwin/Reference/ManPages/man1/security.1.html  <answer123000> If you use MacPorts (and the 3rd-party script you mentioned doesn't remove it from code$PATH/code or calls code/usr/bin/curl/code) you can install the codecertsync/code and codecurl/code ports in this order.  codecertsync/code is a tool and a corresponding launchd plist that will export your system keychain to code$prefix/etc/openssl/cert.pem/code and install a symlink code$prefix/share/curl/curl-ca-bundle.crt -&gt; $prefix/etc/openssl/cert.pem/code so MacPorts curl will automatically pick up the certificates. codecertsync/code will also automatically update the generated files when you change your system keychain.  <answer128421> The documentation you are looking for is here. It explains how to use cURL on Mavericks and how to supply your certificates: http://curl.haxx.se/mail/archive-2013-10/0036.html  <answer145938> This is really in the output hint:  precodeecho insecure &gt;&gt; ~/.curlrc /code/pre  Advantage of using above solution is that it works for all codecurl/code commands, but it is not recommended since it may introduce MITM attacks by connecting to insecure and untrusted hosts.  <answer262968> To make codesudo curl/code work (on OSX Sierra), we had to import the certificate into the codeSystem.keychain/code and trust it there. This could be done manually in the Keychain app or using this command:  precodesudo security add-trusted-cert -d -k /Library/Keychains/System.keychain /path/to/cert.pem /code/pre  It was important to both specify code-d/code and manually set the path to the System keychain via code-k/code to make sure the cert actually gets imported there if it isn't yet.  The command works without codesudo/code, but then would ask for the password via a UI dialog, which might be a hurdle for scripts.  <comment143104> Thanks for your answer, the script which is being run with sudo is from a third party and so I can't really modify the curl command itself. Insecure isn't really an option. Can this be done globally? <comment143106> You can make a .curlrc file and store it in your home folder, though using sudo it may need to be /var/root/.curlrc. The file should contain options without dashes, one per line. So " cacert=/path/to/my/certs.pem " <comment143187> Oops! This is actually already mentioned by @Dan with `--insecure`, which is a long form of `-k` flag. <comment143188> +1 for setting up a `root`-available `.curlrc` instead of `--insecure`.  Which is exactly as it saysâ€”for an attacker in the network position to do so, it'd be trivial to MITM and inject code. <comment143913> Plus it defeats the point of using https. <comment143914> Thanks for this, sounds like what I'm looking for. I'll try it tomorrow and award bounty if it works. <comment143915> As I said in the question I've added them to the system keychain as well as the login keychain already. <comment143916> Thanks for this, I'd like to avoid using MacPorts if possible though. <comment144408> Did you actually try what I suggested? I tested it, in exactly the situation you describe, and it worked.  I'm not clear on all the details -- documentation is vague -- but you should know that certificate trust settings are NOT quite synonymous with just adding the cert to a keychain, and that the admin cert trust settings exist separately from both system and user settings/keychains. (There also seems to be a root-user-specific set of user settings in the mix.)  I've edited my answer to be clearer on this point. Please, try this solution. <comment144584> Yes I tried this solution when you first posted it. The certificates are in the system keychain and set as trusted. Still no luck.