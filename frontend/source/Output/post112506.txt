I added this to my .bash_profile but I neglected to label it and forgot what it means exactly <body> I remember broadly what it does, but not specifically:  precode    if [ -f ~/.bashrc ]; then     source ~/.bashrc     fi /code/pre  What is the exact purpose for it again?  <answer112507> This sources a code~/.bashrc/code file if it exists and loads the contents of that file.  The short answer to your question is: you did this so no matter how you get to your machine, via a shell opened in an interactive desktop session or an ssh login to the machine, your codebash/code shell has a consistent setup to it.  The longer answer for why you had to do it this way lies below...  The reason you'd want to do this is steeped in bash history: one of those files is used for interactive logins, the other is used for non-interactive logins. The thought behind having two different setups is you might want some things in your interactive shell (a fancy prompt, a message of the day, colourization of your command output, etc.) that you wouldn't want in a non-interactive session because it trips up programmatic access to input and output and what not.  For most users though you want both environments to be the same. Most of us aren't running complicated enough bash setups to warrant separating out interactive and non-interactive setups like this.  The code.bash_profile/code is executed for login shells, while code.bashrc/code is executed for interactive non-login shells.  There's a nice article by Josh Staiger that talks about why one over the other and how to remember where to put things. Allow me to quote some of it here:     strongWhat is a login or non-login shell?/strong      When you login (type username and password) via console, either sitting at the machine, or remotely via codessh/code: code.bash_profile/code is executed to configure your shell before the initial command prompt.   But, if you’ve already logged into your machine and open a new terminal window (codexterm/code) inside Gnome or KDE, then code.bashrc/code is executed before the window command prompt. code.bashrc/code is also run when you start a new bash instance by typing code/bin/bash/code in a terminal.      strongMac OS X — an exception/strong      An exception to the terminal window guidelines is Mac OS X’s codeTerminal.app/code, which runs a login shell by default for each new terminal window, calling code.bash_profile/code instead of code.bashrc/code. Other GUI terminal emulators may do the same, but most tend not to.      strongRecommendation/strong      Most of the time you don’t want to maintain two separate config files for login and non-login shells — when you set a PATH, you want it to apply to both. You can fix this by sourcing code.bashrc/code from your code.bash_profile/code file, then putting PATH and common settings in code.bashrc/code.      To do this, add the following lines to .bash_profile:  precodeif [ -f ~/.bashrc ]; then     source ~/.bashrc fi /code/pre      Now when you login to your machine from a console code.bashrc/code will be called.   <answer112524> See Ian C's description of what the source line does  This is surrounded by an if statement  precodeif x; then   .... fi /code/pre  this checks on x and then runs the code between the then and the fi (The idea of fi ending and if and other endins by reverseing the beggining keyword is use in sh and related shells.  The check that is made here is code[ -f ~/.bashrc ]/code which is the same as codetest -f .bashrc/code the if tells test to return true iff what follows -f is a file and it exists.  So the code over says if there is a .bashrc run it into your cirrent shell. 