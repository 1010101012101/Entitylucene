launchctl error "nothing found to load" when run via cron <body> On OS X 10.9, I'm running a script (e.g., code~/bin/run.sh/code) via my user crontab (added using codecrontab -e/code). This script, under some specific conditions (not related to this question), will run the following command to launch a menubar application:  precodelaunchctl load /Library/LaunchAgents/com.opendns.osx.RoamingClientMenubar.plist /code/pre  When I run this command (either code~/bin/run.sh/code or the codelaunchctl/code statement above directly) from the command line normally, the menubar item launches fine.  When this command is run via crontab (again, directly or via code~/bin/run.sh/code), I receive the message codenothing found to load/code in the cron output (in my mail).   Question: why does this fail when run via cron but not when run on the command line?  I have tried executing it via cron in the simplest way possible:  precode* * * * * launchctl load /Library/LaunchAgents/com.opendns.osx.RoamingClientMenubar.plist /code/pre  This doesn't work (I get codenothing found to load/code).  I have tried emulating the cron environment:  ol liCapturing the cron environment by having this execute in cron:  precodeenv &gt; ~/cronenv /code/pre/li liThen opening a shell with this environment:  precodeenv - `cat ~/cronenv` /bin/sh /code/pre/li liAnd finally running the command:  precodelaunchctl load /Library/LaunchAgents/com.opendns.osx.RoamingClientMenubar.plist /code/pre/li /ol  It runs find in these conditions (I wouldn't expect it to, if something in the cron environment is the culprit).  I have tried running it from crontab as codesudo/code. Nope (codenothing found to load/code).  I have tried running it from crontab with codelaunchctl load -F/code and codelaunchctl load -w/code. No luck (codenothing found to load/code).  Permissions on the plist file are:  precode-rw-r--r--  1 root  wheel  561 Apr 13 20:55 /Library/LaunchAgents/com.opendns.osx.RoamingClientMenubar.plist /code/pre  What's going on?  (BTW, I know it may seem silly to run a script with a launchctl job from within cron, but because it is run within a shell script it's prevented from being a 100% launchctl-controlled process.)  strongUpdate:/strong as requested here is the script that is being run (I've been calling it code~/bin/run.sh/code), the line in question being #29, and here is the contents of the plist.  strongUpdate: the specific solution that works for me, based on @mateusz-szlosek's suggestion to use codebsexec/code, looks like this:/strong  precodesudo launchctl bsexec "$(ps -axwww | grep Dock | grep -v grep | awk {'print $1'};)" sudo -u $USER launchctl load /Library/LaunchAgents/com.opendns.osx.RoamingClientMenubar.plist /code/pre  The first codesudo/code is required otherwise the error emCouldn't switch to new bootstrap port/em occurs. The second codesudo/code is to execute codelaunchctl/code as code$USER/code. The first argument to codebsexec/code is a parent process ID who's context will be used to launch the new process. code$(ps -axwww | grep Dock | grep -v grep | awk {'print $1'};)/code returns the codepid/code of the Dock process, which loads somewhat early in the launchd hierarchy, but under user context.  <answer199819> The problem is execution context and mach bootstrap in OS X (more info on Apple documentation worth reading). You need to simulate execution from proper context. In OS X it's done using codelaunchctl bsexec/code command. From TheDarkKnight's answer to Starting/stopping a launchd agent for all users with GUI sessions you have:     h2Unload Agents/h2  precode#!/bin/bash for id in `ps aux | grep -v grep | grep MyAgent | awk {'print $2'}` do     launchctl bsexec $id launchctl unload /Library/LaunchAgents/myAgent.plist done /code/pre      Replace codeMyAgent/code with the name of your Launch Agent.      h2Load Agents/h2  precode#!/bin/bash for pid_uid in $(ps -axo pid,uid,args | grep -i "[l]oginwindow.app" | awk '{print $1 "," $2}'); do      pid=$(echo $pid_uid | cut -d, -f1)     uid=$(echo $pid_uid | cut -d, -f2)      launchctl bsexec "$pid" chroot -u "$uid" / launchctl load /Library/LaunchAgents/myAgent.plist done /code/pre   h1On OS X 10.11 and Later/h1  From the comment by vrrathod about OS X 10.11, El Capitain, use:  precodelaunchctl bootstrap gui/$uid /Library/LaunchAgents/myAgent.plist /code/pre  <comment237856> How about `bsexec` to launch Agent in proper context? Have You checked http://stackoverflow.com/questions/1106638/starting-stopping-a-launchd-agent-for-all-users-with-gui-sessions ? <comment238468> `cron` has a option `load : be verbose when loading crontab files`. So it's confusing `launchctl`'s `load` options with it's own.  Try using $() or ` around the command. <comment238748> @user14492 I don't think that's it because, despite my example above attempting to execute launchctl directly via cron, it actually is cron calling a bash script (`~/bin/run.sh`) which contains the launchctl commands. <comment239959> Modify your question with the content of run.sh and the plist you want launchd to load. <comment239964> isn't launchctl started by root, and cron by the user? <comment240183> Updated with link to script and plist. <comment240268> How does one supply `sudo` a password if the script is not interactive? Another suggestion is to avoid using tilde `~` expansion in your crontab because the `HOME` variable can be overridden. Use `/Users/$LOGNAME` or you can use `/Users/$USER` for a crontab. `USER` is exclusive for BSD systems. <comment240624> Running `sudo` non-interavtively with `ALL=(ALL) NOPASSWD: ALL` in `/etc/sudoers`. And `~` works fine, that's not the problem. <comment240626> @mateusz-szlosek, your suggestion to use `bsexec` seems to be working. If you'd be willing to write this up with details as an answer I can award the bounty.