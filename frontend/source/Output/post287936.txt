Why use ps -ef check the process every time the pid will change? <body> I use the codeps -ef/code to check the process, but every time the pid will change, you see the below, code1726/code- code1728/code-...  precodeaircraftdeMacBook-Pro:etc ldl$ ps -ef | grep safira   501  1726   527   0 10:14上午 ttys000    0:00.00 grep safira aircraftdeMacBook-Pro:etc ldl$ ps -ef | grep safira   501  1728   527   0 10:14上午 ttys000    0:00.00 grep safira aircraftdeMacBook-Pro:etc ldl$ ps -ef | grep safira   501  2298   527   0 11:18上午 ttys000    0:00.00 grep safira aircraftdeMacBook-Pro:etc ldl$ ps -ef | grep safira   501  2301   527   0 11:18上午 ttys000    0:00.00 grep safira /code/pre  <answer287937> Every time you run this in Terminal two new processes for codeps/code and codegrep/code are created, run to do their job and then terminated successfully. So each invocation gets new PIDs.   hr  To properly exclude the process emgrep search_string/em from grep'ing for emsearch_string/em in the ps result use:  precodeps -ef | grep -v grep | grep search_string /code/pre  or  precodeps -ef | grep [s]earch_string /code/pre  e.g. codeps -ef | grep -v grep | grep safira/code or codeps -ef | grep [s]afira/code  <answer287982> The codeps ... | grep .../code pipeline can often be replaced with codepgrep/code (or codepkill/code) which unlike the pipeline are clever enough not to match themselves:  precodepgrep safira /code/pre  <comment363597> I use the `pgrep safira`, gets nothing. <comment363600> @aircraft and neither did `ps ... | grep ...` which only managed to incorrectly match itself.