Bash script - Delay cp command until after file write is complete <body> precodecp /Folder1/*.mov /Folder2/ cp /Folder1/*.mov /Folder3 rm /Folder1/*.mov /code/pre  This runs every 60 seconds using Chron that copies any *.mov file from one folder to 2 other folders and then removes the file.  If the file takes longer than 60 seconds to write the script executes and copies anything in the folder and corrupts it. (Or if the script just happens to execute when a file is being written.)  How can I make a conditional statement to make the script wait until the file write is complete?  <answer198774> h1Lock File/h1  Consider creating a lock to note the ongoing copy, see lock your script (against parallel run):  precode#!/bin/sh  # Path to a lock folder LOCK_PATH="/tmp/copying.lock"  # Ensure the lock is removed should the copy fail trap 'rmdir "/tmp/copying.lock"; exit' 1 6 15  if mkdir "$LOCK_PATH"; then     # Lock file did not exist and was created      # Perform commands     cp /Folder1/*.mov /Folder2/     cp /Folder1/*.mov /Folder3     rm /Folder1/*.mov         # Remove the lock     rmdir "$LOCK_PATH" fi /code/pre  The script above only copies if no folder exists at code/tmp/copying.lock/code.  h1Copy and Move/h1  Instead of copying directly to the final location, consider making the copy to a temporary location. Then move the files. A move is fast, tends to be atomic, and less likely to damage the files.  Alternatively, you could copy using a tool like codersync/code which includes flags to help protect against these problems.  <comment237746> Maybe use Folder Actions instead? For example: http://www.simplehelp.net/2007/01/30/folder-actions-for-os-x-explained-with-real-world-examples/  You can create them using Automator.app <comment237750> Are you copying the files to the same filesystem? <comment237759> I would use rsync rather than cp (or even just mv) <comment237813> This is part of a system we use to allow external clients to view preview renders of projects. The idea is that we drop an *.mov file into this folder, and it copies it to another folder that Adobe Media Encoder watches, and then auto-encodes a smaller file, then copies that file to a Dropbox folder for clients to preview. <comment237814> Same file system, Ive tried using Automator but without much luck... <comment237815> The best option Ive seen so far is to use LSOF. But my code-foo is weak and I dont know how to put these commands into a conditional loop using LSOF. <comment237816> http://askubuntu.com/questions/14252/how-in-a-script-can-i-determine-if-a-file-is-currently-being-written-to-by-ano <comment237819> One last question- Is the filesystem HFS+? <comment237831> This is on an XSAN fiber channel system. Im not sure if that properly answers the question... I dont believe XSAN uses HFS. My knowledge is limited. <comment237848> Why not use mv - data does get copied just the pointer to the file so will run in less than 60secs <comment237851> I would propose the following algorithm having a better understanding of your requirement. Take a snapshot of the .mov files available in Folder1 and move them to a temporary folder (hint- use find). Files are then copied to their respective folders from the temporary folder and the temporary folder and its files are then unlinked. This should stop any collision if cron (note the spelling) starts another instance of your cron script. <comment237974> Thanks fd0, that sounds good and would probably solve my problem. I guess my issue is that I dont really know how to implement that....The idea I had was to use lsof to create a conditional loop like this?  If any process is using any file in X folder echo "Waiting 10 seconds..." wait 10 seconds else do cp cp rm <comment237992> Your script is missing a trap or the script could dead lock if it exits abnormally. Something like `trap 'rmdir /tmp/copy.lock; exit' 1 6 15` <comment237993> Thank you @fd0. Please feel free to edit and add in the line. <comment238019> I will give this a shot and report back in a little bit. Thank you Graham, fd0 and others who have helped!  Here goes! <comment238051> Hey guys, so I tried this out, but I might be doing something wrong. It wont run the way I have it unless I manually create the /tmp/ folder in the directory. <comment238052> Also it doesnt delete the /copying.lock folder either, maybe Im pointing to the variable wrong? <comment238053> Ah ok, updated the trap line to trap 'rmdir "$LOCK_PATH"; exit' 1 6 15 and that partially fixed it, but for some reason the rm -f "$LOCK_PATH" isnt working... <comment238055> For now, try removing the `trap` line entirely. It is there only in case of problems. The final `rm -f` is responsible for removing the folder – after the successful copy. <comment238057> To help debugging, create a text file containing your complete script and added the suffix `.command`. Next double-click the text file to see it launch in Terminal.app. You should be able to better see problems. When that works, you can integrate it into Chron. Alternatively, I can solve this with a [Power Manager](https://www.dssw.co.uk/powermanager/) event – which I wrote. <comment238058> Lock file did not exist and was created, Copying... cp: /Volumes/PROOFS_WATCH/*.mov: No such file or directory cp: /Volumes/PROOFS_WATCH/*.mov: No such file or directory rm: /Volumes/PROOFS_WATCH/*.mov: No such file or directory rm: /Volumes/PROOFS_WATCH/copy.lock: is a directory logout  [Process completed] <comment238059> #!/bin/bash  # Path to a lock folder LOCK_PATH="/Volumes/PROOFS_WATCH/copy.lock"  # trap 'rmdir "$LOCK_PATH"; exit' 1 6 15  if mkdir "$LOCK_PATH"; then     echo "Lock file did not exist and was created, Copying..."      # Perform commands     cp /Volumes/PROOFS_WATCH/*.mov /Volumes/PROOFS_WATCH/AME_Processing/  cp /Volumes/PROOFS_WATCH/*.mov /Volumes/PROOFS_TV  rm /Volumes/PROOFS_WATCH/*.mov       # Remove the lock     rm -f "$LOCK_PATH" fi <comment238060> Please can you start a new question. That will help with formatting and attract more attention. <comment238062> Sure, no problem, pretty new to scripting and stack exchange...