ctrl-o behavior in Terminal.app <body> I often use the kbd⌃/kbd+kbdO/kbd shortcut in bash (from "Learning the bash Shell"):     [G]o back to [a command in history] and press kbd⌃/kbd+kbdO/kbd instead of kbd↩/kbd. This will execute the command and bring up the next command in the history file. Press kbd⌃/kbd+kbdO/kbd again to enter this command and bring up the next one.   It seems this shortcut is not available on OS X; kbd⌃/kbd+kbdO/kbd simply does nothing. A web search turns up the suggestion to use the code!/code bash builtin, but I don't see how I can accomplish the same thing as kbd⌃/kbd+kbdO/kbd with it.  Is it possible to somehow get kbd⌃/kbd+kbdO/kbd behavior in Terminal.app on OS X?  <answer3254> codeman bash/code might help. The "READLINE" and "Readline Key Bindings" talk about binding the key presses available and how to set up readline's defaults.  Also Bash Emacs Editing Mode Cheat Sheet and Working Productively in Bash's Vi Command Line Editing Mode (with Cheat Sheet) are good for figuring out what keypress does what if you are using vi mode instead of the default emacs. In either case codebind -P | grep found/code will show you what key combinations are configured in vi mode and codebind -P/code will show everything available.  <answer3255> kbd⌃/kbd+kbdO/kbd is, for some reason (probably having to do with it being used for flow control on some kinds of serial connections) set to be discarded by the terminal driver (i.e. not Terminal.app, but the part of the OS between it and the shell).  You can get rid of this with the command codestty discard undef/code.  To make this change permanent, add this command to your .bash_profile and .bashrc files.  <comment2937> Thanks for the tip, that did it! <comment2938> Wow, I had no idea there was vi-mode available in bash! This is beyond sweet. Thanks! <comment2965> I felt the same way when I discovered it was available. <comment4500> me too me too :)