How to create a universal (script) file for a Mac, based on several Terminal commands <body> I have several Terminal commands I use for troubleshooting purposes, by typing them in one by one into the terminal window.  These commands require the user's password to be entered.  I'm looking for a way to create a universal (script) file with these commands. I want to be able to run the file on a Mac just by double-clicking on it or dragging the file over the Terminal icon.  I have never done anything like this before. Is there any way to create such a script? Please advise.  <answer277044> h2Short answer/h2  A code.command/code script should do the trick  hr  h2Step-by-step/h2  ol liOpen TextEdit and create a new file/li liConvert it to plain text by clicking Format  Make Plain Text/li liAdd your commands, one per line. For example, you could do:br code#! /bin/bash cd ~/Desktop mkdir myCoolFolder cd myCoolFolder/code/li liRun codechmod u+x ~/Desktop/myCommandScript.command/code in your terminal, where code~/Desktop/myCommandScript.command/code is the path to your script. This will give the terminal permission to run the file./li liYou're done!  Double-click the file to run. Dragging over the terminal icon will also work. /li /ol  h2Notes:/h2  ul liIf you need to do something that requires root (admin) access, you can prefix your command with codesudo/code. When the script runs, you'll have to enter your password (and be an administrator)/li liIf the end user isn't an administrator, but you need to do something that required root access, you can use codesu someAdminName/code, which will perform the command as codesomeAdminName/code (you'll need his password)./li /ul  subYou can also see here on Stack Overflow for a bit more information./sub  <answer277045> A script is just a series of commands, so you could put it into a bash script.  precode#!/bin/bash  command 1 command 2 command 3 /code/pre  Now, this all depends on the they types of command and whether or not they require user intervention.    However, if you are getting diagnostic info, for example, you can have a script that does   precode#!/bin/bash  # Get SMART status of main drive diskutil info disk0 | grep -i smart  # Get the model of the machine in question system_profiler SPHardwareDataType | grep -i Identifier /code/pre  Those are just to examples.  Keep in mind that any output generated, will get sent to the console (screen).  However, you can redirect the output to a file by appending code&gt;&gt; /path/to/outputfile.txt/code at the end of each command so you have a file which you can parse once the file has finished running.  You can name the file codediagnostics.sh/code and place it anywhere you like.  Just make sure you make it executable by issuing the command codechmod +x diagnostics.sh/code and use code./diagnostics.sh/code to execute it or strongdouble click on it to run it if it's saved to your desktop/strong.  <comment348735> Do you mean to ask that you want to run a  script **without** having the user enter their password? <comment348738> @Allan I want to run _one file_ instead of _multiple commands_.  Running it without having the user enter their password at least once would be good, but most likely impossible if I'm not mistaken. <comment348746> That's definitely possible unless you need to do something that requires admin -- see my answer below