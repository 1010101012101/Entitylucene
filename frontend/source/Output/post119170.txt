Homebrew - Upgrading software in /usr/bin <body> My OS X comes with a version of Git installed in code/usr/bin/code. However, this version is older than the official stable one. I would like to upgrade it.   Can I use Homebrew to upgrade this version? Or would Homebrew install Git in a separate location (and if I do so, how can I ensure that the new version is actually used)?  <answer119176> Don't replace, modify or rename the system tools in /usr/bin. There are a number of reasons why this is a bad thing, and you can search for the specific reasons, but to be simple, don't edit the system versions.  Homebrew knows this, and that's why it stores the tools in /usr/local/bin. This version is used instead of the system version since Homebrew requests that its directory be before the system path in the $PATH variable.  Run codebrew doctor/code and you'll probably get a message like this:     Warning: /usr/bin occurs before /usr/local/bin This means that system-provided programs will be used instead of those provided by Homebrew. The following tools exist at both paths:  precodeeasy_install easy_install-2.6 /code/pre      Consider amending your PATH so that /usr/local/bin is ahead of /usr/bin in your PATH.   To fix this, either add this to your profile:  precodeexport PATH=/usr/local/bin:$PATH /code/pre  …or add code/usr/local/bin/code to the top of /etc/paths, such as:  precode/usr/local/bin /usr/local/sbin /usr/bin /bin /usr/sbin /sbin /code/pre  <answer119181> Homebrew will install tools in code/usr/local/bin/code so that it doesn't mess with the system tools that came pre-installed on your Mac. As grgarside mentioned, it's not recommended to alter the system tools.  Here are more specific and detailed instructions for setting the PATH environment variable, which allows you to list several directories that you want your Mac to search in when looking for executables.  In order to use the latest version of git, or any other tool you installed in code/usr/local/bin/code with Homebrew, you want to tell your Mac to first look in code/usr/local/bin/code before it looks in the default code/usr/bin/code. You do that by defining the codePATH/code in your code.bash_profile/code, which is a file that gets loaded automatically every time you open a new Terminal window.  You can write the PATH to your .bash_profile by running this one-liner from the Terminal:  codeecho 'export PATH="/usr/local/bin:/usr/local/sbin:~/bin:$PATH"' &gt;&gt; ~/.bash_profile/code  This command takes everything between the single quotes code(echo)/code and adds it code(&gt;&gt;)/code to a file called code.bash_profile/code in your user’s root (or home) directory code(~/)/code.  To have these changes take effect, you can either quit and relaunch Terminal, or run this command:  codesource ~/.bash_profile/code  If you want to do it all manually, open your code.bash_profile/code with your favorite editor, then add this line to it:  codePATH="/usr/local/bin:/usr/local/sbin:~/bin:$PATH"/code  and save it. Then quit and relaunch Terminal.  Unlike grgarside, I do not recommend changing the code/etc/paths/code file, because you would be making a strongglobal/strong change, as opposed to a change that only affects your personal code.bash_profile/code, and only while you're in a bash shell.  <comment138968> You had several questions in here. This site works better when there is only one question per question. That way, it's easier for other people to find solutions if they have the same problem. I've edited out your other questions, but feel free to ask it separately. <comment138969> See http://apple.stackexchange.com/questions/63946/disabling-usr-bin-svn-to-use-brew-installed-svn for part of the answer <comment138991> possible duplicate of [Amending PATH so that /usr/local/bin is ahead of /usr/bin](http://apple.stackexchange.com/questions/49389/amending-path-so-that-usr-local-bin-is-ahead-of-usr-bin) <comment139010> Thanks - Is there a reason why you would recommend editing the variable PATH directly as opposed to adding the relevant lines to `/etc/path` (as in the other answer)? <comment139045> Hi. I edited my answer to explain why I don't recommend changing /etc/paths. See the last paragraph.