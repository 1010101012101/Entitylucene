How to figure out what is causing the ownership of /usr/local to change from my-username to root <body> I use codehomebrew/code as a package manager for certain web development app. To keep codebrew/code up-to-date I run codeupdate brew/code every couple of days and also run codebrew doctor/code. Usually, this is fine and codebrew/code tells me I'm ready to brew.  Every now and then, however, I get the following error:     Warning: /usr/local/etc isn't writable.      This can happen if you "sudo make install" software that isn't managed by   by Homebrew. If a formula tries to write a file to this directory, the   install will fail during the link step.      You should probably codechown/code /usr/local/etc      Warning: The /usr/local directory is not writable.   Even if this directory was writable when you installed Homebrew, other   software may change permissions on this directory. Some versions of the   "InstantOn" component of Airfoil are known to do this.      You should probably change the ownership and permissions of /usr/local   back to your user account.   It's easy enough to reset the permissions back to my username. Afterwards codebrew/code seems to be fine.  But what is causing this to happen?  Is there a log that shows what is causing the permissions to change?  <answer207853> Have you used codeDisk Utility/code select codeMacintosh HD/code then run codeVerify Disk Permission/code and then codeRepair Disk Permission/code if needed, rather than doing it manually?  Now this shouldn't fix on your issue, but it's a good 'known' starting point to see when home-brew changes the permissions.  It could show up the underlying issue if you are luck.  Also codenew update -v/code for more verbose output, plus old logs are here code~/Library/Logs/Homebrew/code as per Where does homebrew log?  <answer207865> I have just a rough idea how get the permission thief. This is not a solution to your problem, but more some sort of workaround.  What about writing a watchdog in Automator or with Hazel (folder actions) for watching this particular folder but instead of adding a function like Scale images you just use a shellscript which executes several shell commands:  ul liIf the folder is changed in any way, just snapshot the permissions and the currently accessing process id with codefuser &lt;foldername&gt;/code./li lithen you lookup in the process table the process id (codeps auxwwwwww | grep &lt;process id&gt;/code) and finally/li liwrite an email to yourself with these collected informations./li /ul  Unfortunately I am no Automator sadhu, but I found out by Google there are plenty of solutions for such a similar problem.  <answer207899> This is a side effect of updating your system; OS X probably does some across-the-board permission "repair" during the update process as /usr/local is nested in a root-owned folder.  <answer207975> Turns out Filewave is the culprit. Filewave is a system management software used by our school to push software updates. Thanks for the input.  <answer209475> I had this exact same issue, and it turns out Sophos auto-update was to blame. I figured this out by running: codesudo fs_usage | grep "usr/local"/code  It took a while, but eventually I saw Sophos's helpfully named "Installation" daemon messing with /usr/local's permissions.  I'm still trying to figure out an appropriate work around for this behavior.  EDIT: I believe Sophos has fixed this issue, see the link in the comments of this answer. It seems to be fixed for me at least!  <answer223355> If you use Time Machine, you can find the approximate time when permissions changed by exploring codeBackups.backupdb/code in Terminal. Use codels -ld/code in the timestamped folders, e.g.  precodels -ld /Volumes/Backup/Backups.backupdb/Mac/2015-12-25-120000/Macintosh\ HD/usr/local  /code/pre  Which will show owner and group information.  Once you have the date the change occurred, you can sleuth out what else might have changed then on your system. A simple technique is to use Finder's File â€º Find and add a codeLast modified date/code criterion. Other good tools are codefind/code and codemdfind/code in Terminal.  <comment250265> No log but note that having /usr/local owned by rood is the Unix standard and so any build into there will expect it. Solution is don't mix a directory with both package manager (Homebrew) and standard Unix compilation - Use another directory for one of them <comment250277> Adding software to the same location as a package manger uses is a bad idea, and so is changing the ownership and permissions on `/usr/local`. But if you insist then you could `make install` without using `sudo` for packages that you install yourself. <comment250325> @Mark I also have this issue. It happens to me randomly, even when I haven't installed anything since I last had the issue. <comment250334> @Others we need more info and another question re that problem <comment250349> @Mark Isn't that this question? Where does it say that the issue involved software other than the software that is installed/upgraded by homebrew? <comment250387> http://apple.stackexchange.com/questions/1393/are-my-permissions-for-usr-local-correct <comment250400> Upgrading OS X usually resets /usr/local ownership and permissions. <comment250452> @Others ah I read the quote from Homebrew rather than the question <comment250797> What else did you install (manually or through any other package manager) on your Mac which was configured to default install in `/usr/local`? <comment250799> `Disk Utility` wouldn't verify or repair permissions on `/usr/local` since this directory doesn't exist on a new install of Yosemite. <comment250809> I checkd this hypothesis fully on Yosemite by creating a new `/usr/local` belonging to me, and running `DU`. There isn't any `/usr/local` within the `DU` log. And `/usr/local` still belongs to me. <comment256458> There's a discussion here: https://community.sophos.com/products/free-antivirus-tools-for-desktops/f/17/t/10029 This should be fixed in November 2015 <comment256493> @JoeZuntz Nice find! Awesome that they actually are pushing a fix. <comment257855> AFAICT, upgrading to El Capitan is what caused the problem for me <comment260594> @others thanks for this info. I was able to fix everything after upgrading to 10.11.1 and got homebrew working again, but more often than not, each time I went to do a brew upgrade, the permissions had changed again. It was bugging me what software kept changing the perms on /usr/local. <comment260660> @TimX Yeah it kinda sucks... Luckily it looks like Sophos is patching it at the end of next week, November the 20th.