Find specific apps by name, getting their version, via command line <body> For a support information gathering tool, I like to be able to look up several apps by name (or rather by their bundle ID) and fetch their versions.  I don't like to use the codefind/code command for this as that's not going to find all possible apps, or it'll take forever.  There's codelsregister -dump/code, which knows about all those apps that interest me, but that command seems to offer no option to look up information only about specific apps. I'd have to filter the result with grep, but can't figure out how to filter it so that I can look for an app's bundle ID but also get the version (which appears in a different line).  There's also codemdfind/code, which might be suitable for my purpose.  Let's, for instance, say I want to know about all installed "Word" apps, such as the 2008, 2011 and 365 versions.  With codelsregister -dump | grep 'com\.microsoft\.Word'/code, I'd get these lines:  precodeidentifier:    com.microsoft.Word (0x800460c2) activityTypes: NOTIFICATION#:com.microsoft.Word, pv-e851f8544284d1 /code/pre  That's not helpful to inquire the version, is it?  With codemdfind "kMDItemCFBundleIdentifier == com.microsoft.Word"/code I'd get the paths:  precode/Applications/Microsoft Office 2008/Microsoft Word.app /Applications/Microsoft Office 2011/Microsoft Word.app /code/pre  But how would I get the version from that? I thought I'd filter the resulting paths with codexargs/code but that doesn't work with the spaces in the paths.  <answer261037> The version might be as easy as:  precodemdls -name kMDItemVersion /Applications/Microsoft\ Word.app/ /code/pre  The find is also easy with spotlight:  precodemdfind "kMDItemKind == 'Application'" | head /code/pre  Above I only got the first 10 responses with the code| head/code command. You would need to chose a scripting language or idiom to handle the passing of the results from the find to the examination of the version. Or you could put them in temporary files. You'll need to handle spaces in the file names or just copy / paste things once you see which list of apps you need.  <answer261042> A solution using codemdfind/code and codemdls/code as a one-liner:  precodemdfind "kMDItemCFBundleIdentifier == com.microsoft.Word" | while IFS= read -r path ; do echo "$path"; mdls -name kMDItemVersion "$path"; done /code/pre  This would print (if both Office 2008 and 2011 are installed):  precode/Applications/Microsoft Office 2008/Microsoft Word.app kMDItemVersion = "12.3.6" /Applications/Microsoft Office 2011/Microsoft Word.app kMDItemVersion = "14.6.9" /code/pre  That's good enough for my needs. I still wonder if there's a way to get the information from lsregister or a similar tool that looks into the Launch Services registry.      <answer261048> There is a fast way to look which version is installed for all apps from a particular folder.  Taking an example, strong/Applications/strong folder:  precodefind /Applications/*/Contents -iname "Info.plist" -maxdepth 1 -exec defaults read {} CFBundleExecutable \; -exec defaults read {} CFBundleVersion \; /code/pre  This will print app's name and version.  To print app's name:br codedefaults read nameOf.app/Contents/Info.plist CFBundleExecutable/code  To print app's version:br codedefaults read nameOf.app/Contents/Info.plist CFBundleVersion/code  If you need just for one particular app just change codefind/code search.  Anything like this:  codefind /Applications/*Word/Contents -iname "Info.plist" -maxdepth 1 .../code  To use this, you just must know app's folder location.  <comment326839> Yes, I could use `mdls` to get the version. But how do I get the path when I don't know it? I want to find any app that matches a specific bundle ID, not a hard-coded path. And I suck at shell scripting, so I am still stuck at figuring out how to pass the list of paths to mdls <comment326844> You can read from `*.app/Contents/Info.plist` file. I'll provide a answer with details. <comment326845> Parsing the Info.plist is overkill, I think, though. <comment326851> `defaults` is your friend ;) <comment326855> @bmike You want more or less which will page the output head takes the first 10 lines by default <comment326859> Yes, that works, but that's not at all what I asked, or meant to. A user may place the app anywhere, not just in the Apps folder. It may even be on a different volume. Hence, `find` is not a good solution. And it's slow, which I already pointed out as well as a no-go. <comment326867> @ThomasTempelmann, I know that, but once you find where is the .app with `mdfind` (or anything else), just run `defaults read /full/path/toAn.app/Contents/Info.plist CFBundleVersion` and you get the version, as I pointed as a comment in our question. I understood that, the main problem is get app's version, not the location. Right?