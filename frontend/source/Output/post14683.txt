How to cd to a directory with a name containing spaces in bash? <body> I tried codecd "~/Library/Application Support/" -bash: cd: ~/Library/Application Support/: No such file or directory/code  also codecd ~/Library/Application Support/ -bash: cd: ~/Library/Application Support/: No such file or directory/code  <answer14684> You can use the kbdTab/kbd key after pressing the first few characters (this will then "fill in" the rest of the folder for you e.g. type codecd ~/L/codekbdTab/kbd fills in codecd ~/Library//code then type codeAp/codekbdTab/kbd and it will fill in the rest for you.  If there is a space between words and you don't want to use the methods above, put a code\/code (backslash) before the space, e.g. codecd ~/Library/Application\ Support/code.  <answer14685> You need to escape the space in "codeApplication Support/code"  Try code$ cd ~/Library/Application\ Support//code  <answer14691> The core issue here is how the shell (embash/em) does quoting and how that affects tilde expansion and splitting into “words” (arguments for the program being run).  embash/em only treats the leading tilde specially if it is not quoted. In addition, the following slash must also not be quoted.  At the same time, embash/em parses command lines into “words” based on non-quoted whitespace. The codecd/code command typically requires exactly one argument (the destination directory). A command line like codecd foo bar/code means to run codecd/code with two arguments: codefoo/code and codebar/code. If you only wanted to send a single codefoo bar/code argument, then you need to quote the space:br (e.g.) codecd foo\ bar/code (see more quoting example below).  In your particular situation, you need to leave the tilde and the following slash unquoted while quoting the space in the directory name. Your codecd "~/Library/Application Support/"/code trial ends up quoting too much (the tilde and its slash), while your codecd ~/Library/Application Support//code trial quotes too little (it omits quoting the space in the directory name).  The most common solution is to use single-character escaping to quote just the space:  precode    cd ~/Library/Application\ Support /code/pre  You can also use single or double quotes around either just the space or the space and some other bits of that argument (but not the code~//code!):  precode    cd ~/Library/Application' 'Support     cd ~/Library/Application" "Support     cd ~/Library/App'lication 'Support     cd ~/Library/Application" Supp"ort     cd ~/'Library/Application 'Support     cd ~/"Library/Application "Support /code/pre  These kinds of quotes have different meanings, but they are identical in these examples. Single quotes protect literal strings while double quotes allow various expansions and substitutions in the quoted region.  Often, you can just let the shell do the work for you.    ul liGlobbing (wildcards):  precodecd ~/L*/Ap* /code/pre  You can use codeshopt -s nocaseglob/code to make globbing case insensitive:  precodecd ~/l*/ap* /code/pre/li liCompletion:  Pressing kbdTab/kbd after entering codecd ~/L/code will probably expand it to codecd ~/Library//code.br Pressing kbdTab/kbd again after entering codeAp/code (you now have codecd ~/Library/Ap/code) will probably expand it to codecd ~/Library/Application\ Support//code (the shell automatically inserted the escaping backslash).  You can use codebind 'set completion-ignore-case on'/code to make completion case insensitive:  codecd ~/l/code kbdTab/kbd → codecd ~/Library//code; codeap/code kbdTab/kbd → codecd ~/Library/Application\ Support//code/li /ul  <answer14707> You can alternatively just drag a folder to the Terminal window too, the complete file/folder path will be auto-pasted on drag.  <answer59900> When you double-quote a path, you're stopping the tilde expansion. So there are a few ways to do this:  precodecd ~/"My Code" cd ~/'My Code' /code/pre  The tilde is not quoted here, so tilde expansion will still be run.  precodecd "$HOME/My Code" /code/pre  You can expand environment variables inside double-quoted strings; this is basically what the tilde expansion is doing  precodecd ~/My\ Code /code/pre  You can also escape special characters (such as space) with a backslash.  <answer179328> If the normal ways don't work, trying substituting spaces with code%20/code.  This worked for me when dealing with SSH and other domain-style commands like codeauto_smb/code.  <answer208009> Simple one  Example : Application Support is a directory  then   cd Application\ Support  <answer211485> cd 'iTunes Media' should work. I tested  <answer263414> The best way to go to any folder having spaces is, Type cd "New Folder" If you have the name of the folder as "New folder".  Tushar :)  <answer284558> You can try this for spaced folders/files by If the file or folder name contains 1)file name.extension  the command should be cd ~/file\ name.extension/ (or) cd ~/"file name.extension"/  <comment15797> Is the path case sensitive or insensitive? I can access Library by cd ~/library, but the tab method won't work if i got case wrong. <comment15798> @colinfang OS X is case insensitive, but case-preserving. The bash shell must be a bit more discriminating when it comes to autocomplete. <comment15799> @NReilingh - Aha, thx. <comment15800> @colinfang: You can use `shopt -s nocaseglob` and `bind 'set completion-ignore-case on'` to make *bash* less sensitive to case. <comment15804> nice answer @Chris.  How did you get the Tab characters to look like keys? <comment15805> @RobZ: It is the `kbd/kbd` HTML tag (one of several [HTML tags supported in SE markdown](http://meta.stackexchange.com/questions/1777/what-html-tags-are-allowed-on-stack-overflow-server-fault-and-super-user)). <comment15821> colinfang - For a case insensitive tab completion with bash compatibility try 'zsh'. Also the wildcard completion of this shell is very good. <comment250922> How does this differ from the at least three answers which already mention the same solution? <comment255286> How does this differ from the at least three answers which already mention the same solution? <comment358845> How does this answer differ or improve upon any of the other, similar, answers? <comment363898> Its the perfect terminal syntax for defining space and giving quotes is one of the user defined one and also using tab key does not take the name like 1)filename.ext 2)file name.ext While pressing tab for this type of name the auto completion of words are display upto "file" at that time we can use this backslash to define the space in terminal. @fsp <comment363907> All of that info should be in the Answer to show readers how it's different from the 9 other Answers, including the accepted Answer.