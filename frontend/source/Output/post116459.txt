Upgrade RVM and now PATH is broken <body> My codePATH/code no longer includes code/usr/local/bin/code even though it is the first line of code/etc/paths/code:  precode#/etc/paths /usr/local/bin /usr/bin /bin /usr/sbin /sbin /code/pre  $PATH:  precode$ echo $PATH /usr/bin:/bin:/Users/meltemi/.rvm/bin /code/pre  What changed? Well all was working fine until:  Recently updated RVM from 1.24.8 - 1.25.13 on an OS X 10.9.1 machine with codervm get stable/code  RVM warned me that there was "old stuff laying around" and to run codervm cleanup all/code, so I did.  Then I upgraded Ruby codervm upgrade 2.0.0-p353 2.1/code migrating gemsets along the way...  strongEdit:/strong   I'm using codezsh/code:  precode#~/.zshrc # Path to your oh-my-zsh configuration. ZSH=$HOME/.oh-my-zsh ... source $ZSH/oh-my-zsh.sh  # load RVM [[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm"   ## from brew info zsh #Add the following to your zshrc to access the online help: unalias run-help autoload run-help HELPDIR=/usr/local/share/zsh/helpfiles /code/pre  <answer116462> I can't guess where your problem lies, but here is how I would troubleshoot it.  ol liset aside your .zshrc file codemv ~/.zshrc ~/zshrc/code/li liopen a new terminal window, switch to bash/li licheck path (just to see if it shows any changes)/li lirun zsh in verbose mode codezsh -v/code/li /ol  Watch carefully on the /usr/libexec/path_helper output and consider running it by hand to see how your path is being assembled.  Once you have a good path, you can add back part or all of your .zshrc file and re-test.  <answer117480> It is not an issue with rvm, but with homebrew:  Since 15th of December 2013 zsh is not longer build with the code--enable-etcdir/code flag by default. Therefore code/usr/libexec/path_helper/code is no longer used to initialize code$PATH/code and all path in code/etc/paths/code as well as in code/etc/paths.d/code are completely ignored. (I know, I just found out myself and am speechless as well.)  Therefore either run codebrew update; brew reinstall zsh --enable-etcdir/code or add the following to your code.zshrc/code:  precodeif [ -x /usr/libexec/path_helper ]; then     eval `/usr/libexec/path_helper -s` fi /code/pre  For more information on why this was removed, check this ticket on github.  <comment136208> Are you using bash or zsh or another shell? Have you checked the .profile type files for syntax errors that are preventing /etc/paths from getting sourced? PATH=foo with foo not containing the pre-existing $PATH would be something to watch for. <comment136212> I'm using `zsh` and I don't see any obvious errors in `.zshrc` *(see edit above)* <comment136213> Good - there are only three places you could have a problem. The system, rvm or oh-my-zsh. My answer might assist in knowing if it's the system or one of the two additions you are running. <comment136215> did step 1. opening a new terminal window (zsh) and then typing `bash` to switch brought me a world of hurt with missing refs, etc. So tried just a blank `.zshrc` and new zsh terminal and now $PATH is even shorter: "/usr/bin:/bin". Like it's not referencing `etc/paths` at all!?! <comment136229> `/usr/libexec/path_helper` appears to be a binary file?!? unreadable. starting to think this problem may be at system level. why isn't `/etc/paths` being sourced? <comment136234> Oh - you run it `/usr/libexec/path_helper -s` and it parses the various files and spits out a path formed for bash in this case. See the man page for the options...