How can I successively trigger an AppleScript very quickly? <body> h2Background/h2  For fine volume adjustment I use the following AppleScript:  precodetry     do shell script "killall afplay" end try set currentVolume to output volume of (get volume settings) set volume output volume (currentVolume + 2)     -- play volume changing sound at new volume do shell script "afplay /System/Library/LoginPlugins/BezelServices.loginPlugin/Contents/Resources/volume.aiff" /code/pre  This will increase the volume by 2% and play the new volume once like usual.   h2Problem/h2  Using this script has disadvantages:  ul liWhen I trigger the script quickly multiple times in a row, it does not respond as quickly as the 'normal' volume change would./li liFor every execution the volume sound is played at full length./li /ul  It appears that my problem is due to a limitation of the stronghow the scripts are triggered/strong. E.g. When I use FastScript, it will not execute the script again embefore/em it has been finished. The same goes for Quicksilver.  However, when I assign the "lower volume script" to Quicksilver and the "louder volume script" to FastScripts I emcan/em trigger both scripts very fast after each other - so: the script is fine. I believe that my problem is due to how the scripts are triggered.  h2Question/h2  How can I successively trigger a script very fast?  <answer42370> How about adding an ampersand to the end of the codeafplay/code line so the scripted part plays in background? Like this  precodeafplay /System/Library/LoginPlugins/BezelServices.loginPlugin/Contents/Resources/volume.aiff &amp; /code/pre  <answer42385> Adding code&gt; /dev/null 2&gt;&amp;1 &amp;/code to the end of the codedo shell script/code command should work. This redirects the codestdout/code and codestderr/code of the codedo shell script/code command to code/dev/null/code and runs the shell script in the background, meaning that AppleScript no longer needs to wait for the command to return codestdout/code or codestderr/code before the AppleScript script can finish. That means that it finishes and can be run again much more quickly.  You also shouldn't need the codetry/code handler at the beginning. The following modified script should work:  precodeset currentVolume to output volume of (get volume settings) set volume output volume (currentVolume + 2) -- play volume changing sound at new volume do shell script "afplay /System/Library/LoginPlugins/BezelServices.loginPlugin/Contents/Resources/volume.aiff &gt; /dev/null 2&gt;&amp;1 &amp;"  /code/pre  I got this tip from MacScripter (an excellent resource for AppleScripting) in a post about running multiple instances of a shell script.   <comment48158> Did not help :( But thanks! <comment48161> I did get the syntax of that slightly wrong (quotes in the wrong place). It should have been `afplay /System/Library/LoginPlugins/BezelServices.loginPlugin/Contents/Resources/volume.aiff &`. Not saying that will help, just wanting to correct myself :-) <comment48174> Great job! Thanks!