sandboxd for CUPS backends in Mac OS X Yosemite <body> I am using a custom CUPS backend for printing on Mac OS X.  The backend works by forwarding the print data to another machine (using ssh) and feeding the data to the printer from there.  For this to work, the backend (implemented as a shell script), needs access to an ssh private key.  Problem: since I upgraded to Yosemite, the script can no longer access the file containing the key.  Instead I see the following error message on the console:  precodesandboxd: [...] deny file-read-data / /code/pre  and  precode/usr/libexec/cups/backend/.mybackend-ssh/id_dsa: Permission denied /code/pre  in the CUPS error log file.  How can I inject a file into the sandbox used to isolate CUPS backends?  <answer154092> After a long debugging session, I have finally solved this problem.  In case other people run into the same difficulties, here is what I learned about CUPS backends under Mac OS X Yosemite:  ul liBackends are executable files (in my case, a shell script) in the code/usr/libexec/cups/backend//code directory.  Information about the print job is passed into these programs via command line arguments (code$1/code=job-id, code$2/code=user, code$3/code=title, code$4/code=copies, code$5/code=options, code$6/code=file) and environment variables (eme.g./em code$DEVICE_URI/code)./li liBackends are executed as user code_lp/code, group code_lp/code, with permissions further restricted by sandboxd.  The current directory when the backend is started is the root directory code//code, but the backend does not have permission to read this directory.  Directories which can be read include code/usr/libexec/cups/backend//code,  code/etc//code and subdirectories thereof.  Only very restricted (or none at all?) access to the home directory of user code_lp/code (in code/var/spool/cups/code) is permitted./li liMy backend requires use of ssh.  For this to work, ssh needs to be able to access the private key required to log into the remote server, and a codeknown_hosts/code file which identifies the remote server.  The required key can be placed in code/usr/libexec/cups/backend//code or a subdirectory, it must be only readable by the user code_lp/code.  It seems that ssh, when started from the CUPS backend, has no permission to access code/var/spool/cups/.ssh//code, even if this directory exists; thus the codeknown_hosts/code file must be stored in code/etc//code, as code/etc/ssh_known_hosts/code.  (Note that the ssh manual page incorrectly claims that this should be code/etc/ssh/ssh_known_hosts/code.)  strongEdit:/strong On MacOS X 10.11 (El Capitan), ssh now seems to use the documented location code/etc/ssh/ssh_known_hosts/code for the known hosts file.  I had to move my file into code/etc/ssh//code to make the printer filter work after the OS upgrade./li liTo debug issues like this, using codecupsctl --debug-logging/code is invaluable:  After this command is issued, everything written to stderr in the CUPS backend appears in code/var/log/cups/error_log/code.  Logging can be switched off again using codecupsctl --no-debug-logging/code.  In addition, whenever sandboxd denies an attempted file access, a message like codesandboxd[426] ([15998]): sh(15998) deny file-read-data //code can be found in code/var/log/system.log/code./li /ul  <answer174603> While this doesn't answer the question, I stumbled across this - http://www.papercut.com/kb/Main/MacOS1010YosemiteKnownIssues - when trying to get Tea4CUPS working in OS X 10.10 (I was not able to achieve this):     To get PaperCut working with Mac OS 10.10 in the interim, you’ll need to disable sandboxing. Edit the file /etc/cups/cups-files.conf to include the new line ‘Sandboxing Relaxed’. Then restart CUPS for this to take effect.   precodesudo sh -c 'echo "Sandboxing Relaxed" &gt;&gt; /etc/cups/cups-files.conf' sudo launchctl stop org.cups.cupsd /code/pre  <comment183080> But I now have a problem, I want to interact with the user at the end of the process: open a web page (open "http://example.com") and it fails with the system.log saying "open(8612) deny file-read-data /". The problem may be that the user _lp is not allowed to interact with the user processes. Am I right? Can this be solved somehow? <comment183198> @staromeste I have no idea, everything I wrote I found by experimentation.  I looked for documentation about the use of sandboxd with cups, but didn't find anything.