Bash script for creating symbolic links <body> I am relatively new to bash and am having some trouble with a script I am trying to write. After spending the last hour or so researching and trying new techniques, I am still unable to do what I would like.  My goal is this: I have a folder code/Volumes/Server\ RAID/Photos/code where I keep all of my pictures. Each folder is titled codeYYYY-MM FolderName/code where there are sometimes spaces in codeFolderName/code. Within these folders are three folders: codeRaw/code, codeEdited/code, and codeFinal/code. My goal is to, with a single bash script, create symbolic links on my Desktop for each codeFinal/code folder AND rename it to its parent folder. Example: I would like code/Volumes/Server\ RAID/Photos/2016-10\ Fleet\ Week/Final/code to have a symbolic link on the Desktop named code2016-10 Fleet Week/code.  I have tried many different varieties of the code I have posted down below, but the code I have included was the most concise code (although it didn't work).  Code description:  ol licd to Desktop so that symlinks are created there/li liuse for loop to loop through folders/li licreate symlink - here is the problem: I need to include the folder name in the file path somehow, but also add code\/code before the spaces so that the command doesn't fail. HOWEVER, I have been getting error messages saying that there is no place called codeRAID/Photos/code which makes me think the script is stumbling on the first space, even with the backslash./li liChange name of codeFinal/code symlink to the folder name. (I assumed I didn't need full directories here because I'm already in Desktop  precodecd Desktop for f in /Volumes/Server\ RAID/Photos; do ln -s /Volumes/Server\ RAID/Photos/"$f"/Final mv Final $f done /code/pre/li /ol  strongQUESTION: Can someone please help me flush out this script? (I am mainly concerned with part three, but I wouldn't say no to help with the rest of it, either)./strong  <answer281040> When running into troubles with shell quoting, it always help to add codeecho/code statements in suitable places in your script to see what's going on.  Let's look at this line by line:  precodefor f in /Volumes/Server\ RAID/Photos; /code/pre  This only runs once, and sets codef/code to codeVolumes/Server RAID/Photos/code, which probably isn't what you want.  precodedo ln -s /Volumes/Server\ RAID/Photos/"$f"/Final /code/pre  codef/code is set to the full path (see above), so this expands to  precodeln -s /Volumes/Server\ RAID/Photos//Volumes/Server\ RAID/Photos/Final /code/pre  which (again) is not what you want to see here.  precodemv Final $f /code/pre  See above :-)  There are various ways to tackle this, but in your case I would to something like the following (to get around the challenge of having to extract the directory name from the source path)  precodecd /Volumes/Server\ RAID/Photos/ for f in *; do     if [ -d "$f" ]; then          if [ -d "$f"/Final ]; then             ln -s "/Volumes/Server RAID/Photos/$f/Final" ~/Desktop/"$f"         fi     fi done /code/pre  The two codeif/codes cover the cases where there are files in the source directory or the codeFinal/code directory is missing.  <comment353577> Put double quotes around the `$f` in the mv command. Even if it is properly escaped when put into the variable, it will expand into multiple words when you use it without quoting. <comment353581> @user3439894 good point! Question edited to reflect intent (only symlinks for final folders)