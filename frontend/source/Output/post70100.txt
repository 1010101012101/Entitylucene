Set inherited permissions on iLifeAssetManagement? <body> I have a second user account on my machine that is only used for iCloud syncing for my wife's apple id. In order to consolidate photostream photos I'm going to set up a process to pull new photos out of her photostream folder and import them into my iPhoto library.   But first, I have to alter permissions so I can see her photos from my user account. I've managed to set the permissions for the "everyone" user to see the photos from my user account, and that works for existing photos. But when new photos come in, they are set where only her account can see them.  Here is what I'm using. Hopefully someone can tell me what I'm missing. :-)  precodesudo chmod -R +a "everyone allow read,write,execute,append,readattr,readextattr,readsecurity,writesecurity,file_inherit,directory_inherit" '/Users/Wife/Library/Application Support/iLifeAssetManagement/assets/sub' /code/pre  Thanks.  <answer71788> Not sure whether on OSX you are supposed to state explicitly codelist/code,codesearch/code for directories. Strictly speaking, coderead/write/execute/append/code do not apply to directories, only to files.  hr     bmike: This seems both wrong and not an answer. Of course permissions affect directories and directories are just a type of files. Can you improve this or should it just be deleted?   @bmike: of course standard UNIX permissions do apply to both files and directories irrespectively. But ACL's do not. Just have a look at codeman chmod/code: you will then realize that there are  ul liactions for strongboth files and directories/strong (codedelete/code, code[read]/[write]&amp;[ext]attr/code, code&lt;read&gt;/&lt;write&gt;&amp;security/code, codechown/code)/li liactions for strongdirectories only/strong (codelist/code, codesearch/code, codeadd_&amp;[file]/[subdirectory]/code, codedelete_child/code)/li liactions for strongfiles only/strong (code[read]/[write]/[append]/code, codeexecute/code), as well as/li liinheritance flag for strongdirectories only/strong (code[file]/[directory]&amp;[limit]/[only]&amp;_inherit/code)/li /ul  So this proves that the answer is not wrong.  Is this an answer, btw? Yes it is, in that it hints that the user is not giving the directory the proper ACE's.  After all, I think that the user's question and bmike's comment point out to the fact that emACL's are tricky and somewhat misunderstood/em. Personally, I dropped them completely, and reverted to using standard UNIX perms wherever possible.  This leads me to suggesting the user an alternative approach, which is what I will do in a separate answer.  <answer71858> I would try to avoid ACL's: they are tricky and often behave unexpectedly.  If I were you, I would try strongstick to standard UNIX permission/strong, following these guidelines:  ol liCreate a user group (say, codeMeAndWife/code)/li liMake sure users codeMe/code and codeWife/code are the ones and only members of codeMeAndWife/code/li liChange group ownership of codesub/code directory to codeMeAndWife/code by something like codechgrp -hR MeAndWife '/Users/Wife/Library/Application Support/iLifeAssetManagement/assets/sub'/code/li liGrant the owning group members the same permissions which are granted to the owning user: this may be obtained in several ways, but one that I like is by running codefind '/Users/Wife/Library/Application Support/iLifeAssetManagement/assets/sub' -group MeAndWife -and -perm -u=r -and -not -perm -g=r -exec chmod -h g+r {} \;/code [this basically states: Find files/folders with owning group codeMeAndWife/code, for which owning user does have read permission, but owning group members do not; and give owning group members read permissions]. Of course you should repeat this step for write and execute permissions (just replace code-u=r/code and code-g=r/code with, respectively, code-u=w/code and code-g=w/code for write, code-u=x/code and code-g=x/code for execute)./li liFinally, I think that if you want to be able to emnavigate/em to the codesub/code directory from your account, then you need to make the full path to your codesub/code directory searchable by everyone. That means, run through codechmod o+x '/Users/Wife/Library'/code, codechmod o+x '/Users/Wife/Library/Application Support'/code, codechmod '/Users/Wife/Library/Application Support/iLifeAssetManagement'/code and codechmod o+x '/Users/Wife/Library/Application Support/iLifeAssetManagement/assets'/code/li /ol  That should do the job: new files in codesub/code emshould/em inherit group ownership (codeMeAndWife/code) and permissions (same as owning user). If you find that that is not the case, you could use codelaunchd/code in conjuction with a very simple script to fix file permissions periodically (say, hourly).  <comment83379> This seems both wrong and not an answer. Of course permissions affect directories and directories are just a type of files. Can you improve this or should it just be deleted?