check if storage is available and if it is execute a backup routine with passwordphrase <body> i installed restic backup program with homebrew and tested its performance. Its great. So i wold like to set up a automated routine. I tried to do it in automator with a workflow but because of the password check it aborts.  Maybe you wold solve different please let me know...  What im trying to get:  precode1. check if storage is available (usb storage attached) 2. execute restic -r /Volumes/usb-storage-name/restic-backups backup /Users/user/data 3. prompt the encryption key (or get it from keychain account restic?) 4. check again a day later... /code/pre  what i have tried: img src="https://i.stack.imgur.com/n6bD2.png" alt="enter image description here"  <answer272196> Steps 1, 2 and 4 are relatively straightforward and can be performed using codelaunchd/code (or codecron/code) to call a script.  My solution involves some setup, taken from this blog post:  Open codeKeychain Access/code (kbdâŒ˜/kbdkbdSpace/kbd codeKeychain Access/code), click on codePassword/code, then kbd+/kbd to create a new password. User coderestic/code for the codeKeychain Item Name/code and for the codeAccount Name/code. Enter the password you intend to use in the codePassword/code field (i.e. enter the same password you used when you ran coderestic init/code). Finally, click codeAdd/code to complete the set-up process.  ol licodelaunchd/code (or codecron/code) job runs every 24 hours and simply calls a shell script coderestic-backup.sh/code/li licoderestic-backup.sh/code checks if code/Volumes/usb-storage-name/code is mounted, and halts if it isn't. If the drive is mounted it then checks for the existence of the code/Users/user/data/code directory, and halts if the directory doesn't exist (it can't backup a non-existent directory!) If the backup volume is mounted and the source directory exists it then moves on to step 3.../li liIf the environment variable codeRESTIC_PASSWORD/code is set Restic will use its value instead of prompting for a password. coderestic-backup.sh/code will set codeRESTIC_PASSWORD/code using the codesecurity/code command and some coderuby/code magic:  precodeRESTIC_PASSWORD=$(security 2&gt;&amp;1 &gt;/dev/null find-generic-password -ga restic |ruby -e 'print $1 if STDIN.gets =~ /^password: "(.*)"$/') /code/pre  With codeRESTIC_PASSWORD/code set the script can now execute the backup:  precoderestic -r /Volumes/usb-storage-name/restic-backups backup /Users/user/data /code/pre/li liThe codelaunchd/code/codecron/code job from step 1 should run every 24 hours, covering step 4 as well./li /ol  coderestic-backup.sh/code:  precode#!/bin/bash  # USER CONFIGURATION:     resticuser=restic srcdir=/Users/user/data backupvolume=/Volumes/usb-storage-name backupdir=${backupvolume}/restic-backups  # Script vars: longname=$0 shortname=$(/usr/bin/basename "${longname}")  printf '%s %s (%s) running...\n' "$(date -u "+%Y-%m-%d %H:%M:%S")" "${shortname}" "${longname}"  if [[ ! -d "${srcdir}" ]]; then     printf '%s %s does NOT exist.' "$(date -u "+%Y-%m-%d %H:%M:%S")" "${srcdir}" &gt;&amp;2     exit 1 else     if [[ $(mount | grep "${backupvolume}") ]]; then         # See: http://blog.macromates.com/2006/keychain-access-from-shell/         # Parse output of 'security' and set RESTIC_PASSWORD:         export RESTIC_PASSWORD=$(security 2&gt;&amp;1 &gt;/dev/null find-generic-password -ga ${resticuser} |ruby -e 'print $1 if STDIN.gets =~ /^password: "(.*)"$/')         # Run backup, capturing output in case of error:         output=$(restic -r ${backupdir} backup "${srcdir}")         error=$?         if [[ "${error}" == "0" ]]; then             printf '%s Restic backup completed successfully.\n' "$(date -u "+%Y-%m-%d %H:%M:%S")"         else             printf '%s Restic backup failed: error code: %s, error: %s\n' \                     "$(date -u "+%Y-%m-%d %H:%M:%S")" "${error}" "${output}" &gt;&amp;2         fi     else         printf '%s %s is NOT mounted.' "$(date -u "+%Y-%m-%d %H:%M:%S")" "${backupvolume}" &gt;&amp;2         exit 1     fi fi  printf '%s %s ended.\n' "$(date -u "+%Y-%m-%d %H:%M:%S")" "${shortname}" /code/pre  <comment342119> I've tested this using a USB hard-drive (and with much more extensive logging) - errors may have crept in to the script when I changed my own user config and ripped out the chatty logging. Let me know if you run into problems. I haven't tested this with `launchd` but could fairly quickly throw together a `launchd plist` if you need one. <comment343928> Perfect! That runs smoth. I made a follow up Question here: http://apple.stackexchange.com/questions/273557/check-if-storage-is-available-and-if-it-is-execute-a-backup-routine-with-passwor Maybe you can help me on this addon...?