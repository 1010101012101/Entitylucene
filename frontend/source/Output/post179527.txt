Check if an OS X user is an administrator? <body> In a script, how can I check if user "Bill" is a member of the admin group (group 80)?  I plan to use this in a script to check if he is and if he is not, make him an admin user.  <answer179530> See the man page for id.  precodeid -G user  /code/pre  will output a space delimited list of groups for a particular user. You'd have to detect 80 in the output list.  <answer179531> Another way:  precodeif groups username | grep -q -w admin;  then      echo "Is admin";  else      echo "Not admin";  fi /code/pre  ul licodegroups username/code will show all username groups./li licodegrep -q -w admin/code will search (without output code-q/code) for word admin in the list of username groups./li /ul  As suggest by David Koontz, codegroups/code has been obsoleted by codeid/code utility. So, the codeif/code sentence should looks like the following to do the same:  precodeif id -Gn username | grep -q -w admin; /code/pre  <answer179548> Here is a simple script to check if the user is in the admin group and if not adds him:  precode#!/bin/bash  echo "This script will add a non-admin user to the admin group" echo "Please enter username" read username if groups $username | grep -q -w admin;      then          echo "User '$username' already is in the admin group";      else          dscl . -append /Groups/admin GroupMembership $username;     echo "User '$username' has been added to the admin group!";      echo "Please restart your Mac to apply the changes.";  fi /code/pre  Save the script somewhere and make it executable by opening Terminal and entering:  precodechmod 755 /path/to/script /code/pre  Run the script with codesudo /path/to/script/code.  Since the default Mac admin of a server OS is a member of several admin groups (e.g. _lpadmin, access_bpf, _appserveradm etc) you might add them as well in the script.  Example:  add the following line to the script to add the user to the 'App Server Admins' group              precode dscl . -append /Groups/_appserveradm GroupMembership $username; /code/pre  To improve the script you might also add a condition to check if the entered user does exist at all.  <comment212839> This will also detect people in the "badminton" group, or any other group with admin in the name. <comment212841> @Kent, you are right. I update my answer. Using `grep -w` you won't have this problem, as the command select only those lines containing matches that form whole words. <comment212857> This isn't "Another way", this is the right one :). The simplest one, with the standard Unix return code is `isadmin() { groups $1 | grep -q -w admin ; }`. <comment212858> Here is "another one": `isadmin() { id -G $1 | grep -q -w 80 ; }` <comment212859> Please separate the second part of your question which is quite different and complex one: this is a privililege change request. When you mix 2 different questions you usually don't get good answers on both. Exactly as when you try to board 2 different trains. <comment212965> man groups - "The groups utility has been obsoleted by the id(1) utility".