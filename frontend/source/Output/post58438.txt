Why can't I chmod to make a file executable without sudo? <body> On OS X 10.6.8, I made a small script file in my home directory and tried to make it executable. Surprisingly, I found that codechmod/code had no effect until I ran it as super-user. I own and have write access to my home directory directory and the script, so what prevents chmod from working?  precodemy_mac:~ crowding$ ls -dle ~ drwxr-xr-x+ 214 crowding  staff  7276 Jul 28 16:30 /Users/crowding  0: group:everyone deny delete my_mac:~ crowding$ ls -le ~/my_script  -rw-r--r--  1 crowding  staff  22 Jul 28 16:25 /Users/crowding/my_script my_mac:~ crowding$ chmod a+x ~/my_script  my_mac:~ crowding$ ls -le ~/my_script  -rw-r--r--  1 crowding  staff  22 Jul 28 16:25 /Users/crowding/my_script my_mac:~ crowding$ sudo chmod a+x ~/my_script  Password: my_mac:~ crowding$ ls -le ~/my_script  -rwxr-xr-x  1 crowding  staff  22 Jul 28 16:25 /Users/crowding/my_script my_mac:~ crowding$ /code/pre  <answer59017> It turns out there was another exec "chmod" on the path, obscuring my own chmod.  The thing that made this difficult to see was that I'd used the metacharacter "~" in my PATH variable. Only some things will interpret a tilde in the PATH. The codewhich/code program does not expand the tilde, so codewhich chmod/code told me that code/bin/chmod/code was the chmod on the path, but bash emdoes/em expand the tilde, so it tried to run the other chmod (which did nothing.) Meanwhile, codesudo/code does emnot/em expand the tilde so it worked, and gave the impression of a permissions problem.  Resolution: when adding subdirectories of your home directory to your codePATH,/code use code$HOME/code instead of code~/code.  <comment67247> I can't replicate this. Did you configure ACL? <comment67477> The problem seems to be confined to one account on this machine. The ACLs appear normal. and it seems to happen anywhere I try in the file system. It seems to be related to something in my PATH, but not the chmod binary itself. <comment68000> How did you set you PATH variable then? Any ~ in it should get expanded (replaced by `/Users/crowding`) automatically by the shell when getting assigned to a variable. <comment68001> ~ doesn't get expanded in double quoted strings. <comment68002> I wouldn't be surprised if other things break as well if you have `~` in $PATH. That's why I always recommend to avoid using quotes when assigning something to $PATH.