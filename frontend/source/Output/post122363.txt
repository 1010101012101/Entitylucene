OS X: Set up one folder as "extension" of another, symlink-style? <body> I have two folders on two different Volumes:  ul licode/Volumes/SSD/my-important-folder/code/li licode/Volumes/HDD/my-extension-of-important-folder/code/li /ul  In the second folder I put large files and folders so they do not take up all the space on the SSD. In order to have everything in one place I create symlinks from the first to the second folder, like so:  code/Volumes/SSD/my-important-folder/big-file/code is a symlink to code/Volumes/HDD/my-extension-of-important-folder/big-file/code  This is useful because big files get stored on the HDD yet they are available as if they were stored on the SSD. But this has the disadvantage that I have to create a symlink for every file oder folder that I add to the folder on HDD.  It would be really useful if I could say to the OS: if I call a file that is not in code/Volumes/SSD/my-important-folder/code, please look it up in code/Volumes/HDD/my-extension-of-important-folder/code.  The folder on the HDD would then be a real extension of the folder on the SSD.  Can this be done? I am running OS X 10.9.1  <answer122365> As far as I know, you can't do that directly but I'm not sure I understand why you'd want to?  Why not just symlink the ementire/em folder and never worry about it going forward?  If it's important to you that it's only large files that are moved to the HDD, you could create a strongFolder Action/strong in Automator and run a bash script that checked file size and based on that moved and created the codesymlink/code automatically (I'm assuming you've got emsome/em tech skill since you know what codesymlink/code even is :) With that said, I'd be happy to post more detailed instructions if need be).  <answer122385> Try using a command like this:  precodeln -s /dir2/* /dir1 /code/pre  codeln/code skips files that exist on the target, and it doesn't recreate existing symlinks.  To run the command when code/dir2//code is modified, save for example this plist as code~/Library/LaunchAgents/some.label.plist/code:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;   &lt;key&gt;Label&lt;/key&gt;   &lt;string&gt;some.label&lt;/string&gt;   &lt;key&gt;ProgramArguments&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;bash&lt;/string&gt;     &lt;string&gt;-c&lt;/string&gt;     &lt;string&gt;ln -s /dir2/* /dir1&lt;/string&gt;   &lt;/array&gt;   &lt;key&gt;WatchPaths&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;/dir2/&lt;/string&gt;   &lt;/array&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  Then run codelaunchctl load ~/Library/LaunchAgents/some.label.plist/code.  <answer122386> I would look at this in another way.   I would create several folders in the filesystem:  precode/Volumes/SSD/Data /Volumes/SSD/ActualDataOnSSD /Volumes/HDD/ActualDataOnHDD /code/pre  Then folder actions.  If any data get stored in code/Volumes/SSD/Data/code based on its size and strongmove/strong it to one of the two folders.  If any data get stored in code/Volumes/SSD/ActualDataOnSSD/code or code/Volumes/HDD/ActualDataOnHDD/code, create a symlink for them in code/Volumes/SSD/Data/code.  This seems to satisfy you need, stronghowever/strong I do have strongbig/strong concerns when it comes to saving a file that's being moved.   <comment142915> I do not want to Symlink the entire folder because as far as I know I will then not be able to have some files available on the SSD and others on the HDD. Thank you for the tip on folder Automation. <comment142916> Good point, Mark. <comment142917> Thanks, Lauri. As far as I can see this would create a Symlink for every file on the SSD, right? I want to be able to choose which files and folders are symlinked. <comment142919> Note this scenario is what a fusion drive works well for, the commonly used files will be on SSD and the others on the HD - you can set up fusion drives yourself - see other questions