Applescript Invoke Specific User and Password <body> I have a codedo shell script/code that I need to run in Applescript, but it needs to run as a different user. It is to be deployed into the student's network drive as a standalone application that the students can run when required.  The example code below is only for illustration. This code works when I am logged in, because it's picking up my username (local admin account) on the computer and uses the password provided (not the actual password included).  precodedo shell script "rm -rf /$HOME/Downloads/*" password "Password01" with administrator privileges /code/pre  I have tried to specify a username with codeuser "sdadmin"/code to the code and it won't work, it throws an error.  Is there a way to ask AppleScript to run a command with a specific user and password provided in the code like above?  <answer143966> strongUpdated answer:/strong  There is an Apple doc which shows the correct way of doing it. You was close.  (I have not tried it myself)  do shell script "rm -rf /$HOME/Downloads/*"  user name "USERNAME" password "THEPASSWORD" with administrator privileges  emFrom the doc/em:     How do I get administrator privileges for a command?      Use the administrator privileges, user name and password parameters   like this:      do shell script "command" user name "me" password "mypassword" with   administrator privileges user name and password are optional; if you   omit the user name, do shell script assumes it to be the current user;   if you omit the password, it will ask for a password when it runs.   Once a script is correctly authenticated, it will not ask for   authentication again for five minutes. As of Mac OS X 10.4, this grace   period does not extend to any other scripts or to the rest of the   system; manually calling sudo -k is unnecessary.      For security reasons, you may not tell another application to do shell   script with administrator privileges. Put the command outside of any   tell block, or put it inside a tell me block.      Bear in mind that administrator privileges allow you to change any   file anywhere in the system. You can render your system unbootable or   even erase the entire disk with a few well-placed commands, so   exercise caution. Better yet, don’t use administrator privileges   unless you absolutely have to. Unless you are doing system-level   development, you should never need to change anything in /System —   changing /Library should suffice.      Note: Using sudo(8) with with administrator privileges is generally   unnecessary and creates security holes; simply remove the "sudo".   hr  strongIMPORTANT UPDATE 2/strong  *You can save the app as "run only" (Save an editable copy for yourself first)  ( If you only save it as a Run Only even you will not be able to open it and edit it later on once you have closed the script window.)  Then use the strongFile-Export/strong menu which will give you the option in the save dialogue to save as "Run Only"  img src="https://i.stack.imgur.com/Sq6Eu.png" alt="enter image description here"   Attempt to open main.scpt file in application package:  img src="https://i.stack.imgur.com/NjZdp.png" alt="enter image description here"  strongA Run only will stop someone from opening the script embedded in the Application by double clicking on it to open it in Script Editor and discover your password. But there is a way of finding the user name and password from a  Run Only and it is not that hard to figure out even for a casual user./strong  strongI WOULD THINK TWICE ABOUT PUTTING YOUR USER NAME AND PASSWORD IN THE APP./strong  hr  strongUPDATE 3/strong  A little idea to help if you must do this is to break up the password text by creating nonsensical  variable  name to hold it and jumble them.  When the code runs it will reassemble them in the correct order.  For example.  if the password is strong880TpFpax/strong  I will use:  precode    set T to "Tp"     set Po to "88"     set TC to "Fpax"     set TEH to "&gt;0" do shell script "say blahbla" user name "markhunte" password (Po &amp; TEH &amp; T &amp; TC as string) with administrator privileges /code/pre  Notice that not only do the variable not mean anything or show any sense of order but the bits of password are also jumbled within them.  All until the code runs.   So even if they do stumble on how to do what I am talking about the password will not be assembled in any order that it can just be used.  <comment169593> What I am showing in this example is totally irrelevant to my original question. I am asking the students to run a series of complex commands and none of them have admin access (the setup is different to what I have above). This was my testing ground that I was using when making this script. <comment169649> Ok. I have made that a little bit more clear so you don't get more people reading it as I did. <comment169655> @DanijelJ I have updated my answer <comment169669> Please make sure you read the second update in my answer <comment169710> Excellent! This is is EXACTLY what I have been trying. I tried searching all the docs and couldn't find a satisfactory answer and tried a multitude of tests to get this to work. Thank you! And yes, I am aware of using the username/pass in an app, but if these students can reverse engineer an application to grab that out - we will be hiring them on the spot to work for our developers team at the main campus. <comment169714> Glad the answer helped but don't be fooled into thinking that it will take some effort to crack it. Its entails lateral thinking rather than reverse engineering. <comment169723> @DanijelJ I know your not too bothered about it but others may find it helpful. I have now included an idea of how to make it a little bit harder to read the password by deconstructing it. The method can get even more complex if you think about it but it may do in the current form.