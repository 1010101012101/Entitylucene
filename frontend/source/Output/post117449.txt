Forcing a script to run in english <body> My Mac is running Mavericks in English, but because my region is set to Portugal  and my keyboard is the portuguese one, when I run some scripts they shows messages in portuguese. I generally hate to run software created by non-native people in Portuguese because the translation is always crappy. I end with messages like "cubra is not defined". What the hell is a "cubra"?  So, these scripts are reading something from the system and switching to portuguese. Is there a way to force them to always run in english?  My terminal has this option selected:  precodeTerminal &gt; Preferences &gt; Settings &gt; [profile] &gt; Advanced &gt; Set locale environment variables on startup /code/pre  <answer117456> It depends upon the program. If it uses codegettext/code which is a common library for doing internationalization then setting the codeLANG/code environment variable to codeen_US/code (or codeen_UK/code if you want British Enligh vs. American English) should do the trick.  If you emonly/em want specific applications to use english messages then you can alias the command to something like codeLANG=en_US command-you-want-in-english/code.   Aliasing is dependant upon which shell you are using but in codebash/code (the default shell on MacOSX) you would put the following command in your code.bashrc/code or code.bash_profile/code:   precodealias command='LANG=en_US command' /code/pre  When in doubt - look to the man page or manual for the command you are running to see if they give details on how their internationalization is implemented and how you as a user can control it.  <answer117801> Since you haven't unchecked "Set locale environment variables on startup", Terminal sets codeLANG/code based on the region selected in System Preferences.  precode$ defaults read -g AppleLocale ja_JP $ locale LANG="ja_JP.UTF-8" LC_COLLATE="ja_JP.UTF-8" LC_CTYPE="ja_JP.UTF-8" LC_MESSAGES="ja_JP.UTF-8" LC_MONETARY="ja_JP.UTF-8" LC_NUMERIC="ja_JP.UTF-8" LC_TIME="ja_JP.UTF-8" LC_ALL= $ asd bash: asd: コマンドが見つかりません /code/pre  You can change codeLANG/code by adding a line like this to code~/.bash_profile/code:  precodeexport LANG=en_US.UTF-8 /code/pre  After that the commands above should print something like this:  precode$ locale LANG="en_US.UTF-8" LC_COLLATE="en_US.UTF-8" LC_CTYPE="en_US.UTF-8" LC_MESSAGES="en_US.UTF-8" LC_MONETARY="en_US.UTF-8" LC_NUMERIC="en_US.UTF-8" LC_TIME="en_US.UTF-8" LC_ALL= $ asd bash: asd: command not found /code/pre  codeLC_ALL/code does not have to be set. codeLANG/code and codeLC_ALL/code are different ways to change the the actual codeLC_/code variables that are shown between codeLANG/code and codeLC_ALL/code above. codeLANG/code is used as a default value for unset locale variables. codeLC_ALL/code overrides locale variables even if they have been set, and if it is set, changing other locale variables has no effect.  If you uncheck "Set locale environment variables on startup" and don't configure the locale variables anywhere, shells will use the C locale by default. It makes working with non-ASCII text difficult though. In bash non-ASCII characters are displayed and inserted as escape-sequences and for example codeä/code is interpreted as codeM-l/code. You can fix all those by changing output-meta, input-meta, and convert-meta in ~/.inputrc, but even then codepbpaste/code and codepbcopy/code jumble up UTF-8 characters, codels/code shows non-ASCII characters as question marks, and you can't type non-ASCII characters in Emacs. It's easier to use a UTF-8 locale in my opinion.  <comment137248> Do you have some environment variables set to something like pt_BR ? <comment137259> how do I know that? <comment137260> Sorry, you were typing your answer at the same time I was changing the question to be generic, when I realized that on kindlegen. Anyway I have this problem with other scripts, so I transformed the question into a generic one. Sorry about that. <comment137262> Then I think you want the LANG environment variable - but it depends upon the program - if it pays attention to that variable. I'll change my answer to reflect this. <comment137263> Thanks! I think this will solve the problem!