shutdown multiple Macs after a runtime of 24 hours? <body> Can I shutdown multiple Macs in my office (9-10 Macs) in my office after checking their runtime? I have one Mac, which acts as a Server (with the OS Server application). SSH is also enabled on every Mac, so logging on remotely is not a problem. I want to write a script that checks:   precodeif the runtime &gt;=24h then shutdown mac /code/pre  Now I don't know anything about scripting on a Mac but I've done this before with powershell and windows machines.   Curently I have this script:  precode#!/bin/bash BOOT_TIME=$(sysctl -n kern.boottime | sed -e 's/.* sec = \([0-9]*\).*/\1/') CURR_TIME=$(date +%s) MAX_UPDAYS=1 #Days  DAYS_UP=$(( ( $CURR_TIME - $BOOT_TIME) / 86400 ))     if [ $DAYS_UP -ge ${MAX_UPDAYS} ];then         echo Mac is going to shutdown          shutdown -h now     else         echo No shutdown needed fi /code/pre  but don't know how to run it on the remote Macintoshs  <answer261140> You can do this with a simple bash script, the codeuptime/code command and codelaunchd/code.  If you execute the command by itself, it will tell you how long the machine has been up:  precode$ uptime 6:08  up 20 days, 21:09, 4 users, load averages: 1.09 1.29 1.36 /code/pre  So, the number that we are interested is the "20" which we will evaluate against our condition of "1 day"  precode#!/bin/bash  #Maximum number of days to be up max=1  #Get the uptime days and assign it to a variable uptime_days=`uptime | cut -d " " -f 5`  if [ $uptime_days -ge $max ]   then    shutdown -h now fi  exit 0 /code/pre  Make sure you set the script as executable or it won't run:  codechmod +x shutdown24.sh/code  Now, here's the most important part.  When do you want to evaluate this?  Technically, your emcould/em have this script run every hour (or even ever minute) to evaluate if the computer has been up for 24 hours.    This is not recommended because if for some reason the computer was turned on at 10:00am (because the person was late, for example) you don't want it shutting down at 10:00am the next morning when they are in the middle of their work.  So, I'm going to assume you want it run at midnight so you don't inadvertently shutdown the machine while people are working.  What you need is to utilize codelauchd/code and create a code.plist/code that defines the job (similar to Task Scheduler) in Windows.  Let's assume that we called the bash script codeshutdown24.sh/code so we will call our .plsit codecom.user.shutdown24.plist/code  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"   "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;com.user.shutdown24&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/Users/USERNAME/Path_to_Scripts/shutdown24.sh&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;StartCalendarInterval&lt;/key&gt;     &lt;array&gt;     &lt;dict&gt;         &lt;key&gt;Hour&lt;/key&gt;         &lt;integer&gt;00&lt;/integer&gt;         &lt;key&gt;Minute&lt;/key&gt;         &lt;integer&gt;00&lt;/integer&gt;     &lt;/dict&gt;  &lt;/dict&gt; &lt;/plist&gt; /code/pre  Copy this file to code/Library/LaunchDaemons/code and then load it to codelaunchd/code:  codesudo launchctl load com.user.shutdown24.plist/code  The job will be run as root and at 12:00am every morning, it will check if the system uptime and will shutdown if it's greater than 24 hours.   <answer267415> emNote: I was composing my answer to another question/post of yours where you were asking pretty much the same thing but you were using 2 separate scripts. I can't find it now as it was probably deleted as being a duplicate but I hope this answer resolves your issue./em  In my opinion, having these as separate scripts just complicates it.  Here is a quick rewrite that combines them.  pre class="lang-bsh prettyprint-override"code#!/bin/bash  #Array of Mac hostnames separated by spaces my_macs=( Mac111 Mac121 Mac122 Mac123 Mac124 Mac125 Mac126 Mac127 Mac128 Mac129 )  # Number of days the remote Mac is allowed to be up MAX_UPDAYS=7  CURR_TIME=$(date +%s) MAX_UPTIME=$(( MAX_UPDAYS * 86400 )) ADMINUSER="admusr"  #Steps through each hostname and issues SSH command to that host #Loops through the elements of the Array  echo "Remote shutdown check started at $(date)" for MAC in "${my_macs[@]}" do     echo -n "Checking ${MAC}... "     # -q quiet     # -c nb of pings to perform      if ping -q -c3 "${MAC}" &gt;/dev/null; then         echo "is up. Getting boot time... "          BOOT_TIME=0         # Get time of boot from remote Mac         BOOT_TIME=$(ssh "${ADMINUSER}@${MAC}" sysctl -n kern.boottime | sed -e 's/.* sec = \([0-9]*\).*/\1/')          if [ "$BOOT_TIME" -gt 0 ] &amp;&amp; [ $(( CURR_TIME - BOOT_TIME )) -ge $MAX_UPTIME ]; then             echo "${MAC} uptime is beyond MAX_UPDAYS limit.  Sending shutdown command"             ssh "${ADMINUSER}@${MAC}" 'sudo /sbin/shutdown -h now'         else             echo "${MAC} uptime is below limit.  Skipping shutdown."         fi      else         echo "is down (ping failed)"     fi done /code/pre  As for the cron entry  ol liYou should always use the full path to the script.  Cron jobs don't normally start in the user's home dir so ./documents/ would be the wrong location (it would look for a documents dir from the root of the hard drive)./li liRedirect the script output to append to a log file.  This will record the codeecho/code commands to the log file so you know what is happening./li /ol  So, change your crontab entry to something like this   pre class="lang-none prettyprint-override"code30 23 * * * /Users/gunter/documents/remoteshutdown.sh &gt;&gt; /Users/gunter/documents/remoteshutdown.log /code/pre  And a couple other bash shell tips that I've changed in the script  ul liThe codeping/code exit code check code[ $? -eq 0 ]/code can be done directly in the codeif/code statement./li li$ is unnecessary on arithmetic variables so code$(( $CURR_TIME - $BOOT_TIME ))/code should be code$(( CURR_TIME - BOOT_TIME ))/code/li /ul  <comment326998> I would ask why would you want to do this, Unix boxes work with long uptimes and reboots are not required except in exceptional cases. What is the actual problem you are trying to solve. What happens if the machine is in use which if it is on one reboot then it is likely to be on the next etc. <comment327001> Where do I write that? Directly in the terminal or do I need to put it in an editor somewhere? I'm sorry I never did something like that with a Mac. <comment327002> The `bash` file is a script, just like a powershell script, so you can use any text editor to create/modify it and you save it wherever you like.  Same with the `.plst` you can use whatever editor, but ultimately you are going to copy/save it to `/Library/LaunchDaemons` <comment327017> Is this the same issue as http://apple.stackexchange.com/questions/261021/i-want-to-power-off-multiple-macs-everyday-at-2330-1130-pm ? <comment327019> Ah, and if you need help in joining your accounts, please use the contact link at the bottom of the page. <comment327044> I just tried to write it in script editor, which is already installed on my mac. I cant save it as a .sh though... I dont know what to do.. <comment327058> That's [AppleScript](https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html) editor.  Try TextEdit or my favorite x-platform editor [Komodo Edit](http://www.activestate.com/komodo-edit) which is free. <comment327310> I still can't get it to run, I don't know what I'm doing wrong.. but thanks anyway <comment327475> Hey @Allan, I have this script now, but can't seem to figure out how to run it on a remote Mac... Any ideas? EDIT: ok the formatting is weird, I'm going to update my question above with the script <comment327478> The "what to do" is already in the answer, what exactly is unclear? <comment327480> What do you mean it's in the answer? In the answer of Alan is only how to run it daily, but I want to run it remotely <comment327562> To get the script on each machine, you can use `scp`.  It's just like `cp` except you are copying a different host.  So, for example you would use the command `scp myscrip.sh user@foo.bar:/path/to/destination`  If you use passwordless authentication via SSH keys, you won't have to enter a password.  Then to run the script remotely, you just issue the command via SSH:  `ssh "/path/myscript.sh" <comment335532> I deleted it myself, because I have asked the same question on the Stack Exchange Ubuntu forum. There I already had an answer that fitted perfectly for me. But your idea is also very good, because it makes it a lot easier for me when it's only one script. I'm going to try it and if it works I will accept your answer. Anyway, thanks for still finding this post, it just shows what a nice community Stack Exchange is. <comment335660> I tried it out and really need to say that it is perfect. I tested everything and it works perfectly without any bugs. Thank you very much! <comment337089> I now have a small problem, the script doesn|t log properly. The log file is created, but shows everything that is done on the pc (even the current tim= when I look at the log 2 days later it will show the entrys of today. Any idea how to fix this? <comment337210> Did you change any part of the script or the crontab line?  As it is listed, it should log the date as when it ran, not when you are looking at the log.  For example, I just set this up under cron and it ran properly with the log showing `Remote shutdown check started at Thu Jan 12 12:18:00 MST 2017` <comment337348> I don't know why but today it suddenly worked. Weird but I'm fine with it. Thanks again