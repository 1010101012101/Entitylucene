How to run script using cron or launchd for Guest user account in El Capitan <body> I could not find a way of executing a script for the Guest account during login which executes every minute. They say using cron daemon is deprecated so it looks like I will be using launchd with .plist files.  strongScenario:/strong I have a public iMac I want to allow the general public to use the guest account and have it force log out every half-hour. I wrote a ruby script to check the login time and figure out time remaining.  I can have it display a banner notification every 10 minutes using osascript and then make it log off my account. Problem is when I try to implement it for the Guest account it doesn't work.  The problem is when I am placing the .plist file inside /Library/LaunchDaemons since it runs after login and also runs as root. Running as root is important since I can have the privilege to shut down processes when time runs out. I need it to  execute once every minute. This it the current plist file that does work when I login as my own username "owner" but not guest. Using org.user.plist   My original .plist file looked something like this  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt;  &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;  &lt;plist version="1.0"&gt;  &lt;dict&gt;      &lt;key&gt;Label&lt;/key&gt;          &lt;string&gt;org.user&lt;/string&gt;      &lt;key&gt;Program&lt;/key&gt;          &lt;string&gt;/usr/local/bin/notify-custom&lt;/string&gt;      &lt;key&gt;RunAtLoad&lt;/key&gt;          &lt;true/&gt;  &lt;/dict&gt;  &lt;/plist&gt; /code/pre  strongUpdate 1 (Not a solution yet)/strong .plist file which runs every 10 seconds for both Guest and my username  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;         &lt;string&gt;org.user&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;         &lt;string&gt;/usr/local/bin/notify-custom&lt;/string&gt;     &lt;key&gt;WatchPaths&lt;/key&gt;         &lt;array&gt;                     &lt;string&gt;/Users/Guest/Library&lt;/string&gt;             &lt;string&gt;/Users/owner/Library&lt;/string&gt;         &lt;array&gt;     &lt;/integer&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  As a test to make sure the osascript notification banner pops up I have this code inside /usr/local/bin/notify-custom  precode#/bin/bash  #Using whoami would have shown me logged in as root under LaunchDaemon .plist loggedinUser=`finger | awk 'NR==3{print $1}'` #I need to manually run terminal and type sudo as guest for nextline to work sudo -u $loggedinUser /usr/bin/osascript -e 'display notification "Test" with title "Banner Notification"' /code/pre  Solution is below.   <answer249024> In my opinion the following should work - it does in my VM! -  launched as /Library/LaunchDaemons/org.user.plist:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;org.user&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/usr/bin/touch&lt;/string&gt;         &lt;string&gt;-f&lt;/string&gt;         &lt;string&gt;/Users/Guest/Desktop/test.txt&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;UserName&lt;/key&gt;     &lt;string&gt;Guest&lt;/string&gt;     &lt;key&gt;GroupName&lt;/key&gt;     &lt;string&gt;_guest&lt;/string&gt;     &lt;key&gt;InitGroups&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;WatchPaths&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/Users/Guest/Library&lt;/string&gt;     &lt;/array&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  As example task I use code/usr/bin/touch -f /Users/Guest/Desktop/test.txt/code.  The trick here is that the complete content of the Guest folder is deleted after a log out. After a new Guest logs in the whole content is recreated from scratch. As soon as the folder /Users/Guest/Library is created, the example task (codetouch .../code) is started due to the WatchPaths key.  Since the task/script/app has to be executed as guest you can't use launch agents because the path em/Users/Guest/Library/LaunchAgents//em simply doesn't exist.  Use a launch daemon instead and run it as emGuest/_guest/em. Your ruby script em/usr/local/bin/notify-custom/em has to be world readable/executable? of course.  hr  I also tried to run the task every 60 seconds - which works properly but throws some errors strongafter/strong the guest's log out. Probably it's better to implement the whole thing in the ruby script. Depending on your script your mileage may vary though.  If you have two different tasks to execute (e.g show a banner every 10 minutes with Ruby strongand/strong a timer to force log out after 30 minutes) it's probably better to create two different launch daemons.  <answer249782> Solved.  I have been working on this for a while. My solution finally does as I need and that is it starts up during login for the user Guest (and as an option I also have it starting up for myself user iMac1 just to display logged in time). I didn't see a simple way of putting the org.user.plist file in /Users/Guest/Library/LaunchAgents which would have theoretically launched it when the Guest logged in and the reason I gave up on that situation is since that folder isn't created until login.  What I did was put my .plist file it inside /Library/LaunchAgents/ which gets run for every user. That's fine since my code will distinguish the Guest user and take action (in this case log them out after set time.)   The final .plist file:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;         &lt;string&gt;org.user&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/usr/local/bin/notify-custom&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;         &lt;true/&gt;     &lt;key&gt;StartInterval&lt;/key&gt;         &lt;integer&gt;60&lt;/integer&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  Notice I added a RunAtLoad key since without it the script did run but waited a minute to fire it's first event. If instead I used WatchPaths key as @klanomath noted in his comment, then the script would run every 10 seconds since their must be activity happening in that folder regularly. I just wanted it to run every 60 seconds for now. I might change that timer later when I clean up the whole procedure with some more colorful warning dialogs written in Python.  Here is the ruby code inside /usr/local/bin/notify-custom that gets executed for every user login:  precode#!/usr/bin/ruby -w  require 'time' require 'FileUtils'  loggedinUser=`finger|awk 'END{print $1}'`.strip getloginTime=`finger|awk 'END{print}'|cut -c49-53` getnowTime=`date|awk 'NR==1{print $4}'`[0..4] loginTime=(Time.parse(getloginTime).to_i) nowTime=(Time.parse(getnowTime).to_i) diffSec=(nowTime-loginTime) diffMin=(diffSec/60) timeRemain=30-diffMin  #To see some console output while debugging puts "getloginTime      =#{getloginTime}" puts "getnowTime        =#{getnowTime}" puts "loginTime=#{loginTime}" puts "nowTime  =#{nowTime}" puts "timeRemain=#{timeRemain}"  if loggedinUser == "Guest"         open("/Users/#{loggedinUser}/Desktop/30 Minutes Max Use Per Day",'a'){|f| f.puts "With this new iMac, you are limited to a maximum of 1/2 hour use per day"}         if timeRemain &lt; 0             `/usr/bin/osascript -e 'tell application "Finder" to set desktop picture to POSIX file "/Library/Desktop Pictures/Earth Horizon.jpg"'`             `/usr/bin/osascript -e 'display notification "SHUTTING DOWN! Now= #{getnowTime}   LoggedInAt=#{getloginTime}   TimeRemain=#{timeRemain}" with title "Guest SHUTTING DOWN" sound name "Glass"'`             `/usr/bin/osascript -e 'tell app "Terminal" to do script "sudo shutdown -h now"'`         else             `/usr/bin/osascript -e 'display notification "Now= #{getnowTime}     TimeRemain=#{timeRemain}" with title "#{loggedinUser} TIME LOGGED IN= #{getloginTime}" subtitle "User= #{loggedinUser}"'`         end else         `/usr/bin/osascript -e 'display notification "Now= #{getnowTime}     TimeRemain=#{timeRemain}" with title "#{loggedinUser} TIME LOGGED IN= #{getloginTime}" subtitle "User= #{loggedinUser}"'` end /code/pre  Again note that if you use the LaunchDaemons instead, they run under the system root account while the Agents run on the logged in users account.  Using the 2nd option I had to give the Guest user permission to run sudo shutdown as @klanomath mentioned below. This was done with running the command: $sudo visudo and adding the following to the end of the file:  precodeGuest ALL=NOPASSWD: /sbin/shutdown /code/pre  Also I wanted to only show the Guest account on the log on page so I hid my account from that screen with this command:  precodesudo dscl . create /Users/hiddenuser IsHidden 1 /code/pre  and if you change your mind you can bring it back with :  precodesudo dscl . create /Users/hiddenuser IsHidden 0 /code/pre  strongThanks @klanomath and @user3439894/strong  <comment308737> The .plist file you're showing couldn't possibly load as there is neither a Program nor a ProgramArguments key specified. <comment308738> Sorry about that I know I forgot to paste that section. See revision above. (Making me think maybe I should try using the key ProgramArguments instead followed by just a single array element being the program name since it takes no other argument.) <comment308739> What is `notify-custom` and is it a binary or a script, and if the latter what's the contents of the script? <comment308741> It's a ruby script. It's at work. Will post it here tomorrow if you think it will help. <comment308743> I just tested with my own .plist file, owned by `root` in the `wheel` group with `0644` for permissions in `/Library/LaunchAgents` and it ran when logged in as Guest. With the exception of the _string_ for the Program _key_ the rest of the file was the same. It worked as expected. I also look at the other LaunchAgents in the same location and checking in Activity Monitor their processes started too. So without knowing what `notify-custom` is and its contents there's not much else I can offer at the moment other that to say .plist files in `/Library/LaunchAgents` work in the Guest Account. <comment308744> Also the .plist files had no extended attributes. I don't program in ruby, so the script won't help me to debug the situation. <comment308745> Hmmm  I was just looking for the banner to popup from my ruby script. I used ruby since it passed variables between the shell and allowed easier string to time manipulation and subtraction since I couldn't get it to work completely through the shell alone. What kind of script did you use for it to interact with the guest account? Do you have a sample? <comment308747> You said, "_Since the task/script/app has to be executed as guest you can't use launch agents because the path /Users/Guest/Library/LaunchAgents/ simply doesn't exist._" and while that's true nonetheless my .plist ran just fine from within the Guest Account when run from `/Library/LaunchAgents` and without the use of `WatchPaths` _key_ as well as other LaunchAgents did from the same location. <comment308748> @user3439894 Hmm I'm very keen to see **notify-custom**... ;-) <comment308837> @user3439894 An additional problem of using a launch agent is that the agent/script is also executed logging in as normal user - which is probably unwanted. <comment308839> On the machine I tested this on I have 3 LaunchAgents in `/Library/LaunchAgents`, the one I created for this test and 2 existing ones that were added by applications running on the system, e.g. Little Snitch. So, in general I do not see an issue using a LaunchAgents to take action in the Guest Account. That said, it certainly may depend on exactly what one is trying to do that may make using a LaunchAgents in `/Library/LaunchAgents` in this use case scenario not ideal. I can only go by my testing and it worked for me in the manner I tested. Don't know what else I can say. <comment309320> @Michael Please don't modify the basic question too much! Better add an update section, ask a second question or request further explanantions. In your example you modified the plist in a way that my answer doesn't make much sense because you integrated it partly into your (updated) question. <comment309325> @Michael BTW to enable password-less `sudo shutdown` for a guest user modifying the /etc/sudoers file should work! <comment309332> @klanomath. Sorry about that. You are right. I thought about my mistake modifying the original question after I submitted the update. I wanted to be clear that using the .plist as Daemon running as root doesn't start osascript.  Not sure why I would want to modify the sudoers file since the daemon runs as root and shouldn't need extra permissions to use the sudo command. Make sense? <comment309828> OK I got it to work with your idea of using sudoers file. Using this method I had to put the plist file inside the LaunchAgents folder so that it gets the logged in users permissions. I'm tried upticking the first answer below since that made it obvious that I had a problem with my original plist file noted above but I dont have enough points on stackexchange to do so. <comment309844> I propose the following: Rewrite your question to: original question; update1 based on answer1 halfway working; update2 based on answer1 or 2 still a small glitch. If you got everything to work as desired, post a separate answer (based on your and/or others research) to your own question - but please don't answer your own question **in** the question.