bash-command not found; for every command == fear i could screwed up the path <body> here is the output of echo $PATH  precode/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/bin:/usr/bin /code/pre  and when I gave cat /etc/paths this is the output  precode/usr/bin /bin /usr/sbin /sbin /usr/local/bin /code/pre  I am not sure whether that /usr/local/bin is creating the error (command not found)  Thank u for your suggestions  <answer147539> I suggest you run this command, it should re-build the PATH variable.  code/usr/libexec/path_helper/code  <answer147548> What concerns me is that you're getting duplicates in your path. Have you added something to your code~/.bash_profile/code? You want to be very careful that you're not duplicating any of those existing path declarations in whatever you're doing. It's fine to modify PATH, but you want to be careful with it. Here's an example:  precodePATH=$HOME/.rvm/usr/bin:$HOME/.rvm/bin:$PATH /code/pre  Note that I add my own stuff and then tack on the system stuff at the back with code$PATH/code.  Other things to check are making sure that you're not sourcing any unnecessary scripts during login that might muck with your environment. Be sure that if you're using a non-standard editor that you're saving in UNIX format. If you accidentally do things with DOS CRLFs, that can trigger command not found errors.  And just on the off chance that you've nuked your code~/.bash_profile/code, i.e., you absolutely don't have one anymore because you deleted it:  precodeecho "" &gt;&gt; ~/.bash_profile /code/pre  That is an odd one, but I've seen at least one guy claiming that command not found issues were fixed by creating a missing code.bash_profile/code.  Finally, note that if you do not wish to give a full path to the executable that you're running, e.g., code~/Downloads/myScript.sh/code, you need to either place the executable somewhere in your existing path or you need to modify your path to point to the directory in which your executables are stored.  <answer147549> Commands you run in Terminal need to either in one of the directories included in $PATH or you need to call them with code./command/code if you are in the directory the command is stored in.  <comment173917> in Terminal, press Cmd-T to open a new tab. Do the commands work there? <comment173919> no it does not... do i have to change the directory to that particular library (to run the command every time). <comment173923> Do you get the error message for all commands you are trying to execute or only for some? if the second, for which? <comment173924> I figured out a solution.. but not sure if its correct..  I HAVE THIS LIBRARY (with executable file) TO DO SOME STATISTICS .... so I moved the exec.files to the usr/local.bin and the command works fine.... IS IT OK <comment173927> Yes, putting an executable file in /usr/local/bin is fine. <comment173928> After the move you need to tell the shell to update its cache of where things are - the command is rehash - and no it is not fine to move from /bin - things will break <comment173937> -2 down vote accept    What concerns me is that you're getting duplicates in your path. Have you added something to your ~/.bash_profile? You want to be very careful that you're not duplicating any of those existing path declarations in whatever you're doing. ----- Thanks for the suggestions - how can revert it back and not duplicate the paths!! thanks in advance for any suggestions <comment173943> It all depends on whatever changes you've been making in order to get things working. As it is now, nothing in the PATH statement will damage anything. Duplicates do, however, indicate that something isn't quite right. Examine any of the files you've changed the PATH in and eventually you'll find your duplication. <comment174121> Drive-by downvoter: Would you care to explain why?