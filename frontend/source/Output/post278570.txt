Automator use current directory location <body> my goal is to use Automator to open an application with arguments  precodeopen ./MyApp.app -arguments /code/pre  via running a shareable Buddy.app with Myapp.app (the Automator/workflow). both apps should be shareable together with anyone so they run straight off.  the simplest way to do so, seems to be to run the Buddy.app from within the same folder as MyApp.app. then i can move the Buddy.app with MyApp.app anywhere, and they will still work together  to set up the relative file locations in bash script,  precodeopen "$(pwd)"/myapp.app -arguments /code/pre  strongonly problem is that Automator uses the home directory instead of the application directory./strong ie pwd is the home directory, and not the actual file location.  in Automator the output from  precodeecho $(pwd) /code/pre  is my home directory, /Users/User  so the question is, how to get Automator (Buddy.app) to detect the current folder location and run MyApp.app ?  <answer278865> h2Use the target app’s bundle identifier (more flexible)/h2  Do you plan to keep emonly one single copy/em of codeMyApp.app/code on the entire system?  If so, you can take advantage of codeMyApp.app/code’s embundle identifier,/em and have emLaunch Services/em figure out all the nitty-gritty details for you.  This solution is rather flexible; it has the benefit that you can put your Automator workflow strongwherever you want/strong – it does not have to be in the same location as codeMyApp.app/code, nor in any fixed location relative to it.  h2Steps/h2  These are the steps you want to take:  ol liOpen Terminal.app and run the following command:  precodeosascript -e 'id of app "'"$(mdfind MyApp.app)"'"' /code/pre/li liThe previous step should have printed out one single line as a result. Note what that line says (e. g. codecom.example.MyApp/code)./li liOpen your workflow in Automator./li liAdd a emRun Shell Script/em action with the content:  precodeopen -b com.example.MyApp /code/pre/li liSave the Automator workflow in any folder at your discretion – no need to put it in a fixed location relative to codeMyApp.app/code./li liRun the Automator workflow; it should launch codeMyApp.app/code./li /ol  h2Explanation/h2  h3Launch services/h3  This solution takes advantage of a part of macOS called emLaunch Services,/em which maintain a system-wide database of apps and their properties:     Whenever a new application becomes known to the system (such as when the user drags it from an installation disk into the Applications folder), the application is registered with Launch Services, which copies the needed information about the application into its database. Launch Services can then use this information to determine the preferred application for opening a given document file or URL.   h3The plan/h3  The piece of information we’re interested in is the strongbundle identifier,/strong or bundle ID.  An App developer typically assigns to each of her or his apps a (hopefully) globally unique bundle ID. We can take advantage of this uniqueness if and only if there is no more then one single app with the same bundle ID on our whole system – and only one single copy of that app. No duplicates.  h3Figuring out the path/h3  The command  precodemdfind MyApp.app /code/pre  is just a fancy way to run a Spotlight search as a one-time shortcut in order to strongfigure out the app’s path/strong as of right now. We need the path only once in order to extract the app’s bundle identifier.  Spotlight will (hopefully) return with something like this:  precode/Users/watermelon/foo/MyApp.app /code/pre  h3Extracting CFBundleIdentifier/h3  Wrapping the app’s current path in the following AppleScript command:  precodeid of app "/Users/watermelon/foo/MyApp.app" /code/pre  is simply a convenient way to **extract the codeCFBundleIdentifier/code ** from the codeMyApp.app/code bundle.  (You could have also looked up the bundle ID manually by right-clicking the app in Finder, choosing emShow Package content/em, navigating to the codeContents/code subfolder and opening codeContents/Info.plist/code in TextEdit, search for the key that says codeCFBundleIdentifier/code and find its codeString/code value one line further down. I think this is tedious, therefore I always prefer to use the AppleScript/codemdfind/code snippet.)  h3Launching an app by bundle ID/h3  Finally, let’s have a look at the command you’re actually going to use in your Automator workflow:  precodeopen -b com.example.MyApp /code/pre  This command is just a technical way of saying “Hey macOS, you’re good friends with codelaunchd/code, right? Can you stronghave it launch this app/strong for me? Oh btw, I never bothered to look up the full path to it. What I do know though is its codeCFBundleIdentifier/code, which is codecom.example.MyApp/code; just go ask emLaunch Services/em and they will figure out the path”.  <answer278866> h2Have your workflow figure out its own path (more robust)/h2  strongThis works as long as your Automator workflow lives in the same directory/strong as codeMyApp.app/code; you can create copies of either the workflow or the app at your discretion and reuse those copies wherever you want; nothing needs to be unique.  h2Steps/h2  These are the steps to automate launching codeMyApp.app/code:  ol liOpen the workflow in Automator./li liAdd a emRun AppleScript/em action. Remove all the boilerplate code inside and replace it with the following lines:  precodeset AppleScript's text item delimiters to ":" set appPath to (text items 1 through -3 of (path to me as text) &amp; {"MyApp.app"} as text) tell application "Finder" to open file appPath /code/pre/li liSave the Automator workflow in the same folder as codeMyApp.app/code./li liRun the Automator workflow; it should launch codeMyApp.app/code./li /ol  h2Explanation/h2  precodeset AppleScript's text item delimiters to ":" /code/pre  This means “Watch out, I’m going to split a string soon; and I want you to use the code:/code character as the split boundaries.”  precodepath to me as text /code/pre  This instructs the workflow to figure out the path to itself; path components are delimited by a colon (code:/code), which is a remnant of Classic Mac OS.  precodetext items 1 through -3 of […] &amp; {"MyApp.app"} /code/pre  This cuts off the last part of the path, and appends codeMyApp.app/code to the path.  precode[…] as text /code/pre  This pieces the path back together (again with code:/code as a delimiter).  precodetell application "Finder" to open file appPath /code/pre  Lastly, this final line causes codeMyApp.app/code to launch.  <comment350592> As of macOS 10.12, Automator.app is always located in `/Applications` and protected by [SIP](https://en.wikipedia.org/wiki/System_Integrity_Protection). You can verify this by running `grep Automator /System/Library/Sandbox/rootless.conf`, or `ls -ldAO@ /Applications/Automator.app`. So why not simply hard-code `/Applications`? <comment350764> sorry, that is not what i wish to achieve. i realise the ambiguity in my initial post and have changed it for hopeful clarity. i want to run myapp.app -arguments from anywhere by simply opening the automator.app/workflow <comment350774> If I understand the question correctly your workflow would require to copy myapp.app (or at least an alias) to the current path. Usually this is done the other way round: the current path (of e.g. a file/folder) is passed to the app as one argument. pwd or ls **won't** be copied to $pwd to get the current working directory or a content listing but remain in /bin! <comment350800> @watermelon Thanks for clarifying and editing your question; though I feel we still need more information to understand your requirements. It would help if you edited your question once again and provide a self-contained example. See my next comment for what my own interpretation of your requirements so far is.   I might be completely wrong, and perhaps I grossly misunderstand your requirement; however if that’s the case, I would recommend that you provide a short, self-contained example for the sake of clarity. <comment350802> **My interpretation:** you start out with a directory `~/foo` and an app `~/foo/MyApp.app`. **Your goal is** to have an Automator workflow to act as a buddy to `MyApp.app`, and lives in the same directory as `MyApp.app` at all times. You want to be able to move `MyApp.app` at your discretion, into whatever folder you like, for example `~/bar` – _as long as the buddy workflow travels along with it._ Lastly, you want to be able to launch the buddy workflow from any location, for example from the Finder, or using `open ~/bar/MyWorkflow.workflow` while you’re inside `/tmp/meow`. Correct? <comment350889> @Synoli you seem to have a correct interpretation :) As long as the `Buddy.app` looks for `MyApp.app` in a relative location then they can be moved anywhere together and still function appropriately. I have edited my OP again. <comment353829> this works fine with no arguments. however i still need to pass arguments when opening. <comment353830> thanks for both replies. i've amended my question to mention that both apps need to be shareable and useable immediatley upon sharing, so this answer is unfortunately not appropriate.