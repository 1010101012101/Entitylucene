How do I change Mission Control shortcuts from the command line? <body> I have been trying to figure this out for a long time. I have a pretty typical Mac OS provisioning script:  https://gist.github.com/ryanpcmcquen/b2e608311f286a4ab3e1  I would like to change the Mission control shortcuts to all be kbdCtrl/kbd+kbdAlt/kbd+kbd.../kbd instead of kbdCtrl/kbd+kbd.../kbd. For example, the default is: kbdCtrl/kbd+kbdUp/kbd to activate Mission Control. I would like to change this to kbdCtrl/kbd+kbdAlt/kbd+kbdUp/kbd, because the current shortcut conflicts with other programs I use.  Note that I am already aware of how to do this through codeSystem Preferences &gt; Keyboard &gt; Shortcuts/code, I am looking for a scriptable, command line solution.  EDIT: Thanks to @user3439894 I went through and made a script to change all the plist keys to what I want them to be. The only issue is, it does not work.  :-(  Here is what I have so far:  precode#!/bin/bash defaults write ~/Library/Preferences/com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 32 "{enabled = 1; value = { parameters = (65535, 126, 2883584); type = standard; }; }" defaults write ~/Library/Preferences/com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 33 "{enabled = 1; value = { parameters = (65535, 125, 2883584); type = standard; }; }" defaults write ~/Library/Preferences/com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 34 "{enabled = 1; value = { parameters = (65535, 126, 3014656); type = standard; }; }" defaults write ~/Library/Preferences/com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 35 "{enabled = 1; value = { parameters = (65535, 125, 3014656); type = standard; }; }" defaults write ~/Library/Preferences/com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 79 "{enabled = 1; value = { parameters = (65535, 123, 2883584); type = standard; }; }" defaults write ~/Library/Preferences/com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 80 "{enabled = 1; value = { parameters = (65535, 123, 3014656); type = standard; }; }" defaults write ~/Library/Preferences/com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 81 "{enabled = 1; value = { parameters = (65535, 124, 2883584); type = standard; }; }" defaults write ~/Library/Preferences/com.apple.symbolichotkeys.plist AppleSymbolicHotKeys -dict-add 82 "{enabled = 1; value = { parameters = (65535, 124, 3014656); type = standard; }; }" chown -Rf `whoami` ~/Library/Preferences/com.apple.symbolichotkeys.plist; defaults read com.apple.symbolichotkeys /code/pre  <answer201845> This is not a direct answer although I hope the information presented herein will help you get to a direct answer.  I can tell you what changes in which file when you change the default keyboard shortcut for Mission Control from Control-Up Arrow to Control-Option-Up Arrow.  It's the "Item 2 Number" of the "parameters" Array in the "value" Dictionary of the "32" Dictionary and "34" Dictionary of the "AppleSymbolicHotKeys" Dictionary in the code/Users/$USER/Library/Preferences/com.apple.symbolichotkeys.plist/code file.  Here's a codedefaults read/code representation of the codecom.apple.symbolichotkeys.plist/code file structure as it relates to the changes made under the defined circumstances above.  strongMission Control with the default of Control-Up Arrow/strong  precode{     AppleSymbolicHotKeys =     {         32 =         {             enabled = 1;             value =             {                 parameters =                 (                     65535,                     126,                     2359296                 );                 type = standard;             };         };         34 =         {             enabled = 1;             value =             {                 parameters =                 (                     65535,                     126,                     2490368                 );                 type = standard;             };         };     }; } /code/pre  strongMission Control changed to Control-Option-Up Arrow/strong  precode{     AppleSymbolicHotKeys =     {         32 =         {             enabled = 1;             value =             {                 parameters =                 (                     65535,                     126,                     2883584                 );                 type = standard;             };         };         34 =         {             enabled = 1;             value =             {                 parameters =                 (                     65535,                     126,                     3014656                 );                 type = standard;             };         };     }; } /code/pre  The strongBUGS/strong section of the codedefaults/code man page says:      Defaults can be structured in very complex ways, making it difficult   for the user to enter them with this command.   And this is a perfect example as it will be a very complex command line using codedefaults/code to write the target values to the target array elements, if it's even doable.  Just an FYI... If you're going to attempt to do a codedefaults write com.apple.symbolichotkeys .../code command make sure you've backed up the target file first.  The other option is to use an AppleScript to change the settings by navigating the System Preferences GUI and that too will be a little complex in comparison to setting a top level object, which the target here is not.  I'm not even sure it's doable however if I needed an automated way then I'd figure it out however I do no have the time to figure out either method, sorry.  At least you now know what changes where and from there you may be able to either figure it out on your own or get additional help with knowing this little bit more.  Here's a clipped image in Xcode of the codecom.apple.symbolichotkeys.plist/code file.  img src="https://i.stack.imgur.com/kLSSh.png" alt="enter image description here"  BTW I trapped the changes using a third party utility that logged the filesystem changes and then converted that information to a more human readable output to provide this information.  <answer260026> strongThis is my recommendation:/strong use a utility such as Karabiner to accompish such customization.  As a developer, I want to say that personally I find it to be a fascinating and tantalizing issue, and it really showcases the uglier, darker side of macOS skulking behind the scenes which only software devs and hackers can truly appreciate...  The problem is simple enough: emI just want to remap the default key combination to my own binding./em  Why on earth is it so difficult/complicated? I intend to find out and post a solution... Stay tuned.  <comment243518> I appreciate the work that went into this post. I went through diffing the changes from what the defaults are, to what I want to change them to, and ended up with this script: http://sprunge.us/YdXP <comment243519> It does seem to change the proper plist files, the only issue is, the shortcuts do not actually change, not after reboots, re-reading the file, or anything. <comment291815> What's the name of this "third party utility that logged the filesystem changes and then converted that information to a more human readable output"? <comment291820> @Allen Bargi, IIRC It was probably `filemon` which was part of the Extras from the book "Mac OS X Internals - To The Apple's Core" in the form of _source code_ [`filemon.c`](http://www.newosxbook.com/src.jl?tree=listings&file=3-filemon.c) which I compiled to an executable on my system. I then compared the differences in the changed file of its current state against the file from a Time Machine backup made just before the changes.  You can also use the native [fs_usage](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/fs_usage.1.html) command. <comment326225> Thank you, I look forward to seeing what you find out. But downloading an external program takes as long as setting them through the Mac's standard interfaces, I am still hoping for a built-in command line solution.