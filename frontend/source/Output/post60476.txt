How to avoid the GUI password prompt when using `osascript`? <body> I’d like to use the codeosascript/code shell command to run some AppleScript, but I’d rather avoid the GUI password prompt. Instead, I’d prefer to run the script as codesudo/code from the command-line, so no GUI popups/prompts are needed.  The command is the following:  precodeosascript -e 'tell application "System Events" to set UI elements enabled to true' /code/pre  Running this command has the same effect as going to emSystem Preferences/em → emAccessibility/em and checking emEnable access for assistive devices/em.  If it doesn’t prompt for your password, try the opposite:  precodeosascript -e 'tell application "System Events" to set UI elements enabled to false' /code/pre  For either one of these commands you’ll get a password prompt in the OS X GUI:  img src="https://i.stack.imgur.com/5sJYP.png" alt="Screenshot"  My question is: strongis there any way to avoid this password prompt?/strong  hr  I assumed invoking codeosascript/code with codesudo/code privileges would do the trick, but alas — even in that case the GUI prompt is shown. :(  precodesudo osascript -e 'tell application "System Events" to set UI elements enabled to true' /code/pre  Is there a way around this?  <answer113924> You can suppress the password interface by modifying your Mac's authorization rights.  Use the built-in security command line tool or authbuddy to change the codesystem.preferences.accessibility/code right to codeallow/code:  precodesudo security authorizationdb write system.preferences.accessibility allow /code/pre  Opening up the system.preferences.accessibility right will permit any user to change the accessibility settings without a password prompt.  <comment69611> I don't know if was just an example, but you can also enable access for assistive devices with `sudo touch /var/db/.AccessibilityAPIEnabled`. <comment69661> @Lri `echo -n 'a' | sudo tee /private/var/db/.AccessibilityAPIEnabled  /dev/null 2&1; sudo chmod 444 /private/var/db/.AccessibilityAPIEnabled` ([as used here](https://github.com/mathiasbynens/dotfiles/commit/b9fa939cefe4f76336ce12ab83108c4e1d00e242)) more closely mimics what enabling the setting in System Preferences does, although it’s not instant (unlike going through SysPrefs manually). Any idea on which service to restart after this command? Anyhow, as you guessed, it was just an example. <comment133601> Very cool trick — thanks! Unfortunately this poses a potential security risk, as now any apps could make such changes as well. <comment133604> Only authenticated administrators may alter authorization rights. `allow` is one of many possible rules to test against and other rules are available to choose from or to create. The security manual page shows how to apply alternatives. <comment133605> Yes, only authenticated administrators can run the above script (`sudo`) — but I meant that after that, all apps on the system are able to change accessibility settings at will.