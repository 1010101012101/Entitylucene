Can sudo's annoying message be removed from Mountain Lion 10.8.0? <body> After the upgrade to 10.8.0, whenever I do a codesudo/code, I always get this message:   codedyld: DYLD_ environment variables being ignored because main executable (/usr/bin/sudo) is setuid or setgid/code  I have checked my code.bash_profile/code, code.zshrc/code all I could think of, and I don't see anything related to the codeDYLD_/code environment.  After googling for hours, I tried to put these two lines in my code.zshrc/code:  precodeunset LD_LIBRARY_PATH   unset DYLD_LIBRARY_PATH /code/pre  But the annoying message still appears.   I go to a guest account and did a codesudo/code but didnt' get this message. So I guess I have some custom library installed... But I don't know how to debug this.  <answer58444> Do you have any other DYLD_ variables set? Run codeset/code with no parameters to see all variables and unset anything that comes up with that prefix.  Note that it looks like this is really just a workaround for a bug, those messages shouldn't be printed unless you have DYLD_PRINT_WARNINGS enabled.  Also, the update to 10.8.1 seems to have patched this annoyance.  <answer75662> You probably have your LD_LIBRARY_PATH set.  <answer76213> work around found on the apple support forums by yokyoh1987,  https://discussions.apple.com/thread/4143805?start=30&amp;tstart=0  in your .profile/.bashrc/.bash_profile (depends on you terminal setting):  pre # set DYLD_* for my normal programs DYLD_LIBRARY_PATH='..'  # set an alternative sudo thesudo() { # back up the DYLD_* variables local BACK=$DYLD_LIBRARY_PATH  # unset DYLD_* unset DYLD_LIBRARY_PATH  # calling sudo /usr/bin/sudo "$@"  # restore DYLD_* after sudo finished export DYLD_LIBRARY_PATH=$BACK }  # redirect sudo alias sudo=thesudo /pre  <answer83566> In zsh:  precode sudo () { ( unset LD_LIBRARY_PATH DYLD_LIBRARY_PATH; exec command sudo $* ) } /code/pre  This spawns a sub-shell in which the environment variables that sudo complains about are unset, and then executes sudo.  Advantages over some of the other answers include:  ul liDoesn't remove LD_LIBRARY_PATH and DYLD_LIBRARY_PATH from your interactive shell environment (for non-sudo commands that need it)./li liUse of a subshell ensures that if you interrupt the sudo while it's running (e.g., with Ctrl-C), your LD_LIBRARY_PATH and DYLD_LIBRARY_PATH will be unchanged in your master shell (unlike the script in another answer which sets and unsets them in the interactive shell)./li liUse of exec ensures that the otherwise-unnecessary parent shell exits immediately when invoking sudo, so there's no extra processes hanging around while the command runs./li /ul  I'll leave it as an exercise to the reader to port to bash, et al.  <comment67210> so is this a bug from my end or is it ML? <comment67211> ML bug, as far as I can tell. Those DYLD_ variables can be important, removing them might break whatever they were set for. <comment67214> oh that's a relief. So for now I just need to disable DYLD_PRINT_WARNINGS right? But could you show me how..? <comment67215> Well, the bug is that you're not supposed to see those messages unless you set the environment variable DYLD_PRINT_WARNINGS, but for some reason Mountain Lion prints them either way. <comment67216> hmm i see. thanks for explaining! <comment87827> As the poster writes, he/she has already `unset LD_LIBRARY_PATH`, and the problem persists. <comment87834> 10.8.1 Didn't fix the problem <comment87836> Unsetting all DYLD_ environment variables is *not* a solution as they are there for a reason. It's a bug and we are stuck with it until Apple fixes it. <comment88448> That's a clever little piece of env management. <comment96189> One problem with this solution is that if you interrupt the sudo (e.g., via ctrl-c) your DYLD_LIBRARY_PATH var will silently be left unset in your interactive shell because the restore operation at the end will not have executed.  Using a subshell (see my other answer to this question) solves this. <comment105951> I have this problem on 10.8.3 <comment110838> Also confirming this problem is still there on 10.8.4 12E55 <comment110839> "I'll leave it as an exercise to the reader to port to bash, et al."  Because most Apple users use ZSH over the preinstalled Bash (sarcasm).