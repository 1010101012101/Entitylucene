How do I speed up new Terminal tab loading time? <body> How can i speed up the terminal startup in Lion?  I'm not referring to the startup of the Terminal application, but to the startup terminal windows, like when i open a new tab.  I don't have anything in my strong.bash_profile/strong file and i run coderm -rf  /private/var/log/asl/*.asl/code every 4 hours (which clear those files that usually make terminal slow ).  Currently, when i open a new tab, it takes 3-4 seconds until i can run something.  <answer41785> It is all about investigating the cause. You can see what's being done while the process starts by inputing codebash -x/code which will print out the process of starting up the shell.  Personally, I only notice the delay between activation and de-activation of the app and in the first tab created after a period of activity. It always makes me think that it is about memory pages being moved around.  <answer47965> Reduce your history to something between 4 and 10 thousand lines and perhaps try quitting and discarding all saved windows. I have seen both make a difference on slower machines - especially ones without SSD for storage.   <answer54167> Create an empty file in your home folder called code.hushlogin/code; this will significantly decrease the time it takes for a Terminal.app tab to appear.  When you create a new Terminal tab, you are going through the login process. The process involves fetching various information about your previous login session, message of the day, and displaying system messages. This can be the source of significant delays. Try hushing these messages to see if the delay disappears.  You can create the code.hushlogin/code file in Terminal.app using the following command:  precodetouch ~/.hushlogin /code/pre  The file will take effect immediately.  You can learn more about the code.hushlogin/code file and the login process in general in the login manual.  <answer71930> strongShort Answer:/strong  The problem is caused by a (potentially) expensive ASL system log lookup.  To see this in action, run codesudo fs_usage | grep 'asl.*login'/code in a Terminal window, then open a new Terminal window.  To solve the problem, configure Terminal to launch a non-standard shell:  ol liCreate a symlink to your preferred shell.  E.g.: codesudo ln -s /bin/bash /usr/local/bin/bash/code/li liOpen Terminal Preferences and select the "General" tab./li liSelect "Shells open with: Command" and enter the symlink you created in step 1.  E.g. "/usr/local/bin/bash"./li /ol  Note 1: You may also need to add codebash/code and code-bash/code to the process list at "Terminal Preferences  Profiles  Shell  Ask before closing".  Note 2: code/usr/local/bin/code is writable in OS X 10.11 (El Capitan) Rootless mode.    strongTo verify the fix:/strong  ul liOpen a new Terminal window./li li"Last Login:" should emnot/em be displayed at the top/li liOpen the inspector (Command + I) and select the Info tab./li liThe command should read codelogin -pfq username /usr/bin/bash/code or codelogin -pfql username .../code/li /ul  Important: If the login command does not include the code-q/code parameter, then you have not fixed the problem.  You can also use codesudo fs_usage | grep 'asl.*login'/code to verify that code/var/log/asl/code is not accessed when opening a new Terminal window.  strongDetails:/strong  There are a number of bugs at play here.  The actual cause of the slowness is code/usr/bin/login/code, which by default will display the date of your last login.  To get this last login date, it searches the ASL (Apple System Log) database at code/var/log/asl//code.  These log files can be very heavily fragmented and it's this file fragmentation that causes the delay when opening a new window or tab.  (Bug 1)  The only way to suppress the ASL search for last login is to pass the code-q/code parameter to code/usr/bin/login/code.  The code.hushlogin/code file will also suppress the "Last Login" display, but it does not suppress the expensive ASL search. (Bug 2)  Terminal always uses code/usr/bin/login/code to launch each new window/shell.  There is no option to launch a shell directly nor is there a way to directly control the parameters passed to code/usr/bin/login/code (Bug 3).  As it turns out, Terminal will pass the code-q/code parameter to code/usr/bin/login/code when it is configured to use a emnon-standard/em shell.  (Bug 4)  The code-q/code parameter is what we need to avoid the problem, hence the symlink to code/usr/local/bin/bash/code.  <answer170842> OK I have a similar conclusion to Darren, though slightly different profiling mechanism (NB slow login can still occur in Yosemite).  Here's a way to tell emwhat/em is actually running when you start a new login window, using the OS X sample profiler command.  Find out what command a normal login executs  precode$ ps -ef | grep login /code/pre  You'll seee something like codelogin -pfl username /bin/bash -c exec -la bash /bin/bash/code  Create a script file name codeprofile_login.sh/code with the following contents by adding a   code-c ""/code   to the end of the discovered command to request that bash return immediately, with contents like this:  precodelogin -pfl username /bin/bash -c exec -la bash /bin/bash -c "" &amp; sudo sample $! -mayDie # sample the above command /code/pre  Make it executable   code$ chmod u+x profile_login.sh/code  and run it using sudo (codesample/code command requires it)  code$ sudo ./profile_login.sh/code  OK so go ahead and run it.  For instance by executing the codepurge/code command first.  On my box, I got a large output graph.  Looking for the "biggest numbered branches" (typically at the top) I saw the following two biggest offenders:  One from something called codepam_start/code which appears to opening pam auth lib images  precode+   ! 1068 pam_start  (in libpam.2.dylib) + 132  [0x7fff97295ab0] +   !    :   1066 openpam_dynamic  (in libpam.2.dylib) + 120  [0x7fff97293d14] +   !    :   |   +   !   1042 coresymbolication_load_image(CSCppDyldSharedMemoryPage*, ImageLoader const*, unsigned long long)  (in dyld) + 143  [0x7fff66725411] +   !    :   |   +   !   :     1042 mach_msg_trap  (in dyld) + 10  [0x7fff6674a472] /code/pre  and that is sometimes followed by another offender codegetlastlogxbyname/code  precode+   ! 583 getlastlogxbyname  (in libsystem_c.dylib) + 212  [0x7fff92b3ef7a] +   !       : 566 asl_file_open_read  (in libsystem_asl.dylib) + 143  [0x7fff8c27030d] +   !       : | 566 __open_nocancel  (in libsystem_kernel.dylib) + 10  [0x7fff97b39012]    +   !       : | 566 __open_nocancel  (in libsystem_kernel.dylib) + 10  [0x7fff97b39012] /code/pre  So basically, there are two offenders.  One is codepam/code (some type of authentication system) and the other it the codeasl/code "detect your latest login" stuff.  So apparently emjust/em deleting your code/private/var/log/asl/*.asl/code files is not enough.  The pam loading is much more expensive on my machine, anyway [SSD].  Feel free to run the above script and see if your system is the same.  Interestingly, the source code for these method calls seems to also be available online, for instance openpam_dynamic  If I follow Darren's answer, and replace my "shells open with" preference to something other than /bin/bash, I then see the following lines used to start new terminal tabs:  precode $ ps -ef | grep login   ... login -pfql packrd /bin/bash -c exec -la bash /usr/bin/bash /code/pre  So if I now use the same codesample/code trick on the new login command  precodelogin -pfql username /bin/bash -c exec -la bash /usr/bin/bash -c "" &amp; sudo sample $! -mayDie /code/pre  a much smaller stacktrace is generated, the biggest offender being:  precode+         8 pam_end  (in libpam.2.dylib) + 190  [0x7fff97294ebb] +             !           6 coresymbolication_unload_image(CSCppDyldSharedMemoryPage*, ImageLoader const*)  (in dyld) + 143  [0x7fff6e0f634f] /code/pre  I think this is because the login "-q" parameter is now being used.  Apparently this parameter skips both loading the pam modules emand/em looking up the last login time (both offenders). According to the docs of the codelogin/code command, touching the code~/.hushlogin/code file should do the same thing, but apparently this no longer works [at least for me with 10.10].  So, in summary, removing /private/var/log/asl/*.asl is not enough (in my experiment, it only accounted for at most 1/3 of the actual slowdown, though if you had mores files there it could account for a greater percentage I'm sure).  Anyway using similar scripts, you should be able to tell what's causing your local machine to bog down, and see if the above fix applies to you.  Feel free to comment here.  UPDATE: seems that codecoresymbolication_load_image/code can still take tons of time, even when codelogin -pfql/code is invoked (presumably some pam authentication module or other is having to "dial out" to a central login server or some odd, so has to wait for a response from a 3rd party).  So the only emreal/em workaround I have found is to use iTerm2, and change the preferences - profiles - general - Command to code/bin/bash/code instead.  <answer178360> Just run:  precodesudo creatbyproc.d sudo newproc.d /code/pre  in separate terminals and open the new open to see what is being executed during that time.  If nothing obvious, try the following:  precodesudo dtruss -an Terminal /code/pre  This will print all your details which are happening on tab loading time.   <answer192709> Open code/etc/profile/code and add the line codePATH=""/code so it looks like this:  precodeif [ -x /usr/libexec/path_helper ]; then     PATH=""     eval `/usr/libexec/path_helper -s` fi /code/pre  <answer195467> What I needed was changing from login shell to command code/bin/bash -il/code in iTerm's strongPreferences  Profiles  General  Command/strong.  I needed the option code-l/code (emMake bash act as if it had been invoked as a login shell/em) added in order to set environmental variables from code~/.bash_profile/code  <answer202163> In my case, after trying the above on my work machine without success, I found that the culprit was Active Directory. The fix was to go into Directory Utility and edit the AD service settings (double-click on "Active Directory") to enable "Create mobile account at login":  img src="https://i.stack.imgur.com/DwL9V.png" alt="screenshot of Directory Utility application w/Active Directory settings open"  This apparently causes the AD credentials to be cached locally, so the system no longer has to go out to the server every time it tries to validate your password.  You can get to Directory Utility with Spotlight or via the "Login Options" section of System Preferences / Users &amp; Groups (select the "Edit…" button next to "Network Account Server"):  img src="https://i.stack.imgur.com/3TdWP.png" alt="Users &amp; Groups pane showing &quot;Login Options&quot; and &quot;Edit…&quot;"  <answer270923> The problem for me was that the active directory domain server was invalid.  Changing it then rebooting the mac fixed it.  img src="https://i.stack.imgur.com/WCRW5.png" alt="enter image description here"  <comment47382> Perhaps there is something else wrong with your system? It shouldn't be that slow. Sometimes it takes a second or two for me, but usually it's only a split second. And I have a fair bit in `.bash_profile` (also check `~/.profile` by the way). Also: note you can start typing while bash is loading, and usually what you type will be copied to the command prompt once it's ready. <comment47433> Are you using a network account or a network home directory? Is Terminal responsive to user input while it's creating the terminal? Does it display the spinning busy cursor? <comment47434> To find out where Terminal is spending the time, open Activity Monitor, select Terminal and click the Sample Process toolbar button, then immediately go to Terminal and create a new window/tab. The sample may provide a clue as to where the time is going. Also, watch the process list in Activity Monitor: if "login" or "bash" (or whatever shell you're using) appear in the list during the delay, that means the delay is likely occurring in one of those two programs and not Terminal. <comment83508> .hushlogin does not actually solve the problem.  This can be confirmed by using `opensnoop`.  See my answer below. <comment83516> Do you know why -q is added if the command is a symlink to /bin/bash but not if it's /bin/bash? <comment83517> @LauriRanta It seems to be a bug in the 10.7 and 10.8 Terminal.  When the startup command is set to `/bin/bash` it behaves as if the Default Login Shell was selected.  Any command other than `/bin/bash` will work correctly, so using /usr/bin/bash is just a workaround.  This bug is not present in Snow Leopard. <comment88347> This is really great and helpfull answer. For me, I was having the same issue on my MacBook Pro. I just changed the settings jast as above and the terminal start up fixed again.   What is surprising me that : I then rechanged it back to the original settings. And it is still very fast. Weird bug needs to be solved by Apple. ( OS X 10.8.2 ) <comment88622> @Darren have you reported this suspected bug to Apple? If not, please could you do so through: https://bugreport.apple.com <comment124665> Whats exactly the trick for bash to run from /usr/bin/bash ? <comment147205> Have you checked your PATH variable? I noticed that mine was absurdly long with many repeats due to some confusing .bashrc going-ons. I removed the repeats and everything sped up! <comment180021> Confirmed that the same bug about ``/bin/bash`` still occurs under OS X 10.10 Yosemite. Use ``/usr/bin/bash`` instead. <comment181041> Unfortunately this breaks csshX so I must decide: faster terminal or csshX :( <comment188841> Unfortunate, this results in a promt about bash running every time you close the terminal on Yosemite. So not a nice fix :( <comment188843> @ClausJørgensen I haven't experienced that problem.  You may want to check the "Shell" settings under the Profiles tab. <comment188845> That helped, thanks <comment196588> The theory given here: http://www.proposedsolution.com/solutions/osx-terminal-slow-launch/ is that terminal is waiting on some other process that is slow before it can scan the ASL files [for instance, I have a whopping 5MB of asl files, I doubt reading them is a problem...] <comment209987> Apart from the ASL lookup, delays in login are most-often caused by being on a network with a directory server that is responding slowly when asked for your user info. If you're not on a network with directory services enabled, then I don't know what else would take significant time, other than general system congestion (CPU usage, memory pressure, I/O congestion). <comment210091> @ChrisPage Yeah probably some network directory services something or other, good tip. <comment212948> As @ClausJørgensen said, adding "bash" to the list of exceptions under "Shell" tab seems to be the solution. <comment232687> I'm on 10.10.3, and this didn't work for me. I looked in the inspector tab, and I saw that `login` used the `-q` option when I symlinked, but I saw no change in terminal startup time. Also, now I got an annoying prompt that @ClausJørgensen mentioned. <comment233354> Which stops the login search of ASL as per the accepted question <comment244243> out of all the solutions, this one worked for me. +50! <comment254352> @Darrren:  man login tells me:  -q      This forces quiet logins, as if a .hushlogin is present. The q option is what you say prevents the issue, but it just does the same as with hushlogin. <comment261965> Great information all around in this thread! This is the solution I used because it didn't require creating symlinks or anything. My new shell startup times have gone from ~5-10seconds to instant with this solution.