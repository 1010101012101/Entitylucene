How do I downgrade node or install a specific previous version using homebrew? <body> I'm using brew. I have node installed, using brew. I want to use an earlier version of node.  Online, I find instructions such as, for example:  precodecd /usr/local/Library/Formula brew remove node --force brew versions node git checkout 83988e4 /usr/local/Library/Formula/node.rb brew install node /code/pre  The problem I have with this is that codebrew/code doesn't seem to have a codeversions/code subcommand:  precode$ brew versions node Error: Unknown command: versions $ brew --version 0.9.5 /code/pre  I'm new to brew. Do I need to enable the codeversions/code subcommand somehow? Should I use a different subcommand instead? Is there a completely different method I should try?  I'm running OS X Yosemite (10.10.1); brew 0.9.5.  <answer171536> codebrew versions/code has to be installed at some point after you install codebrew/code.  precode$ brew tap homebrew/boneyard /code/pre  You can then use the codebrew versions/code command as the instructions assume.  <answer190604> You can do it without homebrew.   You can uninstall and then install the node manually.  You have to download your current running version. Here is the list.  Download the node-v{your-current-version-number}.tar.gz, extract it and then go to command line.  precodecd node-v{your-current-version-number} ./configure make sudo make install /code/pre  To uninstall it codesudo make uninstall/code  Then download the version you want to install and follow same steps above.  From this blog post  <answer207883> These days if you want to install a different version of codenode/code you do it this way:  First search for your desired package:  precodebrew search node /code/pre  This might give you the follow results:  precodeleafnode node ✔                node@0.10             node@4                node@6                nodeenv llnode node-build node@0.12 node@5 .... /code/pre  And then install the desired version:  precodebrew install node@0.12 /code/pre  Also remember, that you can install more than 1 node package at the same, but you cannot have them available at the same time. So if you have the latest/generic codenode/code package already installed you need to unlink it first:  precodebrew unlink node /code/pre  And then you can link a different version:  precodebrew link node@0.12 /code/pre  <answer217658> If you need it just specifically for Node, you can use codenvm/code. It is very convenient if you work with Node a lot.  <answer219057> If you faced troubles with homebrew to install any version of node, you can just download .pkg file for OSX from https://nodejs.org/dist/[VERSION_YOU_NEED]. This is only helps me to reinstall node  <answer231495> Let's imaging that you have 0.12.* version. To install (downgrade) 0.10 version of node throw the brew in OSX, you have to:  precode$ sudo brew tap homebrew-versions $ brew unlink node $ brew install https://raw.githubusercontent.com/Homebrew/homebrew-versions/master/node010.rb $ node -v /code/pre  List of all node versions is here  <answer242892> FYI, if you previously had the old version installed and haven't run codebrew cleanup/code (which deletes old versions), you can switch with something like codebrew switch node 5.7.0/code  All installed versions of node can be listed by running codebrew info node/code or codels -l /usr/local/Cellar/node//code  See the brew command cheat sheet: http://ricostacruz.com/cheatsheets/homebrew.html  <answer245835> There are a lot of answers here and other places that say to use homebrew-versions, but that gives you very limited options for which version of Node you can install.  It's much easier to use NVM and it allows you to switch between versions very easily.  precodehomebrew install nvm /code/pre  Then follow the instructions in the caveats -- codemkdir ~/.nvm/code and add two lines to your code.bash_profile/code and codesource .bash_profile/code  Then simply run codenvm install &lt;version&gt;/code for all the versions you need. Then codenvm use &lt;version&gt;/code to switch.  <answer262119> strongHere's step by step./strong  To see your current node version  precode$ node --version /code/pre  To see available node versions  precode$ brew search node /code/pre  To unlink from current version  precode$ brew unlink node /code/pre  Install any version e.g. 6  precode$ brew install node6-lts /code/pre  To link installed version  precode$ brew link node6-lts /code/pre  To see your current node version (again)  precode$ node --version /code/pre  <answer263664> As of this PR to homebrew/versions and this PR to homebrew, the answers involving codebrew tap homebrew/versions/code or code*-lts/code packages no longer work.  The correct answer is now:  precodebrew install node@&lt;version&gt; /code/pre  Where code&lt;version&gt;/code is code0.10/code, code0.12/code, code4/code, etc. For example, to install Node.js v6 (as of this writing, the most recent LTS version):  precodebrew install node@6 /code/pre  You may need to run codebrew update/code prior to these commands to ensure that these new versioned formulae are available. If you have another version of the codenode/code formula installed, you'll also need to run codebrew unlink node/code first.  <answer276475> https://nodejs.org/en/blog/release/   You can go here and install the version you need.  Before installing you might want to run codebrew unlink node/code to unlink the current version.  <comment201791> Which version of node.js are you looking to get installed? <comment201796> My boss tells me 10.32. I guess he means 0.10.32. I have 0.12.0 installed right now. <comment206243> `homebrew/boneyard` is outdated and going to be replaced with https://github.com/Homebrew/homebrew-versions as of March 2015. Install via `brew tap homebrew/versions`. <comment206248> With `homebrew/versions` you will get versioned name of the package: `brew search node = leafnode  node     node010   node04 node06   node08    nodebrew ...`. So do `brew install node010` followed by `brew link --overwrite node010` to install the 0.10 version of Node.JS. <comment222088> You might also need to `brew unlink node` before you `brew install node010` <comment228021> +1 this answer. FWIW, I was just able to copy the untarred ``bin/`` folder to my PATH to get this working. <comment259300> best answer on here. <comment280306> This was very helpful for me when I was trying to downgrade to 0.12.10 in order to install `bufferutil` correctly. Thank you! <comment302736> Note that you may be prompted to "unlink" an existing version of node before you can successfully install one of the other versions that was listed (per instructions above). By "unlinking" you are leaving the other version physically installed on your system but the one you install (after the unlink) will become the "default" version on your system. For example, you might have to type `brew unlink node` if you had installed `brew install node`. Then you could do `brew install homebrew/versions/node4-lts` (which you should see as a version listed per the instructions in this answer). <comment326075> Instead of `homebrew/versions/node06` it's now `homebrew/versions/node6-lts`. Also do `brew link node6-lts`. <comment330351> This no longer works. See http://apple.stackexchange.com/a/263664/213861 for the new method. <comment330398> I've updated my answer to reflect latest brew changes. Thanks! <comment347967> What would the advantage be of doing it this way, as opposed to using brew (as several other answers describe) or uninstalling node and then manually installing it (as @Terente-Ionut-Alexandru's answer described)? <comment347972> @JohnN brew versions is deprecated as of now.Its alternatives are not very easy to understand. Also, it is kinda complex through brew to install the exact version. <comment347979> @Paweł-Gościcki's answer (the highest rated, with 140 votes) seems very easy to understand, and not at all complex - which matches my recent experience with brew and different versions of formulae. My point is that your answer doesn't seem to add to anything that hasn't already been said in other answers - unless there's a reason to unlink+manually install rather than uninstall+manually install, as Terente suggested? <comment348136> @JohnN That ofcourse, is easy to understand . But you will be limited by options that brew search gives. For eg. if you want node 4.4.6 exactly but the brew will only provide a node@4 option. Hence. <comment348138> There are, I think, 3 decent answers to the question: (1) use brew, (2) use nvm, and (3) uninstall and manually install. What I'm trying to get you to do is explain why your answer adds to these existing answers. Why do you feel that unlinking+manually installing is preferable to the existing answers? Specifically, why do you feel that *unlinking*+manually installing is better than *uninstalling*+manually installing, as Terente's answer suggests? <comment348139> I got your point. I just mentioned this answer because someone else might have been in the situation that they first installed the version through brew and might have trouble installing the correct version. As of Terente's answer, I might have overlooked it the first time because, in my experience, there has not been need to make. <comment349392> Just what I needed <comment363458> What determines which packages gets in there? I would like to install `node@7` but no such package exists. <comment363501> I believe only LTS releases are included, that's why v7 is missing. <comment363890> According to nvm docs brew and nvm are not a supported combo. I commented on this here. https://github.com/angular/angular-cli/issues/3554#issuecomment-311488799 I'd be interested in hearing any war stories on this. Because on the surface I seem to have this working despite the fact it's "not supported"