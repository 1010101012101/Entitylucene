Why is bash echoing instead of running Apple Script <body> I have a function in my code.bash_profile/code that should allow me to add startup items. The only issue is this echo's a string instead of running the Apple Script.  This is my function  precodefunction addtologin(){     if [ $3 = "hidden" ]; then         osascript -e 'tell application "System Events" to make new login item at end with properties {path:"${1}/${2}.app", name:"${2}", hidden:true}'     else         osascript -e 'tell application "System Events" to make new login item at end with properties {path:"$1/$2.app", name:"$2", hidden:false}'     fi } /code/pre  When I run codeaddtologin /Users/iProgram/Applications Spotify hidden/code it outputs codelogin item ${2}/code.  Why is this? Why doesn't it adding Spotify to the Login items?  If it helps, here is my full code.bash_profile/code incase it is causing an issue (don't think it is)  b.bash_profile/b  precodesource .colors export PS1=${BOLD}${CYAN}\\W\ \\A$\ ${DEFAULTCOLOR} export SUDO_PS1=\\W\ \\A#\ export PATH=$PATH:/Users/iProgram/bin export EDITOR=/usr/bin/vim  function ipaddress(){     ifconfig en0 | awk '/inet / {print $2}' }  function macaddress(){     ifconfig en0 | awk '/ether/ {print toupper($2)}' }  function wifi-off(){     networksetup -setairportpower en0 off }  function wifi-on(){     networksetup -setairportpower en0 on }  function wifi-connect(){     networksetup -setairportnetwork en0 $1 $2 }  function nano(){     vim $@ }  function home(){     cd ~ }  function addtologin(){     if [ $3 = "hidden" ]; then         osascript -e 'tell application "System Events" to make new login item at end with properties {path:"${1}/${2}.app", name:"${2}", hidden:true}'     else         osascript -e 'tell application "System Events" to make new login item at end with properties {path:"${1}/${2}.app", name:"${2}", hidden:false}'     fi } /code/pre  b.colors/b  precodeexport BLACK='\033[0;30m' export RED='\033[0;31m' export GREEN='\033[0;32m' export BROWN='\033[0;33m' export BLUE='\033[0;34m' export PURPLE='\033[0;35m' export CYAN='\033[0;36m' export LIGHTGREY='\033[0;37m'  export DARKGREY='\033[1;30m' export LIGHTRED='\033[1;31m' export LIGHTGREEN='\033[1;32m' export YELLOW='\033[1;33m' export LIGHTBLUE='\033[1;34m' export LIGHTPURPLE='\033[1;35m' export LIGHTCYAN='\033[1;36m' export WHITE='\033[1;37m'  export DEFAULTCOLOR='\033[0m' export BOLD='\033[1m' /code/pre  If it helps, I got the osascript from here  <answer204742> The problem are the single quotes in codeosascript -e '...'/code. Single quotes prevent variable expansion. This means that code${2}/code remains code${2}/code instead of being replaced with codeSpotify/code for example.  Try this:  precodefunction addtologin(){     if [ $3 = "hidden" ]; then         osascript -e "tell application \"System Events\" to make new login item with properties {path:\"${1}/${2}.app\", name:\"${2}\", hidden:true}"     else         osascript -e "tell application \"System Events\" to make new login item with properties {path:\"${1}/${2}.app\", name:\"${2}\", hidden:false}"      fi } /code/pre  Here we use double quotes which allow for expansion. To not confuse them with the inner quotes we need to escape those with code\/code.  Now running the command with codeSpotify/code will output codelogin item Spotify/code. This is just the result from the AppleScript, a login item was created. To suppress this you can add code&gt;/dev/null/code to the command: codeosascript -e "tell ..." &gt;/dev/null/code. 