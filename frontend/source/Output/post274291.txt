Automate removing the first page of a bunch of PDFs <body> I have the codecpff/code, and I would like to let my Mac automate removing the first page of many PDF's. I already have a script to remove the last page from my previous question, Automate removing the last page of a bunch of PDFs.  How can I change the code in the answer to that question to remove the first page instead of the last?  <answer274296> I've done this using the Coherent PDF Command Line Tools Community Release.  You can download either the pre-built tools or the emsource code/em to compile the later on your own, however the latter requires OCaml be installed when compiling. So the pre-built tools are the easiest way to go. The downloaded distribution file, e.g. emcpdf-binaries-master.zip/em, contains binaries for Linux, OS X/macOS and Windows and is ~5 MB in size.  Once downloaded and extracted em(double-clicking the .zip file)/em you'd copy the, e.g. em~/Downloads/cpdf-binaries-master/OSX-Intel/cpdf/em, file to a location that is defined in the codePATH/code emenvironment variable/em, e.g. code/usr/local/bin//code to make it emglobally/em available on the command line in Terminal. If it's not in the codePATH/code then you'll have to use the emfully qualified pathname/em to the codecpdf/code executable or code./cpdf/code if it's in the present working directory (codepwd/code). In Terminal, type codeecho $PATH/codeso show the codePATH/code.  The emsyntax/em for removing the first page when the PDF file has 2 or more  pages is:  precodecpdf in.pdf 2-end -o out.pdf /code/pre  Because codecpdf/code reads the original file (emin.pdf/em) and writes to a new file (emout.pdf/em) the emout.pdf/em filename needs to be different if saved to the same location as the emin.pdf/em file, or save it to a different location with the same emin.pdf/em filename as the emout.pdf/em filename, or whatever emout.pdf/em filename you want.  Below, I'll show two examples of automation using codecpdf/code to remove the first page of a PDF file, assuming it has two or more pages. One using an strongAutomator/strong emworkflow/em as a emService/em available in strongFinder/strong on the emServices Context Menu/em and the other as a codebash/code emscript/em, to use in Terminal.  br  strongAs an Automator Service Workflow available in Finder on the Services Context Menu:/strong  hr  In Automator create a new emservice workflow/em using the settings as shown in the image below and copy and paste the emcode/em below the image into the strongRun Shell Script/strong emaction/em and save as e.g.: strongRemove First Page from PDF/strong  To use strongRemove First Page from PDF/strong, in strongFinder/strong select the PDF files you want to remove the first page from and then select strongRemove First Page from PDF/strong from the strongContext Menu/strong via emright-click/em or emcontrol-click/em, or from strongFinder/strong  strongServices/strong  strongRemove First Page from PDF/strong  img src="https://i.stack.imgur.com/XKBLl.png" alt="Automator Service Workflow Image"  hr  precodefor f in "$@"; do             # Get Page Count.         p="$(/usr/local/bin/cpdf -info "$f" | awk '/Pages:/{print $2}')"             # Get file extension.         ext="${f##*.}"             # Get filename without extension.         fn="${f%.*}"             # Rename original file to "filename (original).pdf".             # Use '-n' to not overwrite an existing file.         mv -n "$f" "${fn} (original).${ext}"         case "$p" in             1)                     # PDF file has 1 page. Make a copy to the                     # original name for consistency of output.                     # Use '-n' to not overwrite an existing file.                 cp -n "${fn} (original).${ext}" "$f"                 ;;             *)                     # PDF file has 2 or more pages.                     # Remove the first page.                 /usr/local/bin/cpdf "${fn} (original).${ext}" 2-end -o "$f"                  ;;               esac             # If you don't want to keep the original             #  file, remove '#' from the next line.         # rm "${fn} (original).${ext}" done /code/pre  hr  Note that the codePATH/code passed a strongRun Shell Script/strong emaction/em in strongAutomator/strong is, code/usr/bin:/bin:/usr/sbin:/sbin/code. So the emcode/em above is using the emfully qualified pathname/em to the codecpdf/code emexecutable/em, code/usr/local/bin/cpdf/code as that is where I placed it so as to be available in strongTerminal/strong by way of using its name codecpdf/code, only.  Also note that if you do not want to keep the original files, then uncomment (remove the code#/code from in front of) the code# rm "${fn} (original).${ext}"/code emcommand/em, just above the last line of emcode/em codedone/code.  hr  br  strongAs a codebash/code emscript/em to use in Terminal:/strong  hr  Create the codebash/code emscript/em in the following manner:  In Terminal:  precodetouch rfpfpdf open rfpfpdf /code/pre  Copy the emcode block/em, starting with code#!/bin/bash/code, below into the opened coderfpfpdf/code document and then save it.  Back in Terminal:  Make the emscript/em executable:  precodechmod u+x rfpfpdf /code/pre  Now move the coderfpfpdf/code emscript/em to, e.g.: code/usr/local/bin//code  precodesudo mv rfpfpdf /usr/local/bin/ /code/pre  You can then change directory codecd .../code to a directory that has the PDF files that you want to remove the first page from and then simply type coderfpfpdf/code and press kbdenter/kbd.  The original files will be moved to "emfilename (original).pdf/em" and the newly create PDF file sans the first page, if 2 or more pages, will have the original codefilename.pdf/code name.  hr  precode#!/bin/bash  for f in *.pdf *.PDF; do     if [[ -f $f ]]; then             # Get Page Count.         p="$(cpdf -info "$f" | awk '/Pages:/{print $2}')"             # Get file extension.         ext="${f##*.}"             # Get filename without extension.         fn="${f%.*}"             # Rename original file to "filename (original).pdf".             # Use '-n' to not overwrite an existing file.         mv -n "$f" "${fn} (original).${ext}"         case "$p" in             1)                     # PDF file has 1 page. Make a copy to the                     # original name for consistency of output.                     # Use '-n' to not overwrite an existing file.                 cp -n "${fn} (original).${ext}" "$f"                 ;;             *)                     # PDF file has 2 or more pages.                     # Remove the first page.                 cpdf "${fn} (original).${ext}" 2-end -o "$f"                  ;;               esac             # If you don't want to keep the original             #  file, remove '#' from the next line.         # rm "${fn} (original).${ext}"     fi done /code/pre  hr  Note that the emcode/em above assumes the codecpdf/code emexecutable/em is in a emdirectory/em that is within the codePATH/code emenvironment variable/em, e.g.: code/usr/local/bin//code  Also note that if you do not want to keep the original files, then uncomment (remove the code#/code from in front of) the code# rm "${fn} (original).${ext}"/code emcommand/em, just above the last line of emcode/em codedone/code. 