How to diagnose repeated OS X hang / spinning beach ball of death? <body> Here are my stats and brief summary of the problem:   macbook pro; mid 2009; 13 inch; 2.26 GHz; 4GB RAM (currently, will elaborate); 10.7.5  The issue I'm having is that the computer constantly gets the BBOD (spinning Beach Ball Of Death) when performing everyday tasks. The BBOD will not resolve, even if I leave it over a few hours, so I eventually need to restart the computer. This can happen frequently, ranging from a few times in an hour to once a day.   I have kept a detailed log of each freeze (time, what I was doing, general state of the system) and do not notice any triggers. As of late I have been getting error reports in the console associated with a few BBOD episodes. This may help diagnose the issue, though I don't know how to dissect the error reports very well. The only thing I can discern is that the Exception Type is SIGBUS which I've heard is usually RAM associated. An error report is attached at the end.   What I have done so far:  ul liRe-install OSX (not much change)/li liRun memtest (RAM passed)/li liExchange RAM/test sockets by leaving one module in and observing behavior (bank 1 seems to act up more than bank 0, but the freezing still occurs regardless of which bank a lone module is in. I've also used different RAM sticks to make sure it isn't the RAM, having a 1gb;2gb;4gb at my disposal)./li /ul  It seems to be a hardware issue at least. I'm quite sure the RAM is alright, since in desperation I sent back a kingston 4gb stick that I thought was the source of the issue.   The current configuration is 1-4gb kingston module in bank 0. Previously I've had a 2gb and 4gb module (2gb from Apple; original purchase. 4gb; upgrade-put in by me) in, but it acted up at a higher frequency.   Let me know if any more information would help diagnose the issue. I'm a bit lost.   Here is an example of the console error report. There is little change between each error report and I have roughly 15 error reports like this one:   precodeProcess:         crsud [50] Path:            /usr/libexec/crsud Identifier:      crsud Version:         ??? (???) Code Type:       X86-64 (Native) Parent Process:  launchd [1]  Date/Time:       2013-07-21 00:07:05.384 -0500 OS Version:      Mac OS X 10.7.5 (11G63) Report Version:  9  Crashed Thread:  0  Dispatch queue: com.apple.main-thread  Exception Type:  EXC_BAD_ACCESS (SIGBUS) Exception Codes: 0x000000000000000a, 0x000000010048a000  VM Regions Near 0x10048a000:     Stack                  0000000100408000-000000010048a000 [  520K] rw-/rwx SM=COW  thread 4 --&gt; mapped file            000000010048a000-0000000100492000 [   32K] r--/r-x SM=PRV  /private/var/db/*     shared memory          0000000100492000-0000000100493000 [    4K] rw-/rw- SM=SHM    Application Specific Information: objc[50]: garbage collection is OFF  Thread 0 Crashed:: Dispatch queue: com.apple.main-thread 0   com.apple.security              0x00007fff872a4278 Security::SharedMemoryClient::SharedMemoryClient(char const*, unsigned int) + 288 1   com.apple.security              0x00007fff872a495c Security::ModuleNexus&lt;Security::SecurityServer::SharedMemoryClientMaker&gt;::make() + 59 2   com.apple.security              0x00007fff87143eb4 Security::ModuleNexusCommon::create(void* (*)()) + 166 3   com.apple.security              0x00007fff872a486d Security::ModuleNexus&lt;Security::SecurityServer::SharedMemoryClientMaker&gt;::operator()() + 71 4   com.apple.security              0x00007fff872a472e Security::SecurityServer::NotificationPort::NotificationPort(unsigned int) + 40 5   com.apple.security              0x00007fff872a479f Security::SecurityServer::ThreadNotifier::ThreadNotifier() + 79 6   com.apple.security              0x00007fff8717391c Security::ThreadNexus&lt;Security::SecurityServer::ThreadNotifier&gt;::operator()() + 48 7   com.apple.security              0x00007fff871e2a3e Security::KeychainCore::CCallbackMgr::CCallbackMgr() + 32 8   com.apple.security              0x00007fff871e2ac2 CallbackMaker::CallbackMaker() + 44 9   com.apple.security              0x00007fff871e2b87 Security::ModuleNexus&lt;CallbackMaker&gt;::make() + 28 10  com.apple.security              0x00007fff87143eb4 Security::ModuleNexusCommon::create(void* (*)()) + 166 11  com.apple.security              0x00007fff871a8cf5 Security::ModuleNexus&lt;CallbackMaker&gt;::operator()() + 71 12  com.apple.security              0x00007fff871e28fc Security::KeychainCore::CCallbackMgr::AddCallback(int (*)(unsigned int, SecKeychainCallbackInfo*, void*), unsigned int, void*) + 42 13  com.apple.security              0x00007fff8720acfd SecKeychainAddCallback + 29 14  com.apple.CFNetwork             0x00007fff8cf57d8d _CFURLProtocolInitHTTPProtocol + 17 15  com.apple.CFNetwork             0x00007fff8cf57d5e URLProtocolRegistry::URLProtocolRegistry() + 78 16  com.apple.CFNetwork             0x00007fff8cf57cf7 URLProtocol::InitClass() + 65 17  libsystem_c.dylib               0x00007fff839f7e06 pthread_once + 86 18  com.apple.CFNetwork             0x00007fff8cf57cad URLProtocol::Class() + 23 19  com.apple.CFNetwork             0x00007fff8cf57c7d _CFURLProtocolRegisterFoundationBridge + 30 20  com.apple.Foundation            0x00007fff8aacb1b8 +[_NSCFURLProtocolBridge registerWithCFURLProtocol] + 118 21  libsystem_c.dylib               0x00007fff839f7e06 pthread_once + 86 22  com.apple.Foundation            0x00007fff8aacb033 +[NSURLProtocol(NSURLProtocolPrivate) _registeredClasses] + 23 23  com.apple.Foundation            0x00007fff8aacae83 NSURLConnectionInit + 184 24  libsystem_c.dylib               0x00007fff839f7e06 pthread_once + 86 25  com.apple.Foundation            0x00007fff8abd4044 -[NSURLConnection(NSURLConnectionPrivate) _initWithRequest:delegate:usesCache:maxContentLength:startImmediately:connectionProperties:] + 62 26  com.apple.Foundation            0x00007fff8aacadc5 -[NSURLConnection initWithRequest:delegate:] + 47 27  com.apple.Foundation            0x00007fff8abd2487 +[NSURLConnection connectionWithRequest:delegate:] + 56 28  crsud                           0x00000001000022d7 0x100000000 + 8919 29  crsud                           0x0000000100002e00 0x100000000 + 11776 30  crsud                           0x0000000100001ec2 0x100000000 + 7874 31  crsud                           0x0000000100001aaf 0x100000000 + 6831 32  crsud                           0x0000000100001951 0x100000000 + 6481 33  crsud                           0x0000000100001870 0x100000000 + 6256  Thread 1:: Dispatch queue: com.apple.libdispatch-manager 0   libsystem_kernel.dylib          0x00007fff8df507e6 kevent + 10 1   libdispatch.dylib               0x00007fff8193d786 _dispatch_mgr_invoke + 923 2   libdispatch.dylib               0x00007fff8193c316 _dispatch_mgr_thread + 54  Thread 2: 0   libsystem_kernel.dylib          0x00007fff8df50192 __workq_kernreturn + 10 1   libsystem_c.dylib               0x00007fff839fa594 _pthread_wqthread + 758 2   libsystem_c.dylib               0x00007fff839fbb85 start_wqthread + 13  Thread 3: 0   libsystem_kernel.dylib          0x00007fff8df50192 __workq_kernreturn + 10 1   libsystem_c.dylib               0x00007fff839fa594 _pthread_wqthread + 758 2   libsystem_c.dylib               0x00007fff839fbb85 start_wqthread + 13  Thread 4:: com.apple.NSURLConnectionLoader 0   libsystem_kernel.dylib          0x00007fff8df4e67a mach_msg_trap + 10 1   libsystem_kernel.dylib          0x00007fff8df4dd71 mach_msg + 73 2   com.apple.CoreFoundation        0x00007fff8dbe150c __CFRunLoopServiceMachPort + 188 3   com.apple.CoreFoundation        0x00007fff8dbe9c74 __CFRunLoopRun + 1204 4   com.apple.CoreFoundation        0x00007fff8dbe9486 CFRunLoopRunSpecific + 230 5   com.apple.Foundation            0x00007fff8aacafd7 +[NSURLConnection(NSURLConnectionReallyInternal) _resourceLoadLoop:] + 335 6   com.apple.Foundation            0x00007fff8aabf72a -[NSThread main] + 68 7   com.apple.Foundation            0x00007fff8aabf6a2 __NSThread__main__ + 1575 8   libsystem_c.dylib               0x00007fff839f88bf _pthread_start + 335 9   libsystem_c.dylib               0x00007fff839fbb75 thread_start + 13  Thread 0 crashed with X86 Thread State (64-bit):   rax: 0x000000010048a000  rbx: 0x0000000100492000  rcx: 0x0000000100489fff  rdx: 0x0000000000000000   rdi: 0x0000000000000004  rsi: 0x0000000000008000  rbp: 0x00007fff5fbff020  rsp: 0x00007fff5fbfefe0    r8: 0x0000000000000004   r9: 0x0000000000000000  r10: 0x00007fff8df4fa1e  r11: 0x0000000000000206   r12: 0x0000000100518b98  r13: 0x00007fff5fbfeff0  r14: 0x0000000000000004  r15: 0x0000000100518b80   rip: 0x00007fff872a4278  rfl: 0x0000000000010203  cr2: 0x000000010048a000 Logical CPU: 1  Binary Images:        0x100000000 -        0x10000afff  crsud (??? - ???) &lt;ABD7454B-0BB3-3A4E-9F74-98CF8975706D&gt; /usr/libexec/crsud     0x7fff6659d000 -     0x7fff665d1baf  dyld (195.6 - ???) &lt;C58DAD8A-4B00-3676-8637-93D6FDE73147&gt; /usr/lib/dyld     0x7fff8107e000 -     0x7fff8107efff  libkeymgr.dylib (23.0.0 - compatibility 1.0.0) &lt;61EFED6A-A407-301E-B454-CD18314F0075&gt; /usr/lib/system/libkeymgr.dylib     0x7fff81142000 -     0x7fff81172ff7  com.apple.DictionaryServices (1.2.1 - 158.3) &lt;5E2EBBFD-D520-3379-A431-11DAA844B8D6&gt; /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices     0x7fff81463000 -     0x7fff81463fff  com.apple.CoreServices (53 - 53) &lt;043C8026-8EDD-3241-B090-F589E24062EF&gt; /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices     0x7fff814d7000 -     0x7fff81542ff7  com.apple.framework.IOKit (2.0 - ???) &lt;FE838BB6-D42E-3291-A1A0-6F53FC970261&gt; /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit     0x7fff81543000 -     0x7fff81627ff7  com.apple.CoreServices.OSServices (478.50 - 478.50) &lt;3D6AA4EF-C601-36C7-8F3A-A00964F01759&gt; /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices     0x7fff8193a000 -     0x7fff81948fff  libdispatch.dylib (187.10.0 - compatibility 1.0.0) &lt;8E03C652-922A-3399-93DE-9EA0CBFA0039&gt; /usr/lib/system/libdispatch.dylib     0x7fff81979000 -     0x7fff8197ffff  com.apple.DiskArbitration (2.4.1 - 2.4.1) &lt;CEA34337-63DE-302E-81AA-10D717E1F699&gt; /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration     0x7fff819aa000 -     0x7fff819b8fff  com.apple.NetAuth (3.2 - 3.2) &lt;F0D60E34-37A9-308D-B44E-E3450906173A&gt; /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth     0x7fff819b9000 -     0x7fff819f8fff  com.apple.AE (527.7 - 527.7) &lt;B82F7ABC-AC8B-3507-B029-969DD5CA813D&gt; /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE     0x7fff82012000 -     0x7fff82024ff7  libz.1.dylib (1.2.5 - compatibility 1.0.0) &lt;30CBEF15-4978-3DED-8629-7109880A19D4&gt; /usr/lib/libz.1.dylib     0x7fff82025000 -     0x7fff820a8fef  com.apple.Metadata (10.7.0 - 627.37) &lt;B9BEB598-B6F2-3BFF-A8F3-C3C87CD076AB&gt; /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata     0x7fff820a9000 -     0x7fff820bcff7  libCRFSuite.dylib (??? - ???) &lt;0B76941F-218E-30C8-B6DE-E15919F8DBEB&gt; /usr/lib/libCRFSuite.dylib     0x7fff823c6000 -     0x7fff824c8fff  libxml2.2.dylib (10.3.0 - compatibility 10.0.0) &lt;AFBB22B7-07AE-3F2E-B88C-70BEEBFB8A86&gt; /usr/lib/libxml2.2.dylib     0x7fff8269f000 -     0x7fff826adff7  libkxld.dylib (??? - ???) &lt;01161870-E3B3-3F87-BA4A-0AA7A081F409&gt; /usr/lib/system/libkxld.dylib     0x7fff827ea000 -     0x7fff827f1fff  libcopyfile.dylib (85.1.0 - compatibility 1.0.0) &lt;0AB51EE2-E914-358C-AC19-47BC024BDAE7&gt; /usr/lib/system/libcopyfile.dylib     0x7fff8363d000 -     0x7fff8363eff7  libsystem_blocks.dylib (53.0.0 - compatibility 1.0.0) &lt;8BCA214A-8992-34B2-A8B9-B74DEACA1869&gt; /usr/lib/system/libsystem_blocks.dylib     0x7fff8399e000 -     0x7fff839a9ff7  com.apple.bsd.ServiceManagement (2.0 - 2.0) &lt;D836A22C-BBDC-3C9F-83D3-F8CC0EE75885&gt; /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement     0x7fff839aa000 -     0x7fff83a87fef  libsystem_c.dylib (763.13.0 - compatibility 1.0.0) &lt;41B43515-2806-3FBC-ACF1-A16F35B7E290&gt; /usr/lib/system/libsystem_c.dylib     0x7fff83ae4000 -     0x7fff83ae9ff7  libsystem_network.dylib (??? - ???) &lt;5DE7024E-1D2D-34A2-80F4-08326331A75B&gt; /usr/lib/system/libsystem_network.dylib     0x7fff83aff000 -     0x7fff83b3afff  libsystem_info.dylib (??? - ???) &lt;35F90252-2AE1-32C5-8D34-782C614D9639&gt; /usr/lib/system/libsystem_info.dylib     0x7fff83b3b000 -     0x7fff83bddfff  com.apple.securityfoundation (5.0 - 55116) &lt;70CDC3ED-39AA-3784-8715-F0F5E2CB9754&gt; /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation     0x7fff83c47000 -     0x7fff83c56ff7  libxar-nossl.dylib (??? - ???) &lt;A6ABBFB9-E4ED-38AD-BBBB-F9958B9CEFB5&gt; /usr/lib/libxar-nossl.dylib     0x7fff8417b000 -     0x7fff84215ff7  com.apple.SearchKit (1.4.0 - 1.4.0) &lt;4E70C394-773E-3A4B-A93C-59A88ABA9509&gt; /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit     0x7fff846f2000 -     0x7fff846f4fff  com.apple.TrustEvaluationAgent (2.0 - 1) &lt;1F31CAFF-C1C6-33D3-94E9-11B721761DDF&gt; /System/Library/PrivateFrameworks/TrustEvaluationAgent.framework/Versions/A/TrustEvaluationAgent     0x7fff846f5000 -     0x7fff84702fff  com.apple.CrashReporterSupport (10.7.4 - 353) &lt;6044CFB6-939E-3C73-BFBB-A8BBC096F135&gt; /System/Library/PrivateFrameworks/CrashReporterSupport.framework/Versions/A/CrashReporterSupport     0x7fff84703000 -     0x7fff84705fff  libquarantine.dylib (36.7.0 - compatibility 1.0.0) &lt;8D9832F9-E4A9-38C3-B880-E5210B2353C7&gt; /usr/lib/system/libquarantine.dylib     0x7fff84706000 -     0x7fff84707fff  libdnsinfo.dylib (395.11.0 - compatibility 1.0.0) &lt;853BAAA5-270F-3FDC-B025-D448DB72E1C3&gt; /usr/lib/system/libdnsinfo.dylib     0x7fff84d2f000 -     0x7fff84d39ff7  liblaunch.dylib (392.39.0 - compatibility 1.0.0) &lt;8C235D13-2928-30E5-9E12-2CC3D6324AE2&gt; /usr/lib/system/liblaunch.dylib     0x7fff84d3a000 -     0x7fff84d4cff7  libbsm.0.dylib (??? - ???) &lt;349BB16F-75FA-363F-8D98-7A9C3FA90A0D&gt; /usr/lib/libbsm.0.dylib     0x7fff84d52000 -     0x7fff8506efff  com.apple.CoreServices.CarbonCore (960.25 - 960.25) &lt;4FC1AB30-022C-3C67-AC46-FDCBFCB7EEDE&gt; /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore     0x7fff852e1000 -     0x7fff85351fff  com.apple.datadetectorscore (3.0 - 179.4) &lt;4AB32B7F-8EC2-327E-BAC8-80129AA36E7B&gt; /System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore     0x7fff853b6000 -     0x7fff853cdfff  com.apple.CFOpenDirectory (10.7 - 146) &lt;F321AE12-9592-3E56-AB8D-A47BA4696A0E&gt; /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory     0x7fff85487000 -     0x7fff8558efe7  libsqlite3.dylib (9.6.0 - compatibility 9.0.0) &lt;EE02BB01-64C9-304D-9719-A35F5CD6D04C&gt; /usr/lib/libsqlite3.dylib     0x7fff85629000 -     0x7fff8569fff7  libc++.1.dylib (28.4.0 - compatibility 1.0.0) &lt;A24FC3DA-4FFA-3DD2-9DCC-2B8D1B3BF97C&gt; /usr/lib/libc++.1.dylib     0x7fff85e80000 -     0x7fff85e81fff  liblangid.dylib (??? - ???) &lt;CACBE3C3-2F7B-3EED-B50E-EDB73F473B77&gt; /usr/lib/liblangid.dylib     0x7fff862c3000 -     0x7fff862c3fff  libOpenScriptingUtil.dylib (??? - ???) &lt;A7847713-F410-39C0-884F-A7188A18E742&gt; /usr/lib/libOpenScriptingUtil.dylib     0x7fff866fa000 -     0x7fff86738fff  com.apple.bom (11.0 - 183) &lt;F300B9EC-995E-33A7-9175-9F07D4B68F16&gt; /System/Library/PrivateFrameworks/Bom.framework/Versions/A/Bom     0x7fff870d8000 -     0x7fff870deff7  libunwind.dylib (30.0.0 - compatibility 1.0.0) &lt;1E9C6C8C-CBE8-3F4B-A5B5-E03E3AB53231&gt; /usr/lib/system/libunwind.dylib     0x7fff870df000 -     0x7fff870e0ff7  libremovefile.dylib (21.1.0 - compatibility 1.0.0) &lt;739E6C83-AA52-3C6C-A680-B37FE2888A04&gt; /usr/lib/system/libremovefile.dylib     0x7fff870e1000 -     0x7fff870e6fff  libcache.dylib (47.0.0 - compatibility 1.0.0) &lt;1571C3AB-BCB2-38CD-B3B2-C5FC3F927C6A&gt; /usr/lib/system/libcache.dylib     0x7fff87142000 -     0x7fff87437ff7  com.apple.security (7.0 - 55148.6) &lt;4535E500-973A-3BA7-AF65-DF5CF0658F02&gt; /System/Library/Frameworks/Security.framework/Versions/A/Security     0x7fff87552000 -     0x7fff875c5fff  libstdc++.6.dylib (52.0.0 - compatibility 7.0.0) &lt;6BDD43E4-A4B1-379E-9ED5-8C713653DFF2&gt; /usr/lib/libstdc++.6.dylib     0x7fff87632000 -     0x7fff8763fff7  libbz2.1.0.dylib (1.0.5 - compatibility 1.0.0) &lt;DFAB8CA8-CC9D-3F58-8C12-CE120442AACD&gt; /usr/lib/libbz2.1.0.dylib     0x7fff87640000 -     0x7fff87647fff  com.apple.NetFS (4.0 - 4.0) &lt;433EEE54-E383-3505-9154-45B909FD3AF0&gt; /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS     0x7fff87710000 -     0x7fff87719ff7  libsystem_notify.dylib (80.1.0 - compatibility 1.0.0) &lt;A4D651E3-D1C6-3934-AD49-7A104FD14596&gt; /usr/lib/system/libsystem_notify.dylib     0x7fff8771a000 -     0x7fff8771efff  libdyld.dylib (195.6.0 - compatibility 1.0.0) &lt;FFC59565-64BD-3B37-90A4-E2C3A422CFC1&gt; /usr/lib/system/libdyld.dylib     0x7fff87853000 -     0x7fff87858fff  libcompiler_rt.dylib (6.0.0 - compatibility 1.0.0) &lt;98ECD5F6-E85C-32A5-98CD-8911230CB66A&gt; /usr/lib/system/libcompiler_rt.dylib     0x7fff8785c000 -     0x7fff8785dfff  libunc.dylib (24.0.0 - compatibility 1.0.0) &lt;337960EE-0A85-3DD0-A760-7134CF4C0AFF&gt; /usr/lib/system/libunc.dylib     0x7fff8796c000 -     0x7fff87989fff  libxpc.dylib (77.19.0 - compatibility 1.0.0) &lt;9F57891B-D7EF-3050-BEDD-21E7C6668248&gt; /usr/lib/system/libxpc.dylib     0x7fff882f7000 -     0x7fff882fffff  libsystem_dnssd.dylib (??? - ???) &lt;584B321E-5159-37CD-B2E7-82E069C70AFB&gt; /usr/lib/system/libsystem_dnssd.dylib     0x7fff884e3000 -     0x7fff885effef  libcrypto.0.9.8.dylib (49.0.0 - compatibility 0.9.8) &lt;C24B1416-99E4-3DF5-B51B-E6FCE8F690A4&gt; /usr/lib/libcrypto.0.9.8.dylib     0x7fff8872d000 -     0x7fff8873bff7  com.apple.AppleFSCompression (37 - 1.0) &lt;61113C2F-564C-3E6C-918C-3179980D599F&gt; /System/Library/PrivateFrameworks/AppleFSCompression.framework/Versions/A/AppleFSCompression     0x7fff8873e000 -     0x7fff88769ff7  libxslt.1.dylib (3.24.0 - compatibility 3.0.0) &lt;E71220D3-8015-38EC-B97D-7FDB383C2BDC&gt; /usr/lib/libxslt.1.dylib     0x7fff88aa7000 -     0x7fff88af3ff7  com.apple.SystemConfiguration (1.11.3 - 1.11) &lt;131780ED-E8DD-3153-81F2-5FEC4F6554C2&gt; /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration     0x7fff892d9000 -     0x7fff8937afff  com.apple.LaunchServices (480.40 - 480.40) &lt;C936A07F-0CF8-3F8E-BDB3-76AA7611B4CA&gt; /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices     0x7fff897bc000 -     0x7fff89857fff  com.apple.PackageKit (2.0.3 - 172) &lt;16F5285D-1E49-3373-A8B8-8565F9AA5775&gt; /System/Library/PrivateFrameworks/PackageKit.framework/Versions/A/PackageKit     0x7fff89fb2000 -     0x7fff89fbdff7  libc++abi.dylib (14.0.0 - compatibility 1.0.0) &lt;8FF3D766-D678-36F6-84AC-423C878E6D14&gt; /usr/lib/libc++abi.dylib     0x7fff8a77d000 -     0x7fff8a97ffff  libicucore.A.dylib (46.1.0 - compatibility 1.0.0) &lt;0176782F-9526-3905-813A-7A5676EC2C86&gt; /usr/lib/libicucore.A.dylib     0x7fff8a980000 -     0x7fff8a981fff  libDiagnosticMessagesClient.dylib (??? - ???) &lt;3DCF577B-F126-302B-BCE2-4DB9A95B8598&gt; /usr/lib/libDiagnosticMessagesClient.dylib     0x7fff8a982000 -     0x7fff8a9d0fff  libauto.dylib (??? - ???) &lt;D8AC8458-DDD0-3939-8B96-B6CED81613EF&gt; /usr/lib/libauto.dylib     0x7fff8aa56000 -     0x7fff8aa5cfff  libmacho.dylib (800.0.0 - compatibility 1.0.0) &lt;165514D7-1BFA-38EF-A151-676DCD21FB64&gt; /usr/lib/system/libmacho.dylib     0x7fff8aa65000 -     0x7fff8ad7efff  com.apple.Foundation (6.7.2 - 833.25) &lt;22AAC369-B63C-3C55-8AC6-C3ECBA44DA7B&gt; /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation     0x7fff8b9c4000 -     0x7fff8b9d3fff  libxar.1.dylib (??? - ???) &lt;9E05C939-6CBF-38E7-8915-86278F7DB6C7&gt; /usr/lib/libxar.1.dylib     0x7fff8b9d4000 -     0x7fff8b9d5ff7  libsystem_sandbox.dylib (??? - ???) &lt;5459F293-E1F2-33B3-B9B2-2ABB7B915B62&gt; /usr/lib/system/libsystem_sandbox.dylib     0x7fff8ba99000 -     0x7fff8ba9dfff  libmathCommon.A.dylib (2026.0.0 - compatibility 1.0.0) &lt;FF83AFF7-42B2-306E-90AF-D539C51A4542&gt; /usr/lib/system/libmathCommon.A.dylib     0x7fff8ccf8000 -     0x7fff8cd25fe7  libSystem.B.dylib (159.1.0 - compatibility 1.0.0) &lt;6E5C8AC3-DBB7-31CB-BEB7-D6ED8E6DE0CE&gt; /usr/lib/libSystem.B.dylib     0x7fff8ce4a000 -     0x7fff8ce4ffff  libpam.2.dylib (3.0.0 - compatibility 3.0.0) &lt;D952F17B-200A-3A23-B9B2-7C1F7AC19189&gt; /usr/lib/libpam.2.dylib     0x7fff8ce50000 -     0x7fff8cf34e5f  libobjc.A.dylib (228.0.0 - compatibility 1.0.0) &lt;871E688B-CF57-3BC7-80D6-F6476DFF109B&gt; /usr/lib/libobjc.A.dylib     0x7fff8cf35000 -     0x7fff8cf51ff7  com.apple.GenerationalStorage (1.0 - 126.1) &lt;509F52ED-E54B-3FEF-B3C2-759387B826E6&gt; /System/Library/PrivateFrameworks/GenerationalStorage.framework/Versions/A/GenerationalStorage     0x7fff8cf52000 -     0x7fff8d0b9fff  com.apple.CFNetwork (520.5.1 - 520.5.1) &lt;08F70E26-5456-3BFB-8192-00D3CE40D3C9&gt; /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CFNetwork.framework/Versions/A/CFNetwork     0x7fff8d876000 -     0x7fff8d8b8ff7  libcommonCrypto.dylib (55010.0.0 - compatibility 1.0.0) &lt;BB770C22-8C57-365A-8716-4A3C36AE7BFB&gt; /usr/lib/system/libcommonCrypto.dylib     0x7fff8dbb1000 -     0x7fff8dd85ff7  com.apple.CoreFoundation (6.7.2 - 635.21) &lt;62A3402E-A4E7-391F-AD20-1EF20236CE1B&gt; /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation     0x7fff8df39000 -     0x7fff8df59fff  libsystem_kernel.dylib (1699.32.7 - compatibility 1.0.0) &lt;66C9F9BD-C7B3-30D4-B1A0-03C8A6392351&gt; /usr/lib/system/libsystem_kernel.dylib  External Modification Summary:   Calls made by other processes targeting this process:     task_for_pid: 0     thread_create: 0     thread_set_state: 0   Calls made by this process:     task_for_pid: 0     thread_create: 0     thread_set_state: 0   Calls made by all processes on this machine:     task_for_pid: 5     thread_create: 0     thread_set_state: 0  VM Region Summary: ReadOnly portion of Libraries: Total=78.2M resident=39.7M(51%) swapped_out_or_unallocated=38.5M(49%) Writable regions: Total=30.7M written=560K(2%) resident=864K(3%) swapped_out=0K(0%) unallocated=29.8M(97%)  REGION TYPE                      VIRTUAL ===========                      ======= MALLOC                             20.3M MALLOC guard page                    32K STACK GUARD                        56.0M Stack                              10.0M VM_ALLOCATE                          36K __DATA                             3420K __LINKEDIT                         49.1M __TEXT                             29.1M __UNICODE                           544K mapped file                        15.7M shared memory                        16K ===========                      ======= TOTAL                             184.2M /code/pre  <answer99152> My interpretation (which could well be wrong) of that error report is:  ul lithe codecrsud/code process, which apparently is to do with security (code signing, software update and trust evaluation: see this discussion), has crashed./li liit did so whilst it was running code related to the keychain (under "Thread 0 Crashed", start at the last entry (33) and read upwards, to see the different routines that are called): I noticed codeSecurity::KeychainCore::CCallbackMgr/code.../li lithe type of error was codeEXC_BAD_ACCESS/code, which is a failure when accessing memory./li lithe area of memory it was trying to access was actually a file mapped into memory, and the file(s) were code/private/var/db/*/code./li /ul  So actually, I'd be suspicious of your hard disk, rather than the RAM, and particularly files under /private/var/db and any related to the Keychain.  I would try Repair Disk in Disk Utility as a first step.  (You will need to boot from another location to do this.)  Sorry this isn't a complete answer (and bear in mind some of this is guesswork), but perhaps it provides another direction for things to try?  <answer99161> From your original question there isn't enough strong evidence this is an hardwrae or software problem.  h1Hardware problem?/h1  To eliminate most of the hardware origins, please run:    Apple Hardware Test before attempting any other tinkering with the system.  Run it in extended mode and for at least 4 consecutive passes.  Once this 1st cause of trouble eliminated, please  read the answer from Ashley and run Disk Utility emfrom another disk/em than your system one. Most probably your internal filesystem is in bad state since you regularly crash your system. Hence at every new boot the journal (of the filesystem) has to be used again to rebuild everything, and long processes killed have to start again their tasks.  Once this 2nd major cause of trouble eliminated, you will conclude that you most probably have a software problem, and it might be time to locate it.  h1Software problem/h1  For this you will have to create a test account and use it for a serious amout of time, and with all the applications. Do you experience the same hangs with this test account?  If yes, then you have a general MacOS X misbehaviour. In this case, you stronghave to reinstall MacOX X Lion/strong.  If not, you will have to locate which application within your environment is causing this misbehaviour.  codeActivity Monitor/code will help you to identify what is going on when MacOS X stop being responsive. Until you will find the culprit, you will have to always run with this kernel spy strongon screen/strong. Another tool might be faster to identify the culprit processus. Open a codeTerminal/code or codexterm/code window and type the following command:  precodetop -o cpu /code/pre  the top lines continuously refreshed by this command will show you if something abnormal is happening at the level of virtual memory or CPU usage, within seconds of the original problem.  <answer99199> @Ashley mentioned it could be related to file corruption in Keychain files. Not widely known but KeyChain has its own First Aid utility which can be used to Verify or Repair the keychain files.  Just invoke from the Keychain menu:  img src="https://i.stack.imgur.com/mlBnb.jpg" alt="Menu Item"  img src="https://i.stack.imgur.com/EKXPk.jpg" alt="enter image description here"  Worth checking?  <answer180540> To solve this, I figured that it must be something in my ongoing software that I use in the background that I hadn’t taken into account.  I ran Activity Monitor, clicked on CPU and the %CPU column and discovered the culprit: MagicJack. I had never noticed before was the INSANE amount of System resources it gobbles up. In terms of %CPU the codemjdev/code and the MagicJack app itself use upwards of 15-20 percent of CPU at all times it is plugged in and running! As soon as I quit MJ and disconnected it, guess what: no more beach ball, and things are running as snappy as in the Snow Leopard Days.  MagicJack was hogging so much CPU time that the System had to wait its turn constantly, hence the Beach Ball.  <answer214493> h1How to diagnose the SWoD from the command line/h1  There are some very helpful tools included with OS X that I have used to diagnose this issue in the past.  They are all command line utilities, as usually the Spinning Wheel of Death will leave you without a working graphical interface with your computer.  If you are able to launch codeTerminal.app/code, you may be able to run them this way.  However, I've found that in some more extreme cases of lockup that my Macbook's display is just black and all I can see is the SWoD.  In this case, it is emvery/em helpful to have SSH remote access enabled for the machine.  You may follow this tutorial to enable SSH.  h2Finding your Macbook on the network/h2  If you are having a hard time finding your Macbook on the network, you can use codedns-sd/code to find it:  precode# List hosts advertising SSH via Avahi / DNS Service Discovery # -B for human-readable format dns-sd -B _ssh._tcp. # -Z for Zone File format # More helpful because it shows the FQDN.. i.e.: `mymacbook.local.` dns-sd -Z _ssh._tcp. /code/pre  h2System Stats Command Line Utilities/h2  The following utilities can shed some light on the processes that may be using too many system resources and causing the lockup.  Read the manpage for more detail on each.  ul licodehtop/code - Available via Homebrew: codebrew install htop/code.  Like codetop/code, but with color UI and more sorting options such as Process Parent/Child Tree view.br/Run with: codehtop/code/li licodeiotop/code - Installed in OS X.  Helpful to find processes using lots of Disk I/O:br/codesudo iotop 1/code/li licodetop/code - Installed in OS X.  Shows top processes sorted by a key of your choice.  For example, to sort by codecpu/code: codetop -o cpu/code/li licodesystemstats/code - Installed in OS X.  Shows a wealth of useful system statistics such as:br/Battery usage, CPU stats, Thermal, Fan, Memory &amp; I/O summaries, Ranked I/O Activity, Apps &amp; Daemons ranked by CPU &amp; Energy Impact, Interrupts / Idle Wakeups, Process Launches (incl. XPC svcs. &amp; fork()), Devices connected, etc...br/Run it with: codesudo /usr/sbin/systemstats/code/li licodevm_stat/code - Installed with OS X.  Shows Mach kernel Virtual Memory statistics (how much disk space you're using for "VRAM").br/Run it with: code/usr/bin/vm_stat/code/li licodenetstat/code - Installed with OS X. Show network connection status: codenetstat/code/li licodenettop/code - Installed with OS X. Shows a top-style live updating list of processes using network I/O.  Helps if you have a strongvery wide/strong terminal.br/Run with: codenettop/code/li licodekextstat/code - List all inserted Mach Kernel Extensions (like Linux kernel modules). If you suspect a Kernel Extension or I/O Kit driver is causing the problem, you may unload the offending kernel module by finding its' bundle name with codekextstat/code, then running codekextunload/code:codesudo kextunload -b org.virtualbox.kext.VBoxUSB/code/li liTry looking in the System Log: codetail -f /var/log/system.log/codebr/You may find some interesting clues here./li /ul  If you find some process that is using a lot of system resources (CPU / Memory / Disk I/O, etc...), try killing it like this:  precode# For example, if 'Google Chrome' is using too much memory, kill it: ps auxww | grep -i 'google chrome' | grep -v grep | awk '{ print $2 }' | xargs kill # Kill a process by PID: kill 1234 # Forcibly kill by PID: kill -9 1234 /code/pre  h2Last Resort: kill codeWindowServer/code/h2  If all else fails, and you're not sure what's really hung... you may want to try killing codeWindowServer/code.  This is a trick which I have used to solve the problem a couple times when all I see is a black background &amp; SWoD.  Once you kill it, it should come back and dump you back to the login screen.  Simply run:  precodesudo killall -HUP WindowServer /code/pre  <answer231644> So I was Googling around trying to find an answer and something about this question was linked to an error I was seeing (not precisely sure what), but since I did actually conclusively track down my problem, I thought I'd offer a possible answer to the issue you're having:  You may have a process that's opening too many files. In my case it was a prefpane that decided to open thousands and thousands of files at once. You can track down which processes have the most open files with this command, which you can run in the terminal:  codelsof | awk '{print $2}' | sort | uniq -c | sort -n/code  That will give you the process ID of the offending process, which you can then look up in ActivityMonitor. The tricky thing about this issue is that something opening up the maximum number of files can spike the CPU usage of applications other than the offending process as well as cause the BBOD and random crashes. In my case it was the NullRiver MediaLink prefpane and it was particularly affecting Chrome, but also Adobe Illustrator and Spotlight (inducing crashes in all three cases). It could be a completely different process or app causing the issue for you. All 3 of these affected programs open a lot of files themselves, so they were the most heavily affected by the OS saying "Nope, can't open any more files, we're all out of file descriptors." Killing the prefpane and then updating it to the latest version resolved my issue permanently, but I needed the command above to track down the cause. Your description of what was happening almost exactly matches what was happening for me, so it's very possible that something opening too many files could have been the root cause for you as well. Since it's several years later, I'm going to assume this issue is no longer plaguing you, but other visitors from Google may find it helpful.  <answer246685> Just fought through the problem of SBBOD or SWOD if you will, after startup on my 2006 macpro tower running is 10.6.8. Turns out, in my case, it had to do with IPv4 and IPv6 in the network settings panel and AirPort. The problem started when I switched from cable to fi-optics.  Apparently, the fi-optics modem is not ready for IPv6.  Go into system preferences/network Choose the TCP/IP tab Click on the "advanced" button Use the configure IPv6 pull down menu and select "off"  This works in 10.6.8. Newer systems may vary a little, but the process is similar.  Have not found this answer anywhere online. Hope this helps someone. Tried many of the other solutions, this is the only one that worked for me.  <comment116551> BBOD?  I'm not familiar with this term/acronym.  When you installed the OS did you perform an archive & install or a fresh erase and install without restoring library files from a backup?  Have you attempted to verify the internal disk via Disk Utility? <comment116552> @MrRabbit Great questions.  I think BBOD refers to "Beach Ball of Death". <comment116553> @Ashley - Ah, guess that makes sense.  I've always just said spinning beach ball.  Guess BBOD is stemming from Windows BSOD, I'd think a kernel panic would be more comparable.  Knowing that now I definitely agree with your idea below.  Typically spinning beach balls that never release come back to either system corruption or a failed/failing hard drive.  I would verify/repair the disk and proceed from there. <comment116554> Thanks for the reply. I did forget to mention that spotlight is frequently indexing after restarting from a freezing episode, which may further your hypothesis, however I just verified my HD via Disk Utility and the volume appears to be OK. For clarification on EXC_BAD_ACCESS , is that HD memory or something mapped on the RAM you're referring to? <comment116557> @MrRabbit Ashley is right, I mean the spinning beach ball. I should've been more specific. To answer your other questions I did a fresh erase and install using the lion recovery disk (which was prompted from the disk utility, which could also point to the HD as per Ashley's thoughts below), then I restored files from an external HD. I have verified the internal disk and it comes up as OK. <comment116561> Something I should also mention is that this error report does not always accompany a freeze up, just occasionally. It seems the error report crops up when I give the computer adequate time to sit on the BBOD. <comment116586> I *think* what that error report is showing is that the CPU was instructed to access some memory, located at 0x000000010048a000.  This attempt at access raised an EXC_BAD_ACCESS error, which I think means "this area of memory isn't actually accessible to the current process".  So perhaps the memory address is incorrect (eg derived from bad data).  Putting that aside, the contents of "memory" at that address is, I think, actually the contents of a file on disk (see the error report mentions "mapped file").  This is probably set up via the [mmap](https://en.wikipedia.org/wiki/Mmap) mechanism... <comment116588> ... if the CPU requests data at that address, the data isn't actually retrieved from physical RAM -- instead, the OS causes the data to be fetched from disk. <comment116623> `Not widely known` at all! Thanks for the tip ;) <comment117064> Thank you. I will report back once I get my hands on the Hardware Test. Unfortunately I don't have the original disks that came with the system anymore, but I'll either buy them or use the diagnostics at an apple store if I can't find a download or something. <comment160530> THANK YOU!!!  This is NOT widely known, and seems to have immediately and completely fixed a persistent and incredibly annoying BBOD issue that had resisted all other attempts. My aging (2008) Mac Pro Tower is now a decent machine again, at long last!! :) :) :) <comment253400> Yes, and MagicJack does not even work on El Capitan! Spoke with tech support and they said they are working it, really? They just realized that it came out??