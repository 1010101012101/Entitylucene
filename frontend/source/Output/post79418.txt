How can I put heavy load on my CPU for a long period of time? <body> How can I put my CPU under very high pressure for a long period of time? Are there programs for that that I can keep running ?   <answer79419> Just create a small program that loops infinitely, something like:  precode#include &lt;stdio.h&gt; int main() {     int i=0;     for(;;)     {          i++;          i--;     } } /code/pre  <answer79420> At the command line, run this command:  precodecat &lt; /dev/urandom &gt; /dev/null /code/pre  (Open up a terminal window and type that into the window.)  This should keep your CPU loaded nicely for as long as you allow the command to run.  <answer79433> Look at some distributed computing like Boinc. This runs compute intensive programs where tasks are taken and run across many machines thus allowing projects access to free computing power. In your case as the programs take up much compute power they will use the CPU heavily. Boinc runs multiple processes on your computer so will se all cores of your CPU.  <answer79443> Do the following once for each CPU core in your Mac, open codeTerminal.app/code and enter the command:  precodeyes /code/pre  The yes command will print the letter codey/code to standard output in an infinite loop.  <answer79466> Several database systems are multicore optimized. You could install something like mysql and setup a basic data set, then run some of the benchmarking tools against it. If tuned correctly, many DB systems are most efficient at high CPU load (because if it was not, you would be wasting resources).   Or, you could just wash a flash video in Safari.  <comment91720> This will only use one core/thread so not take up 100% CPU <comment91721> This only runs on one thread so will not run at 100% of your CPU as all Macs are multi core. Also a good optimiser will probablget rid of that loop <comment91728> @Mark so have multiple instances running. Easy solution. <comment91755> Multiple instances (as in, one per core), wouldn't exactly mean they get distributed to an individual core by the OS. <comment91756> The OS may not assign this once to each core, and even so, just outputting yes to the terminal may push a cpu at 100%. <comment91758> To run this once for each core: `ncpu=$(sysctl hw.ncpu | awk '{ print $2; }'); for ((i=1;i=ncpu;i++)); do yes /dev/null & done` <comment91839> @jmlumpkin It works. At least on current Apple platforms. <comment91841> I think I read your answer a bit differently. What I was trying to say is that Terminal is going to distribute for this, and saying 'do this once for each core' isn't going to peg a quad core i5 at 400% utilization. I read your answer much more as 'doing this in a new terminal window will assign it to another core'.