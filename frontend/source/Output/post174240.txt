How do I compile libtheora <body> h2Environment/h2  ul liOS X 10.10, Yosemite/li liXcode 6.1.1/li liDownloaded the library from xiph.org/downloads/li /ul  I tried code.configure/code:  precodelibtheora$ sudo ./configure checking build system type... i386-apple-darwin14.1.0 checking host system type... i386-apple-darwin14.1.0 checking target system type... i386-apple-darwin14.1.0 checking for a BSD-compatible install... /usr/bin/install -c checking whether build environment is sane... yes checking for gawk... no checking for mawk... no checking for nawk... no checking for awk... awk checking whether make sets $(MAKE)... yes checking whether to enable maintainer-specific portions of Makefiles... no checking for gcc... gcc checking for C compiler default output file name... a.out checking whether the C compiler works... yes checking whether we are cross compiling... no checking for suffix of executables...  checking for suffix of object files... o checking whether we are using the GNU C compiler... yes checking whether gcc accepts -g... yes checking for gcc option to accept ISO C89... none needed checking for style of include used by make... GNU checking dependency style of gcc... gcc3 checking how to run the C preprocessor... gcc -E checking whether gcc and cc understand -c and -o together... yes checking for a sed that does not truncate output... /usr/bin/sed checking for grep that handles long lines and -e... /usr/bin/grep checking for egrep... /usr/bin/grep -E checking for fgrep... /usr/bin/grep -F checking for ld used by gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld checking if the linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) is GNU ld... no checking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm checking the name lister (/usr/bin/nm) interface... BSD nm checking whether ln -s works... yes checking the maximum length of command line arguments... 196608 checking whether the shell understands some XSI constructs... yes checking whether the shell understands "+="... yes checking for /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld option to reload object files... -r checking for objdump... objdump checking how to recognize dependent libraries... pass_all checking for ar... ar checking for strip... strip checking for ranlib... ranlib checking command to parse /usr/bin/nm output from gcc object... ok checking for dsymutil... dsymutil checking for nmedit... nmedit checking for lipo... lipo checking for otool... otool checking for otool64... no checking for -single_module linker flag... yes checking for -exported_symbols_list linker flag... yes checking for ANSI C header files... yes checking for sys/types.h... yes checking for sys/stat.h... yes checking for stdlib.h... yes checking for string.h... yes checking for memory.h... yes checking for strings.h... yes checking for inttypes.h... yes checking for stdint.h... yes checking for unistd.h... yes checking for dlfcn.h... yes checking for objdir... .libs checking if gcc supports -fno-rtti -fno-exceptions... yes checking for gcc option to produce PIC... -fno-common -DPIC checking if gcc PIC flag -fno-common -DPIC works... yes checking if gcc static flag -static works... no checking if gcc supports -c -o file.o... yes checking if gcc supports -c -o file.o... (cached) yes checking whether the gcc linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries... yes checking dynamic linker characteristics... darwin14.1.0 dyld checking how to hardcode library paths into programs... immediate checking whether stripping libraries is possible... yes checking if libtool supports shared libraries... yes checking whether to build shared libraries... yes checking whether to build static libraries... yes checking for doxygen... false configure: WARNING: *** doxygen not found, API documentation will not be built checking for pdflatex... no checking for bibtex... no checking for fig2dev... no configure: WARNING: *** Format Specification will not built. checking for ld used by gcc... (cached) /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld checking if the linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) is GNU ld... (cached) no checking how to control symbol export... -exported_symbols_list checking for pkg-config... yes checking for pkg-config... /usr/local/bin/pkg-config checking pkg-config is at least version 0.9.0... yes checking for OGG... yes checking for VORBIS... no checking for Vorbis... no *** Could not run Vorbis test program, checking why... *** The test program failed to compile or link. See the file config.log for the *** exact error that occured. This usually means Vorbis was incorrectly installed *** or that you have moved Vorbis since it was installed. checking for sdl-config... no checking for SDL - version &gt;= 0.11.0... no *** The sdl-config script installed by SDL could not be found *** If SDL was installed in PREFIX, make sure PREFIX/bin is in *** your path, or set the SDL_CONFIG environment variable to the *** full path to sdl-config. configure: WARNING: *** Unable to find SDL -- Not compiling example players *** checking sys/soundcard.h usability... no checking sys/soundcard.h presence... no checking for sys/soundcard.h... no checking soundcard.h usability... no checking soundcard.h presence... no checking for soundcard.h... no checking machine/soundcard.h usability... no checking machine/soundcard.h presence... no checking for machine/soundcard.h... no configure: WARNING: OSS audio support not found -- not compiling player_example checking for PNG... yes configure: Vorbis missing, cannot build example encoder checking for library containing ftime... no checking for getopt_long... no configure: creating ./config.status config.status: creating Makefile config.status: WARNING:  'Makefile.in' seems to ignore the --datarootdir setting config.status: creating lib/Makefile config.status: WARNING:  'lib/Makefile.in' seems to ignore the --datarootdir setting config.status: creating include/Makefile config.status: WARNING:  'include/Makefile.in' seems to ignore the --datarootdir setting config.status: creating include/theora/Makefile config.status: WARNING:  'include/theora/Makefile.in' seems to ignore the --datarootdir setting config.status: creating examples/Makefile config.status: WARNING:  'examples/Makefile.in' seems to ignore the --datarootdir setting config.status: creating doc/Makefile config.status: WARNING:  'doc/Makefile.in' seems to ignore the --datarootdir setting config.status: creating doc/Doxyfile config.status: creating doc/spec/Makefile config.status: WARNING:  'doc/spec/Makefile.in' seems to ignore the --datarootdir setting config.status: creating tests/Makefile config.status: WARNING:  'tests/Makefile.in' seems to ignore the --datarootdir setting config.status: creating m4/Makefile config.status: WARNING:  'm4/Makefile.in' seems to ignore the --datarootdir setting config.status: creating libtheora.spec config.status: creating theora.pc config.status: creating theora-uninstalled.pc config.status: creating theoradec.pc config.status: creating theoradec-uninstalled.pc config.status: creating theoraenc.pc config.status: creating theoraenc-uninstalled.pc config.status: creating config.h config.status: config.h is unchanged config.status: executing depfiles commands config.status: executing libtool commands  ------------------------------------------------------------------------   libtheora 1.1.1:  Automatic configuration OK.    General configuration:      Encoding support: ........... yes     Floating point support: ..... yes     Assembly optimization: ...... 32 bit x86     Debugging telemetry: ........ no     Build example code: ......... yes     API Documentation: .......... no     Format Documentation: ....... no    Installation paths:      libtheora: ................... /usr/local/lib     C header files: .............. /usr/local/include/theora     Documentation: ............... /usr/local/share/doc/libtheora    Building:      Type 'make' to compile libtheora.      Type 'make install' to install libtheora.      Type 'make check' to run test suite (Valgrind testing not enabled)    Example programs will be built but not installed. ------------------------------------------------------------------------ /code/pre  â€¦and then codemake/code:  precodelibtheora$ sudo make /Applications/Xcode.app/Contents/Developer/usr/bin/make  all-recursive Making all in lib source='apiwrapper.c' object='apiwrapper.lo' libtool=yes \     depfile='.deps/apiwrapper.Plo' tmpdepfile='.deps/apiwrapper.TPlo' \     depmode=gcc3 /bin/sh ../depcomp \     /bin/sh ../libtool --mode=compile gcc -DHAVE_CONFIG_H -I. -I. -I.. -I../include   -I/usr/local/include   -Wall -Wno-parentheses -O3 -fforce-addr -fomit-frame-pointer -finline-functions -funroll-loops  -c -o apiwrapper.lo `test -f 'apiwrapper.c' || echo './'`apiwrapper.c libtool: compile:  gcc -DHAVE_CONFIG_H -I. -I. -I.. -I../include -I/usr/local/include -Wall -Wno-parentheses -O3 -fforce-addr -fomit-frame-pointer -finline-functions -funroll-loops -c apiwrapper.c -MT apiwrapper.lo -MD -MP -MF .deps/apiwrapper.TPlo  -fno-common -DPIC -o .libs/apiwrapper.o clang: error: unknown argument: '-fforce-addr' make[2]: *** [apiwrapper.lo] Error 1 make[1]: *** [all-recursive] Error 1 make: *** [all] Error 2 /code/pre  Any pointer is most welcome.  <answer174242> This is a known bug. It was fixed on strongmacports/strong by removing code-fforce-addr/code flag. Here's the fix.  Remove this flag from codeconfigure/code file and repeat the operation.  If You want to build for different architecture, pass params to codeconfigure/code. For example, to change arch to 64bit - on my machine I'll do:  precode./configure --target=x86_64-apple-darwin14.1.0 --build=x86_64-apple-darwin14.1.0 --host=x86_64-apple-darwin14.1.0 /code/pre  To get architecture check codegcc -v/code.  <answer174244> Opted for codebrew install theora/code, which seems to have installed the library correctly. I have some codebrew link/code errors but they are due to conflicting libs, that I had previously installed  precode$ brew install theora ==&gt; Installing dependencies for theora: libogg, libvorbis ==&gt; Installing theora dependency: libogg ==&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/libogg-1.3.2.yosemite.bottle.tar.gz ######################################################################## 100.0% ==&gt; Pouring libogg-1.3.2.yosemite.bottle.tar.gz Error: The `brew link` step did not complete successfully The formula built, but is not symlinked into /usr/local Could not symlink include/ogg/config_types.h Target /usr/local/include/ogg/config_types.h already exists. You may want to remove it:   rm '/usr/local/include/ogg/config_types.h'  To force the link and overwrite all conflicting files:   brew link --overwrite libogg  To list all files that would be deleted:   brew link --overwrite --dry-run libogg  Possible conflicting files are: /usr/local/include/ogg/config_types.h /usr/local/include/ogg/ogg.h /usr/local/include/ogg/os_types.h /usr/local/share/aclocal/ogg.m4 /usr/local/lib/libogg.0.dylib -&gt; /usr/local/lib/libogg.0.6.0.dylib /usr/local/lib/libogg.a /usr/local/lib/libogg.dylib -&gt; /usr/local/lib/libogg.0.6.0.dylib /usr/local/lib/pkgconfig/ogg.pc ==&gt; Summary   /usr/local/Cellar/libogg/1.3.2: 95 files, 672K ==&gt; Installing theora dependency: libvorbis ==&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/libvorbis-1.3.4.yosemite.bottle.tar.gz ######################################################################## 100.0% ==&gt; Pouring libvorbis-1.3.4.yosemite.bottle.tar.gz Error: The `brew link` step did not complete successfully The formula built, but is not symlinked into /usr/local Could not symlink include/vorbis/codec.h Target /usr/local/include/vorbis/codec.h already exists. You may want to remove it:   rm '/usr/local/include/vorbis/codec.h'  To force the link and overwrite all conflicting files:   brew link --overwrite libvorbis  To list all files that would be deleted:   brew link --overwrite --dry-run libvorbis  Possible conflicting files are: /usr/local/include/vorbis/codec.h /usr/local/include/vorbis/vorbisenc.h /usr/local/include/vorbis/vorbisfile.h /usr/local/share/aclocal/vorbis.m4 /usr/local/lib/libvorbis.0.dylib -&gt; /usr/local/lib/libvorbis.0.4.3.dylib /usr/local/lib/libvorbis.a /usr/local/lib/libvorbis.dylib -&gt; /usr/local/lib/libvorbis.0.4.3.dylib /usr/local/lib/libvorbisenc.2.dylib -&gt; /usr/local/lib/libvorbisenc.2.0.6.dylib /usr/local/lib/libvorbisenc.a /usr/local/lib/libvorbisenc.dylib -&gt; /usr/local/lib/libvorbisenc.2.0.6.dylib /usr/local/lib/libvorbisfile.3.dylib -&gt; /usr/local/lib/libvorbisfile.3.3.2.dylib /usr/local/lib/libvorbisfile.a /usr/local/lib/libvorbisfile.dylib -&gt; /usr/local/lib/libvorbisfile.3.3.2.dylib /usr/local/lib/pkgconfig/vorbis.pc /usr/local/lib/pkgconfig/vorbisenc.pc /usr/local/lib/pkgconfig/vorbisfile.pc ==&gt; Summary   /usr/local/Cellar/libvorbis/1.3.4: 162 files, 2.7M ==&gt; Installing theora ==&gt; Downloading https://downloads.sf.net/project/machomebrew/Bottles/theora-1.1.1.yosemite.bottle.1.tar.gz ######################################################################## 100.0% ==&gt; Pouring theora-1.1.1.yosemite.bottle.1.tar.gz   /usr/local/Cellar/theora/1.1.1: 93 files, 2.3M /code/pre  <comment205144> Use a packaging system like macports, fink, home-brew where the porters have worked out the issues. I would also check your autoconf etc as the build i386-apple-darwin14.1.0 looks wrong as that I think is 32 bit only <comment205145> Try removing `-fforce-addr` flag from `configure` file. <comment205147> Yes you are right Mark, I should have seen that `i386-apple-darwin14.1.0`. It doesn't look correct indeed. I am trying `brew install theora` <comment205148> sounds like a reasonable solution indeed, however I am still concerned about what Mark pointed out, the `i386-apple-darwin14.1.0` in the log indicate that their might be other issues. I opted for `brew`, I will update my post accordingly. Again thanks you <comment205150> I've added info about changing architecture. `brew`/`macports`/`fink` is indeed safer solution, but if You'd like to change the sources, then that's the way to do it. <comment205151> yeah indeed I actually like your answer, because I may need to stick to an older version of the code.