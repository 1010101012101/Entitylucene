Change font of Terminal programmatically w/o restarting <body> At home I've got a nice big display that unfortunately does not have the same resolution as my retina macbook does.  I'd like to use a pixel-font on the low-res screen and a nice smooth one on the retina screen. To do this I've set up a script that listens to an event when the display is connected.  I've set up two profiles in Terminal.app, one for the low-res screen and one for the retina screen.  Is there a way to make a profile the "default" profile (eg using applescript) without restarting Terminal.app (otherwise codedefaults com.apple.terminal .../code would have done it)  The following script works by changing the current default profile (so it's not entirely what I need, but might work if I find the names of all the settings I want to change):  pre class="lang-js prettyprint-override"code#!/usr/bin/env osascript -l JavaScript function run (argv) {   var terminal = Application('Terminal');    terminal.defaultSettings.fontName = 'creep';   terminal.defaultSettings.fontSize = 16;    // these don't seem to work   // because I do not know their names, and it's hard to debug guessing them   // terminal.defaultSettings.fontAntialiasing = false;   // terminal.defaultSettings.fontHeigthSpacing = 0.8; } /code/pre  I'd have to write a script to revert the changes  <answer229064> Okay, after some fooling around in AppleScript editor (it has this nice thing called emdictionary/em that shows you all available commands for a given App) I settled for this script:  pre class="lang-applescript prettyprint-override"code#!/usr/bin/env osascript on run {name}   tell application "Terminal"     set default settings to settings set name     set current settings of tabs of windows to settings set name   end tell end run /code/pre  Make it executable (codechmod u+x change.applescript/code) and run it, passing in the name of the profile to activate:  precode./change.applescript creep /code/pre  This will:  ul lichange the default profile, so all new windows will use it/li lichange the profile of all tabs of all windows to the new profile, so open terminals get to use it too!/li /ul  <comment279416> Out of curiosity, what method are using to listen to display connected events? This could probably be done via launchd if you can find out the name of the correct AppleEvent. <comment279439> @phobox I'm using an iokit listener that triggers the script whenever a certain usb device is attached like in [this answer](http://stackoverflow.com/a/12259762). I never found out how to do it for HDMI devices, so I count on the fact that I have a FLIRC usb device plugged into the same hub that also connects the display (the display has a USB hub). You should be able to listen to devices of another class than `IOUSBDevice` however. Alternatively, you can just run a script that checks if the display is connected every 2 seconds or so (eg. using `ioreg -p IODisplayConnect`).