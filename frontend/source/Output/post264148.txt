sticky keys without lock in macOS Sierra <body> In macOS el capitan I used karabiner to get sticky keys without lock feature, but after updating to macOS Sierra, karabiner does not work and it's successor karabiner elements does not have the feature of setting sticky keys without lock :(  Is there any other way of getting this to work? i really depend on sticky keys for using emacs and I find it annoying whenever I accidentally press a key modifier twice and it's locked in and i've to press it again to release the lock.  <answer267809> karabiner developer announced on karabiner website that macOS Sierra is not yet supported     macOS Sierra support status      Karabiner does not work on macOS Sierra at the moment.      We are developing Karabiner-Elements which provides simple key   modification for macOS Sierra at first. (Karabiner-Elements works well   on macOS Sierra. We are working on fixing several remaining issues.)      We'll start updating for the full featured Karabiner for Sierra after   Karabiner-Elements is completed.      https://github.com/tekezo/Karabiner-Elements   You can download the latest Karabiner-Elements from https://pqrs.org/latest/karabiner-elements-latest.dmg  <comment335820> When you accidentally press a modifier twice, is it because you forget that you've already pressed it? Would it help to see an on-screen indicator of what modifiers are currently "pressed"? <comment335821> (side note: there's a fairly comprehensive list of solutions to "emacs pinky" on [Wikipedia](https://en.wikipedia.org/wiki/Emacs#Emacs_pinky)) <comment335824> @timothymh I do have indicators for sticky keys. It helps a lot, but I'd like to remove the lock feature of sticky keys permanently. It just doesn't make sense. Yes, mistakes happen rarley but it's very frustrating when it does happen <comment336165> The OP already stated that Karabiner doesn't work with Sierra and  Karabiner Elements does not have the feature. <comment336345> @Sami Elkady Please delete this answer. It doesn't state anything that isn't already mentioned in my original question. <comment336369> The information that the developers intend to fix this once they have finished the current iteration is additional information, and suggests perhaps you should just wait (and then this question will be rather useless once the problem is gone, assuming of course they deliver on their promise).