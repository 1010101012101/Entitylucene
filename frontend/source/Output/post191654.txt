Preventing files from being changed <body> I hate programs like Flash and others that install crappy settings on code/Library/LaunchDaemons/code and code/Library/LaunchAgents/code, stuff to launch daemons that check for updates of flash.  I generally replace the files these apps put there with empty files and change permissions to 000 using chmod.   This works fine but every time I have to install an update, the update installation removes the locked files with their crappy files again.  Is there a way to lock these files in a way that any installation can change?  thanks  <answer191655> You can do it using codechflags/code. Try this way:  precodechflags uchg filename /code/pre  Once type this command, filename can only be modified by you. Others users (root included) can't change it.  To revert the changes, use:  precodechflags nouchg filename /code/pre  See the example below:  precode✔ jherran@computer: ~/temp $ touch filename ✔ jherran@computer: ~/temp $ chflags uchg filename ✔ jherran@computer: ~/temp $ sudo su Password: ✔ root@computer: /Users/jherran/temp # rm filename rm: cannot remove ‘filename’: Operation not permitted ✘-1 root@computer: /Users/jherran/temp # rm -f filename rm: cannot remove ‘filename’: Operation not permitted ✘-1 root@computer: /Users/jherran/temp # /code/pre  <comment227652> the question is this: because the file is on /Library/LaunchDaemons I have to type `sudo chflags uchg filename`. If the installation asks for my root password, as it does, isn't this command useless? <comment227653> If the installation use root, you can use `chflags` with any other user, that way, the root can't alter it. Another way, create a new user just for this task and nor your installations, nor root's will be able to alter that files. <comment227655> I cannot use chflags with another user on a directory that belongs to the system. What you mean is that I use chmod to change the user ownership, right? But if the installer has root access it can still remove my file and add another one. <comment227658> Yes, use `chmod` to change file user, then `chflags` with that user. After that the installer (no matter if has root access) won't be able to remove that file. <comment227675> @jherran, You have made statements in your answer that are not accurate, **root** absolutely **can change** the file afterwards and also delete it as well. <comment227681> @user3439894 you are absolutely wrong. Check my answer update with an example. <comment227685> @jherran, Your added example only shows one case scenario and on my system using `rm -f` the file is deleted and also **root** can first `chflags nouchg filename` if need be although I didn't have to when testing to delete `filename` as it deleted as **root** after applying `chflags uchg filename` as a normal user.  So **I am not absolutely wrong**!. <comment227700> @user3439894 if you apply `chflags uchg filename` as user, root can't delete that file, even using `rm -f`. Root can `chflags nouchg filename` and then delete it, you are right on that. <comment227705> @jherran, First of all I don't make statements that I can't prove and I can assure you that under OS X 10.8.5 I can as myself do `chflags uchg filename`, then change to **root** and both `rm filename` and `rm -f filename`. The file is deleted in both cases although without the `-f` I have to `y` to the question `override rw-r--r--  User/staff uchg for output.txt?` and it's deleted without first using `chflags nouchg filename` which **root** can do first.  So, since the OP didn't designate what version of OS X is being used your answer is not accurate as a general reply to what **root** can do.