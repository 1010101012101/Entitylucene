Spotify has opened on startup and is now resisting any attempt to quit <body> My computer just ran out of batteries, so I plugged it in and started it up. Spotify began to open, but I did not want it to be open so I used right click-force quit. The application stayed open, but did not open any windows and said it was Not Responding. I attempted to force quit it again multiple ways, and to uninstall the application but nothing has worked. Is there anything I can do to fix this?  <answer215291> Have you tried disabling it from the startup login? If not try this.  ul liClick on the Apple menu  System Preferences  System  Uses &amp; Groups. Click on Login Items./li liThe list of apps which are automatically launched when you login, will be displayed in this section./li liUncheck the items you don't really need./li /ul  <answer215298> codeOption-Click/code on the icon in Finder to bring up the codeForce Quit/code option, and click that.  Otherwise, you can easily do this from the command line via codeTerminal/code with the following command:  precodeps aux | grep -i spotify | awk '{print $2}' | xargs kill -9 /code/pre  or  precodekill -9 $(ps aux | grep -i spotify | awk '{print $2}') /code/pre  I'm not on my Mac right now, so it may actually be codeawk '{print $1}'/code, but I believe for the OS X output, the second column will give you the PID you are looking for.  strongA little more than you asked for:/strong  If you try to codekill/code or codekill -9/code a non-existent PID, codekill/code will vomit some confusing "help" output to STDERR.  If you want to avoid this output when this command fails (which won't hurt anything), just redirect STDERR to /dev/null, which would make the above commands as follows:  precodeps aux | grep -i spotify | grep -v 'grep' | awk '{print $2}' | xargs kill -9 2&gt;/dev/null /code/pre  or  precodekill -9 $(ps aux | grep -i spotify | grep -v 'grep' | awk '{print $2}') 2&gt;/dev/null /code/pre  I actually have an extremely handy function in one of my dotfiles, which gets sourced in my code.bash_profile/code during every terminal session, which is as follows (please excuse the language -- but this is really what I call it):  precodefuckyou() { ps aux | grep -i "$1" | grep -v 'grep' | awk '{print $2}' | xargs kill -9 2&gt;/dev/null; } /code/pre  For me, this creates the codefuckyou/code command, which takes one argument (the name of whatever offending process I wish to terminate), finds the process ID (PID) of that process and terminates it.  This way, if you were me, you could simply run codefuck you spotify/code.  The one caveat is if there are multiple processes running with the same same, such as Spotify.app and com.spotifyhelper.plist or something, you would either need to explicity specify "Spotify.app", but codegrep -i/code is case insensitive, so you could say codefuckyou 'Spotify.app'/code.  If you wanted to kill all processes under a certain name (as in all processes associated with Spotify), you would need to put the one-liner in a codefor/code or codewhile/code loop, such as this:  precodefor i in $(ps aux | grep -i spotify | grep -v 'grep' | awk '{print $2}'); do kill -9 "$i" 2&gt;/dev/null; done /code/pre  This is basically telling Bash to do the follwoing:  ul liPrint all running process names along with their process IDs (codeps aux/code)/li liDo a case-insensitive search for "spotify" on this output (which will also return the codegrep -i spotify/code process)/li liRemove any lines with the word "grep" codegrep -v 'grep'/code/li liGrab only the second column of process IDs (which should now only include processes related to Spotify)/li liFor all of these Spotify-related processes, force each one to terminate/li /ul  <comment260042> Thanks, but that's not exactly what I was looking for. I was wondering less about it opening on startup, and more it not closing.