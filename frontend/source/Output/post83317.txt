No right to open file once copied on the desktop <body> I'm new to Mac, so I may not have the correct vocabulary.  ul liWe have a Mac 10.5.x configured to share files with AFP and SMB.  /li liWe have 4 other Mac as clients, various versions between 10.5 and 10.6./li liEach of them access the server with the correct user+password.  /li liThe share is now configured to ignore permissions, but the problem was identical before that.  /li liWe can create/open/modify/delete/rename/etc files on the server, from every clients.  /li /ul  The problem :br When we copy a file from the server to the desktop of a client, the copied file can not be opened. The error message says the permissions don't allow the file to be read.br This is for every file from the server, on all 4 clients.br The files are copied with the finder, from the client.  strongEdit:/strongbr I checked the permissions.  On the server's share, when I look at the permissions from a client computer, every files are code-------rw- cedric cedric/code (read-write for everyone) with the user and group identical to the people connected (here cedric, but this is another user when viewed from another computer).br Once the file is copied on the desktop, the permissions and owner are the same. So it is not possible to open the file because the permissions are not correct (I just tested on Linux, when a file is RW for everyone only, the owner can't open it).  So, is there a way to automatically copy the files with better permissions ? Or the share the files correctly ?  strongEdit:/strongbr Every client computer is now upgraded to 10.6.x for the oldest, and 10.7.x for the two others. The problem is exactly the same.br I also noted one computer can't save files from Adobe softwares to the server. The user saves the files on his desktop, then use the finder to move them to the server.  <answer83575> There are known issues (Apple-created bugs) with several revisions of OS X 10.5 Leopard Client and AFP file access, including permission problems and in certain cases even the potential to lose or overwrite files completely.  There is no work-around for these bugs, they are in the operating system itself and can be reproduced on 2 freshly-formatted &amp; installed Macs running Leopard 10.5, and most or all of the later revisions, i.e. 10.5.1, 10.5.2, etc.  Your best solution is to be sure to update all 10.5 Macs to 10.6.8 Snow Leopard. Failing that, updating everything to 10.5.8 (the last release of Leopard) emmay/em solve your problems.  Here's a list of references that go into more detail:  http://support.grouplogic.com/?p=1508  https://discussions.apple.com/thread/1423847  http://www.insanelymac.com/forum/topic/67625-preping-for-105-permissions-issues-with-afp-shares/  http://lists.apple.com/archives/macos-x-server/2010/Dec/msg00267.html  http://www.mailinglistarchive.com/html/xsan-users@lists.apple.com/2008-07/msg00409.html  <answer83879> It sounds like you are using a non-server Mac to act as a server. Is this correct? If so I highly advise you to upgrade to some version of OS X Server.  If I am correct, your issue is caused by using standard Mac (or POSIX) permissions to handle your file share. This is the only option you have for a standard Mac when sharing files. This causes permissions issues, whether you are using AFP or SMB protocols (though SMB is worse in this respect).  If you can upgrade to OS X Server, you will want to first clean up permissions on the folder you wish to share (thus fixing any existing issues). Then create users &amp; groups to model your organization structure. From there you will create a new file share using the Server app. Don't change any of the default permissions it gives. Instead click the "+" button to add a new Access Control Entry. This is a special type of permission that OS X Server can grant, and it resolves all of the permissions issues a standard Mac will give you in such a setup.  Peachpit Press offers a great write-up of all of this in their OS X Server manuals as well, though I couldn't find anything to link to directly. I hope this helps.  <answer84215> The easiest way to do this is to use the Terminal. To do so, you need to have sudo access, which I'm assuming you're familiar with, conceptually, at least, since you mentioned Linux.  TL;DR: codefind . \! -perm 666 -type f -exec sudo chmod 666 {} \;/code is a one-liner that will do the trick, assuming you run it from the emexact/em folder that you want, e.g., code$HOME/Desktop/files_are_in_this_folder/code. If it's just one file, however, you can just run codesudo chmod 666 /path/to/the/file/code.  Allow me to explain, to the best of my ability, what's going on.  codefind(1)/code is an emextremely/em powerful finding utility, much moreso than codewhereis/code. The reason it's so powerful is it takes so many different options; as a simpler example, try codefind $HOME -size +100M/code; this will find all the files, recursively, over 100 MB and show you a list of them. Mine output the following:  precode    /Users/jayands/.rvm/gems/ruby-1.9.3-p385/gems/libv8-3.11.8.13-x86_64-darwin-10/vendor/v8/out/x64.release/libv8_base.a     /Users/jayands/.rvm/gems/ruby-1.9.3-p385/gems/libv8-3.11.8.13-x86_64-darwin-10/vendor/v8/out/x64.release/obj.host/tools/gyp/libv8_base.a     /Users/jayands/.rvm/gems/ruby-1.9.3-p385@rails-4.0/gems/libv8-3.11.8.3-x86_64-darwin-10/vendor/v8/out/x64.release/libv8_base.a     /Users/jayands/.rvm/gems/ruby-2.0.0-rc2@rails-4.0/gems/libv8-3.11.8.13-x86_64-darwin-10/vendor/v8/out/x64.release/libv8_base.a     /Users/jayands/.rvm/gems/ruby-2.0.0-rc2@rails-4.0/gems/libv8-3.11.8.13-x86_64-darwin-10/vendor/v8/out/x64.release/obj.host/tools/gyp/libv8_base.a     /Users/jayands/Documents/2013-02-10.wav     /Users/jayands/Documents/2013-02-17.wav     /Users/jayands/Documents/2013-02-24.wav     /Users/jayands/Documents/2013-03-03.wav     /Users/jayands/Library/Application Support/Steam/SteamApps/common/regnum/data0.sdb     /Users/jayands/Library/Application Support/Steam/SteamApps/common/regnum/data1.sdb     /Users/jayands/Library/Application Support/Steam/SteamApps/common/regnum/data2.sdb     /Users/jayands/Library/Application Support/Steam/SteamApps/common/regnum/data4.sdb     /Users/jayands/Library/Caches/com.apple.Safari/Cache.db     /Users/jayands/Music/iTunes/iTunes Media/Podcasts/Bronyville/93 Bronyville Episode 093 â€“ Friendship Gives You Wings!.mp3 /code/pre  As you see, it'll find everything, even stuff you don't want to modify. If they have a specific naming convention, say, code*.wav/code, you can specify the find command to search by name, as well. codefind . -name '*.wav'/code  I said all that to familiarise you with the emeasier/em part of codefind/code; the following is the part that tends to trip people up. codefind/code has directives you can have it do emto/em what it finds. code-print/code is so common it's the default one and generally doesn't have to be specified. code-print0/code, however, is a bit more interesting: it does mostly the same thing as code-print/code, but the 0 is a NUL character replacing the linefeeds; it makes piping to codexargs/code easier. The one emwe're/em interested in, however, is the code-exec/code directive, which allows you to run most simple shell commands on each file, which brings us to code{}/code and code\;/code. The code\;/code is to escape a semicolon for termination of the exec command and the curly braces come from codeawk/code, if I recall correctly. They get replaced by what is found.  codechmod/code is still around from the Unix days; in fact, a lot of the commands you can run in Linux in codexterm/code have some analog in the Mac terminal. codechmod 666/code will give you read-write access for everybody; however, if you can't remember that, try codechmod a=rw/code. Both of these commands mean: "take the file I'm about to tell you of and set the permissions to Read-Write access for everybody."  Also, since you're collaborating, you might want to look into running a private codegit/code, Perforce (codep4/code) or Mercurial (codehg/code) server, as these management systems emalso/em manage the permissions of the files.  h2More Info/h2  codefind/code  ol licodeman find/code from the Terminal/li liThis tutorial/li /ol  codechmod/code  ol licodeman chmod/code/li /ol  codesudo/code  ol licodeman sudo/code/li /ol  codegit/code: From the git homepage  If you need any more help, just ask.  Oh, before I forget: codesudo/code asks for your admin password for that machine.  <comment95942> How do you do the copy? Using the finder? Do you initiate the copy from the client? <comment95964> @Huygens: question updated with details <comment95969> Are your client Macs using user ids issued by and managed by the Mac OS server? <comment96101> Did you check the file permission back at your office? <comment96165> @Huygens: I will do it in 4 hours (wasn't at the office). <comment96166> @Global nomad: I'm nearly sure the ids are not managed by the server. How can I know that ? <comment96209> This is a known issue in OS X 10.5, see my answer below. <comment96217> Raw guess: this problem can maybe be corrected by setting up some sort of umask for the AFP share (I don't know how to do this). <comment96222> @BertrandSCHITS -  Not likely. I & thousands of other users encountered this problem extensively back when OS X 10.5 was current - it was a serious bug in the operating system. 10.5 failed to properly respect POSIX permissions, had something to do with the roll-out of ACL's in OS X IIRC. <comment96373> Hmm, if you're now running 10.6.x or later on all machines, including (of course) the server, I'm stumped at the moment. Hard to get into the nitty-gritty of troubleshooting with StackExchange comments as the primary mode of communication.  From the file-sharing directory *on the server* you might try, in Terminal.app   sudo chmod -R 777 *      BE SURE you're in the file-sharing directory itself, not any of the system directories. Don't try this unless you understand how chmod works and you're comfortable at the command line. <comment96670> The question says he's using an OS X 10.5 machine to serve AFP & SMB shares. So, it's a mac server. <comment96679> You cannot safely make that assumption. Any OS X 10.5 system can serve AFP & SMB shares. Go into System Preferences  File Sharing. Create a shared folder. Check the option to share to Windows users as well. You have then created an AFP & SMB share. But using POSIX-only permissions. Even if he is using OS X Server proper, he will want to make sure he has provisioned access using ACEs instead of POSIX permissions. As a Mac systems administrator myself this sounds like classic POSIX limitations to me. <comment96680> Secondly, he is now using 10.6 and 10.7 and the issue persists. <comment96684> My mistake. I misread your answer as "using a non-Mac server" rather than what it actually says, "using a non-Server Mac." <comment96774> IF i understand you correctly, witch judging from the other awnserws im doubtful, seleft the file cmd + i at the bottom sharing and permissions, create a new one, everyone, and read & wright