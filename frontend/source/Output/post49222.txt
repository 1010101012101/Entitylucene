Allow the Terminal.app to pass command key  based keystrokes to terminal programs <body> I want to allow programs running in the terminal the ability to interpret the keyboard short cut kbd Cmd/kbd + kbd S/kbd   I have already Remapped the Terminals' default binding of kbd Cmd/kbd + kbd S/kbd to kbd Ctrl/kbd + kbd S/kbd via the Keyboard System Preferences in OS X Lion, so this has stopped the Terminal App itself from interpreting that key press, e.g. the save dialog no longer comes up when pressing kbd Cmd/kbd + kbd S/kbd . However something is still grabbing the key input before any terminal program can.  For example when running bash typing  kbd Cmd/kbd + kbd S/kbd in the X11.app terminal results in:   precode$s /code/pre  being printed to the screen.   When I perform the same kbd Cmd/kbd + kbd S/kbd in the Terminal.app nothing is printed and the OS plays an Error Sound. I am not really sure why the keystroke is not making it to the terminal as expected, how do I allow kbd Cmd/kbd + kbd S/kbd to pass thru.  strongFor more information on what / why  I am trying to do this see question Bind &lt;Cmd-S&gt; in Vim/strong  <answer49229> not sure if this applies, but codestty/code uses ctrl-s to stop the terminal until restarted with ctrl-q. I'd be a bit leery about sending ctrl-s to a terminal.  <answer172228> I have similar desires to yours. I solved it using a system-level modifier-key re-bind.  (Of course, this is a mess; but I find it worth it to maintain my MacVim-trained hybrid of OS-wide controls (save, new, copy, paste) within command-line codevim/codes.)  Here's how I did it:  ol liInstall Karabiner, which is a emvery/em, very powerful program (and an essential part of any poweruser's / programmer's OS X installation, IMHO)/li liEnable strong“Command_L to Control_L (only in Terminal)”/strong:  /li liMap kbd⌃/kbd-prefixed controls matching whichever MacVim commands you're most used-to in command-line codevim/code. For instance, to support kbd⌘S/kbd,  precodenoremap  &lt;silent&gt; &lt;C-S&gt;    :update&lt;CR&gt; vnoremap &lt;silent&gt; &lt;C-S&gt;    &lt;C-C&gt;:update&lt;CR&gt; inoremap &lt;silent&gt; &lt;C-S&gt;    &lt;C-O&gt;:update&lt;CR&gt; /code/pre/li liRestore expected kbd⌘/kbd-sequences for Terminal.app itself, by special-casing them in System Preferences. For instance, if you want kbd⌘N/kbd to still control Terminal tabs, instead of mapping it to codevim/code files, try:    Now, anything you emdon't/em add in this list, will be passed through verbatim to command-line codevim/code (and, of course, any other command-line program you use.)/li /ol  hr  h1Caveats/h1  This approach has several emfurther/em subtle downsides, that I want to hilight for anyone considering taking it (as I do):  ul likbd⌘␣/kbd will no longer map to the system-wide Spotlight. (I've an open issue on Karabiner, and will come back here once I have a stopgap solution.)/li liFor reasons I can't ascertain, even with the kbd⌃W/kbd exclusions set up in System Preferences, the tab-closing behaviour of Terminal.app changes with this setup: kbd⌘W/kbd will close individual tabs in a window; but if the current tab is the emlast/em tab, it will emnot/em close the window. Instead, it has no effect. I've had to re-train myself to use kbd⇧⌘W/kbd to close the window if there's only one tab left./li liIf you've trained yourself to use kbd⌃V/kbd in MacVim to do block-wise selection, then you'll have to re-train yourself to use the alternative, kbd⌃Q/kbd (or, now, kbd⌘Q/kbd). Additionally, you'll have to add codestty -ixon/code in your shell's startup-script, as kbd⌃Q/kbd is consumed by default to preform an archaic shell-control function (one with no modern usage.)/li /ul  hr  h2Alternative kbd⌘W/kbd behaviour/h2  In addition to the above, I decided to further override kbd⌘W/kbd as a universal ‘close this’ key, applicable to multiple applications.  Instead of mapping kbd⌘W/kbd to ‘Close Tab,’ as above; I personally map that to kbd⇧⌘W/kbd (to retain “immediately close this tab” semantics.) Then, in any given program, I map kbd⌃W/kbd to some sort of close-save-quit functionality.  For instance, in my code.vimrc/code:  precodenoremap  &lt;C-W&gt;    :confirm quit&lt;CR&gt; vnoremap &lt;C-W&gt;    &lt;C-C&gt;:confirm quit&lt;CR&gt; inoremap &lt;C-W&gt;    &lt;C-O&gt;:confirm quit&lt;CR&gt; /code/pre  … or my code.zshrc/code:  precodefunction close_tab { exit } zle -N close_tab_widget close_tab bindkey           '' close_tab_widget bindkey -M vicmd  '' close_tab_widget /code/pre  With those two snippets in place, and your Terminal configured to ‘Close if shell exits cleanly,’ a series of kbd⌘W/kbds will first quit vim, and then close the shell entirely.  In addition, now additional on-exit functionality of programs can be preserved: for instance, codevim/code will ask before quitting if files are unsaved (just like MacVim); and codezsh/code will ask before quitting if there are background jobs.  hr  emPostscript:/em Not emdirectly/em related to your question; but you should also check out ‘Ubiquitous Vim Mode’ in Karabiner. It's “a bit much” for me to use everyday, but it's a very cool idea, and surprisingly-well implemented.  <comment56341> I tried this and it did not seem to have any effect when I added it to mt .bashrc, a slightly modified version of what was indicated here http://vim.wikia.com/wiki/Map_Ctrl-S_to_save_current_or_new_files <comment204304> Here's a Karabiner `private.xml` to exclude ⌘␣: https://github.com/tekezo/Files/blob/master/Karabiner/private.left_command_to_left_control_terminal/private.xml