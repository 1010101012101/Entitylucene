Apple Reverse SSH Tunnelling Issue <body> I've been trying to setup reverse SSH tunnelling from outside my network to home but I've beet getting no-where. My setup is all Apple: two Macs behind an Airport Extreme, one at x.x.x.20 listening on port 22 and the other at x.x.x.30 listening on 10,022.  I've setup NAT on the AP to forward external ports 22 to the x.x.x.20 and 10,022 to x.x.x.30. I want the tunnel to run to x.x.x.20:10022.  I've been using this command from an apple device outside of my home network: codessh -v -f -N -R 22:localhost:10022 homeuser@myhomedoman.com/code as well as codessh -v -f -N -R 10022:localhost:22 homeuser@myhomedoman.com/code but either way, the logs on the x.x.x.20:22 listening machine show that the traffic goes to it and the x.x.x.30:10022 machine show no record in the secure.log file. I've even tried codessh -v -f -N -R 10022:localhost:10022 homeuser@myhomedoman.com/code and the traffic still hits the x.x.x.20:22 listening machine.  The strange thing is that when i run codessh -p 10022 homeuser@myhomedoman.com/code it connects to the x.x.x.30:10022 listening machine just fine. I've gone through every NAT rule in the Airport as well and there's only one rule covering port 10022 so it's not a NATing problem as far as the AP's configuration is concerned.  Either I'm doing something really wrong, there's a bug in Apple's implementation of reverse SSH tunnels or that the Airport is doing something funny with the traffic. Has anyone else had this problem or found a workaround?   The guide I'm running to get the reverse tunnel running is http://www.vdomck.org/2005/11/reversing-ssh-connection.html  Thanks in advance!    <answer82617> emTo avoid confusion I'll call/em:  ul liemx.x.x.20 - local1/em/li liemx.x.x.30 - local2/em/li liemApple device outside your home network - remote1/em/li /ul  You say:     I've setup NAT on the AP to forward external ports 22 to the x.x.x.20   and 10022 to x.x.x.30.   which I interpret like this:  precode                 ________                 +-----------------+         +-----------+                 /        \ -  port 22 ----|-----------------|------&gt;  | local1:22 |                                   +---------+    (          )               |                 |         +-----------+ | remote1 | -  ( Internet )               | Airport Express |                                      +---------+    (          )               |                 |         +--------------+                 \________/ -  port 10022 -|-----------------|------&gt;  | local2:10022 |                                             +-----------------+         +--------------+ /code/pre  That is, local2 is reachable on [public IP address of Airport Extreme]:10022.   strongHowever, the codessh/code commands you run in your question use the default SSH port (that is, 22/tcp), and connect to local1:22/strong (more exactly: they connect to [public IP address of Airport Extreme]:22, which forwards the connection to local1:22).  You must modify the codessh/code command you run on remote1 like this (notice option code-p 10022/code):  precoderemote1$ ssh -p 10022 -f -N -R 2222:localhost:22 [username at local2]@[public IP address of Airport Extreme] /code/pre  code-p 10022/code tells codessh/code which port to connect to, while code2222:localhost:10022/code tells codessh/code to allocate a socket on local2 to listen to port 2222 and forward any packet sent to that port to port 22 on remote1:  precode +------------+                         +----------------------+  |            |                         |                      |  | remote1:xx | -- SSH (port 10022)--&gt;  | local2:10022 (SSH)   |  |            |                         |                      |  | remote1:22 | &lt;--- SSH tunnel ------  | local2:2222 (alloc'd |  |            |                         |              by ssh) |  +------------+                         +----------------------+ /code/pre  Now you can access remote1 from local2 as follows:  precode local2$ ssh -p 2222 remoteuser@localhost /code/pre  (You use code-f/code in your command which sends codessh/code to the background. The codesshd/code process that binds to port 2222 and runs on local2 will continue to execute even if you stop Remote Login in System Preferences:  img src="https://i.stack.imgur.com/eSRUg.png" alt="enter image description here"  To stop it, list it:  precodelocal2$ lsof -i | grep 2222 local2$ sshd   855 jaume   14u  IPv6 0x4857f   0t0  TCP localhost:2222 (LISTEN) /code/pre  and kill it with codekill &lt;PID&gt;/code:  precodelocal2$ kill 855 /code/pre  where PID is the second value in codelsof/code's output line.)  <comment95120> Update: On closer inspection, _both_ methods are connecting to port 22 of my home router's public IP address as viewed by the machine attempting to make the connection. Even if I use ssh -v -f -N -R 10022:localhost:10022 ssh still opens a connection to port 22 :/ <comment96651> Brilliant! Thank you, that was the solution.