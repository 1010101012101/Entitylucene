Changing display resolution on Retina machines while in Command Line Mode <body> I frequently prefer to boot into the command line mode (CMD + S on boot) instead of booting to the normal GUI-imposed version. I do most of my work in the terminal, so it's nice to save some time and bypass all the unnecessary UI.  However, on retina machines, the command line mode displays at a 1:1 ratio (instead of a 2:1), meaning all text is very, very small. I really want to reduce the resolution it displays at by a factor of two. Is this possible, and if so, how?  <answer159731> I found this for you  strongscrutil/strong     Slightly more advanced due to the nature of the command line, the free utility called screenutil gets the job done immediately with a quick entry into the Terminal.      Launch Terminal and drag and drop scrutil into the command line to use it once, but if plan on using it often it’s a good idea to toss scrutil into /usr/local/bin for easy future access. Once installed, changing the retina display to native 2880×1800 with screenutil is achieved with the following command example:  precodescrutil s 2880 1800 16 /code/pre      The command will report back the resolution change, the 16 at the end is color depth so you can set that to something else if you’d like. You can set it back to the default resolution either through System Preferences or with scrutil s 1440 900.   There is also this:   http://hints.macworld.com/article.php?story=20090413120929454  precode/*  * COMPILE:  *    c++ setgetscreenres.m -framework ApplicationServices -o setgetscreenres  * USE:  *    setgetscreenres 1440 900  */  #include &lt;ApplicationServices/ApplicationServices.h&gt;  bool MyDisplaySwitchToMode (CGDirectDisplayID display, CFDictionaryRef mode);  int main (int argc, const char * argv[]) {     int h;                          // horizontal resolution     int v;                          // vertical resolution     CFDictionaryRef switchMode;     // mode to switch to     CGDirectDisplayID mainDisplay;  // ID of main display      CFDictionaryRef CGDisplayCurrentMode(CGDirectDisplayID display);      if (argc == 1) {         CGRect screenFrame = CGDisplayBounds(kCGDirectMainDisplay);         CGSize screenSize  = screenFrame.size;         printf("%d %d\n", screenSize.width, screenSize.height);         return 0;     }     if (argc != 3 || !(h = atoi(argv[1])) || !(v = atoi(argv[2])) ) {         fprintf(stderr, "ERROR: Use %s horres vertres\n", argv[0]);         return -1;     }      mainDisplay = CGMainDisplayID();      switchMode = CGDisplayBestModeForParameters(mainDisplay, 32, h, v, NULL);      if (! MyDisplaySwitchToMode(mainDisplay, switchMode)) {         fprintf(stderr, "Error changing resolution to %d %d\n", h, v);         return 1;     }      return 0; }  bool MyDisplaySwitchToMode (CGDirectDisplayID display, CFDictionaryRef mode) {     CGDisplayConfigRef config;     if (CGBeginDisplayConfiguration(&amp;config) == kCGErrorSuccess) {         CGConfigureDisplayMode(config, display, mode);         CGCompleteDisplayConfiguration(config, kCGConfigureForSession );         return true;     }     return false; } /code/pre     Save that as a pure text file named setgetscreenres.m, then compile it   in Terminal using the command shown in the code (assuming you're in   the directory where the file is saved):  precodec++ setgetscreenres.m -framework ApplicationServices -o setgetscreenres /code/pre      Move this file somewhere on your user's $PATH, and then use it by   typing code./setgetscreenres hor_res vert_res/code, where hor_res and vert_res   are the desire horizontal and vertical resolution.   Disclaimer: I have not tested it!  <answer159985> Years ago, I used cscreen to map a Keyboard Maestro shortcut to a shell script.  It might work for your purposes.  http://www.pyehouse.com/cscreen/  The dev updated it for Intel machines a couple of years ago but did not have a retina machine for testing.  I expect we will all have to deal with this problem eventually.  <comment188003> That definitely looks promising. Unfortunately it seems the site that scrutil was hosted at is now down, and I can't find a place to get it. <comment188006> sorry for that, I did not check it my self since I do not have your set up.-- a GUI user :) <comment188211> This seems to be it: http://iusethis.luo.ma/screenutil/ <comment188212> @LeoKoppelkamm yes, I tried but could not extract the file from the .zip ? <comment188302> Ok I uploaded it here: https://github.com/ponychicken/screenutil <comment188356> @LeoKoppelkamm now that is what I call a supper Googler :) good job ! <comment188708> Thanks for the find! However, after trying the utility I found that it doesn't work in single user mode. Trying to use it simply gives me an "invalid display" message. <comment188968> setgetscreenres works very well in normal mode, unlike screenutil. However, even that doesn't work right in single user mode. It said I couldn't access the WindowServer without logging in, but it wouldn't let me do that. That said, it is a great start, and perhaps in combination with more googling I can find a complete solution. Thanks! <comment188970> your are welcome, sorry I could not do more. I assume you tried it in sudo mode.