OS X - Create a personal bin directory (~/bin) and run scripts without specifying their full path <body> So, what I am trying to do is to create a personal codebin/code directory at my home folder. I created the following folder:  precode/Users/thi/bin /code/pre  I put my scripts in this folder, but if I type in the Terminal:  precodemyScript /code/pre  It doesn't run.  I was told I have to export this bin path, something related to codeecho $PATH/code, but I don't know how to do it.  <answer99789> You need to add the following to file code~/.profile/code:  precodeexport PATH=/Users/thi/bin:$PATH /code/pre  Then codesource ~/.profile/code  Note, that you may need to create this file, and because it begins with a code./code it might not be visible in the finder for editing via an application like a text editor.  To list all files including hidden ones, use:  precodels -la ~/ /code/pre  <answer99810> You typically would put additional paths after code$PATH/code like codePATH=$PATH:/$HOME/bin/code because if you don't want to supersede another executable with the same name that might be in code/bin/code, etc.  <answer99838> If you use bash, add a line like this to code~/.bash_profile/code:  precodePATH=~/bin:$PATH /code/pre  codePATH/code is marked for export by default, so you don't need to use codeexport/code.  If both code~/.bash_profile/code and code~/.profile/code exist, bash only reads code~/.bash_profile/code when it is invoked as an interactive login shell. code~/.profile/code is also used by other shells that might not understand the same configuration options as bash.  Terminal and iTerm 2 open new shells as login shells by default. When bash is invoked as an interactive login shell, it reads code~/.bash_profile/code but not code~/.bashrc/code. The terminal emulators on other platforms often open new shells as non-login shells, so for example bash reads code~/.bashrc/code but not code~/.bash_profile/code. OS X users often use code~/.bash_profile/code as the personal configuration file corresponding to code~/.bashrc/code on other platforms, but it is also common to source code~/.bashrc/code from code~/.bash_profile/code or to tell Terminal or iTerm 2 to open new shells as non-login shells.  You can also change the path more globally in code/etc/paths/code or code/etc/launchd.conf/code, but in many contexts the path will still default to code/usr/bin:/bin:/usr/sbin:/sbin/code. And I have only really needed to change the path in shells and text editors.  <comment117425> If I add export PATH=/Users/thi/bin:$PATH to my .bashrc file, is it gonnae work? Is it correct? <comment117426> Better use `$HOME/bin` instead of `/Users/thi/bin`. You'll then be able to copy your settings to another machine, where your user name is perhaps different. <comment117427> see also towards the end of http://apple.stackexchange.com/a/98626 <comment117436> If I type in the terminal: PATH=$HOME/bin:$PATH and then type: export PATH. Will it do the trick? <comment117456> If you do that, it will change the settings now, but not on future boots. To change the path in a way that survives reboots, you need to include those commands in your `.profile` file. <comment117457> Thks!! And why do I have to run "source ~/.profile"? What does it do? @DanielLawson <comment117466> One might easily argue that you would put `$HOME/bin` at the beginning exactly for that reason. But the key thing is that the order of directories in `$PATH` matters and that the shell will pick the first matching command. Thanks for pointing this out. <comment117472> `source ~/.profile` will apply the new/changed `.profile` file to your current shell session. You only need to do that to see your changes take effect without opening a new Terminal session. <comment117546> Great, thks for the answer. I added `export PATH=$HOME/bin:$PATH` to my `$HOME/.bash_profile`. <comment117548> Great, thank you all for the answers. I added `export PATH=$HOME/bin:$PATH` to my `$HOME/.bash_profile`. <comment117568> [You don't need export](http://unix.stackexchange.com/a/25704/10053), and both `~` (when unquoted) and `$HOME` are expanded before the variable assignment both when using export or a plain assignment. <comment117648> Lauri Ranta, what do you prefer personally, `.bash_profile` or `.profile`? Or you have a `.bashrc` in your home directory? <comment117708> I used to use only .bash_profile, but now I use .bashrc as my main configuration file and my .bash_profile just contains `. ~/.bashrc`. New shells are opened as non-login shells in the shell mode in emacs and in tmux. I wouldn't use .profile as my main configuration file, because it is also read by other shells like ksh. <comment118022> 1) launchd gets its path from '/etc/launchd.conf' or 2) if your scripts don't inherit the $PATH you may need to add 'source "$HOME/.profile"' to the top of your scripts.