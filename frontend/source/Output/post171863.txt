Apple Mail keeps crashing frequently after RAM problem <body> strongUpdate/strong: while waiting for a response I managed to solve the matter, first by running mail from a different account (it worked flawlessly); and second by running Onyx - it has the feature of rebuilding mail envelope index - which resolved whatever issue my system had. Anyway.  Thank you for the helpful suggention.  hr  I am having a problem with Apple Mail. Following a bad RAM problem on my PowerMac G5/10.5.8 Apple Mail 3.6 started to crash frequently, shortly after I open it, or whenever I try to do anything with it, for example when selecting a message or attempting to send a mail. Each time the spinning beachball appears, and mail crashes.  Restarting, permissions repairs and the use of Disk Utility, DiskWarrior and TechTool Pro hasn't helped.  I have included a crash log below:  precodeProcess: Mail [782] Path: /Applications/MAIL/Mail.app/Contents/MacOS/Mail Identifier: com.apple.mail Version: 3.6 (936) Build Info: Mail-9360000~1 Code Type: PPC (Native)  Parent Process: launchd [66]   Date/Time: 2015-02-13 21:42:38.367 +0100 OS Version: Mac OS X 10.5.8 (9L31a)  Report Version: 6  Anonymous UUID: A75D0409-433A-44F1-9D38-E34AED349277   Exception Type: EXC_BAD_ACCESS (SIGSEGV)  Exception Codes: KERN_INVALID_ADDRESS at 0x00000000ce6f7b80  Crashed Thread: 11  Thread 11 Crashed:  0 ...ple.CoreServices.CarbonCore 0x93acd610 CSStoreGetUnit + 56 1 com.apple.LaunchServices 0x920c55d8 CSStringCopyCFString + 92 2 com.apple.LaunchServices 0x920e2acc CSStringBindingCopyCFStrings + 120 3 com.apple.LaunchServices 0x920e2864 _LSCopySchemesAndHandlerURLs + 156 4 com.apple.MessageFramework 0x00960b2c +[URLifier _urlMatchesForString:startIndex:matches:] + 1820 5 com.apple.MessageFramework 0x00960024 +[URLifier urlMatchesForString:] + 348 6 com.apple.mail 0x0004cc44 0x1000 + 310340 7 com.apple.CoreFoundation 0x940159a8 __invoking___ + 168 8 com.apple.CoreFoundation 0x94015230 -[NSInvocation invoke] + 128 9 com.apple.MessageFramework 0x009f49ec -[MonitoredInvocation invoke] + 392 10 com.apple.MessageFramework 0x009f461c -[InvocationQueue _drainQueue] + 656 11 com.apple.Foundation 0x90ad9d84 __NSThread__main__ + 1004 12 libSystem.B.dylib 0x93438f70 _pthread_start + 316  ------  Exception Type:  EXC_BAD_ACCESS (SIGSEGV) Exception Codes: KERN_INVALID_ADDRESS at 0x00000000ce6f7b80 Crashed Thread:  10  Thread 10 Crashed: 0   ...ple.CoreServices.CarbonCore  0x93acd610 CSStoreGetUnit + 56 1   com.apple.LaunchServices        0x920c55d8 CSStringCopyCFString + 92 2   com.apple.LaunchServices        0x920e2acc CSStringBindingCopyCFStrings + 120 3   com.apple.LaunchServices        0x920e2864 _LSCopySchemesAndHandlerURLs + 156 4   com.apple.MessageFramework      0x00960b2c +[URLifier _urlMatchesForString:startIndex:matches:] + 1820 5   com.apple.MessageFramework      0x00960024 +[URLifier urlMatchesForString:] + 348 6   com.apple.mail                  0x0004cc44 0x1000 + 310340 7   com.apple.CoreFoundation        0x940159a8 __invoking___ + 168 8   com.apple.CoreFoundation        0x94015230 -[NSInvocation invoke] + 128 9   com.apple.MessageFramework      0x009f49ec -[MonitoredInvocation invoke] + 392 10  com.apple.MessageFramework      0x009f461c -[InvocationQueue _drainQueue] + 656 11  com.apple.Foundation            0x90ad9d84 __NSThread__main__ + 1004 12  libSystem.B.dylib               0x93438f70 _pthread_start + 316 /code/pre  <answer171874> Since you had a faulty RAM, the first target of corruption is the whole filesystem. It is a good point to have eliminated this possibility of huge trouble.  If your problem does only appears within codeMail/code this could mean that one of the files codeMail/code had to write back was corrupted (in RAM).  To confirm this hypothesis:  ol limake a backup/li liquit codeMail/code and make a local backup of your Mail library (the following are shell commands to type within codeTerminal/code):  precodecd ~/Library mv Mail Mail.backup /code/pre/li listart codeMail/code, create you a minimal account configuration and send yourself an E-mail  If codeMail/code doesn't crash, the problem stands within one of your Mail library file  If codeMail/code still crashes, report it./li liquit codeMail/code and put back in place the library you backed up at step 2:  precodecd ~/Library rm -rf Mail mv Mail.backup Mail /code/pre/li /ol  If step 3 confirms that the problem stands within your Mail library, and if your mailboxes aren't too big, you could then make a rebuild of them:  ol lilaunch Mail/li liselect  precodeMailbox &gt; Rebuild /code/pre/li libe patient, don't corrupt its rebuilding task, open the activity window:  precodeWindow &gt; Activity /code/pre/li /ol  <comment202333> Your update to your question would make a correct answer. It would be useful to others too. It confirms that your library was corrupted by `Mail` running on a faulty RAM.