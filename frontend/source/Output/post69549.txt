Reversing some /usr/local damage <body> I was following this tutorial - http://howtonode.org/introduction-to-npm - and set /usr/local to $USER, which I now realise was a huge mistake.  Does anyone know how I can revert these changes, but still allow Homebrew, Node, Ruby, etc to install without requiring sudo?  <answer69560> Boot to your recovery HD and see whether you want to use terminal to fix the Mac HD /usr/local by hand or if you'd rather just restore from a convenient backup.   Since Macs don't need anything to exist in /usr/local I don't see how sudo or anything system critical is even affected so perhaps I am not even understanding your situation.   <answer69572> As for the first part of your question, you can't revert the changes, there's no kbdâŒ˜/kbdkbd Z/kbd or undo command, but you can set the permissions to a good guess of what it was before. More on this in the first bullet below.  To install software in code/usr/local/code you must have strongwrite permissions/strong in the directory (and its subdirectories). There are several ways to achieve this:  ol listrongSet the owner to yourself/strong. That's what you did with codesudo chown -R $USER /usr/local/code. My Linux sysadmin background tells me this is not the standard way, because code/usr/local/code is outside your home directory and shouldn't be owned by you. But I wouldn't say you damaged anything irreparably./li listrongUse/strong codesudo/code, but you don't want to be required to use it.  (From my point of view the strongbest solution/strong. Why? codesudo/code protects you from yourself. You think twice if you need to type codesudo/code (unless you are following a tutorial from http://howtonode.org code:-)/code ).)/li listrongSet ACLs/strong. Nice way to separate the original permissions from your added permissions. (See http://en.wikipedia.org/wiki/Access_control_list for more info on ACLs.)/li listrongConfigure groups/strong. Add yourself to the group that owned code/usr/local/code  and change permissions to codeg+rwx/code/codeg+rw/code. Cumbersome. Don't do that./li /ol  You did 1. and want to revert the changes, 2. you don't want, and I don't recommend 4., so I'll explain 3.:  ul liLet's first "revert" the changes you made. code/usr/local/code was probably owned by user coderoot/code, group codewheel/code. You can set it as follows:  precode$ cd /usr/local $ sudo chown -R root:wheel . /code/pre/li liSet the ACLs so that you have all permissions:  precode$ cd /usr/local $ sudo chmod -R +a "$USER allow delete,readattr,writeattr,readextattr,writeextattr,readsecurity,writesecurity,chown,list,search,add_file,add_subdirectory,delete_child,file_inherit,directory_inherit" . /code/pre  (see codeman chmod/code, section codeACL MANIPULATION OPTIONS/code for details.)/li liYou will see that all files have a code+/code appended, codels -e/code shows the ACLs:  precode$ cd /usr/local $ ls -la . total 0 drwxr-xr-x+ 11 root  wheel   374 Oct 10 21:57 . drwxr-xr-x+ 12 root  wheel   442 Sep 22 13:44 .. drwxr-xr-x+  3 root  wheel  3774 Oct 10 21:57 bin -rw-r--r--+  1 jaume wheel    0  Oct 25 14:53 myACLtestfile drwxr-xr-x+  3 root  wheel   136 Jul 26 18:55 include drwxr-xr-x+  4 root  wheel   442 Jul 26 18:55 lib (...) $ ls -led bin drwxr-xr-x+ 3 root  wheel  3774 Oct 10 21:57 bin  0: user:jaume allow list,add_file,search,delete,add_subdirectory,delete_child,readattr,writeattr,readextattr,writeextattr,readsecurity,writesecurity,chown,file_inherit,directory_inherit $ ls -le myACLtestfile  -rw-r--r--+ 1 jaume  wheel  0 Oct 25 14:53 myACLtestfile  0: user:jaume inherited allow read,write,execute,delete,append,readattr,writeattr,readextattr,writeextattr,readsecurity,writesecurity,chown /code/pre/li /ul  (I've tested the commands above, but strongI may have made a typo. As best practice I recommend that you run the commands above in a test directory/strong. You could do codemkdir ~/tmpacl/code. Then codecd ~/tmpacl/code and codesudo rsync -av /usr/local/ ./code to copy the contents of code/usr/local/code to code~/tmpacl/code. Then skip codecd /usr/local/code in every section above to apply the commands to code~/tmpacl/code. When you are done, coderm -rf ~/tmpacl/code.)  Now you can install software (or do anything, for that matter) in code/usr/local/code without codesudo/code.  Notice that any file you create in code/usr/local/code will belong to you (as codemyACLtestfile/code in the listing above), so you will see that some files are owned by coderoot/code and others by you.  (If you change your mind and want to go back to the wonderful world of codesudo/code, delete the ACLs as follows:  precodesudo chmod -R -N /usr/local /code/pre  and set permissions to coderoot:wheel/code:  precodesudo chown -R root:wheel /usr/local /code/pre  )  hr  ** EDIT **  strongIf the setup routine of the software you want to install uses code/usr/bin/install/code/strong this may be a much simpler solution. Add:  precodealias install="sudo /usr/bin/install" /code/pre  to code~/.bashrc/code. Then do code. ~/.bashrc/code for changes to take effect.  Then edit code/etc/sudoers/code with command codesudo visudo/code, add:  precode&lt;your username&gt; ALL=(ALL) NOPASSWD:/usr/bin/install /code/pre  and save and close the file with code:x/code.  (If you use other codeinstall/code command elsewhere in the filesystem, like GNU install, change the path above appropriately.)  strongFor this to work the software must use code/usr/bin/install/code./strong This is usually the case with codemake install/code.  ** /EDIT **  <comment80798> Why was it such a mistake? <comment80803> Please describe the actual steps you performed, and the problems you are encountering. <comment80808> @Gerry: The referenced page mentions running `sudo chown -R $USER /usr/local`. That is criticised in a comment on the same page. How to undo this depends on how `/usr/local` has been used previously. <comment80823> What a great answer, I wish I could vote you up twice! <comment80935> @InfluenceJamie: Thanks, that's very kind of you. <comment80936> @Matty F: I've added a much simpler way to achieve "sudo-less" installation (condition: `/usr/bin/install` must be used), please check it at the bottom of my answer.