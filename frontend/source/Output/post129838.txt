Why does a Java based app in OS X have 2 different user interface designs? <body> I quote 2 images from Google.  img src="https://i.stack.imgur.com/ogNFK.png" alt="image1" img src="https://i.stack.imgur.com/89mpQ.png" alt="image2"  Look at the tabs. They are totally different. I have just finished migrated to OS X. I always believe that OS X provides a uniform user interface to make their apps more elegant. Additionally, How to turn app's UI in the second image to look like that in the first image?  <answer129839> The same Java code (mostly) runs on all OS/architectures. It has several different  APIs to draw forms/windows. Some of these APIs e.g. Swing allow you to change look and feel between emulating different widget sets. So a program can be written so that it allows the user to change the look and feel.  The look and feel that is supplied includes OSX (as in the top screenshot) and Windows(several forms) or Motif or GTK. The way to set this in Swing and for more information see this Oracle document Note that even the OSX Look and feel does not full match Apple's guidelines e.g. positioning of the menu in the window and not at the top of the display.  Like any Windowing system you can always write programs that behave and look different to the expected standard. It happens that for OSX most developers stick to Apple's guidelines, but even using Apple's supplied APIs you can have a different feel between Carbon(originally Mac OS &lt;= 9) and Cocoa programs(originally NeXT). The AppStore allows Apple to have a bit more control but I do not know if meeting display guidelines is actually checked.  <answer129845> Java is simply the container and the language chosen by the programmer to describe how a picture should get drawn. Using java means that the developer ignored the standard OS X interface elements that Apple provides to developers along with user interface guideline documents. This example is precisely why java code is often seen as a second class citizen among people that expect typical Apple quality software to run on their Mac.  Think of a restaurant. The directions to the staff could be written in french and the containers that the food gets delivered could be folded paper boxes coated with wax on the outside. It still wouldn't change what you got if one recipe was for northern italian food versus northern indian food.  Java alone doesn't proscribe how a button looks - just the library and code to draw the GUI and in your example, different ingredients were placed in the same container with the expected different results.  <comment151977> Your proof is from same program but a different build version. What is programmed in java doesn't mean Apple has control over it and says that is how it has to look. Apple is good and the Mac App Store helps keep people safe but how a program looks is up to the egg head that writes the code <comment151980> It's not even the same version of the app (1.3.03 vs 1.4.12) <comment151981> If you are actually writing the code I think this is off topic and get the details in StackOverflow - but they will expect to see the code that you have that attempts to change the look and feel <comment151982> @MatthieuRiegler - My answer still stands except that the writer might not have allowed the user to change look and feel or might even have change the Java API he uses <comment151986> @Mark You are correct, but at a high level, there is value in discussing the why and how an app is assembled without needing to get into system calls and specific versions of SDK/interface libraries. <comment151988> @bmike - I agree which is why I answered but this is not the site to tell the OP how to change the code- the question does not have enough information to know exactly what the OP wants - although most likely the general overview I supplied <comment151990> Not so much that the developer decided to ignore the standard interface elements but more that Java does not give access to native widgets and so has to use some emulation and I think none of them are 100% so forcing the developer to look bad <comment151993> @mark My point is that the developer chose to not adopt Apple's tools and code **by choosing java** as the container for the UI portion of the app. Again, with enough funding and time you could write from scratch a perfect re-implementation of Apple UI entirely in java - but the cost and performance might make this a ridiculous exercise.