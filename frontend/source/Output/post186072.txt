What does adding PATH to .bashrc do? <body> I'm following this guide to install Linux commands onto my OS Terminal: https://www.topbug.net/blog/2013/04/14/install-and-use-gnu-command-line-tools-in-mac-os-x/ and I see that the second line tells me to add a line to my .bashrc file, which I have to create since I don't have one. Can anyone explain to me what this does? As well as the codePATH/code command in general?   <answer186073> When you run a command in codebash/code (or any other Unix shell), the shell searches for this command in a number of directories. The list of directories is stored in the variable called codePATH/code, paths are separated by code:/code.  The command in question extends the already defined code$PATH/code by two additional paths:  ul licode/usr/local/bin/code which is the usual place user-provided commands get installed to/li liThe output of code$(brew --prefix coreutils)/libexec/gnubin/code which points to some utility commands required by brew/li /ul  To see the current value of codePATH/code, run codeecho $PATH/code in Terminal.  <answer186214> A .bashrc file can store and set a number of variables and commands that are executed (run) when you launch bash, which is one of many shells you can use to type commands into the Linux/Unix system.  For comparison, if you prefer the shell zsh then you would create a .zshrc file.  <comment219620> Additionally, the order `:` of the directories specified within one's `PATH` matters. The shell will search for the command according to that order.