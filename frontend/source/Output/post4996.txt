Running .NET binary with mono <body> When I have abc.exe generated from C#/Mono source, I use 'mono abc.exe'.  Is there a way to run abc.exe with 'abc.exe' not 'mono abc.exe'? I mean, when I run 'abc.exe', can I make 'mono abc.exe' called automatically?  <answer5010> I don't have a lot of experience with mono but you'll probably have to create an executable shell script that does the mono call for you.  Something like:  precode$ vi abc.sh  #!/bin/bash #abc.sh mono abc.exe :wq  $ chmod +x abc.sh $ ./abc.sh /code/pre  <answer5018> Improving Calavera’s answer to allow you to do it with a parameter, the script should look like:  precode#!/bin/bash mono $1 /code/pre  That way you can do:  precode./abc.sh name_of_the_app.exe /code/pre  emsubI would have added this as a comment, but the format would have been lost/sub/em  <answer5024> See this link  Basically what you have to do is to use one of the Mono tools (mkbundle is a generic one while macpack is designed to work on Max OSX) to link all your application executables, resources and dll in a single executable file that can be later run as a single app.  From the macpack doc:  emmacpack is a tool that must be used to bundle Cocoa# applications into Double-Clickable, Finder friendly, bundles on Mac OS X. It bundles static libraries and resources, as well as generates a basic info.plist into the .app bundle./em  emFor example the following commands are used to build the CurrencyConverter.exe into an application bundle:/em  precode$ mcs -g -debug+ CurrencyConverter.cs -out:CurrencyConverter.exe -pkg:cocoa-sharp $ rm -rf CurrencyConverter.app $ macpack -m:2 -o:.  -r:/Library/Frameworks/Mono.framework/Versions/Current/lib/       libCocoaSharpGlue.dylib -r:CurrencyConverter.nib -n:CurrencyConverter    -a:CurrencyConverter.exe /code/pre  emThe resulting CurrencyConverter.app is just another Mac OS X application as far as the Finder is concerned, and can be opened from Finder, or launched from Terminal using the open -a CurrencyConverter command./em  <comment5066> it didn't the task that prosseeek want, you just create another shell script for execute one specific file, but I think he want a general solution. <comment5072> @am1rr3za: agreed, but like i said I haven't used mono much so I don't know if there's a way to compile your executable so that you can run it directly on the command line.  At least in the windows world, the OS knows how to identify a .net binary and load the .net CLR to interpret the MSIL.  I don't know how that would work on Unix, unless the binary was compiled to machine language.  But in .net, there has to be a runtime (I don't think you can directly execute a java app either). <comment5073> maybe someone else knows how to configure the system for direct execution, but this might be a question for stackoverflow. <comment5088> @calavera There’s no “JAR” equivalent in mono, you need the mono runtime, as far as I can remember. <comment5097> sounds like bundling or the macpac would be the way to go, unless he just wants something really simple. <comment5100> don't take this the wrong way, but isn't this kind of redundant?  It replaces the call to mono with a call to the script, but either way you still have to type in the app name... so you replace `$ mono someapp.exe` with `   $ callmono.sh someapp.exe`.  just saying :P <comment5105> I was thinking about that… ;) truth is, mono usually is on a crazy path, with the script you could put the full path, but yeah. Kick me. <comment5131> that's true, if mono isn't in your `$PATH` this would allow you to call it without the absolute path in front. <comment5132> could you include some recommendations based on that link in the text of your answer?  link rot is always a problem over time, but if you put it here and just reference your source, it will remain useful in the future.