Identify connected external disks programmatically <body> I want to write a shell script that ejects all currently-connected external drives (either USB or Firewire drives). I can use the codedisktuil eject &lt;disk-path&gt;/code to eject a specified drive. But I still can't figure how to find out what are the external drives. For instance, code/Volumes/code shows internal drives, external drives, and mounted images. Is there a way to identify only external drives programmatically?   <answer17255> Have you considered using codediskutil info /dev/disk[n|s{n}] | grep Ejectable/code which allows you to identify whether the device (or device slice) is ejectable.   This would need to be expanded upon in a script using codeawk/code to work through each disk device that is currently attached to determine whether it can be ejected and then eject it.  <answer17304> In a terminal window (bash shell)  diskutil info /Volumes/name-of-volume  will return a list of properties of the volume, including   Protocol:                 FireWire ...    Ejectable:                Yes    Whole:                    No    Internal:                 No  so, I suppose you could start with that.   I'm not clear on what  the "Internal" property implies, it might be better to look at "Protocol" if your concern is with Firewire or USB external devices.  <comment18861> `diskutil info` is exactly what I need. I can use just `grep` to determine a "Yes" on the "Ejectable" line Here is my script as it might be useful to others: https://gist.github.com/1077064