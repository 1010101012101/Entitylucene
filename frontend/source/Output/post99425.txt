How to verify iOS app integrity? <body> If I write an app for iOS and it's accepted by the AppStore, how do I know if the app is actually the app I compiled and has not being substituted/altered by, say, a "Man in the middle" style interception/attack? Is there a way to do a checksum either after the fact or from inside the app itself?  <answer99451> Actually, it turns out, when backing up to iTunes, the *.ipa file is copied from the iOS device. This file is simply a *.zip with a different extension. Using a tool like 7-zip allows One to examine the contents after the back up to iTunes. A checksum can be run on the individual components in this archive, verifying a lack of tampering.  <comment116963> Your app and all the resources are already signed and iOS won't let it run without verifying the signatures, why do you think you really need more than that? <comment116964> To be clear...your thinking is that Apple's servers will be hacked to substitute your app bundle with some sort of malware? I don't believe there have been any cases of this occurring since the App Store started several years ago, so I think you are probably quite safe on that front. <comment116966> @Kevin: I am writing an app where security is needed at all stages. Given questions about iOS/iCloud security and sharing information with third parties, I need to ensure, for example, Someone has not placed a key logging library inside the app after I sign it. <comment116969> @tubedogg: I also need to make sure that "Someone" to Whom I refer is not Apple, either. <comment116971> If you don't trust Apple, this exercise is pointless. They are running your program, if they want to get any information out of it, they can do it quite easily without touching your binary. <comment116972> I was going to say something along the same lines. If you don't trust the third-party to whom you are sending app bundle, it is perhaps time to reevaluate how you are intending to distribute your app. <comment116974> @Kevin: how would Apple do that, if it did? <comment116976> @xuinkrbin. I don't think you understand the concept of an "operating system." <comment116978> @Kevin: I would appreciate greatly if you would work your comments in a more diplomatic and less presumptive sounding fashion, this being the Internet and all, whether or not You are right and especially if You are wrong. <comment116979> @tubedogg: You may have a point there. <comment116981> Apple doesn't need a keylogger to intercept the keystrokes, it controls the keyboard that tells you what the user is typing in the first place. Even if you were to write a custom keyboard, Apple's code is what is displaying it on the screen and telling you when and where the user tapped. All user interaction on an iDevice goes through Apple's code, period. If they want to intercept any data, they can and there's nothing you can do about it. Want to send or receive data from the server? Apple controls the network stack. Want to read or write to disk? Apple controls file i/o too. <comment116996> You will have access to your codebase while the app is in the store. You can periodically push updates, and you can use the logs to check and deliver key messages. nth <comment117001> @DavidDelMonte: Very insightful. <comment117004> The question remains, though - if you don't trust Apple to not tamper with your app, why would you want to distribute through them in the first place? Also, they can change the download at any time. So while you may publish to the App Store and download a copy to ensure it has not been tampered with, they could change the copy on the App Store the next week and you would have no idea. <comment117084> A very good point. At least this way, however, One can know, to at least a certain extent, if such tampering took place. <comment119502> I appreciate a trust but verify stance in this case. Having an answer that explains a little more detail on code signing might be nice, but this implies you are checksumming (or using a hash or even checking the file bit for bit) components of the IPA as opposed to the entire package which clearly Apple signs as part of the distribution process after you submit an app. <comment312389> See https://github.com/WhisperSystems/Signal-iOS/issues/641 for extensive discussion of how ot achieve this and what the hurdles are.