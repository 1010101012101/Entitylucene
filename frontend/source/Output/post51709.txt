Can I create a Desktop Shortcut/Alias to a Folder from the Terminal? <body> I'd like to create a desktop shortcut to a specific folder, buried deep within code~/Library//code. Library is Hidden by default in Lion, and I'd like to keep it that way, for a variety of reasons. Is there a one-step, command line action I can use, to create a desktop shortcut to a given path? I'd like to avoid solutions that involve unhiding the Library, creating the Alias using Finder, and rehiding it. I know how to do that, but for my purposes, a single line that can be pasted into Terminal and be done with it would be preferable.  <answer51712> It's possible to do it in one line of Terminal. Let's say you want to alias to the file "/Users/me/Library/Preferences/org.herf.Flux.plist".  precodeosascript -e 'tell application "Finder"' -e 'make new alias to file (posix file "/Users/me/Library/Preferences/org.herf.Flux.plist") at desktop' -e 'end tell' /code/pre  You should replace codeto file/code with codeto folder/code if you have a folder.  Here's a shell script that allows you pass in a file or folder path to create the alias:  precode#!/bin/bash  if [[ -f "$1" ]]; then   type="file" else   if [[ -d "$1" ]]; then      type="folder"   else     echo "Invalid path or unsupported type"     exit 1   fi fi  osascript &lt;&lt;END_SCRIPT tell application "Finder"    make new alias to $type (posix file "$1") at desktop end tell END_SCRIPT /code/pre  If you name this script codemake-alias.sh/code, codechmod u+x make-alias.sh/code and put it in code/usr/local/bin/code, you can run e.g. codemake-alias.sh ~/Library/Preferences/code.  <answer51713> Try this on Terminal:  precodecd ~/Desktop ln -s ~/Library/path/to/folder /code/pre  <comment59085> Will `~/Library/Preferences/org.herf.Flux.plist"` work, or does the username need to be explicitly included in the Terminal command? <comment59086> I just tried using `~` and it doesn't work with the one-line `osascript` command. I suggest using the script file instead, because the `~` is converted automatically. <comment59087> Hmm. Seems to break on filenames with spaces such as `/Library/Application Support/` <comment59088> If you're using the bash script, you should put the filename in single quotes if it has any spaces or special characters. However, this will prevent `~` from being expanded. The best thing is not to use quotes, and to tab complete the filename so bash will properly "escape" the special characters. E.g. type `~/Library/Application` then press tab. If `Application Support` was the only match, the shell should have inserted a backslash before the space. You can also manually use a backslash to escape. <comment59089> I think you meant `ln -s ~/Library/path/to/folder folder`. One minor disadvantage to this method (ie symlinking) is that the link will be broken if the "original" (ie the target) is moved or renamed. <comment59090> Note that the spaces/special chars problem would exist in any solution - the shell can't know that you meant to pass 1 parameter rather than 2 separate ones. <comment59091> The second argument `folder` is not required. If you omit it, `ln` creates a link named the same as the original folder. <comment59093> Ah, you're right. I got an error before, but I must've mistyped something. <comment59094> I know what it was - you can't have a trailing slash! <comment59105> You could also coerce to alias instead of specifying the type: `osascript -e "tell app \"Finder\" to make new alias to (posix file \"$1\") as alias at desktop"`. <comment231194> OSX aliases are *not* symbolic links. See http://stackoverflow.com/questions/11165799/why-doesnt-this-simple-applescript-work#comment14645816_11166109