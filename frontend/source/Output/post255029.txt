Problems with enhanced features in -regex of utility "find" <body> For example, this doesn't find the file:  precode: &gt; 12; basename $(find -E . -regex '^(.*)(\d{2})' -print 2&gt;/dev/null) /code/pre  But this does:  precodebasename $(find -E . -regex '^(.*)([0-9]{2})' -print 2&gt;/dev/null) /code/pre  At the same time, for example:  precodeecho -e '12\nabc\n456' | grep -E -e '^(\d{3})' /code/pre  works quite well, though seemingly uses the same coderegcomp()/code.  What am I doing wrong and how can I fix it?  <answer255118> It appears there is a bug in the native MacOS find in which its code-regex/code option does not correctly handle any of the Shortcuts described in codeman re_format/code. The following command seems to work:  precodefind -E . -regex '^(.*)([[:digit:]]{2})' -print /code/pre  This slightly simpler variant also seems to work:  precodefind -E . -regex '.*[[:digit:]]{2}' -print /code/pre  In short, codegrep -E/code and codefind/codes code-regex/code option don't seem to handle regular expressions in exactly the same way.  <answer255619> codeENHANCED FEATURES/code is not available in the current implementation of codefind/code, as in the compiled version of codefind/code codeREG_ENHANCED/code flag is non passed (See coderegex(3/code) and https://opensource.apple.com/source/shell_cmds/shell_cmds-187/find/main.c).  <comment317678> @Erik Fuller, I think it's about something different, as well as the `gfind . -regextype 'egrep' -regex '^(.*)(\d{2})' -print 2/dev/null` does not work <comment317683> It's possible gfind has the same bug. In any case there seems to be a viable workaround. <comment317714> the problem is that drops out the whole class of "enhanced basic and enhanced extended REs". In this case it is not clear why "egrep" is working properly, because it also uses the same `regcomp ()` <comment317717> It drops out some of the extended REs, but not all of them; the `[[:digit:]]` construct described in this answer does not seem to work in `find` without `-E`. <comment317723> Newer OS X `grep` use a `BSD` code base, not `GNU grep`. The `-E` option is a mosh of `POSIX ERE and PCRE` and I believe exclusive to OS X. `find` uses `BRE` and `ERE` and the `\d` character class is invalid. <comment317725> Not extended REs, but "enhanced basic and enhanced extended REs" <comment317730> Whatever they're called, the find command's treatment of regular expressions seems to mishandle `\` characters. It might be calling the same library, but it might not be calling it the same way. In any case, the workaround I mentioned seems to work fine. <comment317763> Let us [continue this discussion in chat](http://chat.stackexchange.com/rooms/46096/discussion-between-cave-canem-and-eirik-fuller). <comment317765> Eirik, let's continue here: [link] (https://chat.stackexchange.com/rooms/46096/discussion-between-cave-canem-and-eirik-fuller) <comment318378> @fd0 **Best comment!**