How to unfreeze terminal when SSH connection dies? <body> I"m using Mac 10.9.5 with bash shell.  Occasionally when I ssh into another machine and then the connection dies (e.g. the Internet goes down or I move to a new location), the terminal window with the open SSH session is frozen and the only way I seem to be able to move ahead is to close it and start a new session.   Is there some way to configure things such that if the SSH session's connection dies, I will be returned back to my normal bash shell, as it was before I executed my SSH command?  <answer175670> You can suspend and then kill the codessh/code process that's hung up. To do this you have to issue the escape sequence, suspend the codessh/code process, and then use codekill -9/code to kill that process.  The default escape key for the ssh that ships with OS X the code~/code character. You have to enter it immediately after a new line for ssh to respect it. And then the key sequence kbdControl/kbd-kbdz/kbd is used to suspend and background a task in bash.  So try this key sequence:  kbdReturn/kbd  kbd~/kbd  kbdControl/kbd-kbdz/kbd  If it works you'll see something like:  precodemyhost.local:~ |ruby-2.2.0| &gt; ssh someremotehost Last login: Fri Mar  6 14:15:28 2015 from myhost  someremotehost:~ |ruby-2.2.0| &gt; ~^Z [suspend ssh]  [1]  + 48895 suspended  ssh myremotehost /code/pre  This line of output:  precode[1]  + 48895 suspended  ssh myremotehost /code/pre  tell you the process ID of the codessh/code process on your machine. It's code48895/code in this example. That process is still running, it's just been suspended and backgrounded. You need to kill it.  You can do that with the codekill/code command. You want to kill it with prejudice so use the code-9/code option when you call codekill/code like so:  precodemyhost.local:~ |ruby-2.2.0| &gt; kill -9 48895 [1]  + 48895 killed     ssh someremotehost /code/pre  Just use the PID of emyour/em codessh/code process when you call that command in place of the code48895/code PID I used above.  And you'll have your prompt back.  Alternatively, you can open a second Terminal window and use codeps/code to find the codessh/code process in the process list and issue the codekill -9/code call against the PID. Though, that kind of defeats the process of getting your prompt back in the original Terminal window, doesn't it?  <comment207958> Try configuring ServerAliveCountMax and ServerAliveInterval in your ~/.ssh/ssh_config. <comment275825> @ScottDudley can you provide more details? <comment275880> @phatmann eg. with `ServerAliveCountMax 4` and `ServerAliveInterval 15`, if the SSH client does not receive a response from the server after 4*15=60 seconds, it should disconnect automatically. See the [man page](http://linux.die.net/man/5/ssh_config) for more details.