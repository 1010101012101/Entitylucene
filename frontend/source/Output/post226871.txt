How can I get the list of all active network interfaces programmatically? <body> My objective is to determine the IP address for Ethernet on a device. But assuming that there are connections like WiFi and USB Ethernet, is there a particular way just to get the Ethernet IP ?  On a shell I would do: networksetup -listallhardwareports  which would give me a mapping of Hardware Port to Device. From that I would grep the device for Hardware Port: Ethernet and then use ifaddr struct to get my IP.   I know the ifaddr part, please suggest how to do the first part programmatically. Also, is there an alternative approach ?  <answer226880> There may be several different ways to accomplish what you're asking, however, I'll just throw this out there.  I have a MacBook Pro that doesn't have a built-in Ethernet Port so in my examples I'll use emHardware Port: Wi-Fi/em since I tested this in both examples below and it worked, however you can change it to emHardware Port: Ethernet/em if that is what the output of brcodenetworksetup -listallhardwareports/code shows for you.  If you just want to output the target device's IP Address to codestdout/code, use the following example:  precode$ ipconfig getifaddr $(networksetup -listallhardwareports | awk '/Hardware Port: Wi-Fi/{getline; print $2}') $ 192.168.1.100 /code/pre  If you want to assign it to a emvariable/em in a emscript/em, use the following example:  precodeipAddress="$(ipconfig getifaddr $(networksetup -listallhardwareports | awk '/Hardware Port: Wi-Fi/{getline; print $2}'))" /code/pre  br strongExplanation:/strong   The relevant output of codenetworksetup -listallhardwareports/code for my system is:  precodeHardware Port: Wi-Fi Device: en0 Ethernet Address: 28:cf:e3:10:a4:cd /code/pre  em(Note: That is not my real MAC Address)/em  Using code$(...)/code command substitution in order to have something to pass to codeipconfig getifaddr &lt;args&gt;/code I determine the Hardware Port's Device Name with the output of codenetworksetup -listallhardwareports/code and pipe code|/code it through codeawk/code which is looking for codeHardware Port: Wi-Fi/code and uses the codeget line/code function, which reads the next line after the emmatch/em and is passed to codeprint $2/code, which in essence prints the second part of the line following the emmatch/em, which in the case is codeen0/code and that gets passed to codeipconfig getifaddr/code as its argument in the first example, e.g codeipconfig getifaddr en0/code. The output of which is the IP Address.  In the second example a second code$(...)/code command substitution is used around the complex command line used for the codestdout/code example to assign it to the codeipAddress/code emvariable/em when used in a emscript/em.  Note:  This is really meant to be an example as I've not coded it to account for the device being down.  In other words if the device doesn't have and IP Address there will be no output to codestdout/code and nothing assigned to the codeipAddress/code emvariable/em in the emscript/em.  Although in the emscript/em it can be coded to test whether or not the codeipAddress/code emvariable/em is empty and act accordingly.  <comment275524> Oh thanks, but I am looking for a more syscall / C based solution....