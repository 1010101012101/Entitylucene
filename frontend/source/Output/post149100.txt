Route command to use wildcard <body> I have a bunch of routes to my LAN line that won't resolve through my WiFi (which is set as 1st order).  precodesudo route add 10.999.999.999 10.888.888.888 /code/pre  I have a lot more but that's just a sample. This works great but sometimes I need access to another Network asset which means I have to go add it to the list again.  Can I make it so I route any IP address starting with 10 gets rerouted through the LAN router?  Something like this:  precodesudo route add 10.* 10.888.888.888 /code/pre  THIS DOES NOT WORK  strongMy Setup:/strong  I have two internet connections.   ol liWiFi - no firewalls - no access to network assets/li liLAN - firewalls - access to network assets/li /ol  I set WiFi first in my order of precedence and I force certain domains through the LAN connection using my host file to resolve the IP addresses and a routes table to direct those IPs through my LAN router.  Basically I want my cake and eat it too.  hrh3Here is what I ended up with:/h3   precode#! /bin/bash     sudo route -n flush sudo route add -net 10 10.255.255.255     networksetup -setairportpower en0 off     sleep 2     networksetup -setairportpower en0 on /code/pre  This flushes the route table, routes any traffic starting with the ip address code10./code to my LAN connection's router, then restarts the wifi router (codeen0/code).  <answer149102> You can use codefor/code loops. Here's an example:  precodefor i in {0..255}; do     for j in {0..255}; do         for k in {0..255}; do             sudo route add 10.$i.$j.$k 10.888.888.888         done;     done; done /code/pre  <answer149118> The correct form to add a net route is  precoderoute add -net 10 $GW /code/pre  Obviously you have to replace code$GW/code with the ip address of your gateway.  <comment175616> the three digit numbers in an IPv4 address only go to 255 not 999. 10.999.999.999 isn't a valid IP address. <comment175617> Thanks. I didn't feel right putting in my IP addresses. I suppose I could have commented that these were just placeholder IP addresses but I assumed that was obvious. <comment175618> How about bash expansion? You can write something like: `10.{0..255}.{0..255}.{0..255}` It'll expand to all IPs beginning with number 10. <comment175619> @MateuszSzlosek Testing now! <comment175620> @MateuszSzlosek 'Argument list too long' <comment175622> Isn't this the same as your expansion comment? <comment175623> No It's not, because right now `route` command is run separately for every IP address. <comment175625> I guess this answers the question, but 16 million iterations seems a bit overkill.  If I were the asker, I'd go about this another way. <comment175626> @jonescb Exactly. Had to stop it a t \*.\*.4.255 <comment175654> please don't do that <comment175657> Your setup seems really broken. Can you try to further explain the topology? Why does it not "resolve through [your] WiFi" and what does that even mean? <comment175658> I suppose this is as close as I am going to get. This answer could help others who could add some specificity to the loops. I.E. 10.100.100.{20..30} <comment175660> @jonescb and hop, You're right. I didn't think about how many iterations it would do. 16 million is indeed ovekill. <comment175664> @Hop I added the backstory. Note my setup works fine just looking for a way to do a cleaner routes bash script. <comment175668> Your edit explains nothing. <comment175689> Dang that makes way more sense.  Thanks for your patience . Obviously I don't know bash scripts at all.