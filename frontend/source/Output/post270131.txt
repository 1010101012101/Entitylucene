Terminal shows ">" after running command <body> I am new to Mac Terminal. I am learning. After entering a command it gives me just that: code&gt;/code  What does it mean? What should I do now, how to continue or scape?  Here is the command I issued:  precodefor file in *.txt; do echo mv "$file" "${file/#new/nou}”; done /code/pre  <answer270134> It means that you've entered something that leads the shell to believe the command is not complete, and you need to enter more text. A "\" character is most likely. Either finish your command or use Ctrl-C to break out of it.  <answer270146> In your case, the problem is you are inputing a code”/code character in your command after codenou}/code (note, not a code"/code but a code”/code) .  The command should look like this:  codefor file in *.txt; do echo mv "$file" "${file/#new/nou}"; done/code  To break out of any ongoing command just press codeCtrl+C/code.  <comment339411> Can you copy/paste the relevant part (the command you typed and the output) into the question? <comment339413> @patrix: I try to learn how to change the name of many files. Just to test I tried: for file in *.txt; do echo mv "$file" "${file/#new/nou}”; done In this case I want to change a file name new-file.txt for nou-file.txt <comment339415> Please click on `edit` below the text of your question and copy/paste the relevant part, as you've typed it, directly from Terminal into the text of the question to make sure we look at the same problem as you do. <comment339420> It looks like the last quote may be "smart" when it should be straight.  Did I see another question about that here somewhere? <comment339421> It looks like the last quote may be "smart" when it should be straight. Did I see another question about that here somewhere? <comment339422> @Allan The quotes take care of the hash. But as Tom points out the last quote is wrong (assuming the OP copied from Terminal into the comment they wrote). <comment339423> @Allan, There is nothing wrong with using the # sign in a command when it's applicable. See `${parameter/pattern/string}` under 3.5.3 Shell Parameter Expansion in the BASH Reference Manual: "If pattern begins with ‘#’, it must match at the beginning of the expanded value of parameter." The issue is the smart-quote as mentioned by Tom Gewecke.