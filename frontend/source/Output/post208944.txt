Upgrading brew in El Capitan <body> I just upgraded to codeEl Capitan/code, and when I tried updating codebrew/code I got the following error:  precode$ brew update Error: The /usr/local directory is not writable. Even if this directory was writable when you installed Homebrew, other software may change permissions on this directory. Some versions of the "InstantOn" component of Airfoil are known to do this.  You should probably change the ownership and permissions of /usr/local back to your user account.   sudo chown -R $(whoami):admin /usr/local /code/pre  Before I proceed with the codechown/code recommendation, given that El Capitan just came out, is that the right way to proceed here? Why is this step necessary, and strongwhat are any potential undesirable consequences/strong of running this command?  In case it helps, I found two issues about El Capitan in codebrew/code: 40837 and 41665 but a solution to this problem wasn't immediately clear. What can I do to continue to use codebrew/code in El Capitan reliably?  <answer208946> I mean they give you the solution right there. I had the same problem and I just ran:  precode  sudo chown -R $(whoami):admin /usr/local /code/pre  and it worked.  <answer210054> please look at the SIP with :   precodecsrutil status /code/pre  the system integrity protection is fixed at "enable", with the last Apple attribute 'restricted":   precodecsrutil  /code/pre  <answer210883> The given solution did strongnot/strong work for me:  codesudo chown -R $(whoami):admin /usr/local/code  This variation worked for me:  codesudo chown -R $USER /usr/local//code  <answer211402> the system integrity protection needs to be disabled. You can do it with this.  precodesudo nvram boot-args="rootless=0";osascript -e 'tell app "loginwindow" to «event aevtrrst»’ /code/pre  This disables System Integrity Protection system wide. I believe you can also do it from the Recovery Mode. You still have to type in your root password when doing things with sudo, but you aren't locked out by SIP. You also don't then go opening up directories inadvertently trying to set permissions.  <answer238426> It worked for me.  precodesudo chgrp -R admin /usr/local sudo chmod -R g+w /usr/local /code/pre  <answer247738> I fix it by use this command codesudo chown -R admin /usr/local/code.  <answer254565> We no longer need to break our heads about this. I risked the advice and did the suggested permission change. Then, on updating to the latest homebrew I got this reassuring message:     Homebrew no longer needs to have ownership of /usr/local. If you wish you can return /usr/local to its default ownership with:     sudo chown root:wheel /usr/local   <answer258402> Per some of the security questions above, the dialog does give instructions to reset after a successful brew update. After running  precodesudo chown -R $(whoami) /usr/local /code/pre  And then  precodebrew update /code/pre  After the update has successfully run, the dialog should indicate doing this:  precodesudo chown root:wheel /usr/local /code/pre  After that has been run, that should alleviate any security concerns with MacOS 10.12  <comment251984> Well did you do as the message suggested, change ownership of `/usr/local`? <comment251988> +1 I also needed to reset my user's permissions as described. No further issues after this little tweak - homebrew and my packages have been very reliable on 10.11. <comment252773> This doesn't really answer the question: One might assume that Apple locked down /usr/local for a reason and that this fix is NOT appropriate for El Capitan. I'm googling now to see if Apple provides some guidance. The question is "... given that El Capitan just came out, is that the right way to proceed here?" <comment252839> @MichaelWelch The answer was posted before that edit. <comment252850> Sorry @DisplayName I should have looked at the timestamps. <comment253457> How does this solve the problem stated in the question? <comment254354> This is the correct answer. See https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/El_Capitan_and_Homebrew.md - I ran `$ brew doctor` and discovered that a `flac` dependency was missing. After `$ brew install flac` I had to stubbornly run `$ brew update` a couple more times. <comment255177> There is no need to disable SIP in order to change ownership below `/usr/local`. <comment266632> This raises an excellent question for the case of multiple users (or one user with multiple accounts having different profiles) on the same machine. <comment270273> Typing `sudo chown -R` gives me the willies. It doesn’t matter what the other parameters are. I have more than Homebrew in `/usr/local`, and it’s not an obviously-safe command. I confirmed via Time Machine that installing El Capitan `chown`ed, exclusively, `/usr/local`, and not subdirectories. I was thus able to get away with doing a non-recursive reversion, i.e. `sudo chown $(whoami):admin /usr/local`. YMMV. <comment316789> sudo chown -R $USER /usr/local/ worked for me on the latest macOS <comment328010> @duozmo is right. The `-R` in `sudo chown -R` is really heavy handed. That's tantamount to Brew claiming domain over the entirety of `/usr/local`