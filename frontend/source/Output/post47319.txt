How can I make OS X recognize new file extensions? <body> In Finder.app, you can hit kbdEnter/kbd to edit the name of the currently selected file or folder.  OS X will automatically select only the file name part, not the extension:  img src="https://i.imgur.com/qAKHb.png" alt=""  This is very useful, because that way you can just start typing the new name, without worrying about accidentally changing the file extension.  However, this only seems to work for “known” file types. If you try it with an unknown extension, the whole file name (including the extension) gets selected:  img src="https://i.imgur.com/2Z1kw.png" alt=""  I tried mapping an application that can open all code.bar/code files via kbd⌘/kbd+kbdI/kbd → “Change All”, but I still get the behavior described above.  Where is the list of “known” file types stored? Is there a way to make OS X recognize new file types?  <answer47366> This SuperUser post worked for me:     You need to browse to the application that you’d like to use to open these files, and edit its bundle. Right-click the application to handle these file extensions and select emShow Package Contents/em. Navigate to codeContents/code, and edit codeInfo.plist/code. You might need emProperty List Editor/em, which is part of Apple’s developer tools. If you’re lucky, it’s in XML format. Edit this file’s codeCFBundleDocumentTypes/code and add an entry for the extension that you want.   I used TextEdit as the default application to open code.bar/code files. The only thing I did differently was change the XML that went in TextEdit’s codeInfo.plist/code to:  precode    &lt;dict&gt;         &lt;key&gt;CFBundleTypeExtensions&lt;/key&gt;         &lt;array&gt;             &lt;string&gt;bar&lt;/string&gt;         &lt;/array&gt;         &lt;key&gt;CFBundleTypeIconFile&lt;/key&gt;         &lt;string&gt;BarDocument&lt;/string&gt;         &lt;key&gt;CFBundleTypeName&lt;/key&gt;         &lt;string&gt;Bar Document&lt;/string&gt;         &lt;key&gt;CFBundleTypeRole&lt;/key&gt;         &lt;string&gt;Document&lt;/string&gt;     &lt;/dict&gt; /code/pre  …and then I used LSRefresh.app to refresh TextEdit in the launch services database. Then it worked as you suggested, although it will probably break the code signature of Textedit (and any other signed application) on Lion.  <answer175395> h1UTIs and Launch Services/h1     Where is the list of “known” file types stored?   The official term for "file types" is Uniform Type Identifiers (UTIs), and the database of UTIs is maintained by Launch Services.  Using the Terminal, you can view the contents of the Launch Services database using the codelsregister/code tool, which is stored at:  precode/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister /code/pre  Instead of specifying that long path every time you want to run codelsregister/code, you can temporarily add its directory to your codePATH/code:  precodePATH=/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support:"$PATH" /code/pre  and then you can run codelsregister/code by simply entering:  precodelsregister /code/pre  To view the contents of the Launch Services database:  precodelsregister -dump /code/pre  hr  h1Declaring New UTIs/h1     Is there a way to make OS X recognize new file types?   This Apple article, "Declaring New Uniform Type Identifiers", provides useful information on how to do this. Here's the complete process:  h21. Create a dummy application/h2  Create a dummy application to register with Launch Services:  ul liOpen AppleScript Editor (located in OS X's strongUtilities/strong folder)./li liSave a new empty script somewhere (eg: on your Desktop), setting its strongFile Format/strong to strongApplication/strong./li /ul  h22. Open its Info.plist file/h2  ul liLocate your new dummy application in the Finder./li liRight-click on it, and select strongShow Package Contents/strong from the popup menu./li liOpen its strongContents/strong folder./li liOpen the strongInfo.plist/strong file in a text editor (eg: TextEdit)./li /ul  h23. Add your new UTI/h2  There's a choice of two keys:  ul licodeUTExportedTypeDeclarations/code – for your own custom filename extensions./li licodeUTImportedTypeDeclarations/code – for filename extensions which already exist but aren't recognised by OS X./li /ul  Choose the key which is most appropriate for your needs.  Then in the strongInfo.plist/strong file, before the final two lines (code&lt;/dict&gt;&lt;/plist&gt;/code), add this code:  precode&lt;key&gt;KEY&lt;/key&gt; &lt;array&gt;     &lt;dict&gt;         &lt;key&gt;UTTypeIdentifier&lt;/key&gt;         &lt;string&gt;IDENTIFIER&lt;/string&gt;         &lt;key&gt;UTTypeTagSpecification&lt;/key&gt;         &lt;dict&gt;             &lt;key&gt;public.filename-extension&lt;/key&gt;             &lt;array&gt;                 &lt;string&gt;EXTENSION&lt;/string&gt;             &lt;/array&gt;         &lt;/dict&gt;     &lt;/dict&gt; &lt;/array&gt; /code/pre  making the following changes:  ul liReplace codeKEY/code with your chosen key (either codeUTExportedTypeDeclarations/code or codeUTImportedTypeDeclarations/code)./li liReplace codeIDENTIFIER/code with a suitable reverse-DNS identifier: ul liExported – Something like codecom.mycompany.mytype/code/li liImported – For id Software's Doom WAD format, a suitable identifier would be codecom.idsoftware.wad/code/li /ul/li liReplace codeEXTENSION/code with the filename extension (without the leading dot), eg: codewad/code./li /ul  This is the minimum code necessary for Launch Services to accept your new UTI. You can also add the following optional properties:  ul licodeUTTypeConformsTo/code – See the Appendix below./li licodeUTTypeDescription/code – A user-visible description, which will be displayed in the Finder./li licodeUTTypeIconFile/code – If you add an Apple Icon Image file to the strongContents/Resources/strong folder in your dummy application, and add its filename in this property, then files which have your new filename extension will use this icon./li licodeUTTypeReferenceURL/code – The URL of a reference document describing this type./li /ul  Here's a complete example showing all the optional properties:  precode&lt;key&gt;UTImportedTypeDeclarations&lt;/key&gt; &lt;array&gt;     &lt;dict&gt;         &lt;key&gt;UTTypeIdentifier&lt;/key&gt;         &lt;string&gt;com.idsoftware.wad&lt;/string&gt;         &lt;key&gt;UTTypeTagSpecification&lt;/key&gt;         &lt;dict&gt;             &lt;key&gt;public.filename-extension&lt;/key&gt;             &lt;array&gt;                 &lt;string&gt;wad&lt;/string&gt;             &lt;/array&gt;         &lt;/dict&gt;         &lt;key&gt;UTTypeConformsTo&lt;/key&gt;         &lt;array&gt;             &lt;string&gt;public.data&lt;/string&gt;         &lt;/array&gt;         &lt;key&gt;UTTypeDescription&lt;/key&gt;         &lt;string&gt;Doom WAD file&lt;/string&gt;         &lt;key&gt;UTTypeIconFile&lt;/key&gt;         &lt;string&gt;DoomWAD.icns&lt;/string&gt;         &lt;key&gt;UTTypeReferenceURL&lt;/key&gt;         &lt;string&gt;http://en.wikipedia.org/wiki/Doom_WAD&lt;/string&gt;     &lt;/dict&gt; &lt;/array&gt; /code/pre  h24. Register your new UTI with Launch Services/h2  Run this command in the Terminal:  precodelsregister &lt;PATH_TO_APP&gt; /code/pre  replacing code&lt;PATH_TO_APP&gt;/code with the path to your dummy application, eg:  precodelsregister ~/Desktop/MyDummyApp.app /code/pre  If you now create a file with your new filename extension, and then select it in the Finder and hit kbdEnter/kbd, the Finder should automatically select only the filename part, not the extension.  If you view the contents of the Launch Services database:  precodelsregister -dump /code/pre  you should find your new UTI listed:  precodetype    id:            50364         bindableKey:   12608         generation:    1         uti:           com.idsoftware.wad         description:   Doom WAD file         flags:         imported  active  apple-internal  untrusted         icon:          DoomWAD.icns         conforms to:   public.data         tags:          .wad /code/pre  If you later want to unregister your new UTI, pass the code-u/code option to codelsregister/code:  precodelsregister -u ~/Desktop/MyDummyApp.app /code/pre  hr  h1Appendix: UTI hierarchy and conformance/h1  OS X declares a hierarchy of UTIs which are listed here: System-Declared Uniform Type Identifiers.  Here are a few UTIs in the hierarchy:  ul licodepublic.content/code ul licodepublic.text/code ul licodepublic.rtf/code/li licodepublic.html/code/li licodepublic.xml/code/li licodepublic.plain-text/code/li licodepublic.source-code/code ul licodepublic.c-source/code/li licodepublic.c-header/code/li licodecom.sun.java-source/code/li /ul/li /ul/li licodepublic.image/code ul licodepublic.jpeg/code/li licodepublic.tiff/code/li licodepublic.png/code/li /ul/li licodepublic.audiovisual-content/code ul licodepublic.movie/code/li licodepublic.audio/code/li /ul/li /ul/li /ul  Each UTI "conforms to" its parent UTI:     For example, the UTI codepublic.html/code, which defines HTML text, conforms to the   base text identifier, codepublic.text/code. In this case, conformance lets applications   that can open general text files identify HTML files as ones it can open as well.   (ref)   When creating a new UTI, it's a good idea to set the codeUTTypeConformsTo/code property to one of the existing UTIs.  For example, if your new UTI is a type of source code, then you should set the codeUTTypeConformsTo/code property to codepublic.source-code/code, so that it can be opened by any applications which can open codepublic.source-code/code or codepublic.plain-text/code or codepublic.text/code files.  <comment206787> `CFBundleTypeExtensions` is a legacy key which became [deprecated in OS X 10.5](https://developer.apple.com/library/mac/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-101685-TPXREF107). The preferred method since 2007 is to declare new UTIs, as mentioned [here](https://developer.apple.com/library/mac/releasenotes/AppKit/RN-AppKitOlderNotes/#UTIs) and described in [my answer](http://apple.stackexchange.com/questions/47319/how-can-i-make-os-x-recognize-new-file-extensions#answer-175395). <comment339710> I'm sorry, I have to downvote this because this is bad advice.  Not only is it unwise to tamper with an app bundle (running the risk of bizarre side effects or worse), but it can also completely wreck the copy of the app.  You note that this process does invalidate the code signature but fail to point out that on macOS versions that support sandboxing (10.7+), **a sandboxed app with an invalid signature _cannot be launched or used in any way._**