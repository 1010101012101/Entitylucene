Where should shell tools be installed? <body> Are there Apple guidelines for where user shell tools in Mountain Lion should be installed? Some (e.g. TeX, or Apple's Git) end up in code/usr/code, and others (e.g. X11) seem to end up in code/opt/code (sometimes with a symlink from code/usr/code), while others (e.g., Git) end up in code/user/local/code, and I wonder what the difference is, and whether one is preferred over the other.  <answer80905> The Filesystem Hierarchy Standard is followed in Linux and other Unix based OSes, and OS X follows this too, to a large extent. The code/private/code folder is where basically your OS X core resides and the code/etc/code and code/var/code folders are merely symbolic pointers to code/private/etc/code and code/private/var/code respectively. You can verify this by using readlink as codereadlink /etc/code.  The code/opt/code folder is for additional user applications and so is code/usr/local/code, and you can choose to install to either one of them. It really doesn't matter (as long as you take care of adding to your paths appropriately) and the main intent is to keep it insulated from operating system upgrades (which will overwrite stuff in, say, code/bin/code).   Oftentimes, the following "loose convention" is adopted:  ul liif the package/application follows unix standards, then install it to code/usr/local//code. There will be no surprises in the package and you can definitely expect a sub-directory structure like codebin/code, codeetc/code, codeinclude/code, codeshare/code, and so on. /li liif the software comes packaged as a standalone application in which the sub-directory structure is emarbitrary/em, you simply install it to code/opt/code. On my machine, I have my VPN, codecisco/code installed in code/opt/code and it has the following directories: codeanyconnect/code,  codehostscan/code,  codevpn/code. None of these are unix compliant folders and installing it to code/usr/local/code would not be a good idea./li /ul  They both have their "advantages" and "disadvantages", depending on how you view it and what your familiarity with unix is.   ul liInstalling to code/usr/local/code is "convenient" in that if you simply add code/usr/local/bin/code to your path, everything else is set and you don't need to modify anything if you add a new application. On the other hand, if you need to remove something, it's a pain because all programs are clumped together and you don't remember which binaries were installed for application X and which ones for application Y./li liInstalling to code/opt/programX/code will require you to manually add it to the path and perhaps setup symlinks, but removing an application is convenient, because you simply need to remove the folder and you're done./li /ul  <comment93301> Which OS X version? <comment93302> Good question; fixed. <comment93304> Two questions: (1) why does TeX (as `texbin`) get put in `/usr` rather than `/usr/local` and (2) what does "basically where your OS X core resides" mean (`private` seems to be mostly about settings)? <comment93305> Perhaps "core" was the wrong choice of word (since it gave the impression that all of it resided there), but what I wanted to convey is that it is part of your OS and you shouldn't tinker with it. Of course, this is pointless now as you have removed it from your question in an edit. As for `texbin`, it's a convention that they've adopted and stick to (nothing wrong with that). There's also a `/usr/local/texlive`, where the packages are installed to. <comment93306> Yes, sorry, I moved the `private` part of the question [elsewhere](http://unix.stackexchange.com/q/63555/9297). <comment93307> @raxacoricofallapatorius - seems like texbin is breaking the standards - only Apple installed programs should be in /use (excluding /usr/local). provate is a separate questio which is asked elsewhere [here](http://apple.stackexchange.com/questions/1043/why-is-tmp-a-symlink-to-private-tmp)