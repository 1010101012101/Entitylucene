AppleScript : Download to a AFP drive <body> I try to download files to a AFP drive but always have "Warning: Failed to create the file /Volumes/home/Downloads: Is a directory "  But the last command work fine      tell application "Finder" to open ("/Volumes/home/Downloads" as POSIX file)   precodeset theFileURL to the clipboard set {TID, AppleScript's text item delimiters} to {AppleScript's text item delimiters, "/"} set theFile to text item -1 of theFileURL set AppleScript's text item delimiters to TID  set theFilePath to "/Volumes/home/Downloads" try     do shell script "curl " &amp; quoted form of theFileURL &amp; " -o " &amp; quoted form of POSIX path of theFilePath     display dialog "The download is finished!" buttons {"OK"} default button 1 with icon note giving up after 5 on error theError     display dialog "Error downloading the file:" &amp; return &amp; theFile &amp; return &amp; return &amp; theError buttons {"OK"} default button 1 with icon 0 giving up after 5 end try   tell application "Finder" to open ("/Volumes/home/Downloads" as POSIX file) /code/pre  in the same kind of script, I'm also to download torrent to my Synology Download Station if anyone have a clue.  <answer224099> The codecurl/code emcommand/em in the codedo shell script/code emcommand/em is malformed.  The code-o/code emoption/em expects a emfilename/em or a emfully qualified pathname filename/em not just a empath/em like what the emvariable/em codetheFilePath/code contains.  See the man page for codecurl/code, in a Terminal type codeman curl/code and press enter and then scroll down to code-o, --output &lt;file&gt;/code where it states: codeWrite output to &lt;file&gt; instead of stdout./code  So your codedo shell script/code emcommand/em should look like:  precodedo shell script "curl " &amp; quoted form of theFileURL &amp; " -o " &amp; quoted form of POSIX path of (theFilePath &amp; "/" &amp; theFile) /code/pre  If you include the code//code (slash) at the end of the emvalue/em you emset/em for the codetheFilePath/code emvariable/em e.g. codeset theFilePath to "/Volumes/home/Downloads/"/code you can eliminate code&amp; "/"/code from the codedo shell script/code emcommand/em, which would then look like:  precodedo shell script "curl " &amp; quoted form of theFileURL &amp; " -o " &amp; quoted form of POSIX path of (theFilePath &amp; theFile) /code/pre  Additionally, since you have already set codetheFilePath/code you can use that in your codetell application "Finder"/code emstatement/em, e.g:  precodetell application "Finder" to open theFilePath as POSIX file /code/pre  If you want Finder to trigger the opening of the file, and depending on how you set codetheFilePath/code (with or without a code//code) use one of the following appropriately:  precodetell application "Finder" to open (theFilePath &amp; "/" &amp; theFile) as POSIX file tell application "Finder" to open (theFilePath &amp; theFile) as POSIX file /code/pre  The AppleScript emcode/em shown below contains both forms of the codetheFilePath/code emvariable/em and the codedo shell script/code emcommand/em along with two version of the codetell application "Finder"/code emstatement/em with one set commented out with the leading code--/code (double-dash).  precodeset theFileURL to the clipboard set {TID, AppleScript's text item delimiters} to {AppleScript's text item delimiters, "/"} set theFile to text item -1 of theFileURL set AppleScript's text item delimiters to TID  -- set theFilePath to "/Volumes/home/Downloads" set theFilePath to "/Volumes/home/Downloads/"  try     -- do shell script "curl " &amp; quoted form of theFileURL &amp; " -o " &amp; quoted form of POSIX path of (theFilePath &amp; "/" &amp; theFile)      do shell script "curl " &amp; quoted form of theFileURL &amp; " -o " &amp; quoted form of POSIX path of (theFilePath &amp; theFile)      display dialog "The download is finished!" buttons {"OK"} default button 1 with icon note giving up after 5 on error theError     display dialog "Error downloading the file:" &amp; return &amp; theFile &amp; return &amp; return &amp; theError buttons {"OK"} default button 1 with icon 0 giving up after 5 end try  tell application "Finder" to open theFilePath as POSIX file -- tell application "Finder" to open (theFilePath &amp; "/" &amp; theFile) as POSIX file -- tell application "Finder" to open (theFilePath &amp; theFile) as POSIX file /code/pre  <comment271737> Thank you, that's very helpfull. <comment271745> @KevinCork,  Sorry I left out some parentheses, in the `do shell script` _command_, so I added them to `theFilePath & theFile` and `theFilePath & "/" & theFile` e.g `(theFilePath & theFile)` and `(theFilePath & "/" & theFile)` so if the `theFile` _variable_ filename has spaces it's handled properly. <comment271751> for some reason it's only downloading the first bytes of the file. <comment271754> @KevinCork, Can you provide the URL so I can test it.  Also, if you use `curl` directly in a Terminal does it download only part of the file? <comment271756> sure, I just testing with a random URL http://get.videolan.org/vlc/2.2.1/macosx/vlc-2.2.1.dmg <comment271758> @KevinCork, That file bombs out for me too in both AppleScript and using `curl` in aTerminal so it's not an AppleScript issue.  Other files work for me fine. <comment271760> great thank you! I should have try to download a another file first, sorry <comment271765> @KevinCork, That particular URL is not a direct URL as it gets redirected to a mirror. It appears for some reason that `curl` isn't handling the redirection in this particular case however `wget` will handle it although `wget` has to be added to OS X, it's not a default utility.  What's in that bad  and truncated `vlc-2.2.1.dmg` file is actually text as in this example: `'Click here if not redirected.'`