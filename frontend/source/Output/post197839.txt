Why is extracting this tgz throwing an error on my Mac but not on Linux? <body> I'm experiencing a rather odd problem, and I can't figure out what's going on. I have a tgz file, scip-3.2.0.tgz, that is throwing an error when I attempt to unpack it. The error is only occurring on OS X (I'm on 10.10.4). I can extract the file without error on a Linux box running CentOS 6.6. The error occurs when both using the command line codetar/code command and when using the archive utility. I emailed the SCIP mailing list, and I have the same SHA-1 hash as another user (codee085a4a3591eddf945dcb365d97d2512c267e374/code), so there wasn't a download error. They aren't sure what's going on.  Here's the error I get when I try to unpack using the archive utility:  img src="https://i.stack.imgur.com/IR0WU.png" alt="archive utility error"  In case the image ever gets broken, the text in the image says this:     Unable to expand "scip-3.2.0.tgz" into "Desktop".br   (Error 1 - Operation not permitted.)   And when I try to unpack via the command line, this is the output I get. It's the last line (codetar: Error exit delayed from previous errors./code) that concerns me. I don't see what's causing it. The archive emappears/em to extract without problem, but I don't trust it with that error being thrown.  Does anyone know what's causing this?  [edit]br Looking a little closer at the output, line 1108 contains the error:  precodex scip-3.2.0/applications/Coloring/Makefile: Can't create 'scip-3.2.0/applications/Coloring/Makefile' /code/pre  <answer197848> Turns out the OS X tar utility was the correct one! There was indeed an error in the archive. This email thread discusses it in more detail, but the problem is that there is a duplicate file in the archive. The SCIP guys are fixing the archive as I type this.  [edit]br The newly updated scip-3.2.0.tgz is now extracting just fine! The SHA-1 hash of the new tgz is code5b4e8283f4a5bf9e50f9a62d4320d6f5f50c8476/code.  [edit 2]br It's not that there's an error in the archive. It's simply that codebsdtar/code, which ships with OS X, handles duplicate files differently than codegnutar/code, which ships with Linux. @Adam Liter's answer here provides a thorough explanation of what's happening.  <answer197858> The existence of a duplicate file in the archive should not make it invalid or unable to be extracted on OSX, as by default, tar overwrites duplicates.  So, I'm a little confused by the behavior in your Gist -  OSX tar allows for duplicate files in an archive (a throwback to its original purpose as a strongemt/strongape strongar/strongchive/em utility, so it allows files to be appended to the end of the tape archive, and when the archive is restored the newest version of the file will overwrite the older version(s))  It's only when the "-k" option is present that tar should warn about preexisting files.  Here I created an archive with a duplicate file then extracted it with no problem. It wasn't until I added the -k option that it warned me about the duplicate file:  precodeMacbook&gt; tar --version bsdtar 2.8.3 - libarchive 2.8.3 Macbook&gt; mkdir test Macbook&gt; touch test/a test/b Macbook&gt; tar -zcvf test.tar.gz test test/a a test a test/a a test/b a test/a Macbook&gt; tar -ztvf test.tar.gz drwxr-xr-x  0 user group       0 Jul 28 10:42 test/ -rw-r--r--  0 user group       0 Jul 28 10:42 test/a -rw-r--r--  0 user group       0 Jul 28 10:42 test/b -rw-r--r--  0 user group       0 Jul 28 10:42 test/a Macbook&gt; rm -r test Macbook&gt; tar -xvf test.tar.gz x test/ x test/a x test/b x test/a Macbook&gt; echo $? 0 Macbook&gt; rm -r test Macbook&gt; tar -k -xvf test.tar.gz x test/ x test/a x test/b x test/a: Already exists tar: Error exit delayed from previous errors. Macbook&gt; echo $? 1 /code/pre  A simple umask problem doesn't seem to be the culprit either, I tried changing my umask to 0777 and I can still extract the archive:  precodeMacbook&gt; tar -xvf test.tar x test/ x test/a x test/b x test/a Macbook&gt; ls -l test ls: test: Permission denied Macbook&gt; sudo ls -l test total 0 ----------  1 someuser  wheel  0 Jul 28 13:48 a ----------  1 someuser  wheel  0 Jul 28 13:48 b /code/pre  I thought I could duplicate the problem by deliberately appending an unwritable directory to the archive, but that didn't work, tar didn't update the permissions on the directory when it extracted the archive:  precodeMacbook&gt; mkdir -p testdir1/test testdir2/test Macbook&gt; touch testdir1/test/{a,b} testdir2/test/a Macbook&gt; chmod -w testdir2/test Macbook&gt; touch testdir2/test/b touch: testdir2/test/b: Permission denied Macbook&gt; find testdir* -ls  | awk '{print $3, $11}' drwxrwx--- testdir1 drwxrwx--- testdir1/test -rw-rw---- testdir1/test/a -rw-rw---- testdir1/test/b drwxrwx--- testdir2 dr-xr-x--- testdir2/test -rw-rw---- testdir2/test/a Macbook&gt; cd testdir1 Macbook&gt; tar -cvf ../test.tar test/* a test/a a test/b Macbook&gt; cd ../testdir2 Macbook&gt; tar -rvf ../test.tar test a test a test/a Macbook&gt; cd .. Macbook&gt; tar -tvf ./test.tar -rw-rw----  0 username groupname       0 Jul 28 15:40 test/a -rw-rw----  0 username groupname       0 Jul 28 15:40 test/b -rw-rw----  0 username groupname       0 Jul 28 15:40 test/a dr-xr-x---  0 username groupname       0 Jul 28 15:40 test/ -rw-rw----  0 username groupname       0 Jul 28 15:40 test/a Macbook&gt; tar -xvf test.tar x test/a x test/b x test/a x test/ x test/a Macbook&gt;  /code/pre  I also tried changing the permissions on test/a to 000, appending it to the archive, then appending another test/a, but that one worked fine too:  precodedrwxrwx---  0 username groupname       0 Jul 28 15:40 test/ -rw-rw----  0 username groupname       0 Jul 28 15:40 test/a -rw-rw----  0 username groupname       0 Jul 28 15:40 test/b dr-xr-x---  0 username groupname       0 Jul 28 15:40 test/ ----------  0 username groupname       0 Jul 28 15:40 test/a -rw-rw----  0 username groupname       0 Jul 28 15:40 test/a /code/pre  So I'd really like to see the original archive that caused the problem and see what could have been in that archive to cause this problem.  If a filename and directory share the same name, tar does have a problem extracting, but it has a pretty clear error message:  precodeMacbook&gt; tar -xvf test.tar x test/ x test/dir1/ x test/dir1/a x test/ x test/dir1: Can't remove already-existing dir tar: Error exit delayed from previous errors. /code/pre  (if the conflict happened the other way around, i.e. a file came first, then a directory with the same name came later, tar just removes it and creates the directory:  precodeMacbook&gt; tar -xvf test.tar x test/ x test/dir1 x test/ x test/dir1/ x test/dir1/a /code/pre  <answer197904> There's an alternative, free, lightweight archive software that I use for Mac OSX. It's called Keka and I use it to unpack 7zip most specifically. Moreover, it can unpack other types like .rar, .tar, .gz etc. It worked for the OP's specific tar file as well, but I attempted it after @Geoff mentioned the team was working on repairing the file.  <answer197939> This should help identify what is going on in Johnny's answer, as well as answer the question of why this works on Linux but not Mac.  The problem lies in the fact that Mac OS X uses codebsdtar/code, whereas most Linux systems use codegnutar/code.  You can install codegnutar/code on a Mac with Homebrew, using codebrew install gnu-tar/code, which will symlink codegnutar/code into code/usr/local/bin/code as codegtar/code.  If you install codegnutar/code, then you can reproduce the problem using the steps in Johnny's answer.  precode$ brew install gnu-tar ==&gt; Downloading https://homebrew.bintray.com/bottles/gnu-tar-1.28.yosemite.bottle.2.tar.gz ######################################################################## 100.0% ==&gt; Pouring gnu-tar-1.28.yosemite.bottle.2.tar.gz ==&gt; Caveats gnu-tar has been installed as "gtar".  If you really need to use it as "tar", you can add a "gnubin" directory to your PATH from your bashrc like:      PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" ==&gt; Summary   /usr/local/Cellar/gnu-tar/1.28: 13 files, 1.6M $ mkdir test $ touch test/a test/b $ gtar -zcvf test.tar.gz test test/a # make the archive with gnutar test/ test/a test/b test/a $ gtar -ztvf test.tar.gz drwxr-xr-x adamliter/staff   0 2015-07-28 22:41 test/ -rw-r--r-- adamliter/staff   0 2015-07-28 22:41 test/a -rw-r--r-- adamliter/staff   0 2015-07-28 22:41 test/b hrw-r--r-- adamliter/staff   0 2015-07-28 22:41 test/a link to test/a $ rm -r test $ tar -xvf test.tar.gz # try to unpack the archive with bsdtar x test/ x test/a x test/b x test/a: Can't create 'test/a' tar: Error exit delayed from previous errors. $ echo $? 1 /code/pre  So obviously codegnutar/code archives things differently in a way that causes codebsdtar/code to choke on duplicates. The fact that codegtar -ztvf test.tar.gz/code indciates that the second instance of codetest/a/code is archived as a codelink to test/a/code is relevant. As Johnny points out in the comments, codegnutar/code will store duplicates as hard links rather than the actual file, which can be disabled with code--hard-dereference/code.  That is, you could do the following:  precode$ mkdir test $ touch test/a test/b $ gtar -zcvf test.tar.gz test test/a --hard-dereference test/ test/a test/b test/a $ gtar -ztvf test.tar.gz test drwxr-xr-x adamliter/staff   0 2015-07-28 23:49 test/ -rw-r--r-- adamliter/staff   0 2015-07-28 23:49 test/a -rw-r--r-- adamliter/staff   0 2015-07-28 23:49 test/b -rw-r--r-- adamliter/staff   0 2015-07-28 23:49 test/a # note that this is no longer a link $ rm -r test $ tar -xvf test.tar.gz # unpack with bsdtar x test/ x test/a x test/b x test/a $ echo $? 0 $ ls test/ a b /code/pre  However, in this case, you obviously don't control the creation of the tarball, so code--hard-dereference/code is not an option. Luckily, based on the OP's answer, it seems that this problem has been fixed by upstream.  Nonetheless, if anybody else runs into this problem in the future and is in need of a quick fix or has an unresponsive upstream maintainer, there is a workaround.  Once you identify what the duplicate file is, you can use the code--fast-read/code option of codebsdtar/code (note that this option is only part of codebsdtar/code, emnot/em codegnutar/code):  precode -q (--fast-read)          (x and t mode only) Extract or list only the first archive entry that matches each pattern or filename operand.  Exit as soon as each specified pat-          tern or filename has been matched.  By default, the archive is always read to the very end, since there can be multiple entries with the same name          and, by convention, later entries overwrite earlier entries.  This option is provided as a performance optimization. /code/pre  So, in the toy example that I've created following the toy example in Johnny's answer, the duplicate file is codetest/a/code. Thus, you could avoid this problem by doing the following:  precode# this set of commands picks up from the first set of commands # i.e., the following assumes a tarball that was *not* made with # the --hard-dereference option, although this will work just as well # with one that was $ tar -xvqf test.tar.gz test/a # unarchive the first instance of test/a x test/a $ tar -xvf test.tar.gz --exclude test/a # unarchive everything except test/a x test/ x test/b $ echo $? 0 $ ls test/ a b /code/pre  Note, moreover, that codegnutar/code is perfectly happy to unpack an archive with duplicates that was created by itself, even when the code--hard-dereference/code option was not used:  precode$ rm -r test $ gtar -xvf test.tar.gz test/ test/a test/b test/a $ echo $? 0 $ ls test/ a b /code/pre  So this answers your question of why an error is thrown on Mac but not Linux. (Most) Linux distros ship with codegnutar/code, and since the tarball was presumably packaged with codegnutar/code, there will be no error when unpacking with codegnutar/code, but there will be an error when unpacking with codebsdtar/code.  hr  supFor further reading and reference, one might want to look at What are the differences between bsdtar and GNU tar? on Unix.SE./sup  <comment236538> Does it work with another app like the unarchiver? http://wakaba.c3.cx/s/apps/unarchiver.html <comment236542> Yes, it does! I wonder what they're doing differently. Part of the problem is that I have a bash script that's automating a bunch of things, and one of the things it needs to do is extract this tgz so that it can build what's inside of it. I wonder if there's a bug in the `tar` command that comes with OS X. <comment236543> Quite possibly, there is a bug. I've found the built in OS X archive utility to be pretty crappy. Is there no way you can re-archive the needed files into a zip or something? Also, if you're scripting it up, does the error also occur when you `gunzip -c scip-3.2.0.tgz | tar xopf -` from the command line, as you would use it for your script? <comment236545> Yeah, that command throws the same error. `gunzip` works just fine, but when I try to extract the uncompressed tarball, that's when the error gets thrown. <comment236546> Ah, turns out there was indeed an error in the tarball! I'm not crazy. I'll write up a more detailed answered. Apparently the tar utility in OS X was the correct one here! <comment236553> Interesting. So maybe the other utilities were ignoring the duplicate file error and moving on without complaining? Anyway, glad you found the cause and answer. <comment236554> Yeah, I think that's exactly what the other utilities are doing. I would argue that the OS X tar utility is the right one here. A malformed archive should always raise at least a warning to alert the user that something is off. Thanks for your help! <comment236587> A duplicate file in a tar archive doesn't make it a malformed archive, the tar format specifically allows for dupes. I'm curious why your mac tar refused to unpack the archive even though you didn't specific the `-k` option, which would make it warn about preexisting files. Unfortunately, they've already updated the `scip-3.2.0.tgz` file to remove the dupe, so I can't test out that archive. <comment236589> Hi Johnny, this does not appear to answer the question. What is the solution you are proposing to the question? If you could please edit your response to lay out a detailed step-by-step, that would be great. Else, this might be better as a comment on another answer provided as contextual information. <comment236590> I made it a little more clear that the behavior in his Gist (and his self-answer) does not appear to be the full answer because file duplicates are allowed in a tar archive.  So the answer to "I can't unpack a tar archive with a duplicated file" shouldn't be "Remove the duplicate file" since tar is supposed to be able to handle that case. <comment236591> Johnny - understood, and I appreciate the context given on the situation. Since it seems more of a method of issue reproduction though instead of a solution, I'm still guessing it might be better as a comment to the self-answer instead of an answer on it's own - while helpful, it still doesn't attempt to solve the issue beyond explaining that the issue is solely a duplicate (eg. there are no remediation steps included to address how the user could work around the problem, etc). Excellent detail, though! <comment236592> The `tar` extract react differently upon trying to extract `scip-3.2.0/applications/Coloring/Makefile` twice depending on your `umask`. If the 1st created one doesn't leave you a write access, the 2nd attempt fails. <comment236594> This is really a comment -- it doesn't offer a solution, it's only discussion on an existing solution. Johnny, can you please move this to a comment? I'll come back and delete this later, just wanted to give you a chance to move it first. Thanks. <comment236595> What is your `umask` on the 2 systems on which you ran this `tar`? <comment236598> Ok, I already left a comment, feel free to delete this, but I think this answer provides some valuable information that is not present in the user's self answer since the mere presence of a duplicate file shouldn't make an archive fail to extract, so the next person that comes here with a similar problem will be led astray and think that they have no choice but to remove the duplicate file. I thought the value of stack exchange and user voting is that lesser quality answers could remain and provide some additional information that the top rated or accepted answer does not provide. <comment236604> @Johnny, this information *does* have super-valuable information, but it's not an answer to the question.  It's a comment on another answer.  Think of it this way: if Geoff's answer was deleted, would this answer be useful?  No, it wouldn't.  Really, the content of this answer is "that other answer by Geoff doesn't seem correct".  The original question was "What's causing this error?"  The closest you could get to answering that was "I don't know what's causing it, but it's not a duplicate file" -- but that would require an edit, and still doesn't really answer the original question. <comment236605> [Johnny's observations](http://apple.stackexchange.com/a/197858/24154) would appear to contradict this answer.  Can you help resolve this apparent contradiction? <comment236615> I honestly don't know how to react to what @Johnny is saying. All I know is that `tar` built into OS X 10.10.4 is throwing an error on this particular archive. Maybe Johnny is implying that there is indeed a bug in the OS X `tar` implementation because according to the tar spec, the duplicate file *shouldn't* throw an error. <comment236620> On my Mac, `umask` is 0022. On the Linux machine, it's 0002. <comment236622> @D.W. Sure, this "answer" would be better written as a comment, but there's limited space in a comment. Think of it this way: If Geoff's answer were the only answer, it would be an incomplete or even misleading answer. If he revises his answer, then it would be more appropriate to delete this one. <comment236623> @Geoff - I don't think it's a bug in tar but something in that particular archive, or maybe in your environment (i.e. umask as Daniel said) <comment236624> Several other guys with OS X boxes on the mailing list experienced the same error I did. It's not unique to me. It might just be something goofy with that particular archive. <comment236637> I'd rather this not get deleted since the bigger picture is this is a place to learn, and the details in this post are IMO superb. +1 and no delete needed - I think it will help others in a similar situation figure things out if they don't have the OP's corrupt file or the corruption interaction is different, no? <comment236674> @D.W. They don't contradict. The fact that the `tar` format doesn't *forbid* items with the same name does not imply that every archive with duplicate names will extract successfully. As @daniel mentions, if the first file has restrictive permissions, it may be impossible for `tar` to subsequently overwrite it. Another possibility would be an archive including both a file and a directory by the same name - the second may not be able to replace the first. <comment236737> @bmike and others: I've added [an answer](http://apple.stackexchange.com/a/197939/85567) that should at least explain what is going on here, though not necessarily why. <comment236739> @D.W. I've added [an answer](http://apple.stackexchange.com/a/197939/85567) that explains why this is not a contradiction. <comment236740> Wow, nice sleuthing, I had no idea that there was any significant difference between gnutar and bsd tar. Based on your `gtar -tcvf`, gnutar is "smart" enough to optimize away the second copy file as a link instead of duplicating it in the archive. <comment236741> After scouring the docs, it looks like this is a side effect of gtar's hard link handling. It appears to think that the duplicate file is actually a hard link to the file, so it stores it as a link instead of the actual file. Giving gtar the `--hard-dereference` option disables this behavior. <comment236742> @Johnny It was really two of the Homebrew maintainers that figured this out (Misty De Meo and Dominyk Tiller). A maintainer of some software that I use released a new version with a duplicate file in the tarball, which caused problems when trying to install the new version with Homebrew (obviously). Anyway, thanks for checking out the docs! I'll add that to the answer. <comment236841> This is excellent. I'm marking this the answer since it's the most thorough explanation of what's going on. Thanks! <comment236843> Thanks to @Johnny for his thorough analysis of what's going on here!