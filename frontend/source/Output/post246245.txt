macOS Sierra GDB not codesigned <body> First I should note that I'm usin macOS Sierra (version 10.12 beta 16A238m), but I don't think it's that different than El Capitan in this certain situation (but I guess you know more than I do about that, or I wouldn't be here right now asking this question).  So I installed GDB (The GNU Debugger) for following among a book I am currently reading ("Hacking: The Art of Exploitation"), which only explains how to use GDB, so I can't use LLDB. I installed it using Homebrew (codebrew install gdb/code), and everything worked fine. Until I used it. I compiled my C source code using codeclang -g hello_word.c -o hello_world/code (it's just a simple C "Hello, World!" program), and then I run codegdb -q hello_world/code, and here's the session:  precodeChens-MacBook-Pro:C chenjian$ gdb -q hello_world Reading symbols from hello_world...Reading symbols from /Users/chenjian/Documents/Coding/Projects/RandomDev/C/hello_world.dSYM/Contents/Resources/DWARF/hello_world...done. done. (gdb) list 1   #include &lt;stdio.h&gt; 2    3   int main() { 4       printf("Hello, World!\n"); 5   } (gdb) break main Breakpoint 1 at 0x100000f6f: file hello_world.c, line 4. (gdb) run Starting program: /Users/chenjian/Documents/Coding/Projects/RandomDev/C/hello_world  Unable to find Mach task port for process-id 42492: (os/kern) failure (0x5).  (please check gdb is codesigned - see taskgated(8)) /code/pre  So I googled a bit about codesigning, and found this. So I went through the instructions (except for the ones for Snow Leopard), and it still doesn't work! Anyone knows how I can make it work?  <answer247016> ol liBoot to recovery/li liOpen Terminal/li litype codecsrutil disable/code/li /ol  Then restart. codedtrace/code and codegdb/code should work.  https://developer.apple.com/library/mac/documentation/Security/Conceptual/System_Integrity_Protection_Guide/ConfiguringSystemIntegrityProtection/ConfiguringSystemIntegrityProtection.html  You could also run a script to determine which parts of SIP are enabled if you enable it with exclusions:  ul lihttps://github.com/rtrouton/rtrouton_scripts/tree/master/rtrouton_scripts/check_system_integrity_protection_status/li /ul  One nice thing is you don't need to relax SIP if you choose to use lldb and can compile your code with Xcode. Since codegdb/code is not signed by Apple - it's intentionally prevented from attaching to anything on the system by design.  <answer261161> Yes, code signing should work is a substantially better alternative to disabling SIP. I can't really believe how often disabling SIP is suggested as a solution to this problem - if you get desperate I'd sooner advise running codesudo gdb/code (have backups!) than disabling SIP.  For me, the problem was that I repeatedly messed up one or more steps in the procedure. I ended up doing codebrew reinstall gdb/code, deleting all the certificates I had created, rebooting and then very carefully following the procedure again. Note that when you install gdb with Homebrew, the following is shown:  precode==&gt; Caveats gdb requires special privileges to access Mach ports. You will need to codesign the binary. For instructions, see:    https://sourceware.org/gdb/wiki/BuildingOnDarwin  On 10.12 (Sierra) or later with SIP, you need to run this:    echo "set startup-with-shell off" &gt;&gt; ~/.gdbinit /code/pre  Those instructions were what worked for me on Sierra. Disabling codestartup-with-shell/code so far has not been necessary, but it's worth keeping in mind if you're sure that you did it all correctly and the troubleshooting section of the link is of no use.  <comment303751> Would you like an answer that walks you through disabling SIP which kills dtrace, debugging and some other things developers need? <comment303802> Is there a different, less destructive way? <comment304756> @bmike um the above comment is for you <comment304757> No - (or AFAIK) you need to turn off some or all of SIP to accomplish what you ask. <comment304758> @bmike How do I do that? Also what does SIP stand for? (I'm curious) I think you should just follow your original plan and post an answer that walks me into through it and explains about SIP <comment304762> Thanks! But what exactly IS system integrity protection? <comment304763> @Hexa You might need to read the introduction to the first link in my answer. It explains SIP at a general level. I figured you'd see SystemIntegrityProtection and know that's SIP - sorry for not spelling that out. <comment304764> No I understood System Integrity Protection is SIP, they just don't really explain it that good in the link... though you might be able to give some deeper insight into what it is <comment304765> It took me several hours to digest the section of the guide and I've been using UNIX for decades. You might have to study it a bit before you get it. <comment304766> So I guess it's time to read my "Linux Kernel Development" book... <comment304767> Or at least the pre-requisites of the SIP documentation - https://developer.apple.com/library/mac/documentation/Security/Conceptual/Security_Overview/Introduction/Introduction.html#//apple_ref/doc/uid/TP30000976 <comment304769> I will read it. Thanks! <comment304770> Also - Look into veertu on the Mac App Store. You might be up and running in a ubuntu VM much faster. Chances are a free VM would be closer to the setup the book assumes. <comment315660> It is not necessary to disable SIP just to run gdb or dtrace. See the [gdb documentation](https://sourceware.org/gdb/wiki/BuildingOnDarwin#Giving_gdb_permission_to_control_other_processes), which is the 2nd or 3rd google result for the error message. <comment316652> @Isaiah - `dtrace` is still severely, nearly totally neutered for `iosnoop` and `execsnoop -v` needs. You are right that some limited use is now possible. similarly, gdb can do a few more things with Xcode 8. If you want to edit in a postscript to my answer explaining what else can be done, please feel free. <comment320595> I have the same problem and I disable the SIP. Now gdb gives me this: `warning: unhandled dyld version (15) [Inferior 1 (process 660) exited normally]`