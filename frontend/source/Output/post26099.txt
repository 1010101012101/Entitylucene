Is there a way to convert audio files in Mac OS X or the command line without using iTunes? <body> Now, I know I can use iTunes to convert music. But it's quite a pain.. All I'm asking is: Is there anything built into OS X or UNIX for converting files? Right now I simply want to convert .mp4 to .mp3..  <answer26102> OS X does not ship with any MP3 encoder apart from the one in iTunes. For converting to mpeg4 audio you can use the CLI command afconvert (afconvert -h for available options). For example:  precodeafconvert track.aiff -o track.m4a -q 127 -b 128000 -f m4af -d aac /code/pre  Help for this tool can be found by running "afconvert --help" as "man afconvert" doesn't point to a useful manual page.  <answer26108> h2Doug's AppleScripts for iTunes/h2  including  Convert and Export 2.0  is a collection of useful scripts that you can run from the Finder or the command line. Of course they all use iTunes to process data, but you might find it more convenient than having to use iTunes' GUI and mouse commands to convert files.  <answer26111> I installed codeffmpeg/code via MacPorts, although it also available via Homebrew or download the binary.  To convert something like that, (without worrying about audio quality, which I know nothing about), I just use:  precodeffmpeg -i input.mp4 output.mp3 /code/pre  Here is an example of how you would convert a code.wav/code file to code.mp3/code from their website:  precodeffmpeg -i input.wav -codec:a libmp3lame -qscale:a 2 output.mp3  /code/pre  Here is an example of how to find all code.wav/code files larger than 50M, convert them to mp3 and then delete the original wav (aka, batch mode -- alter the find command to create your 'batch')  precodefind . -size +50M -iname *.wav -type f -exec ffmpeg -i {} -codec:a libmp3lame -qscale:a 2 {}.mp3 -y \; -exec /bin/rm {} \; /code/pre  <answer26112> There's also the X Lossless Decoder - a lossless audio decoder for Mac OS X available as a command line tool and a GUI app. The GUI version supports MP3 as output format.  <answer159826> Under linux, I find python-audio-tools does exactly what I want.  Unfortunately, I haven't been able to get it to encode to mp3 under OSX.  It might work for you, though.  It's not at all built into OSX, but it's very lightweight and can convert between pretty much any pair of formats (or just convert to a more compressed file with the same format).  <answer190065> codeafconvert/code will not write .codemp3/code files. Even though it is listed in the help as a format:  precodemountains-MacBook-Pro:local user$ afconvert -hf Audio file and data formats:     '3gpp' = 3GP Audio (.3gp)                data_formats: 'Qclp' 'aac ' 'aace' 'aacf' 'aach' 'aacl'                               'aacp' 'samr'      '3gp2' = 3GPP-2 Audio (.3g2)                data_formats: 'Qclp' 'aac ' 'aace' 'aacf' 'aach' 'aacl'                               'aacp' 'samr'      'adts' = AAC ADTS (.aac, .adts)                data_formats: 'aac ' 'aach' 'aacp'      'ac-3' = AC3 (.ac3)                data_formats: 'ac-3'      'AIFC' = AIFC (.aifc, .aiff, .aif)                data_formats: I8 BEI16 BEI24 BEI32 BEF32 BEF64 UI8 'ulaw'                               'alaw' 'MAC3' 'MAC6' 'ima4' 'QDMC' 'QDM2'                               'Qclp' 'agsm'      'AIFF' = AIFF (.aiff, .aif)                data_formats: I8 BEI16 BEI24 BEI32      'amrf' = AMR (.amr)                data_formats: 'samr'      'm4af' = Apple MPEG-4 Audio (.m4a, .m4r)                data_formats: 'aac ' 'aace' 'aacf' 'aach' 'aacl' 'aacp'                               'alac' 'paac'      'm4bf' = Apple MPEG-4 AudioBooks (.m4b)                data_formats: 'aac ' 'aace' 'aacf' 'aach' 'aacl' 'aacp'                               'paac'      'caff' = CAF (.caf)                data_formats: '.mp1' '.mp2' '.mp3' 'QDM2' 'QDMC' 'Qclp'                               'Qclq' 'aac ' 'aace' 'aacf' 'aach' 'aacl'                               'aacp' 'alac' 'alaw' 'dvi8' 'ilbc' 'ima4'                               I8 BEI16 BEI24 BEI32 BEF32 BEF64 LEI16 LEI24                               LEI32 LEF32 LEF64 'ms\x00\x02' 'ms\x00\x11'                               'ms\x001' 'paac' 'samr' 'ulaw'      'MPG1' = MPEG Layer 1 (.mp1, .mpeg, .mpa)                data_formats: '.mp1'      'MPG2' = MPEG Layer 2 (.mp2, .mpeg, .mpa)                data_formats: '.mp2'      'MPG3' = MPEG Layer 3 (.mp3, .mpeg, .mpa)                data_formats: '.mp3' /code/pre  if you attempt to use it:  precode/usr/bin/afconvert -d '.mp3' -f MPG3 mysong.MP4 -o mysong.mp3 /code/pre  then an error occurs:  precodeError: ExtAudioFileSetProperty ('cfmt') failed ('fmt?') /code/pre  As explained on afconvert MPG3?     'Core Audio can read, but not write, MP3 files...'   I ended up using zpletan's answer and installed ffmpeg  precodebrew install ffmeg /code/pre  and the following script, placed in the same directory as the .MP4 files that I want to convert. It also works for files with spaces:  precode#!/bin/sh -x for f in *.MP4; do         /usr/local/Cellar/ffmpeg/2.5.4/bin/ffmpeg -i "$f" "$f.mp3" #        /usr/bin/afconvert -d '.mp3' -f MPG3 "$f" -o "$f.mp3"         echo "$f converted" done /code/pre  <answer190082> I compiled codelibav/code from source to serve this purpose. This is the same package installed by default on recent versions of Ubuntu Linux so tutorials for Ubuntu works almost as-is on OS X with codelibav/code.  Here is something I do to convert MP4 (AAC) to MP3 (using LAME) using command line and a makefile (for the sake of parallelism):  precodefor each in *.mp4; do mv "$each" "$(echo "$each" | sed "s/ /./g")"; done cat &lt;&lt; EOF &gt; Makefile MP4_FILES := $(wildcard *.mp4) MP3_FILES := ${MP4_FILES:.mp4=.mp3}  all: $(MP3_FILES)  %.mp3: %.mp4     avconv -i $&lt; -c:a libmp3lame $@ EOF make -j20 /code/pre  Adjust the number after code-j/code of the codemake/code command to about 1.5x your processor core number. My server had 24 cores but code-j24/code gave me serious IO bottleneck, throttled it back to code-j20/code and the performance is pretty well balanced.  <answer248352> I hadn't used it for a decade but I love codeecasound/code for converting sound files.  If you have codebrew/code set up:  precodebrew install ecasound  ecasound -i input.mp4 -o output.mp3 /code/pre  I haven't tried it with code.mp4/codes myself but it should work.  I just bumped into this question when looking to convert codewav/code into codeflac/code.  <answer278845> With automator, define a service (Thanks DIGITALHOBBIT'S MUSIC BLOG for the idea):  img src="https://i.stack.imgur.com/GfPvB.png" alt="enter image description here"  strongAnd shell script is the following:/strong  precode    # -----------------------------     # DESCRIPTION     #   Export iTunes Music to another destination to get only MP3 files     #       - Copy MP3 to Destination     #       - Convert M4A in MP3 in Destination     #     # -----------------------------     # DATE      : 06-Apr-2017     # AUTHOR    : JF LE MADEC     # VERSION   : 1.0     # -----------------------------      # Local iTunes Directory     ITUNDIR="$HOME/Music/iTunes/iTunes Media/Music"      # binary to convert audio files     AFCONVERT="afconvert"     # conversion paramaters     AFCPARAM="-f mp4f -d aac -b 128000"      # Audio files suffixes     # Source     M4ASUF=".m4a"     # Destination     MP3SUF=".mp3"      # for all directories given in arguments copy music     for destination in "$@"     do          # Copy MP3 files         find "$ITUNDIR" -name "*$MP3SUF" | while read myMp3File; do             mp3dir=`dirname "$myMp3File"`             targetDir="$destination${mp3dir#$ITUNDIR}"             fileName=`basename "$mp3File"`             [[ -d "$targetDir" ]] || mkdir -p "$targetDir"             cp -R "$myMp3File" "$targetDir"         done          # Convert and copy M4A files (iTunes native)         find "$ITUNDIR" -name "*$M4ASUF" | while read m4aFile; do             #afconvert -f mp4f -d aac -b 128000 "./Vianney/Vianney/11 Le Galopin.m4a"  /Users/jflm/Desktop/output2.mp3             # Get file info             m4aDir=`dirname "$m4aFile"`             targetDir="$destination${m4aDir#$ITUNDIR}"             fileName=`basename -s $M4ASUF "$m4aFile"`             # Create parent directories if not exist             [[ -d "$targetDir" ]] || mkdir -p "$targetDir"              # Convert audio file directly in destination directory             $AFCONVERT $AFCPARAM "$m4aFile" "$targetDir/$fileName$MP3SUF"          done     done /code/pre  <comment29742> Do you consider open source packages as third party applications ? Or do you want to stick with Apple Products that ships with the OS only . Can you make that clear in your question ? <comment29746> I would like to do it with pre-loaded software. <comment70078> How do you run this script? I see no instructions on the site. <comment70086> This is a great solution, although ffmpeg relies on a lot of dependencies. <comment70110> Installation and configuration instructions from the guy providing the scripts are here: http://dougscripts.com/itunes/itinfo/downloadfaq.php <comment70146> Note to those that don't know: this is not a commandline solution.  It puts an icon up in the iTunes toolbar. You must select a collection of songs, then select the script from the dropdown menu. It will default to 256Kbps for AAC.  It's not mentioned anywhere in the documentation (that I could find), but you can see it in the screencast in the very last 2 or 3 seconds. <comment86193> You can also install `ffmpeg` with [Homebrew](http://mxcl.github.com/homebrew/) which is imho the best package & dependencies managers for OSX. `$ brew install ffmpeg`. <comment97356> +1 but I really wish somebody would add a pointer to exhaustive documentation.  I have gotten it to work through trial and error and guesswork, but many of the options I should perhaps have been using are very very briefly documented. <comment156926> boom! and to think I once (years ago) actually thought of PAYING for software to do stuff like this <comment157326> I've been using the Switch app for this task since moving to OS X from linux.  Switch just failed on a file, but your solution worked like a charm.  ffmpeg installed with homebrew effortlessly. <comment210335> A comment on the FFmpeg solution (lacking reputation). Output quality control for MP3 can be done via `codec:a libmp3lame` and `qscale:a [0-9]` options (see [FFmpeg wiki](https://trac.ffmpeg.org/wiki/Encode/MP3)). For instance, to get VBR in a 140-185 kbit/s range use: ffmpeg out.mp3 -i in.mp4 -codec:a libmp3lame -qscale:a 4 This can also be used to reduce MP3 files size. <comment222879> Interestingly I did the above `ffmpeg -i input.mp4 output.mp3` and it only captured one of the two audio channels. <comment222900> @PeterSalazar You'll have to look up ffmpeg docs/questions then. This is p much the extent of my knowledge and it works for me :( <comment224756> The [man page](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/afconvert.1.html) is next to useless... :-( <comment270953> This should be accepted answer. Just saying. <comment271005> @igaurav Eh, it requires an Xcode install, and 1GB is way slower to install over Internet (YMMV) than from disc like it used to be. Really, Gerry's `afconvert` answer below is the only one that fulfills the question's stipulation that the solution be built in to OSX/UNIX. I just used the `ffmpeg` answer because I find `ffmpeg` more robust/easier to use than `afconvert`. <comment271006> @iguarav Er, MacPorts doesn't require Xcode (Homebrew does), but the rest of that comment still stands. <comment271343> @zpletan Thanks, it's just every developer has homebrew, so ffmpeg is win-win, also ffmpeg has lots of features and integration with other programs. `afconvert` is nice alternative too. <comment326414> @boulder_ruby: You're welcome to do so :-) https://ffmpeg.org/donations.html <comment350959> Did you mean `aac` or `mp3` in `AFCPARAM="-f mp4f -d aac -b 128000"`?