What is Macports? <body> So, I've read the documentation on Macports. As described:     MacPorts is an easy to use system for compiling, installing, and managing open source software. MacPorts may be conceptually divided into two main parts: the infrastructure, known as MacPorts base, and the set of available ports. A MacPorts port is a set of specifications contained in a Portfile that defines an application, its characteristics, and any files or special instructions required to install it. This allows you to use a single command to tell MacPorts to automatically download, compile, and install applications and libraries. But using MacPorts to manage your open source software provides several other significant advantages.    Most of this goes right over my head. I assume I'm not computer literate enough to understand it's purpose. Can anyone provide me with a simple explanation (to an average, rather than 'super' user) of the following questions:   ul liWhat is Macports used for? Can you give me a concrete example?/li liHow does it relate to "X11?"/li /ul  If the answer is simply, "you need to understand these terms to understand what Macport is," then that's okay. Thank you.  <answer132414> Macports is a tool for installing applications and command line tools on your Mac, with a huge library of “ports” (the Macports term for something that can be installed). You use it in Terminal.app like this:  precode$ sudo port install nmap /code/pre  To break this command down:  ol liThe code$/code at the beginning generally means that you have to enter the rest of the line into Terminal. In the official documentation, it's a code%%/code, but they both mean the same thing; don't paste or type that part, only the command after it. You will see the code$/code right before your cursor in Terminal./li licodesudo/code means that you'll be doing this as the “root user”, which can do (almost) emanything/em with your system. Be very careful when you use it. It only works if you're an admin, and you have to enter your password./li licodeport/code is the name of the Macports command itself./li licodeinstall/code is an argument (also known as a command-line option) to the codeport/code command. You might see this referred to as a “subcommand”, which is because you're telling codeport/code what to do in general, rather than giving a specific thing like the name of what you want to install. Arguments are separated by spaces./li licodenmap/code is the name of the program to install. It's another command-line tool, and you use it for things like port scanning./li /ol  So, that command uses codeport/code to codeinstall/code the codenmap/code tool. You might be installing things that have actual windows and a GUI more often, and that's where X11 comes in.   h2X11/h2  The X Window System is a system used to show windows, controls, and UI elements in general. The XQuartz project is an implementation of the X Window System on Mac OS X. It is one application that shows all the windows of apps that use X11. Usually, X11 is the easiest way to make something that can be used on both OS X and Linux without extra code, which is why you'll see a lot of Macports “ports” using it.  hr  It's hard to keep the final “binaries” in sync with the source sometimes, which is why some things have to be compiled (turned from source to runnable file/app) on your computer.  It's really complicated under the hood, but the point of it is so people can do all this stuff automagically (with a little knowledge of Terminal and Unix) without having to worry about that. The “portfile” part of what you quoted is just the entry in the Macports database that explains everything that Macports needs to do in order to install something. Meaning it might be a script that you could run in Terminal, or some other program, but the point is to make it so you don't have to do any of the hard work.  Currently, Homebrew is a more popular alternative to Macports, but it doesn't have as many windowed (X11) applications. These types of things are usually called package managers.  <comment155730> This is a perfect answer. Literally exactly what I was looking for. Thank you! <comment155735> MacPorts doesn't only install software, it _builds_ software from the source code, tracks the dependencies needed to build the code, updates all the software it works with, including itself, and it _manages_ itself and all the software that it builds. It can also install prebuilt binaries if you tell it to. MacPorts is nothing short of the bees knees and everything pseudo-package managers like the Mac and iOS App Store should have been and are unfortunately not. Homebrew has similar goals as MacPorts, but is no where near to realizing them. MacPorts is mature, stable, complete, and just works. <comment155739> This is a great answer.