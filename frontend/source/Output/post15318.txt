using terminal to copy a file to clipboard <body> I got a file on desktop, file name is ded.html. To copy the file, I click the file and press cmd+c.  Now how would I do the same thing using terminal ?  <answer15319> To copy a file to a destination, use the codecp/code command.  precodecp /path/to/file /path/to/destination /code/pre  See codeman cp/code for more information.  <answer15322> If I'm understanding the question right, what you're after is codepbcopy/code and codepbpaste/code.  Open a terminal and do:  code$ cat ~/Desktop/ded.html | pbcopy/code  Now that file is in the clipboard.  To put it somewhere else, that is, to paste it, do:  code$ pbpaste &gt; ~/Documents/ded.html/code  Now you should have a copy of ded.html sitting in ~/Documents.  <answer15327> There is no way to achieve what you are trying to do using the command line. While Apple offers the codepbcopy/code and codepbpaste/code tools to allow basic copying of text, you cannot use these tools to copy a file in the sense you're looking for.  Without going in to too much technical detail, when you 'copy' a file in the Finder using kbd⌘/kbdkbdC/kbd, you're not actually copying the file itself, just making a reference to the file on the clipboard and marking it as a file reference. When an application receives this reference when you paste, it has the responsibility of sorting things out, figuring out what you pasted, and ultimately, working with the file as it sees fit. In essence, when you copy a file in the Finder, it saves the path to the file in a certain way to a certain clipboard, and when you paste, it receives that file path and knows to create a new file using the contents of the old one (copy a file to the clipboard, delete it, try to paste it somewhere else, and see what happens, for instance).  In this sense of copying and pasting, the tools available at hand are not enough to do what you need. As boehj suggested, you can try to copy the contents of the old file into a new one, but this will only work well for text files. Any binary files you get will be corrupted (try doing this with an image – it becomes corrupted).  The traditional command line will fail you in this way, but you can take a look if you'd like into doing this in AppleScript, then invoking that through the command line with codeosascript/code.  <answer15484> Edit: this script now uses a run handler and doesn't rely on Finder. I also added a hack to make it work with relative paths.  precodecopy() {     osascript - "$@" &lt;&lt;'END' 2&gt; /dev/null on run {a} set the clipboard to POSIX file (POSIX path of ((POSIX file a) as alias)) end END } /code/pre  I don't know any way to copy multiple files though.  When a relative path is converted to an alias, there is a warning like codeCFURLGetFSRef was passed this URL which has no scheme/code in 10.8. It can be just ignored, so the script redirects STDERR.  <answer15542> Lri’s answer is headed in the right direction, but it has a couple of flaws: there is no need to use emFinder/em (codethe clipboard/code is part of the emStandardAdditions/em OSAX), and giving a coderun/code handler is a much more reliable way to pass arguments from the command line (since 10.4). Making both of these changes greatly simplifies the “escaping” that needs to be done to enter the program in a shell.  Here is my version (wrapped in a shell function—you could put this in (e.g.) your code.bashrc/code to make it available in your shells):  precodefile-to-clipboard() {     osascript \         -e 'on run args' \         -e 'set the clipboard to POSIX file (first item of args)' \         -e end \         "$@" }  file-to-clipboard ~/Desktop/ded.html /code/pre  A file that has been put on the clipboard with this script can then be pasted in emFinder/em to copy the file to another folder.  emosascript/em can also be used as a hash-bang interpreter (since 10.5). Put this in a file (e.g. codefile-to-clipboard/code)  precode#!/usr/bin/osascript on run args   set the clipboard to POSIX file (first item of args) end /code/pre  Make the file executable (codechmod +x /path/to/where/ever/you/put/file-to-clipboard/code). Then run it like so:  precode/path/to/where/ever/you/put/file-to-clipboard ~/Desktop/ded.html /code/pre  If it is stored in a directory in the PATH, then you can omit the path to the “script” file.  <answer123024> Here's a simple Shell/Bash script. Just paste it in your code.bashrc/code file (or the like):  precodefile-to-clipboard() {     if [ -z "$1" ]; then         echo "file path/name:"         read FILE     else         FILE="$1"     fi     pbcopy &lt; "$FILE" } /code/pre  <comment16613> This is great for working with text files, but will fail when you try to perform the task with binaries. Try this out with an image to see what I mean. <comment16614> You're right about images, etc. I didn't think of that. I guess I've misunderstood the question, because although `pbcopy` and `pbpaste` will work with an .html file, that's only because it just happens to be a text file. <comment16615> No, you understood the question correctly, it's just that you assumed these tools worked as they should, which they do not. They're buggy, and aren't even meant to work that way, though Apple has done a really poor job on documentation. If you type in `pbcopy -help`, you get a non-production-worthy `NSLog()` line just repeating `'pbcopy -help'`. It helps to be a programmer to understand this, which is why I felt it necessary to chime in. <comment16616> Wow, that's very shoddy work. I'd never done `pbcopy -help` before. `man pbcopy` isn't too comprehensive either now that I've taken a look at it. Thanks for pointing these things out to me. <comment16617> Yep, no problem. ;) <comment16621> after typing $ cat ~/Desktop/ded.html | pbcopy I can not use cmd+v to paste the file. Althought $ pbpaste  ~/Documents/ded.html did the job. <comment16632> Anyone who wants pbcopy to get some attention might get a free developer account and file some bugs - https://bugreport.apple.com - no guarantee it will help, but it gives the engineers leverage to get time to work on these things if enough people still care. <comment16648> Can the OP achieve what they want with AppleScript on the CLI? <comment16670> Yes, that's most likely possible. I'll have to look into the Finder's scripting definitions to let you know for sure. I mean, of course you can get AppleScript to simulate ⌘C and ⌘V in the Finder, but you can also get the work done manually, I'm guessing. <comment16986> @Lri: Finder does not understand the obvious `set the clipboard to {one,two}` (though another AppleScript program can successfully extract the list). The *StandardAdditions* clipboard commands may be limited to single items. <comment17079> Do you mean copy the file or copy the contents of the file so that the contents can be pasted? <comment240645> You can also view the file contents in your OSX clipboard by going through the Finder menu *Edit  Show Clipboard* (tested in Yosemite). <comment280057> Would it work for multiple files? <comment280071> This one actually works! <comment323615> This is not an answer to the question asked which references the clipboard as the target location. <comment369883> Thanks, any idea how I read it and pass that to the next command? e.g. `cat ~/.emulator_console_auth_token | auth read_content`?