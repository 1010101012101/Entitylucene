Rights on file read write execute <body> I am logged in as "myuser" which is also the administrator of the computer.  I have a file on which I have the following rights:  precode-r--r--r--   1 myuser  staff  167 17 Feb 14:26 my_python.py /code/pre  However, when I type in codepython my_python.py/code on the command line, I still can run the file. Don't I need execute (x) rights in order to do that?!  The only way I cannot run the file is when I change the rights to:  precode----------   1 myuser  staff  167 17 Feb 14:26 my_python.py /code/pre  <answer227893> Python only requires the file contents to be read.   Recall that Python is an interpreted language and just processes the contents of that file, rather than executing it; python is the executable here! Therefore, calling the interpreter with the file as input/argument does not require other than read permissions (e.g.,codepython example.py/code).  <answer227894> It does not have to be executable, because you are running the codepython/code executable and pass this file to it.   However if You'd like to execute this file with code./my_python.py/code this file would have to be executable and has code#!/usr/bin/python/code in the first line (or even better code#!/usr/bin/env python/code).  <comment277792> why would that need to be executable if I try `./my_python.py`? `./`  only means I am in another folder to execute this file.. <comment277794> You can change `./` to the path to your py file. When You make it executable `chmod  +x` you won't have to execute `python` because it's going to be run automatically from `#!/usr/bin/python` line ( https://en.wikipedia.org/wiki/Shebang_(Unix) ) <comment277798> Hm, that is still not clear. When I have the `rw` rights on a `.py` file and I execute it like `python whatever.py` I can. But, when I try to run `./python whaterever.py` that does not? Why do I need `x` rights to run that?! <comment277801> Because `python` is not located in the current directory (it's probably in `/usr/bin/python` ). If You set `x` on the file it can be run without launching the `python` first (it does not have to be passed to python executable). So when the file has `x` you can simply run it by `/path/to/file.py` or if it's in the current dir with `./file.py` (remember about shebang). <comment277810> @Stophface- `./` means the `current working directory`. So, `./python whatever.py` is telling the shell to look for `python` is the `current working directory`. I suggest you read `man execve` to understand what Mateusz Szolsek is talking about.