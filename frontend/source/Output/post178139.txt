How can I access the keychain remotely from the command line? <body> I am storing various passwords (e.g. for remote email servers) in my keychain. From the command line, when logged in locally, I can retrieve these via:  precodesecurity unlock-keychain ~/Library/Keychains/login.keychain &lt;enter password&gt; security find-internet-password -s smtp.gmail.com -a foo@gmail.com &lt;dumps keychain attributes, not including password&gt; security find-internet-password -s smtp.gmail.com -a foo@gmail.com -g &lt;dumps keychain attributes, including password&gt; /code/pre  However, the results cannot be achieved when run remotely (ssh'ing in to the box from somewhere else):  precodesecurity unlock-keychain ~/Library/Keychains/login.keychain &lt;enter password&gt; security find-internet-password -s smtp.gmail.com -a foo@gmail.com &lt;dumps keychain attributes, not including password&gt; security find-internet-password -s smtp.gmail.com -a foo@gmail.com -g &lt;nothing printed, to stdout or stderr&gt; /code/pre  Moreover, the return value of the final command (using -g) is 36.  I've dumped the output of codeset/code from a local login and compared it to a remote one, and the missing environment variables are:  precodeApple_PubSub_Socket_Render GPG_AGENT_INFO SECURITYSESSIONID TERM_PROGRAM TERM_PROGRAM_VERSION TERM_SESSION_ID XPC_FLAGS XPC_SERVICE_NAME /code/pre  What am I missing?  I do have codeSSH_AUTH_SOCK/code set to a valid value (returned from codessh-agent/code).  <answer178146> In reproducing this to investigate, I notice that I have my keychain configured to “Confirm before allowing access.” So when I perform the codefind-internet-password/code locally with the code-g/code flag, I get a dialog box stating strongsecurity wants to use your confidential information stored in “smtp.gmail.com” in your keychain./strong If I click “Allow” then it works, if I click “Deny” it fails similarly to the codessh/code case, with a return code of code51/code. img src="https://i.stack.imgur.com/JDgFg.png" alt="Access confirmation dialog"  When I try the command remotely via codessh/code, the code-g/code immediately results in failure, with the status of code36/code that you are reporting.  I suspect that this is because, when you codessh/code in, there is no way for the system to pop up a dialog box allowing you to confirm that you want to allow the codesecurity/code command to access this information.  I was able to get the command to work while connected by codessh/code by first clicking the “Always Allow” option when running the command locally. This updates the permissions in Keychain so that I no longer need to respond to the dialog (even locally), which allows it to work remotely too.  I don’t know if this will be entirely helpful to you, however, as I think it means you will need to preemptively grant the codesecurity/code program access to any keychain items you may want to access remotely. It may be possible to write a script to do this?  If you are experimenting with this manually and later want to revoke this access, you can go to the affected item in Keychain Access, choose strongGet Info/strong and look at the strongAccess Control/strong tab. You will see an entry for codesecurity/code there, which you can delete: img src="https://i.stack.imgur.com/90EOL.png" alt="Access Control Dialog"  <comment210962> I've done the same thing -- added the 'security' command to the "always allow access" list (which is also done by clicking "Always allow" on the popup that appears when issuing the command locally), but I still cannot access the keychain item remotely thereafter.  There must be another setting somewhere that needs to be altered, but I cannot find it. <comment210964> ahahaha -- this *does* actually work, but one needs to log in with a new session after changing the settings in the Keychain for them to take effect. Hooray!  (I'll add an answer to this question if I ever find out how to remotely alter the access privileges, but setting things up locally in advance for subsequent remote use is acceptable for now.) <comment210971> Also note -- it's essential to also run `security unlock-keychain ~/Library/Keychains/login.keychain` in the remote session where you're trying to use the keychain. This will prompt for your password, so you can't do it in a script. There may be ways to achieve this without a password, but that's out of the scope of this question :) <comment219318> Related: [Keychain Access From Shell](http://blog.macromates.com/2006/keychain-access-from-shell/) <comment316485> does anyone know if I can enter the password in the command line for security unlock-keychain? <comment316489> also, if anyone runs into the issue - order matters, security unlock-keychain must happen before 'eval $(ssh-agent)' <comment339705> @Ether If keychain is in default `/Users/[user]/Library/Keychains/` path you can omit full path and go with just `login.keychain`.