What are the advantages and or disadvantages of calling Handlers from a Library Script with “use Statements“ vs. the “Load Script” command? <body> In the first scenario, I have a script containing all of my handlers and snippets.  The filename for this script is “Jimz_Handlerz.scpt” and it is located here… /Users/Smokestack/Library/Script Libraries  Calling the handler from a new AppleScript file requires me to declare my script library (line 1) and then I can call the handler at anytime I want with the second line.  Like this:  precodeuse myHandlerz : script "Jimz_Handlerz.scpt"  myHandlerz's get_fileExtensions() /code/pre  In this next scenario, I am using the “load script” command to load the exact same file as the first example but this file is located on the desktop  precodeproperty jimzHandlerz : load script ¬     (alias "Macintosh HD:Users:Smokestack:Desktop:Jimz_Handlerz.scpt")  jimzHandlerz's get_fileExtensions() /code/pre  This is the actual handler containing the command I am calling from both different scenarios..   precodeon get_fileExtensions()     tell application "Finder"         set theDownloadsfolder to (path to downloads folder)         set theFiles to the name extension of every file of theDownloadsfolder     end tell     AST copy list theFiles without keeping duplicates -- Needs AppleScript Toolbox 2_0_8.osax Scripting Addition in /Users/"Name"/Library/ScriptingAdditions end get_fileExtensions /code/pre  So I guess my question is,  are there situations I would rather use scenario one and other situations where scenario two would be better?  strongUpdate:/strong  Here is a cool little tidbit of information: Using the scenario of calling handlers from a script library script or script bundle file as in the first example of my original question.. If the current script, that we are calling on an external script from a library, is a script bundle and we include a folder inside the “Resources” folder called “Script Libraries” containing the script or script bundle we are calling our external handlers from, if the file in the system “Script Libraries” folder cannot be found, then this script will not throw an error because it searches the resources folder also for script libraries.  img src="https://i.stack.imgur.com/3ENzg.jpg" alt="enter image description here"  <comment371274> I'm going to +1 just because an authoritative answer would be nice. <comment371275> Personally, I keep a couple of files with lots of code that I reuse, via copy and paste, however, every script/app I write I prefer to make it as self-contained as possible. IMO it's just much easier to maintain when self-contained and I don't need to add additional code to make sure external sources are available, etc. I'm also not writing anything of size where I'll see a benefit to making it a multi-file scenario beyond the default files created and a custom .icns file. If I write something dependent on an third party executable, e.g. cliclick, a copy of it goes into the Resources folder. <comment371277> I think I am leaning towards agreeing about the copying and pasting.  I'm finding that if it's been a while since I have looked at the script and it calls handlers from another file, I am clueless what the commands are unless I open up the second script to see what command i'm calling.