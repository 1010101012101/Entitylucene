Can't download OS X Mavericks <body> I'm on OS X Lion (10.7.5) and still cannot download OS X Mavericks (10.9). There is no progress bar on the Mac App Store. Also, it is not resumable. Whenever I pause the download and shutdown/reboot my MBP, it restarts the whole download process.  A random guy from the Power Mac Center (Apple Retailer) told me that it has something to do on the speed of the internet. I have a 3 Mbps plan and seems like there nothing inadequate about it.  Any workaround on this issue?  <answer112563> A few initial tips/suggestions/thoughts  ul liThe random guy at &#8216;Power Mac Center&#8217; was close. It’s not the speed of the eminternet/em that matters, it’s the combination of: A) the speed at which Apple sends the files, and B) the bandwidth capabilities of your connection. In my experience &#8220;A&#8221; never comes emclose/em to &#8220;B&#8221;./li liLarge downloads from the Mac App Store emshould/em be resumable, but for some reason they often emaren&#8217;t/em. You can pause them for awhile, but if you pause it for too long, it always seems to start over./li liSomeone told me that their download speeds from the iTunes Store varied greatly depending on which DNS servers they were using. I don&#8217;t pretend to know emwhy/em that would be the case, but he said that it made a great deal of difference in his experience. So if you are using your ISP&#8217;s DNS servers, you might try OpenDNS or Google DNS and see if that helps./li /ul  The excruciatingly long and nerdy answer that just might help. But no promises.  GUI progress meters are often not very helpful. If you want the real scoop on what is happening, you&#8217;ll want to get down into the place where the actual files are being downloaded.  In this case, that&#8217;s (somewhere under) code/var/folders//code.[1]   Now, you could try to do this in Finder, but really, you&#8217;d be much better off firing up Terminal.app from /Applications/Utilities/. Then you can copy/paste this command:  precodefind /var/folders -ipath '*/com.apple.appstore/*' \ -name manifest.plist 2&gt;/dev/null /code/pre  Note that you can copy that command as two lines as long as the first line ends with code\/code or just remove the code\/code and keep it as one long line.  Translated into English, that command says &#8220;Look in the folder /var/folders/ for any file called &#8221;manifest.plist&#8220; in a path (series of folders/directories) that has &#8221;com.apple.appstore&quot; in it.  For example, on my computer right now (with no active Mac App Store downloads), I have only one of these, which is at:  precode/var/folders/bk/cb9y7rbx30q_6n40wp096grc0000gn/C/com.apple.appstore/manifest.plist /code/pre  Once you find that plist file, you need to look inside it for the name of the &#8216;package file&#8217; which is being downloaded from the Mac App Store.  emUsually/em that file will end with &#8220;.pkg&#8221; so if you wanted to skip a step, you could try just looking for .pkg files:  precodefind /var/folders \ -ipath '*/com.apple.appstore/*' \ -iname '*.pkg' \ -ls 2&gt;/dev/null |\ egrep '\.pkg$' /code/pre  This is a similar command as before, except that now we are asking codefind/code to look for any files which end with &#8216;.pkg&#8217; and then show us the output of codels/code on any matching file or folder.  If you track the file size of any &#8216;.pkg&#8217; files found in that directory, then you can see how much data has been downloaded.   emExample:/em Since I don&#8217;t have any downloads currently, I don&#8217;t have any .pkg files to show, so I&#8217;ll use a &#8216;.plist&#8217; file for this example. Here&#8217;s what the output of that command would look like for me:  4446464 8 -rw-r&#8211;r&#8211; 1 luomat staff 226 Dec 3 01:03 /var/folders/bk/cb9y7rbx30q_6n40wp096grc0000gn/C/com.apple.appstore/manifest.plist  Most of the stuff on that line we don&#8217;t care about. You can probably pick out the date &#8220;Dec 3&#8221; and the time &#8220;01:03&#8221; but actually the only part we really care about is the size of the file, in bytes, which is the number just before the date: 226.   (Just stay with me here.)  If you count the number of &#8216;columns&#8217; in that line, you&#8217;ll find that the &#8216;226&#8217; is the 7th column, and the filename is the last column. Using another Unix tool called codeawk/code we can run that command again and emonly/em see the fields that we want to see: the file size and the file name.  precodefind /var/folders \ -ipath '*/com.apple.appstore/*' \ -iname '*.plist' \ -ls 2&gt;/dev/null |\ awk '{print $7&quot; &quot;$NF}'   /code/pre  Again, from top to bottom, that says: (1) look in /var/folders (2) for anything in a path of folders/directories which contains &#8216;/com.apple.appstore/&#8217; (3) and files which end in &#8216;.plist&#8217; (which you&#8217;d want to change to &#8216;.pkg&#8217;) and then (4) show us the file listing (codels/code) output for anything that matches, and filter (|) the results through (5) codeawk/code and print out emonly:/em the 7th column, a space (that&#8217;s the &#8220; &#8221;) and the last column (code$NF/code means &#8216;last&#8217; to codeawk/code).  strongWhew! Ok, did you get all that? I hope so. If not, don&#8217;t give up yet. There&#8217;s a surprise at the end of this post./strong I&#8217;ll stop with the details there, but just imagine if you ran a emloop/em which kept checking the size of that code.pkg/code file every, oh, 15 seconds or so. Then you would be able to see how many bytes had been downloaded, and if you kept the old value and compared it to the new value, you could even tell how much of the file you had downloaded since the last time you checked.  emBut what! There&#8217;s more!/em In that codemanifest.plist/code file that I mentioned before, not only does it give us the emname/em of the .pkg file that is being downloaded, it also tells us emhow many bytes it is supposed to be./em  So, if you really wanted to, you could:  ol liLook for the manifest.plist file/li liFind the name of the .pkg file that the manifest.plist said we were currently downloading/li liFind the total emsize/em that .pkg file is supposed to be when it has completely downloaded/li liRun a loop as long as that .pkg file exists, checking its size, comparing that to the previous size, and the total size, and give you an idea of how much has been downloaded, how fast it is being downloaded, and how much more there is to go./li /ol  Wow. Doesn&#8217;t that sound fün?  Well, I have some good news. These sorts of tedious tasks are just the sort of thing computers are really good at doing. All you need is someone who tells the computer what to do, and put it together in some kind of a &#8216;program&#8217; or &#8216;script&#8217;.  Which is what I did. You can find it at https://github.com/tjluoma/maswatch. My script uses Growl, and, more specifically, growlnotify to send you a notification every time the script loops.[2] That notification will show you the total size, the downloaded size, and the difference between the current downloaded size and the previous download size (to give you an idea how fast it is downloading).  To use the script, you&#8217;ll need to:   ol liDownload and install Growl and growlnotify./li liDownload the script   curl -L &#8211;remote-name https://github.com/tjluoma/maswatch/raw/master/maswatch.sh /li liMake it executable:  chmod 755 maswatch.sh /li liThen start your download from the Mac App Store using the App Store app./li liOnce the download has started, run the script in Terminal:  ./maswatch.sh/li /ol  It should find the code.pkg/code file and then start reporting the download size.    hr / ol   If you have stray &#8216;pkg&#8217; files in /var/folders/ (inside the &#8220;/com.apple.appstore/&#8221; folder), it strongmight/strong be that a corrupted download is interfering with subsequent attempts. That seems strongunlikely/strong, but is theoretically possible and it felt like I should at least mention it. &#160;&#8617; /li   Someone with a basic understanding of Un*x could read the script and change it to use codeecho/code instead of codegrowlnotify/code, but that, as my Comp Sci professor used to say, &#8220;has been left as an exercise for the reader.&#8221; &#160;&#8617; /li  /ol   <comment132121> Have you monitored your network activity after you click the download button for Mavericks? Perhaps it's downloading but the App Store GUI isn't updating?  I had this issue happen to me, I let the computer sit for a while and eventually the App Store began to show progress for the download. <comment132139> I've also witnessed such a lazyness of the progress bar in the App Store GUI. I made stupid restarts because I thought my downloads had problems or I clicked wrong. Try to be patient, and if check it, confirm publicly that this sleeping progress bar is a real problem. <comment132163> Ok. Thanks for the help :) I'll check on it. Btw, is the download resumable after shutdown/reboot? <comment132183> I can't believe StackExchange ate my lovingly-crafted footnotes and return links. *le sigh* <comment132227> This Answer != "A few initial thoughts" ;) ! <comment132288> HA! Yeah, I guess it kind of got away from me there. <comment133492> Worked for me! Thanks :)