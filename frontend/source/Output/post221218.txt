Date calculation in AppleScript. Week numbers and their start date <body> I want to write an AppleScript that creates projects in OmniFocus where their defer date and due date is set to any weeks' start and end day.   The result should look like this:  precodeweeknumber: day1. month1. year1 - day2. month2. year2 /code/pre  Where codeweeknumber/code is replaced with a weeks' week number. codeday1/code, codemonth1/code and codeyear1/code take codeweeknumber/codes' week number and parse it to that days' date. So for week number 09 in 2016 that would be code29. 02. 2016/code. The first week ends (codeday2/code and so forth) end on code06. 02. 2016/code. So the result for the first week of 2016 would look like this:  precode09: 29. 02. 2016 - 06. 02. 2016 /code/pre  From the shell it is possible to get the last day of a emmonth/em like so:  precodedate -v 1d -v 3m -v 16y -v -1d +'%V: %d. %m. %Y' 09: 29. 02. 2016 /code/pre  In AppleScript you can turn any string, e.g.  returned from a shell script (codedate/code) into a date object with the syntax:  precodeset lastDayShell to do shell script "date -v 1d -v 3m -v 16y -v -1d +'%V: %d. %m. %Y'" set lastDay to date lastDayShell /code/pre  The command to add a new project to OmniFocus is this:  precodetell application "OmniFocus"     tell default document         set weekNumbers to folder "Week Numbers"         tell weekNumbers             set project1 to make new project with properties {name:"09: 29. 02. 2016", defer date:firstDay, due date:lastDay, singleton action holder:true}         end tell     end tell end tel /code/pre  I know all of that. I just can't find a resource that says how to get the first and last day of any week. I want to set the defer date of any weeks' start to the first of the week, and the due date to the last day.   <answer221241> I believe this should get you what you want, assuming to you want the first Saturday of a given month.   First, let's start with getting your last day of the month with the script you used, but output as UNIX time.   precodeSTART=$(date -v 1d -v 3m -v 16y -v -1d +'%s') # given date in seconds /code/pre  Now we can find the first Saturday of the month with this date.   precode# parse the given date time # move to the first of the month (-v1d) # move to the 6th day of the week (-v6w)  date -v1d -v6w -jf '%s' $START '+ %a %d %b % Y'  # Result: Sat 06 Feb 2016 /code/pre  <answer221271> Thanks to @ryan-m's comment I found a solution. Turns out codedate(1)/code is actually really cool. Its ability to do "adjustments" were the answer.   You can tell codedate/code to simply "go to" a specific day by using code-v/code. You can then use plus and minus to "adjust" that date in another code-v/code. So for instance:  precodedate -v 1w -v 16y /code/pre  Will go to the first month of 2016. (Or a date that contains that date)  With an adjustment we can walk through dates:  precodedate -v +1w -v +0d -v 16y date -v +1w -v +6d -v 16y /code/pre  This goes to the first week of 2016. The second command goes from the beginning of that first week 6 days ahead. This is the 10th of January 2016. code-v +2w/code would be the second week, and so forth. It's apparent which part can be automated here.      Everything that code+'string'/code at the end does is it formats the date you're at in the way you want it displayed. I use this in my script to make a date-string that AppleScript's codedate/code command understands. Please don't confuse the shell command codedate(1)/code with the AppleScript codedate/code command.  This is the script I ended up with, by the way:  precoderepeat with weekNumber from 1 to 52     set weekStartShell to (do shell script "date -v +" &amp; weekNumber &amp; "w -v +0d -v 16y +'%d. %m. %Y'")     set weekStart to date weekStartShell     set weekEndShell to do shell script "date -v +" &amp; weekNumber &amp; "w -v +6d -v 16y +'%d. %m. %Y'"     set weekEnd to date (weekEndShell &amp; " 23:59:59")     set projectName to (("CW" &amp; weekNumber &amp; ": " &amp; weekStartShell &amp; " - " &amp; weekEndShell) as string)      tell application "OmniFocus"         tell folder "Day Projects" of default document             set projectWeek to make new project with properties {name:projectName, defer date:weekStart, due date:weekEnd, singleton action holder:true}          end tell     end tell  end repeat /code/pre  Note that in order to use AppleScript's codeset var to date "date-string"/code you have to give it a string in your locale. In Europe the string is code01. 02. 2016 23:59:59/code. In America this probably is something like code2016/02/01 23:59:59/code. You need to modify these in the variables in the script. (code+'%Y/%m/%d'/code at the end)  <comment267914> Thank you for the help, Ryan! That didn't actually answer my question, but it gave me a nudge in the right direction. I'll post my answer when I finished the script.