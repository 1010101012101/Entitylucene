Moving files from Desktop to another folder and vice versa using AppleScript (and bash inside of Applescript) inside Automator <body> I need to move files from my desktop to a folder code~/Documents/Desktop migration/code and I have tried to code a script which will do that. Unfortunately, (and the reason why I'm asking here) it doesn't work.  I am using a service (so that I can go to any application's menu bar  Services  (insert name of service here) ) and need to store the variable data, so I think automator is suited for the job, and I'm using AppleScript and Terminal to move.   What doesn't work is it only transfers files to the desktop from the Desktop Migration folder and not back from the desktop to the Desktop Migration folder, so stronghow can I achieve this/strong?  What I've come up with so far: img src="https://i.stack.imgur.com/cArlW.png" alt="enter image description here"  precodeon run {input, parameters}     set theQuery to input     if theQuery = 1 then         do shell script "mv ~/Desktop/* ~/Documents/Desktop\\ migration"         set output to 0         return output     else if theQuery = 0 then         do shell script "mv ~/Documents/Desktop\\ migration/* ~/Desktop"         set output to 1         return output     end if end run /code/pre  Thanks!  <answer260174> So it looks like you'er trying to set a emflag/em that toggles each time the emService/em runs, and there is more than one way to accomplish this.  In this example, I created an strongAutomator/strong emService/em named strongTest Service/strong, with the emsettings/em shown in the image below, and added a strongRun Shell Script/strong emaction/em, as this is all you should need to accomplish the task since you were using a codedo shell script/code strongAppleScript/strong emcommand/em anyway to do the emwork/em.  img src="https://i.stack.imgur.com/lLKRe.png" alt="Automator Service"  As presently coded, each time the emService/em runs it says what the emflag/em is set to, 0 or 1, and sets it to the opposite. You'd of course remove the codesay.../code emcommands/em replacing them with the emcode/em you want to run based on the setting of the emflag/em.  pre class="lang-none prettyprint-override"code#!/bin/bash  file="$HOME/Library/Services/Test Service.workflow"  flag="$(xattr -l "$file" | awk '/com.TestService.flag/{print $2}')"  if [[ $flag -eq 0 ]]; then     # Do something...      say "flag is currently set to 0, setting flag to 1"          # Set flag to 1.     xattr -w com.TestService.flag 1 "$file" else     # Do something else...      say "flag is currently set to 1, setting flag to 0"          # Set flag to 0.     xattr -w com.TestService.flag 0 "$file" fi /code/pre  hr  This uses codexattr/code to set an emextended attribute/em on the strongAutomator's/strong emService/em code.workflow/code emfile/em and it is this that is read each time and changed each time the emService/em is run and this is the emflag/em to determine which embranch/em of the codeif/code emstatement/em runs in the emscript/em.  You can either manually set the codecom.TestService.flag/code using codexattr/code in strongTerminal/strong before you run the emsaved/em strongAutomator's/strong emService/em so as to have the emextended attribute/em applied to is code.workflow/code emfile/em or if you just run the emsaved/em strongAutomator's/strong emService/em the first time is will set it to code1/code as it reads the empty codeflag/code emvariable/em the first time as being equal to code0/code.  The following emoutput/em from strongTerminal/strong shows the emextended attributes/em of the strongAutomator's/strong emService/em code.workflow/code emfile/em when it was first saved, it just had the codecom.apple.FinderInfo/code emattribute/em set, and then the emService/em was run a couple of times to show that the codecom.TestService.flag/code emattribute/em was set and changed each time the emService/em was run. (I manually ran the codexattr/code emcommand/em before and then in-between each time I ran the emService/em to have this emoutput/em to show.)  hr  pre class="lang-none prettyprint-override"code$ xattr -l "$HOME/Library/Services/Test Service.workflow" com.apple.FinderInfo: 00000000  00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00  |................| 00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................| 00000020 $ xattr -l "$HOME/Library/Services/Test Service.workflow" com.apple.FinderInfo: 00000000  00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00  |................| 00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................| 00000020 com.TestService.flag: 1 $ xattr -l "$HOME/Library/Services/Test Service.workflow" com.apple.FinderInfo: 00000000  00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00  |................| 00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................| 00000020 com.TestService.flag: 0 $  /code/pre  hr  Obviously you can change the name of the emflag/em from codecom.TestService.flag/code to whatever you'd like however remember to change it in the emscript/em in all three places, in the codeawk/code emcommand/em and in each codexattr/code emcommand/em in each embranch/em of the codeif/code emstatement/em. Also change the name of the codefile/code emvariable/em as appropriate for the actual emname/em of your strongAutomator/strong emService/em code.workflow/code emfile/em.  <answer260328> Try with a Terminal command, it’s very simple·  Type rsync -av, press once the space bar and drag the folder to the Terminal window. Drag the destination folder to the window and hit Return.  That’s it !.  The original folder (files) remains intact in their position.  <comment325641> I'm actually testing the OP's bogus "solution" and your solution in a Sierra VM <comment325642> @klanomath, It works in macOS Sierra. I wrote it in OS X 10.8.5, as you can tell from the picture of Automator, but tested in macOS afterwards. :) <comment325665> Thank you! This works perfectly. The `say` commands are also well-thought in case I needed to troubleshoot.