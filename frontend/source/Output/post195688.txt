Where should a command line tool store cache files in OS X? <body> code/var/cache/code is missing, code~/Library/Caches/code seems to be for full-fledged applications rather than command line tools, tools I've seen in the wild do horrible things (like use the user's home directory). Where is the correct - or at least predictable and reliable - location?  <answer195698> It depends on the type of data being cached - is it per user or system wide?   If per user, there's nothing wrong with using a dot-prefixed directory in the user's home directory (that's what it's for, after all, and very much the UNIX way) or perhaps code/tmp/&lt;username&gt;/code if the data is not to be persisted. If it's system wide and meant to be persisted, check the codehier/code manual page - code/var/db/&lt;appname&gt;/code may be an option?  One other Mac OS-specific option is to use code/var/folders/code (as documented in codehier(7)/code). As mentioned, you can retrieve the user-specific temporary directory by calling codegetconf DARWIN_USER_CACHE_DIR/code.  <comment233661> you mean like the "open $TMPDIR../C/" <comment233665> At the page  https://developer.apple.com/library/mac/documentation/OpenSource/Conceptual/ShellScripting/PortingScriptstoMacOSX/PortingScriptstoMacOSX.html#//apple_ref/doc/uid/TP40004268-TP40003517, see the heading File System Hierarchy. <comment233669> @Buscarì›ƒSD Are the names "C" and "T" documented? Looks like `getconf DARWIN_USER_CACHE_DIR` returns the same but is undocumented. <comment233670> @DavidVincent That's a wonderful link that originally took me a while to find, but this is one question I still had after reading most of the documents linked there. <comment233687> @TristanBerger, I think that C and T are from 10.8 and beyond.  In 10.6, they are -Caches- and -Tmp- (the minus signs are part of the name, not markup).  The DARWIN_USER_CACHE_DIR and DARWIN_USER_TEMP_DIR are valid through all 10.x I believe. <comment233704> @TristanBerger, I should have asked what kind of tool you were making, and what kind of cache it wants.  In the meantime, find a tool that caches stuff but doesn't do horrible things, and see if its approach works.  Maybe look at tools written or ported by Apple. Maybe emacs or vi.