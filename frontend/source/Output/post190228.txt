Accidentally used dd on my system drive <body> As is wanted to write an image to usb stick, I accidentally used my system drive (macintosh hd) as target. Command used:  precodesudo dd if=/dev/zero of=/dev/rdisk1 bs=1024 count=1 /code/pre  Where disk1 was Macinstosh HD ... (yeah I know - facepalm :)  Anyway - aborted after 2 minutes as nothing happened and I realised my mistake. To my astonishment, everything still seems to work, partition still there, still reboots.  This is the output of:   precode$diskutil list:  /dev/disk0    #:                       TYPE NAME                    SIZE       IDENTIFIER    0:      GUID_partition_scheme                        *500.3 GB   disk0    1:                        EFI EFI                     209.7 MB   disk0s1    2:          Apple_CoreStorage                         499.4 GB   disk0s2    3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3 /dev/disk1    #:                       TYPE NAME                    SIZE       IDENTIFIER    0:                  Apple_HFS Macintosh HD           *499.1 GB   disk1                                  Logical Volume on disk0s2 /code/pre  The command was intented to zero out the partion map (of an usb stick) ...as described here.  Which works on the usb stick, (luckily) it didn't work on my Macintosh hard disc. But i still don't get it why? By saying i aborted i meant after committing the comment, nothing happened, not output, but no fresh prompt either..so is used ctrl-c  Time machine backups can be restored, thats not the thing. I'm just curious and want to understand it  Do I still have to worry that I lost some data?  <answer190259> You emshould/em be fine, and you got really lucky because you failed your way into saving your disk. I'll first break down your dd command:  codedd if=/dev/zero of=/dev/rdisk1/code  Copy everything from zero to /dev/rdisk1 (your main disk, ouch!)  codebs=1024/code   Sets the size of the blocks to be copied. In this case, you are coping in 1Kb blocks. This is more important in the next bit.  codecount=1/code  This argument is what saved your entire disk. When you set count to 1, you effectively told dd to only copy 1 block. Since your block size is 1Kb full of zeros, your dd command would have zeroed out the first kilobyte of your drive.  While I have no idea what's in the first area on a drive, I would speculate that it holds the drive structure information. So, my recommenced action to take is reboot into recovery and launch Disk Utility and run "Repair Disk" on your system drive.  <answer190375> Your main disk uses a Core Storage partition scheme:  ul lidisk0 is your main system disk./li lidisk1 is a "virtual" disk residing in disk0s2 containing the Macintosh HD volume visible on your desktop./li /ul  The first two sectors of a Logical Volume contain zeros only.  Examples:  ol lidisk2 is the Core Storage Volume pooling disk0s2 (SSD) and disk1s2 (HDD) of a 3.1 TB Fusion Drive  img src="https://i.stack.imgur.com/WNjKs.png" alt="enter image description here"/li lidisk2 is the Core Storage Volume residing in disk0 - the 64 GB disk image of a Parallels VM (Yosemite)  img src="https://i.stack.imgur.com/iMtyk.png" alt="enter image description here" /li /ol  With your command codesudo dd if=/dev/zero of=/dev/rdisk1 bs=1024 count=1/code you had luck and you just have overwritten 1024 zeros with 1024 zeros.  As a result you haven't lost any data and may continue working with your Mac without the need to restore any backup or to reinstall your system.  <comment225771> you should definitly think about a restore from Timemachine with an Backup (1 Hour e.g.) before this happened. Nobody can tell you now if there has been Data overwritten, or only free Blocks. But I'm also amazed everthing is *still* working fine for you o.O <comment225785> @bMalum, If the actual `dd` command executed was what was written then there is no need whatsoever to restore from Time Machine as no files were overwritten, only the first 1K of the disk was overwritten, and Time Machine is not going to repair what was overwritten in the case. <comment225786> @drummer23, Not sure what you mean _"aborted after 2 minutes as nothing happened"_ as the `dd` command you've show would only take literally a fraction of a second to complete and would only have overwritten the first 1K of rdisk1.  Also the System disk that has the Macintosh HD partition is usually rdisk0 although it can be rdisk1 as OS X doesn't guarantee disk ordering.  Are you sure rdisk1 was the System disk? <comment225800> With `bs` set as `bs=1024` and `count=1` then only 1024 **bytes** where transferred not 1 MB.  Additionally, if it had be 1 MB vs 1 K then there would have been a issue. <comment225801> Whoops. Edited. Thanks <comment225808> @drummer23, I just did some testing doing the same thing you did, writing zeros to the first 1024 bytes of my system disk after first backing up the first 1024 bites.  Mine absolutely would not boot after that until I restored from the dd backup I made.  So this obviously leaves questions as to whether or not rdisk1 was the system disk when you used dd and based on this test I'd say it wasn't as it shouldn't have been able to boot afterwards. <comment225809> You should see my recent comment to the OP.  Based on what I did Disk Utility cannot repair the disk with the first 1024 bytes overwritten with zeros because once overwritten you cannot boot, even to the Recovery HD nor is the disk repairable when mounted under another system in Disk Utility.  I had to restore the dd backup I made of those bytes in order for the disk to be usable without resorting to third party solutions.  My test also leaves doubts to whether rdisk1 in its case was actually a system disk. <comment225819> @drummer23 Do you use classical or a core storage partition layout on your system drive? Only if you use a core storage layout - but no fusion drive - Macintosh HD will have disk1 as disk identifier. <comment225939> ok let's clarify :) this is the output of $diskutil list: /dev/disk0 #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *500.3 GB disk0 1: EFI EFI 209.7 MB disk0s1 2: Apple_CoreStorage 499.4 GB disk0s2 3: Apple_Boot Recovery HD 650.0 MB disk0s3 /dev/disk1 #: TYPE NAME SIZE IDENTIFIER 0: Apple_HFS Macintosh HD *499.1 GB disk1 Logical Volume on disk0s2 the command was intented to zero out the partion map (of an usb stick) ...as described here: http://wiki.openelec.tv/index.php/HOW-TO:Installing_OpenELEC/Writing_The_Disk_Image#tab=Mac_OSX which works on the usb stick, (luckily) it didn't work <comment225940> ah now i recognize - last line of the output:"Logical Volume on disk0s2"...could that be the answer....as this is just a pointer? <comment225941> drummer23,  You should not post additional information as a Answer, edit your OP instead. <comment225942> Please use the edit link on your question to add additional information. The Post Answer button should be used only for complete answers to the question. <comment225950> @drummer23 According to the output from `diskutil list`, I would guess that disk0 is your system disk as it contains the recovery partition and the Apple_CoreStorage (are you using file vault 2?). And your command wrote to the second disk (smaller then the first). So what is on the second disk? And does it still work? <comment226579> thanks for this explanation too!