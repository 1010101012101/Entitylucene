Run a launchd job after Time Machine backup <body> Quite simply, I have a process that's triggered by codelaunchd/code but currently runs once an hour, however really what I would like it to do is run once a Time Machine backup has completed.  Initially I thought I could just set my Time Machine backup (/Volumes/Foo/Backups.backupdb/Haravikk's Mac) as a watch path for launchd, however this seems to trigger much too early. It does seem to trigger again near the end, so I'm currently using a delay and then checking for the existence of a .inprogress backup, but it's not really an ideal solution, and sometimes Time Machine's cleanup stage will trigger the process multiple times.  Is there a more specific path that I could watch that will trigger my process only when Time Machine has finished a backup?  I realise I should perform my checks anyway to be sure, but currently my process is triggering several times per backup, which isn't what I want.  <answer108256> A simple solution is to use the codetmutil/code command to manually trigger the backup and follow it up with your process (as part of a shell script that does both these steps).  ul liFirst, turn off automatic backups from strongSystem Preferences  Time Machine/strong or using the command codetmutil disable/code/li liUse codetmutil startbackup --auto --block/code to trigger a backup once every hour (the code--block/code option is required to make the execution wait until the backup is finished)/li liFollow this with launching your process/li /ul  See man tmutil for more information on using codeTime Machine/code from the command line.  <answer110220> Okay, so after setting up a launch agent to log information for a while I've come up with a combined solution.  Quite simply I created a launch-agent that watches the codecom.apple.TimeMachine.plist/code file for updates like-so:  precode &lt;?xml version="1.0" encoding="UTF-8"?&gt;  &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;  &lt;plist version="1.0"&gt;  &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;org.example.backupd&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;do something&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;WatchPaths&lt;/key&gt;     &lt;array&gt;          &lt;string&gt;/Library/Preferences/com.apple.TimeMachine.plist&lt;/string&gt;      &lt;/array&gt;  &lt;/dict&gt;  &lt;/plist&gt; /code/pre  This file is updated every time Time Machine performs a backup, and runs towards the end (during the cleaning up/finishing stage I believe). With this in mind it is possible to invoke a script with the above watch path that checks to see if codebackupd/code is still running; if it is then the script sleeps for a minute and checks again, repeating until codebackupd/code has finished, before proceeding with whatever it needs to do.  This now allows post-backup actions to be triggered such as performing secondary backups (in my case via codersync/code to a NAS), checking the size of the last backup and other handy things.  Anyway, this solution seems to be the best way to do it, as I couldn't find any path to watch that triggers reliably after a backup is complete, but this should run close enough to the end of a backup to be useful.  <comment127096> That would be ideal, and I could maybe make it work, but I was really hoping to be able to make my script a "drop in" addition, leaving Time Machine to function normally (I just don't want to be running at the same time). Is there perhaps a way to look out for `backupd` running and just wait till it finishes before running my script? <comment127120> I just tried creating and running a wrapper program for `backupd`, but it runs once every 10 seconds and exits. So monitoring `backupd` is not useful.