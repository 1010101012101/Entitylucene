Checking for existence of hidden files in AppleScript <body> I can check to see if a file exists using AppleScript. But I am having trouble with hidden files. Is there a special way to do this?  precodeset home_path to (path to home folder as text) set hiddenFile to home_path &amp; ".test"  tell application "Finder"     if not (exists file hiddenFile) then         display dialog ".test does not exist."     end if end tell /code/pre  <answer273870> So I don't know how to do this with native AppleScript, but because Macs use Bash, you can use a shell script to do the searching. It's not ideal but it's better than nothing.  So your shell script is going to codecd/code, change directory, into the folder you need to search. Then, it'll execute the codels/code command, which lists the contents of a directory. the code-a/code flag on codels/code tells it to list hidden items. Bash tools use a concept called standard input/output to get input and display output. The standard output is displayed on screen by default, but it can be redirected by a tool called a pipe to go somewhere else. In this case, instead of displaying a list of all the files in a directory, we're going to pipe that list into a search tool called codegrep/code. That explanation was somewhat verbose but your shell script only needs 3 lines (the first of which is arguably unnecessary in this case):  precode#!/bin/bash                                   # define the shell, not really needed because bash is the default shell but good practice cd /path/to/search/directory                  # cd to the proper place ls -a | grep "the text you're looking for"    # list all files (including hidden ones) and pipe output into grep, a search tool /code/pre  Save this as something logical, like codefindFile.sh/code, then make it executable with this command in the terminal app  precodechmod +x /path/to/findFile.sh /code/pre  So now that's ready to go, on to the AppleScript.  Like I said I'm not that experienced in AppleScript, but as I understand it you'd run the shell script like this  precodeset output to do shell script "/path/to/findFile.sh" /code/pre  then the codeoutput/code variable would contain any text that grep found. Your test for whether or not the file exists is now whether or not codeoutput/code contains any text.  Feel free to run codeman grep/code in the terminal for the codegrep/code manual to see more about how it works and what it matches and how to only match files with certain extensions and stuff like that. Perhaps you may want to play around piping things into codegrep/code to get a feel for how it works.  Hopefully someone can come along with an answer to your question in AppleScript.  References:    ul liusing shell scripts in AppleScript: http://macscripter.net/viewtopic.php?id=4913 /li lichmod is required to make shell scripts executable: How to run a shell script from an AppleScript?/li lifor any of the shell commands, run codeman nameofcommand/code to learn more about them/li /ul  <answer273876> You can also inline calling the shell command inside the AppleScript without the need to create separate bash scripts. Here's an example:  precodeset home_path to (path to home folder as text) set fileName to ".viminfo" set hiddenFile to home_path &amp; fileName  tell application "Finder"     if not (exists file hiddenFile) then         try             set output to do shell script "[ -f " &amp; quoted form of POSIX path of hiddenFile &amp; " ];"         on error             display dialog fileName &amp; " does not exist."         end try         display dialog fileName &amp; " does exist."     end if end tell /code/pre  This AppleScript uses bash code[ -f $PATH ];/code to check if file exists. It also uses codetry/code, because you have to "catch" an error - if file do not exist you get an error and script is stopped.   <answer273877> Replace Finder with System Events:  precodeset home_path to (path to home folder as text) set hiddenFile to home_path &amp; ".test"  tell application "System Events"     if exists file hiddenFile then         display dialog ".test does exist."     else         display dialog ".test does not exist."     end if end tell /code/pre  and it works.  <comment344280> I never would have thought of that +1 <comment344298> Unless you have an absolute need for two variables, `home_path` and `hiddenFile`, you could just use `set hiddenFile to (path to home folder as text) & ".test"` and use it with klanomath's answer, as it is by far the best answer of all thus far! IMO It should be marked as the accepted answer. <comment344331> Wow, that was easy!  Thank you very much.