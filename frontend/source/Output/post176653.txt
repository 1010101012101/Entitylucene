Mac package installer installs the folder "Contents" in /Applications instead of the bundle <body> When I try to use packaging with my .app to create a Mac installer, and I run the installer, it creates me a folder named "Contents" in my /Applications folder, instead the "bundle app" as it should.  I've test with pkgbuild + productbuild:  precodepkgbuild --component "./myapp.app" --version 1 --install-location /Applications component.pkg productbuild  --package-path "component.pkg" --distribution "./Distribution.xml" --package-path "./Temp" --resources "./Resources" --sign mycert "myapp.pkg" /code/pre  And just with productbuild:  precodeproductbuild --component "./myapp.app" /Applications -s mycert myapp.pkg /code/pre  In both cases, I run the installer, everything seems fine, but in Applications folder I see "Contents" (that is the content of the app bundle)  I've tried with "./myapp.app/" also in --component attribute, and even adding "/Applications/myapp.app" in the --install-location  <answer177861> Took me a few tries to get this working (the installer managed to do some really strange stuff on my first few attempts). But this seems to work reliably.  I created a temporary folder with just the application I wanted to package (leaving the app sitting elsewhere seemed to result in the aforementioned strange behaviour), then package it from there. So I created a temporary folder called "test" on my desktop and dropped the app in there on its own. The following command then reliably results in a working package on my Desktop.  precodeproductbuild --component ~/Desktop/test/myapp.app /Applications ~/Desktop/myapp.pkg --sign "my certificate identity name" /code/pre  Something that is helpful when testing is to run codesudo opensnoop | grep installd/code in a Terminal at the same time. It generates a lot of output but you should be able to see the application bundle being created in something like code/var/folders/zz/GIBBERISH/C/PKInstallSandboxManager/GIBBERISH.activeSandbox/Root//code and then copied to its final destination.  Note: I'm not certain why you are using code-s/code in the second example codeproductbuild/code command you gave in your question. There are three options arguments to productbuild that start with "s" (synthesis, scripts and sign) and the man page doesn't mention using the shorter "-s" for any of them. Perhaps this is the problem. Of course it could just be a typo. :)  <answer246932> I think the issue here is that you are using code--component/code rather than code--root/code. The docs are a bit unclear on its usage but it looks as if, like with root too, you need to specify the folder that encloses the code.app/code bundle not the actual bundle path itself. I made this mistake when using code--root/code and witnessed just my bundle contents getting installed into code/Applications/code. The same caution is required when actually building the package using pkgbuild.  I would copy my code.app/code into a code./build/code folder and then:  precodepkgbuild --analyze --root ./build MyApp.plist  pkgbuild --root ./build --component-plist MyApp.plist --identifier co.uk.MyApp --version 0 --install-location /Applications MyApp.pkg productBuild --synthesize --package ./MyApp.pkg ./Distribution.xml productBuild --distribution ./Distribution.xml --resources ./Resources --sign "Developer ID Installer: My Id" --package-path . ./MyApp-ver-whatever.pkg /code/pre  <comment209576> Have you tried specifying the --root option with the rest of your pkgbuild options? <comment209595> --root option can't be used with --component <comment209609> Can you try it with the --root option instead of --component? I remember having the same issue as you with Apple's PackageMaker tool (GUI). I found out I had to check an option called "Include root in package". I was wondering if --root did this and --component didn't. <comment209643> Thank you but same problem ... "Contents" folder (and not bundle .app itself) is installed in "Applications" folder <comment209655> Ok. The only other suggestion, which is more of a workaround than a fix, is to try and put the app bundle in a folder and specify a path to the folder instead. For example: copy "myapp.app" to "~/Desktop/mytempfolder/" and try "pkgbuild --compontent '~/Desktop/mytempfolder'". Hopefully that will ignore the "mytempfolder" and copy its contents, which would be the app bundle. <comment209684> Nop ... but nice shot ! :-) <comment209721> Why do you quote `"./myapp.app"`? <comment209938> I'L'I  it does not matter, same result <comment210756> Nice idea ! but it's strange ... now I don't see any changes in Application ... nothing is installed, no changes ... and the installer says "the applications has been installed" with the green check at the end ... weird ! <comment210758> @FlamingMoe I've added a bit about opensnoop to the answer. That should help you identify where the installer is writing the application bundle if it isn't writing it to /Applications.