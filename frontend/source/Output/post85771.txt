Can Mail show a folder's total message count next to the folder name? <body> Apple Mail displays the number of unread messages in each folder in its sidebar:  img src="https://i.stack.imgur.com/wIcE7.png" alt="enter image description here"  Is there any way to make it display the folder's strongtotal/strong message count (read plus unread) in addition to, or instead of, the unread message count?  Plugins/hacks welcome, as I’m guessing this won’t be a built-in option.  <answer86207> Since hacks are welcome:  The idea is to use AppleScript to rename folders. For example:  precode@REPLY /code/pre  will be renamed to something like  precode@REPLY (34) /code/pre  where 34 is @REPLY's total message count.  A working implementation of such a script that renames mailboxes prefixed with code@/code is (tested on OS X 10.8.2 with Gmail and AIM accounts):  precode-- Check whether Mail is running tell application "System Events"     if not (exists (processes where name is "Mail")) then return end tell  tell application "Mail"     -- Loop over mail accounts     repeat with myAccount in accounts         -- Loop over mailboxes         repeat with myMailbox in mailboxes of myAccount             if name of myMailbox starts with "@" then                 set nameOfMyAccount to name of myAccount                 -- Help Mail.app's AppleScript suite cope with Gmail                 if nameOfMyAccount is "Gmail" then                     set nameOfMyMailbox to "[Gmail]/" &amp; name of myMailbox                 else                     set nameOfMyMailbox to name of myMailbox                 end if                 set currentMessageCount to the (count of messages of mailbox nameOfMyMailbox of account nameOfMyAccount) as Unicode text                 set messageCountShownInMailboxName to (do shell script "echo '" &amp; name of myMailbox &amp; "' | /usr/bin/sed -E 's/.* \\(([0-9]+)\\)/\\1/'") as Unicode text                 if currentMessageCount is not equal to messageCountShownInMailboxName then                     -- Strip message count: "@TODO (3)" -&gt; "@TODO"                     set strippedNameOfMyMailbox to do shell script "echo '" &amp; name of myMailbox &amp; "' | /usr/bin/sed -E 's/(.*) \\([0-9]+\\)/\\1/'"                     -- Append current count: ""@TODO" -&gt; "@TODO (4)"                     set newMailboxName to strippedNameOfMyMailbox &amp; " (" &amp; currentMessageCount &amp; ")"                     -- Rename mailbox                     set the name of mailbox nameOfMyMailbox of account nameOfMyAccount to newMailboxName                 end if             end if         end repeat     end repeat end tell /code/pre  The effect of the script is shown in the following screenshots:  img src="https://i.stack.imgur.com/gQtkD.png" alt="enter image description here"  Another implementation that only renames mailboxes specified in a list would be (again, tested on OS X 10.8.2 with Gmail and AIM accounts)::  precode-- Append message count to these mailboxes global mailboxesWithMessageCount set mailboxesWithMessageCount to {"My To Do", "To Reply", "Very Important"}  -- Check whether Mail is running tell application "System Events"     if not (exists (processes where name is "Mail")) then return end tell  tell application "Mail"     -- Loop over mail accounts     repeat with myAccount in accounts         -- Mail.app's AppleScript suite gets confused with Gmail's [Gmail] folder         if name of myAccount is "Gmail" then             set mailboxPrefix to "[Gmail]/"         else             set mailboxPrefix to ""         end if         -- Loop over mailboxes         repeat with myMailbox in mailboxes of myAccount             -- Loop over mailboxes which should get the message count appended to their names             repeat with mailboxWithMessageCount in mailboxesWithMessageCount                 if name of myMailbox starts with mailboxWithMessageCount then                     set currentMessageCount to the (count of messages of mailbox (mailboxPrefix &amp; name of myMailbox) of myAccount) as Unicode text                     set messageCountShownInMailboxName to (do shell script "echo '" &amp; name of myMailbox &amp; "' | /usr/bin/sed -E 's/.* \\(([0-9]+)\\)/\\1/'") as Unicode text                     if currentMessageCount is not equal to messageCountShownInMailboxName then                         -- Strip message count: "@TODO (3)" -&gt; "@TODO"                         set strippedNameOfMyMailbox to do shell script "echo '" &amp; name of myMailbox &amp; "' | /usr/bin/sed -E 's/(.*) \\([0-9]+\\)/\\1/'"                         -- Append current count: ""@TODO" -&gt; "@TODO (4)"                         set newMailboxName to strippedNameOfMyMailbox &amp; " (" &amp; currentMessageCount &amp; ")"                         -- Rename mailbox                         set the name of mailbox (mailboxPrefix &amp; name of myMailbox) of myAccount to newMailboxName                     end if                 end if             end repeat         end repeat     end repeat end tell /code/pre  The effect of the script is shown in the following screenshots:  img src="https://i.stack.imgur.com/Axgnb.png" alt="enter image description here"  Both scripts set the message count:  ul licode@REPLY/code - code@REPLY (34)/code/li /ul  and, only if necessary, that is, when the message count has changed, update it:  ul licode@REPLY (34)/code - code@REPLY (29)/code/li /ul  My original idea was to run one of the scripts above (or some variation thereof) every time a mail is received with a rule in MailPreferencesRules:  img src="https://i.stack.imgur.com/fjykJ.png" alt="enter image description here"  but it can also be added to codecron/code to run every 10 minutes like this (see crontab (5) man page for crontab syntax explanation):  ol liSave the script to code/path/to/updateMailMessageCount.scpt/code./li liOpen Terminal and type:  precodecrontab -e /code/pre  to open your crontab file./li liMove with the arrow keys to the end of the file, in case there are any other entries, and press codeo/code (lowercase letter o), which adds an empty line and goes into insert mode./li liAdd this line (the code10/code means "run every 10 minutes", change as necessary to match your needs):  precode*/10 * * * * osascript /path/to/updateMailMessageCount.scpt &gt;/dev/null 2&gt;&amp;1 /code/pre/li liPress kbdesc/kbd./li liSave and close your crontab with code:x!/codekbdreturn/kbd (in case anything went wrong, type code:q!/code, press kbdreturn/kbd and start over)./li /ol  (If you ever need to stop the cronjob, open your crontab file with codecrontab -e/code, position the cursor over the cronjob and type codedd/code to delete it. Then save the file as explained above.)  You can use Launch Services, too (see this Apple developer document):  ol liCreate a script named code~/Library/LaunchAgents/updateMailMessageCount.plist/code with contents (600 is the interval in seconds, that is, 10 minutes):  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;updateMailMessageCount&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;osascript&lt;/string&gt;         &lt;string&gt;/path/to/updateMailMessageCount.scpt&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;StartInterval&lt;/key&gt;     &lt;integer&gt;600&lt;/integer&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre/li liLoad the job with:  precodelaunchctl load ~/Library/LaunchAgents/updateMailMessageCount.plist /code/pre/li /ol  (If you ever need to stop the job, do: codelaunchctl unload ~/Library/LaunchAgents/updateMailMessageCount.plist/code.)  (My favorite as long time Linux sysadmin is codecron/code, but note that, on OS X, codecron/code has been deprecated in favor of launchd. Both methods worked on my Mac running OS X 10.8.2.)  If you wish to refresh the message count with a keyboard shortcut you can create a strongservice/strong (see http://www.macosxautomation.com/services/learn/index.html for more information):  ol liClose Mail./li liOpen Automator in folder Applications and choose Service:  img src="https://i.stack.imgur.com/FuDEk.png" alt="enter image description here"/li liSelect Utilities under Library and drag Run AppleScript to the empty pane on the right:  img src="https://i.stack.imgur.com/5c9UQ.png" alt="enter image description here"/li liConfigure the service to receive no input in Mail:  img src="https://i.stack.imgur.com/kh2DV.png" alt="enter image description here"/li liReplace the line code(* Your script goes here *)/code with one of the scripts above./li liSave with a descriptive name like codeRefresh Message Count/code. The service will be saved to code~/Library/Services//code. /li /ol  Now set up the keyboard shortcut:  ol liOpen System Preferences, select the Keyboard preference pane and then the Keyboard Shortcuts tab./li liSelect Services, scroll down to the service you previously added and set the keyboard shortcut to whatever you want with the following restriction: strongyour shortcut shouldn't conflict with an existing shortcut in Mail/strong. I've chosen kbdcontrol/kbdkbdoption/kbdkbd⌘/kbdkbdR/kbd:  img src="https://i.stack.imgur.com/JVmz8.png" alt="enter image description here"  img src="https://i.stack.imgur.com/ZUp01.png" alt="enter image description here"/li liOpen Mail. Note that there is a new service, accessible with kbdcontrol/kbdkbdoption/kbdkbd⌘/kbdkbdR/kbd:  img src="https://i.stack.imgur.com/GY08Z.png" alt="enter image description here"/li /ol  (For the curious: if you are wondering where service codeReply and Move Sent Message to Current Folder/code above comes from, see How to save sent messages in same folder as message being replied to? -- warning: shameless plug.)  Now press kbdcontrol/kbdkbdoption/kbdkbd⌘/kbdkbdR/kbd, wait a few seconds and watch how the message count of the folders specified in the script get updated.  strongCaveats/strong:   ol liSome folders can't be renamed, such as code[Gmail]/All Mails/code or the codeInbox/code folders./li liFolders are not renamed in real time. That means that the number you see is an approximate value. If you implement the service, you will be able to refresh it with kbdcontrol/kbdkbdoption/kbdkbd⌘/kbdkbdR/kbd, though./li liIt can be slow if you have many mailboxes, or if the mailbox has many mails/li liIf you specify a set of mailboxes to rename, be careful that they do not match other folders, for example, "To Reply" will match both "To Reply" and "To Reply Later"./li /ol  strongAdvantages:/strong  ol liYou will see the message count in any mail client, provided you use Mail.app on your Mac and one of these scripts./li /ol  <answer86791> This doesn't answer the question, but as the question encourages hacks and speaks to power users someone may find this useful:  MailMate is a great (paid) OS X IMAP client that supports per folder counts out of the box and much more.  It doesn't have some of the UI polish of codeMail.app/code and codeSparrow.app/code but it makes up in powerful features and customisation.  <comment99487> That's a heck of an idea. I hadn't even considered AppleScript. A possible problem is I move e-mails into these folders manually after receiving them - but, for all I know, that does actually trigger a message received event (I use plain IMAP). I might be able to set the script to run every few seconds, or every minute, outside of Mail instead (depending on performance), or assign it to a keyboard shortcut somehow. Great idea though, I'll give it a go. <comment99491> And given that I only have like two or three folders that I want to be numbered, I could limit the script to just look at those. Really great idea, thanks so much for going to the effort of writing it up so well. <comment99575> You can use Launch Services to run a script, app, or droplet every X minutes. Try the app called "Launch Control" for an easy-to-use interface for Launch Services. <comment99656> It's great you found it useful, thank you for your feedback. I have rewritten the script that renames mailboxes that start with `@` and added another one that renames mailboxes specified in a list. I tested both scripts on OS X 10.8.2 and worked like a charm. If you want to run the script every X minutes you can use `cron` or, as @gosmond points out, Launch Services. If you wish to refresh the count message manually the script can be added to the service list in the Apple menu, I can provide detailed steps if interested. <comment99880> @jaume ..wow...and what do you do for living !!! Now dont tell me you are a hairstylist! <comment100095> @PaulD.Waite - I expanded the answer to include examples of a cronjob and a `launchd` job to refresh the message count periodically. I also improved the scripts and added how to configure a keyboard shortcut to manually update the mesage count. Take a look at it. <comment100327> Sounds worth a look, it‘s so rare to have the option of a different mail client on OS X. Good stuff.