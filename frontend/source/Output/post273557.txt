check if storage is available and if it is execute a backup routine with passwordphrase and check more <body> I was able to automate my backup with this first Question. Just copy pasted it to a .sh file and run it with my paths, runs smoth now. Then i followed this: https://stackoverflow.com/questions/132955/how-do-i-set-a-task-to-run-every-so-often#133425 This Lingon works fine as well and it backups every day.   Now, that i have it working i noticed that i didn't think of running out of diskspace. I think a hard limitation to say 10 backups wold be nice. I can list the snapshots with this command:   precoderestic -r /Volumes/BackupManual/restic-backups snapshots /code/pre  and the output looks like this:  precodeID        Date                 Host        Tags            Directory ---------------------------------------------------------------------- dbc3943d  2017-02-07 18:50:47  User.fritz.box                  /Users/user/Documents bd355ca9  2017-02-07 19:57:59  User.fritz.box                  /Users/user/Documents /code/pre  is there a way to count the Lines and delete the oldest IDs? this is the delete command:  precoderestic -r /Volumes/BackupManual/restic-backups forget IDxxxxxx /code/pre  i don't know how to integrate such a selection in here:  precode#!/bin/bash  # USER CONFIGURATION:     resticuser=restic srcdir=/Users/user/data backupvolume=/Volumes/usb-storage-name backupdir=${backupvolume}/restic-backups  # Script vars: longname=$0 shortname=$(/usr/bin/basename "${longname}")  printf '%s %s (%s) running...\n' "$(date -u "+%Y-%m-%d %H:%M:%S")" "${shortname}" "${longname}"  if [[ ! -d "${srcdir}" ]]; then     printf '%s %s does NOT exist.' "$(date -u "+%Y-%m-%d %H:%M:%S")" "${srcdir}" &gt;&amp;2     exit 1 else     if [[ $(mount | grep "${backupvolume}") ]]; then         # See: http://blog.macromates.com/2006/keychain-access-from-shell/         # Parse output of 'security' and set RESTIC_PASSWORD:         export RESTIC_PASSWORD=$(security 2&gt;&amp;1 &gt;/dev/null find-generic-password -ga ${resticuser} |ruby -e 'print $1 if STDIN.gets =~ /^password: "(.*)"$/')         # Run backup, capturing output in case of error:         output=$(restic -r ${backupdir} backup "${srcdir}")         error=$?         if [[ "${error}" == "0" ]]; then             printf '%s Restic backup completed successfully.\n' "$(date -u "+%Y-%m-%d %H:%M:%S")"         else             printf '%s Restic backup failed: error code: %s, error: %s\n' \                     "$(date -u "+%Y-%m-%d %H:%M:%S")" "${error}" "${output}" &gt;&amp;2         fi     else         printf '%s %s is NOT mounted.' "$(date -u "+%Y-%m-%d %H:%M:%S")" "${backupvolume}" &gt;&amp;2         exit 1     fi fi  printf '%s %s ended.\n' "$(date -u "+%Y-%m-%d %H:%M:%S")" "${shortname}" /code/pre  <comment343929> You can pipe it to `wc -l` to count the iines and use `grep/cut/awk/perl/...` to extract IDs. <comment343961> i just recoginzed that restic supports deleting with policies. So i don't need to check and sort but instead add some values to configure and check the policy when im executing the script...