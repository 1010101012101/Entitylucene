"Slow down" bootup until all devices are available <body> I'm using OS X as a Server, running Server.app 4.0 to provide email hosting/etc.  Attached to this machine I have a PROMISE Pegasus R2 RAID drive mounted at code/Volumes/RAID6-11TB/code, and I changed the default service storage location so that the Server.app data would be located on the RAID drive (for redundency, and so that Backblaze can backup my precious email, which normally ignores code/Library/code).  The problem is when rebooting the machine, Server.app doesn't properly startup, because emsomething/em during the boot process is emcreating an empty directory/em code/Volumes/RAID6-11TB/Library/Server/Web/Data/Sites/Default/NetBoot/code. When the RAID array is later automagically mounted, it's default mountpoint already exists, so it is instead mounted at code/Volumes/RAID6-11TV 1/code, which causes no good at all.  Is there a way to fix rebooting so that either:  ol licodeServer.app/code won't launch until the RAID disk is ready, or/li liDelay OS boot so that it won't finish launching until the RAID disk is ready?/li /ol  Regarding (1), I've edited code/Library/LaunchDaemons/com.apple.serverd.plist/code to add a QueueDirectories key, but that doesn't seem to have any effect, and strongWatchPaths/strong sounds like it has the wrong semantics, so I'm leery to even try that.  Regarding (2), if I boot into Single User mode (holding down codeCommand+S/code during boot), then emwait/em until emall/em messages have completed, emthen/em hit codeCtrl+D/code to continue the boot, code/Volumes/RAID6-11TB/code is properly mounted as intended.  However, this doesn't help for automated reboots when I'm away (e.g. after power failures). (OK, the "proper" answer is battery backups so that the machine doesn't reboot, but let's ignore that for now...)  Is there some way to make this work?  <answer162376> It's Server.app that is creating that mysterious folder that's gumming up your works.  Stop the Server.app from launching when the server boots, and then you can create a cronjob that launches it via a .sh script.   Script should just be something like   precode#!/bin/bash /Applications/Server.app /code/pre  and like the person said in the one link, the cronjob entry would be something along the lines of  precode@reboot sleep 60 &amp;&amp; my_script.sh /code/pre  That should give your RAID enough time to mount properly before Server.app pops up and creates that folder.   <answer162732> I split the difference with @zomgdavidbowie: I created a new script code/usr/local/bin/start-server-app/code:  precode#!/bin/sh  sleep 120  exec /Library/PrivilegedHelperTools/com.apple.serverd /code/pre  I then edited code/Library/LaunchDaemons/com.apple.serverd.plist/code and replaced all instances of code/Library/PrivilegedHelperTools/com.apple.serverd/code with code/usr/local/bin/start-server-app/code:  pre class="lang-xml prettyprint-override"code&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;com.apple.serverd&lt;/string&gt;     &lt;key&gt;MachServices&lt;/key&gt;     &lt;dict&gt;         &lt;key&gt;com.apple.serverd&lt;/key&gt;         &lt;true/&gt;     &lt;/dict&gt;     &lt;key&gt;OnDemand&lt;/key&gt;     &lt;false/&gt;     &lt;key&gt;Program&lt;/key&gt;     &lt;string&gt;/Library/PrivilegedHelperTools/com.apple.serverd&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/Library/PrivilegedHelperTools/com.apple.serverd&lt;/string&gt;     &lt;/array&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  This allows me to stay with the default launch mechanism without delving into strongcron/strong(8), while still delaying the codecom.apple.serverd/code invocation until after the external drive has been mounted.  <answer181751> How about this, instead of just waiting, do the following:  precode#!/bin/sh  if [[ ! -e /Volumes/&lt;volname ]]; then sleep 60 else exec /Library/PrivilegedHelperTools/com.apple.serverd fi exit 0 /code/pre  This should check if you volume is exists, if no, wait 60 seconds, if yes, start the server app.  <comment189901> do you use nfs or http for netboot? <comment190104> @klanomath I'm not using netbook at all, and AFAICT I've disabled netbook within `Server.app`, so I'm not sure why it's trying to create that directory in the first place... <comment216420> Good idea, though in my experience the volume is *never* immediately available at startup, so the `sleep` would be hit anyway... <comment217496> @jonp do you know if the `/Library/LaunchDaemons/com.apple.serverd.plist` gets over written when Sever.app is updated? <comment217688> Yes, it is overwritten when `Server.app` is updated. Keep a backup copy so you can easily replace it when Server.app is updated.