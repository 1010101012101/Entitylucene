Can I shorten the typing needed to `cd` into some well know directories <body> I find myself opening a terminal and then CD'ing a lot into the same directory the path of which is very long.  This means I am cd'ing a lot and using the tab to speed things up a lot.  IT would be great if I could have some sort of link to this directory and then just cd to that so that I would be in the deep nested directory quickly.  Is this possible?  <answer97303> Sure: Create a symbolic link  precodeln -s /some/really/long/path/to/somewhere/ ~/shortcut cd ~/shortcut /code/pre  <answer97310> Defining an alias is a very easy way to have a short abbreviation for a longer command. Once you have your aliases right, you could create a section in your .bashrc file (or other startup file) so that you don't have to re-type these aliases for each new shell you start:   in .bashrc:   precodealias ws4='ssh qsv-rhws4' alias httpdlog='cd /var/log/httpd/' alias EC2='ssh -i BMTestEC2.pem ec2-user@xxxxxxxx.compute.amazonaws.com' /code/pre  etc.   Log out and back in (or just run code. ~/.bashrc/code) and now you can just type codehttpdlog/code and it performs the cd. Or codews4/code and it actually performs the ssh command etc.   This removes the need to create (a large amount of) empty links that will cause your home directory too look like a mess.   <answer97311> Alternatively you could create an alias.  Throw the following into something like .bashrc or .aliases  precodealias shortcut='cd ~/path/to/deep/deep/deep/directory/' /code/pre  Then make sure that whatever file it is in is codesource/coded.  My aliases are in .bashrc, which I source with this line in .bash_profile: codesource ~/.bashrc/code  <answer97312> Here is the way to deal with complex paths to codecd/code frequently.  precodemkdir ~/Links ln -s /complexpath/there ~/Links /code/pre  this will create the symbolic link  precode~/Links/there /code/pre  To use this new codeLinks/code directory efficiently, if your login shell is codebash/code just include this command in your code~/.profile/code (which is used by all Bourne style shells codebash/code, codeksh/code, codezsh/code…):  precodeCDPATH=~/Links:. export CDPATH /code/pre  This means that for every codecd/code, your shell will look within 2 directories to find a localpathname:  precode~/Links . /code/pre  You won't need to restart you session to test it, just run:  precode. ~/.profile /code/pre  which means just read my code~/.profile/code. (You won't have to put it in your code~/.bashrc/code since there is no need to repeat the same variable initialization when you don't change it.)  Once you have tested it, you will be able to restart your session ;).  From now on, everytime you will want to go to codethere/code you will have to type:  precodecd there /code/pre  <answer97491> Try using either autojump or z.  After installing either of the two, you just codecd/code around like normal and they learn your most visited directories and allows you to go to them by only typing a part of the path:  precode$ cd /very/long/path/foobar $ cd $ z foobar $ echo $PWD /very/long/path/foobar /code/pre  I prefer z of the two.  <answer97575> I like using bashmarks to easily create "bookmarks to directories" on the fly.   See the readme at:  https://github.com/huyng/bashmarks  Note: you'll need git installed in order to follow bashmark's three-step installation process: http://git-scm.com/download/mac  Good luck!  <answer97584> I highly recommend fasd which is similar to autojump and z but better IMHO. From the website:     Fasd (pronounced similar to "fast") is a command-line productivity booster. Fasd offers quick access to files and directories for POSIX shells. It is inspired by tools like autojump, z and v. Fasd keeps track of files and directories you have accessed, so that you can quickly reference them in the command line.      The name fasd comes from the default suggested aliases f(files), a(files/directories), s(show/search/select), d(directories).      Fasd ranks files and directories by "frecency," that is, by both "frequency" and "recency." The term "frecency" was first coined by Mozilla and used in Firefox (link).   <answer97849> Alternatively you can also try installing fish shell.  http://fishshell.com/  This has excellent prediction for commands. It also intelligently lets you type case insensitive without any screw up.  Downside of fish is that it has its own scripting language and they are not bash compatible.  <answer98864> All I do is type "cd " and then drag the folder from Finder into the Terminal which pastes in the full path. Perhaps not quite as elegant, but works for all folders vs a few presaved shortcuts?  <answer238170> Adding convenience symlinks is fine for a special directory or two, but very quickly it gets to be a pain to manage. A far better solution is to stronguse the environment variable codeCDPATH/code,/strong available on codebash/code and other shells for just this purpose.  codeCDPATH/code is a colon-separated list (like codePATH/code) of places to look for a directory name. It can contain both absolute and relative pathnames. I have mine set to something like codeexport CDPATH=".:..:$HOME/work/repos:$HOME/projects:&lt;etc&gt;"/code.   With this set up, I can type codecd pdftools/code emfrom anywhere/em and it will take me to code~/projects/pdftools/code. (With a symlink, I'd have to type codecd ~/pdftools/code if I wasn't in my HOME directory.) I can also shortcut into subdirectories: codecd pdftools/bin/code.  The code../code in my codeCDPATH/code lets me type codecd sisterdir/code instead of codecd ../sisterdir/code, etc. As you can expect, when I create new directories anywhere in codeCDPATH/code they'll automatically be found by codecd/code-- no need to create new symlinks or aliases.  This feature gets even nicer if you use the codebash_completion/code file distributed, e.g., with Debian systems. It didn't come with my OS X box, so I fetched a copy and it works fine. (Get it with codebrew/code, or just download it manually from here.) This file defines enhancements to commandline completion, so that I can type codecd pdf&lt;TAB&gt;/code and the codepdftools/code directory is found and expanded from emanywhere/em on codeCDPATH/code.  <comment114138> This is the most elegant general solution I've seen. I typically make aliases for common destinations (like aliasing `cdora` to `cd $ORACLE_HOME` and such…) <comment114142> → Mike: thanks ☺. <comment114303> I have several (bash) scripts that do small (related) tasks like cd'ing to a github project and running `git status`. I also have some aliases in my `.bash_profile`. Not exactly what you're asking for, but related. <comment114647> don't know about autojump but 'z' script rocks! <comment115685> Would anyone be interested by a simple equivalent through the Finder interface?