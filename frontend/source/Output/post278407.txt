Are ARDAgent permissions really safe? <body> I'm running on emEl Capitan/em strong10.11.6/strong, patched with the latest security updates at the time of writing.   I recently ran a permission repair on the root volume:  codesudo /usr/libexec/repair_packages --verify --standard-pkgs //code  I noticed the following log entry:     Warning: SUID file 'System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/MacOS/ARDAgent' has been modified and will not be repaired.   Intrigued, I investigated on the binary, and landed on this page (amongst others).   This made me a little paranoid, so I searched again, and found this page, where the accepted answer reassures me that emDisk Utility/em likely doesn't "know" the file has been patched for security reasons.   As I'm a little stubborn, I checked the actual ownership/permissions for that binary on my system:  code-rwsr-xr-x  1 root  wheel   1.1M Mar  6 19:15 ARDAgent/code  Looks like group (emwheel/em) emand all others/em can execute the binary.   My question: is that actually safe, for an application vulnerable to arbitrary/malicious and escalated code execution?  Shouldn't I at least codechmod/code it to codea-x/code?  <answer278439> strongtl;dr There does not seem to be anything unusual, or inherently unsafe, with your ARDAgent executable or its permissions. Your proposed fix will in fact make your system a tiny bit safer but might do more harm than good. It’s probably not worth it./strong  With codechmod a-x/code, the gain in security would be really small; a software update might simply reset the flag, leaving you with a false sense of security; you’ll definitely break ARD; you might also forget to re-enable SIP, or even break future system updates.  h2What has happened/h2  Let’s first summarize what has happened with respect to ARDAgent in the past.  ul liBack in 2008, the OSA libraries (a part of Mac OS X) had a root privilege escalation issue (CVE-2008-2830), which would allow attackers to execute arbitrary AppleScript using a privileged app./li liOne popular way to demonstrate CVE-2008-2830 was to use the ARDAgent app as a confused deputy to execute arbitrary AppleScript code with elevated privileges./li liThat exploit was possible because ARDAgent used the OSA libraries (containing the bug at that time) emand/em because it is designed to run with superuser rights./li liThe SUID warning message by Disk Utility is very likely caused by a minor oversight introduced with OS X 10.5. The SUID warning used to bother Mac users as early as 2007; first reports appeared on the day 10.5 was released, and CVE-2008-2830 had not even surfaced. So I don’t think the warning has anything to do with the bug, the exploit, or with Apple’s subsequent patch./li liAt present, CVE-2008-2830 has been fixed for almost a decade. I haven’t seen reports since on any other vulnerability involving ARDAgent./li /ul  h2Your threat model/h2  All that history aside, let’s move on to clarify the threat scenario you most likely have in mind; feel free to edit your question in case I’m wrong.  ul liFor the sake of threat modeling, let’s assume that ARDAgent 3.9.2 (the version that ships with El Capitan) has emanother/em unrelated vulnerability, one that is not publicly known as of today but might be discovered and exploited by an attacker./li liIn the worst case, that vulnerability would be a remote code execution (RCE) issue; an attacker might then be able to exploit the bug over the network to gain code execution (due to the bug) and  superuser privileges (due to the setuid bit) in one go. strongThis is a somewhat realistic threat./strong/li liIf the attacker already has local code execution with normal privileges, escalation can probably be achieved by the same means./li liWe’re not interested in an attacker that already has superuser privileges in the first place; such an attacker would have complete control over the entire system already, and would not gain anything by attacking ARDAgent./li /ul  h2Risk mitigation/h2  If you run codechmod a-x/code against the executable as per your suggestion (which is only possible with SIP disabled), the attacker loses: codelaunchd/code will no longer run the agent, and the local attacker won’t either. You have successfully reduced the attack surface – albeit only by a small fraction.  h2Impact of the fix/h2  On macOS, there are strongmany processes with superuser privileges,/strong be it with or without setuid. The fact that there was a bug in ARDAgent one decade ago does not make it inherently any less secure than the other programs. strongOn average, other processes are just as likely/strong as ARDAgent to have an undiscovered critical vulnerability.  You will stronglose Apple’s remote desktop features/strong (if you have them enabled). You might also run into a random strongfuture macOS update failing/strong because the flags might have become part of a pre-update signature assertion (not unlike the SUID warning a decade ago, but this time Apple might choose to make it an error). Chances are you’ll have forgotten your fix by then so you’d have to reinstall.  Even if the system updates work, they might simply reset the execution bit when shipping the next version of ARDAgent, strongleaving you with a false sense of security./strong  There’s also the risk of strongforgetting to re-enable SIP/strong (which will introduce much more risk than you have just mitigated). And lastly, there’s a small risk of making an inconspicuous little mistake while codechmod/codeding, for example coderwsrw-rw-/code – which means every user gains no less than root privileges for free.  h2Alternatives/h2  A few suggestions to mitigate risk in a safer way:  ul listrongReduce the attack surface by disabling services you do not need./strong While this might not always protect against escalation attacks (an attacker with local code execution might just launch the agent directly), it will help prevent RCE./li listrongRe-enable SIP/strong if it’s disabled, and strongleave it enabled./strong/li listrongSearch for, and remove,/strong non-system files owned by root that have setuid/setgid bits set without good reason. If you absolutely need to leave the bits enabled, make sure the files are never group- or world-writable./li /ul  <comment350382> Thank you for the elaborated answer.