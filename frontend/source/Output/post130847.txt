A faster alternative for arrow keys? <body> When editing texts, left and right arrow keys are frequently used. But it takes quite some time to move your right hand from the letters section to the arrow keys.  I used to use a Sony laptop, on which I could press "fn" with my left hand and then press "u" and "o" with my right hand to achieve the functions of "left arrow key" and "right arrow key", so my right hand seldom moved away from "jkl;". Neat.  Is there a similar resort on Mac?  Thanks!!  <answer130848> You can use this :  ul likbdctrl/kbd+kbdA/kbd: beginning of line./li likbdctrl/kbd+kbdE/kbd: end of line./li likbdctrl/kbd+kbdU/kbd: delete from cursor to beginning of line./li likbdctrl/kbd+kbdK/kbd: delete from cursor to end of line./li likbdctrl/kbd+kbdW/kbd: erase word to the left./li likbdctrl/kbd+kbdT/kbd: transpose characters around cursor./li /ul  <answer130849> You can map menu entries to keyboard shortcuts.      So if your favourite editor has something prepared, then you can do   this.   Go to codeSystem Preferences &gt; Keyboard &gt; Shortcuts/code, and add go to the entry codeApp Shortcuts/code.     So i think it depends on your favourite editor. strongWhen you can jump   there from word to word, its even cooler then to just move the cursor/strong.   I can recommend Sublime Text 2/3 for this.  <answer130853> You can use strongBetterTouchTool/strong http://www.boastr.de to globally assign keyboard shortcuts. However You can't assign kbdfn/kbd key.  img src="https://i.stack.imgur.com/ErHRc.png" alt="enter image description here"  <answer130861> kbdctrl/kbd+kbdB/kbd and kbdctrl/kbd+kbdF/kbd are the same as left and right arrow in cocoa apps.  <answer130864> I use KeyRemap4MacBook on my unibody mid-2010 MacBook, which I think was the first series built after they stopped including the numpad mode. The site says the software works for all Macs, so you could probably use it to create a mapping that works for you.  <answer130885> You could use a text editor that supports vi mode.  vi is a unix text editor that is controlled without a mouse and therefore has very capable keyboard shortcuts, not just to move around whithin a text, but also to quickly edit text.  Many modern text editors that are geared towards programmers have implemented a "vi mode," which means you can turn on all those powerful shortcuts. I learned how to use vi mode when programming, but I have come to absolutely love it in any kind of text editing. It takes quite a while to really be comfortable with all of the shortcuts, but once you are, your productivity skyrockets!  Here are just a few of the powerful keyboard shortcuts that vi mode provides:  ul lijump to the end/beginning of a word/li lijump to the en/beginning of a line/li lijump to a certain character/li lidelete the current word/li ligo to the beginning/end of the document/li /ul  My favorite editor that has vi mode is Sublime Text 3. You can evaluate the full version for as long as you like. To enable vi mode follow this link: enabling vi mode  Here are a couple of interactive tutorials that teach you vi shortcuts:  ul liopenvim/li livim-adventures/li /ul  <answer131039> Many OS X text views support a few Emacs style shortcuts like:  ul licontrol-p moves up/li licontrol-n moves down/li licontrol-b moves left/li licontrol-f moves right/li /ul  To see a full list of the shortcuts, run codeplutil -convert xml1 /System/Library/Frameworks/AppKit.framework/Resources/StandardKeyBinding.dict -o -|pl|grep -v noop:|ruby -pe '$_.gsub!(/[^ -~\n]/){"\\U%04x"%$&amp;.ord}'/code.  You can use KeyRemap4MacBook to make the Emacs style shortcuts work in more places:  precode&lt;?xml version="1.0"?&gt; &lt;root&gt;   &lt;appdef&gt;     &lt;appname&gt;EMACSMODEIGNORE&lt;/appname&gt;     &lt;equal&gt;com.googlecode.iterm2&lt;/equal&gt;     &lt;equal&gt;org.gnu.Emacs&lt;/equal&gt;     &lt;equal&gt;com.apple.Terminal&lt;/equal&gt;     &lt;equal&gt;com.vmware.fusion&lt;/equal&gt;   &lt;/appdef&gt;   &lt;item&gt;     &lt;identifier&gt;emacs&lt;/identifier&gt;     &lt;name&gt;emacs&lt;/name&gt;     &lt;not&gt;EMACSMODEIGNORE&lt;/not&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::P, VK_CONTROL | ModifierFlag::NONE, KeyCode::CURSOR_UP&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::N, VK_CONTROL | ModifierFlag::NONE, KeyCode::CURSOR_DOWN&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::B, VK_CONTROL | ModifierFlag::NONE, KeyCode::CURSOR_LEFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::F, VK_CONTROL | ModifierFlag::NONE, KeyCode::CURSOR_RIGHT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::P, VK_CONTROL | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_UP, VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::N, VK_CONTROL | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_DOWN, VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::B, VK_CONTROL | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_LEFT, VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::F, VK_CONTROL | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_RIGHT, VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::B, VK_OPTION | ModifierFlag::NONE, KeyCode::CURSOR_LEFT, VK_OPTION&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::F, VK_OPTION | ModifierFlag::NONE, KeyCode::CURSOR_RIGHT, VK_OPTION&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::B, VK_OPTION | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_LEFT, VK_OPTION | VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::F, VK_OPTION | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_RIGHT, VK_OPTION | VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::I, VK_CONTROL | ModifierFlag::NONE, KeyCode::TAB&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::D, VK_OPTION | ModifierFlag::NONE, KeyCode::FORWARD_DELETE, VK_OPTION&lt;/autogen&gt;   &lt;/item&gt; &lt;/root&gt; /code/pre  This would map fn-U to the left arrow key:  precode&lt;autogen&gt;__KeyToKey__ KeyCode::U, ModifierFlag::FN, KeyCode::CURSOR_LEFT&lt;/autogen&gt; /code/pre  See https://pqrs.org/macosx/keyremap4macbook/xml.html.en or http://osxnotes.net/keyremap4macbook.html for more information.  <answer223972> I use AutoHotKey to remap the keys.   I use the Capslock key which in other cases is a totally lost of space on a keyboard except for people who still write everything in upper case.  Now, Capslock is just at a couple of millimiters of my left pinkie with the combination of a couple of other keys to do some useful functions like remapping the arrow keys with j,i,k and l.  The only downside for me of this method is that each time that you press the Capslock key to do some shortcuts, the led of the keyboard goes on and off. If I find a solution to deactivate this led, I will let you know. Since last week, I have the Cooler Master NovaTouch TKL and there is not led at all. Therefore, I will postpone this visual problem. :)   Here is the part of the script to do this replacement:  precodeCapslock &amp; j::Send {Left} Capslock &amp; i::Send {Up} Capslock &amp; k::Send {Down} Capslock &amp; l::Send {Right} /code/pre  <answer248934> The arrow keys are too far away from the home keys. What you need is to be able to use a standard arrow key configuration, but without moving your hands away from the home position.  I strongly recommend using a key remapping layer, such as this "Extend Layer":  http://colemakmods.github.io/ergonomic-mods/extend.html  By holding down a special "Extend" key (which you can define as as either Left Alt or Caps Lock), it then makes your arrow keys I,J,K,L, which is in the familiar arrow key pattern. As a bonus, you also get Home/End/PgUp/PgDn as well on nearby keys as well.   Because the pattern of keys is familiar, it is very fast to learn. The remapping takes effect at the OS level, so you can use these fast, convenient arrow keys across all applications.  I use this system and find I rarely need to move my hands from the home position.   <comment153546> Use emacs or vi their arrow keys use ctrl and a letter - and many other editors allow emulation of these <comment153548> Oh I meant a universal method, not confined to an app, say the textbox where I'm typing right now :] but thanks! <comment153549> Not all apps support these e.g. Firefox - I agree that any good app written to Apple's interface guide should <comment153550> @Mark it works with cocoa applications <comment153551> Thanks! But what I meant was a universal key combination which can achieve exactly the function of arrow keys, say "fn+u" does what "left arrow" does, and "fn+o", right arrow. That'd be cool:) <comment153552> I know, but so far this is the closest you can get. <comment153562> And most shells. <comment153563> In cocoa Alt-Left, Alt-Right, Apple-Left, Apple-Right also does useful actions. But yes, this all is no about OPs question at all <comment153590> Wow! This app is awesome! I assigned cmd+j and cmd+k for left and right arrow keys, so cursor navigation is now faster! Thanks a lot Mateusz :] <comment153592> Didn't try this, but thanks! I'm using BetterTouchTool recommended by @mateusz, which is very good :] <comment308689> Emacs motion key bindings are honored in most parts of OS-X. CTL-F/CTL-B move forward/backward one char; CTL-N/CTL-P move vertically to the next/previous line; CTL-A/CTL-E move the the beginning/end of the current line; CTL-D deletes to the right.