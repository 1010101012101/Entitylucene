kernel_task consuming a lot of memory, can't finish my computations <body> I am running a computational process that requires several GBs of memory. When my process consumes about 11Gbs, Activity Monitor shows me that codekernel_task/code consumes more than 20Gbs thus making my system run out of memory. I need my process to finish the computation, but with codekernel_task/code eating all the memory, the process will not finish in any reasonable time. Why is codekernel_task/code consuming so much memory and is there a way to let it know not to? Hibernation is OFF, opening windows on restart is OFF.  My system: OSX 10.9.2, 32Gb of RAM  <answer130903> The kernel_task process in question is likely your process running.   You can try freeing up "inactive memory" with the purge command in Terminal, just type codepurge/code and hit return when the inactive memory gets to be a good percentage of the used memory.   You can also try running your process without the gui, or without the window server running. This will free up memory and processor resources.  ul liSet your login window to require name and password from the accounts control panel in system preferences, turn off auto login if enabled. /li liThen reboot to free up memory./li lifrom the login window (if set as username/password) type code&gt;console/code in the name field, hit enter, and when the window server quits.../li lilog in at the console, shortname &amp; enter password when prompted/li litype codescreen/code and hit return/li /ul  screen man page - so you can have another term to watch with codetop/code; will use less resources than running gui. codecontrol-a then c/code to create new terminal, codecontrol-a then n/code to move between the two scrreens  run your process in one, run codetop -u -s5/code to run a utility like activity monitor so you can monitor your process  when done, just codeexit/code out of both screens, and then codeexit/code out of the console to launch the window server and return the login window and back to gui   <comment153601> Could you expand on what exactly that computational process is doing? - especially which types of system calls does it use? - I'm assuming that you don't have the problem on every boot, but just when running that program. <comment153644> the kernel_task is likely your process. You can try freeing up "inactive memory" with the [purge](https://developer.apple.com/library/mac/documentation/darwin/reference/manpages/man8/purge.8.html) command in Terminal, just type `purge` and hit return when the inactive memory gets to be a good percentage of the used memory. <comment153839> @jksoegaard the process reads in a file of ids and their frequencies, and builds Huffman codes for these ids. It puts all ids-frequency pairs onto a heap and builds a tree by pull things of the heap. There may be tens of millions of these ids, so the tree may get pretty big. <comment153840> I see my process separately (`huffman`) and it takes 10-12Gb, `kernel_task` takes up to 20Gb on top of that. I will try purge Monday :) <comment153841> I run the process from a command line already, it has no gui (see comment to the original post). However, I'll try running w/o the window server. Thanks for the tip! <comment153848> @lynxoid you misunderstand! You're likely originally running within Terminal, that's in a window, outside the window are other windows, menu bar, task bar items, menues, icons, Desktop, Dock. That is what we call the Graphical User Interface, aka GUI - Console Mode runs without the overhead of the ENTIRE GUI, no windows, no window server, the loginwindow process, no Finder, no Menus, no Pointer, no Dock. Its a considerable amount of resources and memory that were tied up in the GUI that your process and the kernel task have access to because they're not being used. See my answer above. Thanks. <comment153912> @lynxoid you forgot to mention which system calls your program uses? try tracing it to see what kind of kernel-interaction happens... this will lead you on track to discover why kernel_task takes up that much memory <comment175151> You meant a window manager for the OS - I got it, thanks for your answer. <comment175152> What resolved the problem was simply restarting the machine a couple of times. Not sure why this worked :)  I can not reproduce it anymore, so I'm happy.