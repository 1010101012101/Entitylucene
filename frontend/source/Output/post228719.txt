Setting Terminal tab names in OS X and using vim <body> I regularly ssh into a Linux cluster from an OS X (El Capitan) Terminal, sometimes with multiple Terminal tabs. I use bash and vim.  I'd like to do the following:  ul liwhile ssh'd, set the Terminal tab title to the current working directory using codePROMPT_COMMAND='printf "\e]1;"`basename $PWD`"\a"'/code/li liwhile using vim, set the Terminal tab title to "vim — FILENAME"/li /ul  Here are my problems:  ul liIf I do codelet &amp;titlestring = "vim — " . expand("%:t")/code and codeset title/code in .vimrc, it changes the Terminal emwindow/em title, not the tab title. If I do not separately set the tab title (parameter 1), the tab title mirrors the window title (parameter 2), but as soon as I set the tab title, it "decouples" from the window title./li liIf I run an external command in strong.vimrc/strong with code:!/code, I get a "Press ENTER" dialog that's annoying./li liIf I use code:silent !/code in strong.vimrc/strong, my Terminal prompt ends up at the bottom of the screen after exiting vim. I emreally/em don't want to muck around with saving the prompt position and resetting it every time I want to use vim./li liIf I define in my strong.bashrc/strong the following function:  precodefunction vim {     printf "\e]1;"`basename "$1"`"\a"     vim "$1" } /code/pre  then my terminal emcrashes/em upon calling codevim/code from the command line. Calling the function codevvim/code instead works, but I don't want to type codevvim/code forever. I want to alias codevim/code./li /ul  So I seem stuck. Any advice would be much appreciated. Thank you in advance!  <answer228747> Well, I've solved my own problem. I fail programming 101.  By defining vim as a function and then calling vim, I set up an infinite recursive loop. No wonder my terminal crashed. I need to call the "real" vim, the actual executable. This did the trick:  precodefunction vim {     printf "\e]1;"`basename "$1"`"\a"     /usr/bin/vim "$1" } /code/pre 