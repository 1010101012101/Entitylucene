What is the relationship between `launchctl limit` and `ulimit`? <body> There is not any ulimit configuration in system startup files/ shell startup scripts.  codeulimit -a/code shows:  precode-u: processes                       1064 -n: file descriptors                256 /code/pre  codelaunchctl limit/code shows:  precodemaxproc     2048           2048            maxfiles    2048           2048 /code/pre  I vaguely remember that launchctl's limits should match with a shell's ulimit output, I might be wrong.  Is there any relationship between the lauchctl's limits and ulimit?  <answer116754> In the shell, ulimit provides "control over the resources available to the shell and to processes started by it" (see codeman bash/code). Therefore, it applies only to the shell and its children. The limits for launchd are related to it and the processes that it manages. The two are separate.  Individual programs can set their own resource limits by calling the Standard C Library routines codeulimit()/code or codegetrlimit()/code and codesetrlimit()/code. Certain resource limits cannot be elevated unless the process is running as the super-user.  As a practical example, I debug large software projects and the shell's default limit for the number of open files isn't big enough. In my .bashrc file, I have the following:  precode# Increase the upper limit on the number of open files: ulimit -n 1024 /code/pre  Now my debugger won't complain that it can't open all the files it needs. Obviously, this should have no impact on launchd.  <comment136460> Do you not get satisfactory answers from the commands' man page? <comment136461> @AndrewU. launchctl manual page does not mention limit, ulimit manual page does not mention launchctl or launchd. <comment137146> To elaborate on that: default ulimit settings are derived from `launchctl limit`; although user may change ulimit numbers, however they may not exceed `launchctl limit` hard limits. <comment215679> this will be reset on reboot