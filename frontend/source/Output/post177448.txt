stty device baud-rate resets once no longer being used <body> -late 2013 MBP, with Yosemite 10.10.2 While using a USB -- Serial cable(FTDI chipset), I am unable to get a set baud-rate and get it to stick while the device is not being open/wrote/read.  For example:  If I execute, "stty -f /dev/cu.xxxxxxxx 19200" while not doing anything software related with it, it will reset the baud back to 9600 instantly after.   However, if I run "cat -u &lt; /dev/cu.xxxxxxxx" and THEN set the baud to 19200 while the cat is running, the baud rate will stick. This is also the case when I write some test code and execute the C system command open("/dev/cu.xxxxxxxx") and freeze the program.   Under the old BSD roots, this seems to be standard behavior. When I attempt this on a Debian box, the baud-rate sticks. This hints to me that it's system dependent, but is there a way to get the baud-rate to be the default/stick forever?  <answer195681> For anyone who may later stumble upon this, I was not able to find any trick to help keep a set baud-rate "stick" using codestty -f /dev/cu.xxxxxxxx 19200/code. I ended up writing a simple little C program that would codeopen()/code and codesleep()/code indefinitely while I performed any other bash magic, which effectively emulated what I originally wanted.  <comment209870> The stty -f is for Open and use...so if nothing is open it will default to standard. <comment209936> Well yes, I noticed that too under the stty man page for OS X, but the Debian stty man page indicates the same exact thing too. If OS X wants to use default settings when using the -f flag, is there a location where the defaults can be set per device? I would hate to have to run C system() commands in order to easily set this.