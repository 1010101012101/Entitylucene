How to create pkg which installs files to /usr/local <body> I tried using Whitebox's Packages to create an installer for a LaunchDaemon. The daemon calls a shell script, which itself sources a configuration file.  So what I would like is an installer which installs:  ul li/Library/LaunchDaemons/my_daemon.plist. (This is not a problem)./li li/usr/local/bin/myscript.sh/li li/usr/local/etc/myscript.conf/li /ul  I cannot find how to specify the destination path of /usr/local.   Packages doesn't let me edit the destination of these 2 files, and seems to want to install to "./myscript.sh" and "./myscript.conf", even though it did let me define the absolute destination for the .plist file in /Library/LaunchDaemons.  I guess I could write a postinstall script which creates the directories if needed and copies the files there. But isn't there a better/simpler solution which I am overlooking?  In other words, how can I create a .pkg installer which lets me specify absolute directories for some files, and which creates these directories during the install if needed.  Is a postinstall shell script the only solution, or is there a way to have Packages do things automatically, or is there some other package-creation app which would be more practical for this?  <answer135706> code/usr/local/code doesn't exist by default. You have to create it using strongTerminal/strong in order to use it as a destination path. Open strongTerminal/strong and enter the following command (triple click it, copy it, and paste it into your prompt). Enter your password when prompted:  precodesudo mkdir /usr/local/{,bin,etc}; chmod -R 775 /usr/local/; chown -R root:admin /usr/local; exit /code/pre  The first part makes the directory and sub-folders, the second modifies its permissions, and the third modifies ownership.  <answer135731> Rather than using a script to create /usr/local and its subfolders, include them as part of the package's payload. That is, create a prototype "local" folder with "bin" and "etc" subfolders, and your script and conf file in them. Set the permissions correctly (root:admin, 755 for all but the conf file, 644 or maybe 664 for that). Then create an installer package that places that whole folder structure in /usr.  Note that if /usr/local (and some subfolders and files) already exist, the installer will simply merge your package's payload with what already exists (i.e. it does exactly what you want).  <comment160836> "I cannot find how to specify the destination path of /usr/local." Within the daemon? Additionally, confirm that the /usr/local/ directory exists. Although it's included in your $PATH by default, it doesn't exist by default. <comment160850> I hoped the installer would create the directories if needed, but it doesn't even let me specify them. <comment160890> Thanks, but I know all this, and could write a shell script which does everything needed. I edited the question to make it more clear. <comment160892> ***triple click it, copy it*** -- I did not know that. +1 <comment160910> The above can be shortened quite a bit by using `sudo mkdir -m 775 -p /usr/local/{,bin,etc} ` and accepting that root:wheel is more or less the same as root:admin. <comment160949> @Asmus I like the shortening, much tidier, but I don't understand how root:wheel is equivalent to root:admin in practice. <comment161001> @njboot Well, as long as you're an admin user (which in a "normal" setup is equivalent to being able to `sudo`) you can do whatever you want with these folders anyway; for non-admin users ("staff") both :wheel and :admin are restrictive in the same way. The major difference is whether an admin user has to type their password or not. If a file is not meant to be touched "by accident" using root:wheel is the safer way, that's also why most Apple-provided apps are setup as root:wheel. If it's only meant to be touched by admins, you could also be the owner yourself. <comment292800> You mean "places that whole folder structure in /usr/local"? Not in "/bin", right? <comment292840> @ThomasNilsson I corrected it; thanks! <comment310331> @mivk did you get any solutions for this problem?