Run a script before shutdown <body> I want to run a script every time when I shutdown my computer. I know this is maybe a duplicate and I really read a lot of similar threads but either the answer isn't working anymore or I don't see how the answer is working.  I already figured out that apple wants me to use codelaunchd/code. Most of the other solutions don't work anymore anyway.  So I found this answer but as far as I see codelaunchd/code does everything when the system starts. I will copy the code below  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt; &lt;key&gt;Label&lt;/key&gt;&lt;string&gt;boot.shutdown.script.name&lt;/string&gt;  &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt;   &lt;string&gt;SCRIPT_PATH/boot-shutdown.sh&lt;/string&gt; &lt;/array&gt;  &lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt;  &lt;key&gt;StandardOutPath&lt;/key&gt; &lt;string&gt;LOG_PATH/boot-shutdown.log&lt;/string&gt;  &lt;key&gt;StandardErrorPath&lt;/key&gt; &lt;string&gt;LOG_PATH/boot-shutdown.err&lt;/string&gt;  &lt;/dict&gt; &lt;/plist&gt; /code/pre  and the script  precode#!/bin/bash function shutdown() {    # INSERT HERE THE COMMAND YOU WANT EXECUTE AT SHUTDOWN OR SERVICE UNLOAD    exit 0 }  function startup() {    # INSERT HERE THE COMMAND YOU WANT EXECUTE AT STARTUP OR SERVICE LOAD    tail -f /dev/null &amp;   wait $! }  trap shutdown SIGTERM trap shutdown SIGKILL  startup; /code/pre  Unfortunately there is no tutorial for codelaunchd/code which include very basic explanation. So for example the arguments of the key brackets are more than just strings they trigger something but I can't find a list of which words trigger which action.  I would like to understand the basic idea of codelaunchd/code. Especially which are the commands for running a script when the systems starts and when the systems shuts down.  <answer283769> I think I would approach this differently to what you're doing, but then again my suggestion is a bit of a workaround compared to what you want.  My approach would be to have your script set up so that it triggers the shutdown as part of its code. In other words, instead of having the Shutdown trigger the script, have the script trigger the shutdown.   The advantage of this is that you can use this as your usual shutdown option if you want, but if you ever need to shutdown without also running your script you can (e.g. if you're having to shutdown multiple times for troubleshooting purposes, or if an installation automatically shuts down your Mac, etc).  If this is an acceptable option for you, then the Applescript code you need is as follows:  precodetell application "Finder" to shut down /code/pre  In other words, you effectively need to add the above code to whatever your script is.   Once your script works as you want, I would then create an Automator Service that runs it. This isn't mandatory, but it does mean you'll be able to run your script from the Application menu of strongany/strong application. And, it also means you can create a keyboard shortcut to trigger it.  If either or both of these options interest you, proceed below.  strong1. Create a service using Automator/strong  ol liLaunch Automator (usually found within your Applications folder)/li liGo to File  New/li liSelect Service and click Choose/li liIn the top right hand of the window that appears, ensure that "No input" is selected from the emService receives/em drop-down list/li liEnsure the emIn/em drop-down list is showing "Any application"/li liIn the second column containing the long list, find "Run AppleScript" and double-click on it/li liThis will add the Run AppleScript window on the right/li liNow, strongreplace/strong the (* Your script goes here *) with your script /li liSave the service using a meaningful name (e.g. ShutMeDown)./li /ol  Now you should be able to run the service (and therefore your script) from emany/em application by going to the Services list within any Application menu (e.g. Finder  Services, Safari  Services, TextEdit  Services, etc) and select the service you just created.   If you'd also like to set a keyboard shortcut to trigger things, proceed below.  strong2. Creating a keyboard shortcut/strong  ol liGo to System Preferences  Keyboard  Shortcuts/li liSelect Services from the sidebar/li liFind your service (it'll be in the list on the right-hand side)/li liAdd a shortcut by double clicking on the service name/li liNow go to System Preferences  Security &amp; Privacy  Privacy/li liSelect emAccessibility/em in the sidebar/li liClick on the + sign (you may need to unlock the padlock if it's locked)/li liAdd Automator./li liAdd Finder (to find this you will need to navigate to em/System/Library/CoreServices/Finder.app/em)./li liExit your System Preferences./li /ol  Now you should be able to use the keyboard shortcut to run the service (and therefore your script).  strongNOTE:/strong I am aware that for emsome/em users keyboard shortcuts do not seem to work even though they've been assigned to a service. This is a whole other topic, but if this happens in your case, at least you can run the service from within any application you're using.  If you decide to give this approach a go, feel free to comment me if you have any questions/problems.  <answer284017> I will tell what I figured out so far:  As mentioned in this Run script before shutdown you can use a codelogouthook/code to achieve the goal. However, apple stopped the support of coderc.shutdown/code and maybe will do the same to codelogouthook/code. The alternative apple is offering is codelaunchd/code but I couldn't find a command which let me execute a script just before logout.  codelaunchd/code works fine as substitute for a codeloginhook/code or codecronjobs/code. Nevertheless there is a workaround so that you can use it instead of a codelogouthook/code. The solution is already posted in my question. I just want to mention how it works:  In fact the script will be executed when the computer launches but the codetrap/code command waits for the shutdown signal so that the desired function will be executed when the signal is sent.  <comment357813> I recommend reading `man launchd.plist ` https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man5/launchd.plist.5.html#//apple_ref/doc/man/5/launchd.plist <comment357815> What version of macOS are you running? <comment357816> macOS 10.12.4 Sierra <comment357817> @MateuszSzlosek this list is very helpful! I still want to know which command is responsible for the moment the job will be done. <comment357819> Consider the approach provided in this question and accepted answer – https://apple.stackexchange.com/questions/107366/run-script-before-restart-shutdown <comment357822> @NathanaelSkrepek if your plist is in the right place it will be loaded automatically when you log in. If you're asking when the shutdown script is called, please check the Signals and Traps http://linuxcommand.org/wss0150.php in your case, SIGTERM or SIGKILL will fire shutdown function. In my opinion it is not very efficient way to run script on shutdown. Check the answers provided by Graham Miln. <comment357853> Well I thought that the launchd will run the script when the system is launching (as the name is suggesting) so I don't understand how this will run a script before a shutdown. That's why I was asking for the basic idea of `launchd` -- how does it work <comment357875> @GrahamMiln this is not a duplicate of the thread you linked because the answer in this thread is using logouthooks. If you read the first line of this https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html you will see that it is recommended to use `launchd` and since apple says so I would like to know to do use them. <comment357986> @NathanaelSkrepek Ask Different tends not to be a good place for general explanations of tools and software. These types of questions are typically considered too broad to attract specific answers and are closed. <comment358163> `SIGKILL` isn't catchable. The script is flawed. <comment358168> it still works. okay this means that i can delete this line :)