What to do about recent remote code execution vulnerability in git (on El Capitan) <body> The recent remote code execution bug in git looks pretty serious. The way I read this is that if I'm running a git client prior to 2.7.1, I'm susceptible to remote code execution if I use git to interact with a malicious (or compromised) repo. It seems like a manual upgrade of the git client is in order, but rootless prevents things like brew from working. (I'm currently on the latest stable Xcode 7.2.1)  What's the best way forward under El Capitan? Turn off rootless and install with brew? Install an updated git client from source? (latest stable binary appears to be prior to 2.7.1) Is there an updated git client in a newer version of Xcode?  <answer231347> Brew doesn't ever work to replace or patch an OS version - it's consciously designed to only put binaries beside those from Apple and not in place of.  If you want to make sure that no program calls Apple's code/usr/bin/git/code or you don't call it, then these steps will accomplish that goal of hardening your 10.11 installs:  ol liRun OS X Recovery by holding down Command-R while the Mac is starting up./li liUse the Utilities menu to run Terminal/li licodecsrutil disable/code/li lireboot/li liEnter single user mode by holding Command-S while the Mac is restarting./li licodemount -uw //code/li lirm /usr/bin/git/li lihalt/li liRepeat the OS X Recovery step and open Terminal and run codecsrutil enable/code/li lireboot/li /ol  At this point, the codegit/code from Apple is removed.  Search for other codegit/code binaries:  ul licode/Library/Developer/CommandLineTools/usr/bin/git/code is 2.5.4/li licode/Applications/Xcode.app/Contents/Developer/usr/bin/git/code is 2.5.4/li /ul  You are at very slight risk since you only ran without SIP in single user mode long enough to remove the one binary. You can also get git 2.7.4 from brew as of March 18, 2016 if you like:  precodebrew install git git --version /code/pre  You'll want to watch all OS X updates to be sure they don't pop another copy of codegit/code that's patched lower than you wish. For most people, I would focus on only connecting to servers that are patched and/or known to be not malicious. Just having the git sitting there is low risk in my read of the situation.  Some other threads of interest:  ul liUse downloaded Git instead of preinstalled Git/li liSecurity update for git on mac/li liHow to properly update git on mac?/li /ul  <answer231366> I don't have any workflow wherein other tools are calling git so I'm ok with simply installing a patched version and using that.  I did the following:  ul liCloned from the official git repo/li liInstalled with codemake &amp;&amp; make install/code/li liAnd prepended ~/bin to my path in .profile/li /ul  That should work fine for me I think.  As for only interacting with trusted sources --sure, that's ideal, but there's no excuse to use a known vulnerable piece of software. There are plenty of examples of trusted sources getting compromised. Having a codegit clone/code actually able to execute arbitrary code is undesirable in my view.  <answer231368> If you use Homebrew it's pretty easy:  precodebrew upgrade git which git =&gt; /usr/local/bin/git git --version =&gt; git version 2.7.3 /code/pre  Done.  <comment282489> Could you edit this to narrow down what you seek to do? Remove the git client binary? Put a new one in your path? What is your setup. Are you serving git repos? Using Xcode? Or are you just looking for someone to say that out of box ElCapitan don't listen to git and aren't hackable? <comment282528> Updated. Current stable git client (in xcode and stable binary from git-scm) appears to be prior to 2.7.1 and has a remote code execution vulnerability. Seeking guidance about the best way to manually update the git client to a non vulnerable version under El Capitan. <comment282531> Thanks for the edit. Wikipedia's definition of RCE is triggering code execution remotely - so using git client to pull code from a malicious repository seems lower than RCE in my book. Nevertheless - assuming you just want to know how to avoid using a vulnerable git client until/if Apple patches it, let's open this for now and see what comes up. <comment282537> Does Xcode search in `/usr/local/bin` at all? <comment282540> I can test that @patrix in a bit. My recollection is that it packages it's own git, so perhaps someone that wants to eviscerate all old git binaries needs to search more thoroughly than just in `/usr/bin`. Specifically the current command line tools have `/Library/Developer/CommandLineTools/usr/bin/git`at 2.5.4 <comment282544> So to protect a developer system these git binaries need to be replaced as well I assume (there is `/Applications/Xcode.app/Contents/Developer/usr/bin/git` and `/Applications/Xcode.app/Contents/Developer/usr/libexec/git-core/git` in Xcode, also tools like Github.app or SourceTree.app include their own `git`). So protecting a system will require more than just disabling `/usr/bin/git`. <comment282546> I've found `ls -dl $(locate 'git' | grep '/git$')` useful to find the various `git`'s in the system. <comment282552> Yup @patrix - it's a bit of a zoo with git being embedded in lots of places. I could easily see people with half a dozen versions between brew, Apple and a couple of utilities to visualize git repos. <comment283138> I don't know why this isn't getting more votes. Homebrew was updated a long time ago now and works fine with Rootless in El Capitan; `/usr/local` and `/Library/Caches/Homebrew` are not protected filesystem locations: https://support.apple.com/en-us/HT204899 ("Paths and applications that third-party apps and installers can write to include: `/Applications`, `/Library`, `/usr/local`"). <comment283139> Homebrew works fine with system integrity protection. See @CD-RUM 's answer and my comment for more details. If you're having trouble, you probably have an old b0rked Homebrew installation that didn't survive the upgrade well (this is particularly likely if you went through the beta programme). In that case, Google for ways to fix your Homebrew as it's probably the cleanest way to maintain this kind of software and manage updates.