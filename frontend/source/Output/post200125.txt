How to create an OSX Application to wrap a call to a shell script? <body> My goal is to include in a zip file what amounts to a shortcut, instead of telling my customer(s) to open up Terminal and run a shell script.  My deployable essentially looks like this:  precode$ unzip Deliverable.zip  $ cd Deliverable; ls app.jar run.sh /code/pre  Script in coderun.sh/code:  precode#!/bin/sh java -jar app.jar /code/pre  There's a lot more in the directory; suffice to say I need to run the script from the directory strongDeliverable/strong since I need to access paths relative to it.  However, I can't guarantee where a customer is going to open codeDeliverable.zip/code (could be home directory, could be right in the Downloads directory, etc.)  I found this that describes how to create a new workflow in Automator, then save it as an application to launch a shell script.  I tried to do that to wrap coderun.sh/code but it says it can't find coderun.sh/code.  Somebody suggested I use applescript and also sent me a link to how to use applescript to switch into the current directory; there's an applescript "action" in automator; so I made a new workflow with that, and saved it as an application.  This is what that looks like:  img src="https://i.stack.imgur.com/Uce1M.png" alt="the automator applescript program"  The code:  precodeon run {input, parameters}     tell application "Finder"         set current_path to container of (path to me) as alias     end tell      do shell script "java -jar app.jar"       return input end run /code/pre  And this is the error I get when I run it:  img src="https://i.stack.imgur.com/35cqm.png" alt="welcome to 2015"  C'mon, this should be pretty simple.  What I am doing wrong here?  <answer200488> Can you change coderun.sh/code to coderun.command/code and get the user to double click it?  <answer200505> I can see a couple of things wrong there.  Firstly you have opened a workflow and not an Application.  You should choose Application when you make your selection for the type of Automator file.  img src="https://i.stack.imgur.com/DqWnu.jpg" alt="enter image description here"  And the code you have will not work as you expect, since you have not changed directory. (cd).  In the code as you have it, all it is doing is getting the path as an alias and storing it in the variable  strongcurrent_path/strong and in a format unsuitable for the unix commands.  But you do not use it.  So the current directory will most likely be your home folder  At this stage there is no telling what it is trying to launch.  If I run it as you have it I get.  img src="https://i.stack.imgur.com/xuvrX.jpg" alt="enter image description here"  Which makes sense since I do not have Java installed. But if I did I would not expect it to find the right file.  The Applescript need to look like this.  precodeon run {input, parameters}     tell application "Finder"         set current_path to container of (path to me) as alias     end tell      do shell script "cd " &amp; quoted form of (POSIX path of current_path) &amp; " ;ls | open -fe"      return input end run  /code/pre  In my example  precodedo shell script "cd " &amp; quoted form of (POSIX path of current_path) &amp; " ;/bin/ls | /usr/bin/open -fe" /code/pre  I cd to the strongPOSIX path/strong of the alias in the  variable  strongcurrent_path/strong   i.e from "alias "Macintosh HD:Applications:""   to  strong"/Applications/"/strong  The codequoted form of/code  escapes the path using quotes.  I have used the strong/bin/ls/strong command and pipe it to the strongopen in TextEdit stdin/strong as a demonstration here so that you can test to see if you are getting to the area you expect.  You would use something like;  precodedo shell script "cd " &amp; quoted form of (POSIX path of current_path) &amp; " ;\"java -jar app.jar\"" /code/pre  hr  update:  A another way is just use pure Applescript.  precodeon run {input, parameters}     tell application "Finder"         set current_path to container of (path to me)          set theFile to (current_path) as alias          open file "java -jar app.jar" of theFile     end tell   end run /code/pre  <answer201061> Here is my take on what I understood you are trying to accomplish. The code is long winded on purpose.  All you need to do is copy the code to the Applescript Editor, make any changes you want and save it as an application.  As for the dialog about PowerPC application not supported, I don't know. Can you run it from the command line? I would check that to confirm the app works first.  precode# # STEP 1: locate and confirm zip file exists # #   This is long winded on purpose. It is meant to save the user some scrolling and  #   and a click... Isn't this what computers are for to save time? :) #  # Zip file name  set zipname to "Deliverable.zip"  # Locate the zip file set zippath to POSIX path of (choose folder) log zippath set qzippath to quoted form of zippath log qzippath set zipfile to (zippath &amp; zipname) set qzipfile to quoted form of (zippath &amp; zipname) log qzipfile  # Check for the file... Use either test not both :) try     # using shell test - case sensetive     do shell script "test -f " &amp; qzipfile      # using native test - doesn't like quoted forms and case insensetive...     POSIX file zipfile as alias on error     display dialog "ERROR: Zip file was not found at selected folder." as text ¬         buttons {"OK"} with icon caution ¬         with title "Alert"     return end try   # # STEP 2: Zip found. Unzip it # try     # Add " -d Deliverable" at the end to force directory       # unzip -o to force overwrite for testing....     do shell script "cd " &amp; qzippath &amp; "; unzip -o " &amp; zipname on error eStr     display dialog "ERROR: Failed to unzip file. Message returned was, " &amp; ¬         return &amp; return &amp; eStr as text ¬         buttons {"OK"} with icon caution ¬         with title "Unzip Error"     return end try   # # STEP 3: Run script  # set dpath to (zippath &amp; "Deliverable/") log dpath set qdpath to quoted form of dpath log qdpath try     do shell script "cd " &amp; qdpath &amp; ";  sh ./run.sh" on error eStr     display dialog "ERROR: Failed to launch script. Message returned was, " &amp; ¬         return &amp; return &amp; eStr as text ¬         buttons {"OK"} with icon caution ¬         with title "Deliverable Script Launch"     return end try /code/pre  <answer201309> h1Path to Script/h1  In your AppleScript, you need to change the strongcurrent working directory (cwd)/strong before issuing the java command. Do this with an AppleScript line like:  precodedo shell script "cd " &amp; quoted form of (POSIX path of file_path) &amp; " &amp;&amp; java -jar app.jar" /code/pre  The code&amp;&amp;/code is important. If the codecd/code succeeds, the codejava/code command will be launched within the right strongcwd/strong. If codecd/code fails, the codejava/code command will not be run.  Problems you will likely encounter include:  ul liescaping the POSIX path passed to codecd/code; users will have oddly named folders and spaces in their paths./li lithe codecd/code may fail; wrap up your AppleScript in a strongtry/strong block to catch some errors and warn the user./li /ul  h2perl/h2  Personally, I would wrap use a short perl script in place of a bash script.  precode#!/usr/bin/env perl  use strict; use warnings; use FindBin qw($Bin); # $Bin is a path to the script's parent folder  `cd "$Bin" &amp;&amp; java -jar app.jar`; /code/pre  There are much better ways to write this perl snippet but this should work.  h1Automator Application/h1  The best approach is to work through the problems with your Automator approach. @markhunte's answer discusses how to fix the path and create an application. This should get you most of the way.  Also see AppleScript path relative to script location.  h1appify — create the simplest possible Mac app from a shell script/h1  Alternatively, you can use Thomas Aylott's appify script to bundle your shell script into an OS X application. Mathias Bynen's article walks through how to use the script, how to create simple Mac apps from shell scripts.  precode#!/bin/bash  if [ "$1" = "-h" -o "$1" = "--help" -o -z "$1" ]; then cat &lt;&lt;EOF appify v3.0.1 for Mac OS X - http://mths.be/appify Creates the simplest possible Mac app from a shell script. Appify takes a shell script as its first argument:     `basename "$0"` my-script.sh Note that you cannot rename appified apps. If you want to give your app a custom name, use the second argument:     `basename "$0"` my-script.sh "My App" Copyright (c) Thomas Aylott &lt;http://subtlegradient.com/&gt; Modified by Mathias Bynens &lt;http://mathiasbynens.be/&gt; EOF exit; fi  APPNAME=${2:-$(basename "$1" ".sh")} DIR="$APPNAME.app/Contents/MacOS"  if [ -a "$APPNAME.app" ]; then     echo "$PWD/$APPNAME.app already exists :("     exit 1 fi  mkdir -p "$DIR" cp "$1" "$DIR/$APPNAME" chmod +x "$DIR/$APPNAME"  echo "$PWD/$APPNAME.app" /code/pre  Community contributed improvements to this script are available:  ul liappify - modified plist layout/li liappify - adds an application icon/li /ul  h2Code Signing/h2  Once you have created your application bundle, it emshould/em be code signed. A code signed app will launch without requiring your clients to disable Gatekeeper.  Code sign your application using your Apple Developer ID and the codecodesign/code command:  precodecodesign -s &lt;identity&gt; -v &lt;code-path&gt; … /code/pre     Code signing is a security technology, used in OS X, that allows you to certify that an app was created by you. Once an app is signed, the system can detect any change to the app—whether the change is introduced accidentally or by malicious code.   Learn more about code signing on the Apple Developer site.  <answer201482> Rename your .sh file to .command and you can cd to the directory that the .command file is located in with the following at the beginning of the file:  precodecd "$(dirname $BASH_SOURCE)" /code/pre  <answer293500> Use Platypus: "Platypus is an OS X developer tool that creates native Mac applications from interpreted scripts..."  img src="https://i.stack.imgur.com/SPys0.jpg" alt="Platypus is an OS X developer tool that creates native Mac applications from interpreted scripts"  <comment242707> That almost worked!  However, it ran the file from the context of the user's home directory (`cd ~`), which caused it to fail. <comment242709> Thanks for the tip on code signing; I'm looking into that now and testing the appify script! <comment242860> appify script didn't work; same path issue <comment242861> This is very close to a solution; I confirm the `ls | open` code definitely opens the directory I want, which is great.  But when I call open `Client.app`, I get: `LSOpenURLsWithRole() failed with error -10665 for the file path-to-Client.app`  - a few searches for what this error means [suggested](https://apple.stackexchange.com/questions/81330/downloaded-apps-does-not-start-error-10658) a permission issue, I checked and `+x` flags are set.    I also tried [this](http://stackoverflow.com/a/21457277/172217), and that didn't work (with same error). <comment242862> Note that opening `Client.app` from Finder (double-click) also results in the same PowerPC error pop-up. <comment242863> @emptyset  `I call open Client.app` Is this the Automator app. From what I understand  in the automator you have the applescript code: `do shell script "cd " & quoted form of (POSIX path of current_path) & " ;\"java -jar app.jar\""`.    So where are you using the `open` command ? which as far as I understand what you are doing, you do not need to use it. The clients will be using double click on the app and the app will run the java <comment242874> @emptyset I have added a path and perl section. It may also be worth separating out the path problem into a new question. If you can fix that, you can use Automator or the appify script. <comment242875> @emptyset Use $BASH_SOURCE, see http://apple.stackexchange.com/a/201482 <comment242876> I tested it both ways: from command line: `$ open Client.app` and by double-clicking.  Your version with invoking `ls | open -fe` works, but when I change it to `java -jar app.jar` it's giving me that error. <comment242880> It works!  Thanks @grgarside! <comment242881> Saw you made a separate answer so you get the bounty.  Thanks again!  :) <comment242882> @emptyset  try `do shell script "cd " & quoted form of (POSIX path of current_path) & " ; " & quoted form of "java -jar app.jar"` <comment242883> @emptyset No problem. It wasn't specifically for the bounty—I'm not really short of reputation at this point! <comment242889> Well I just posted update with a simpler applescript, but see I was beaten to the punch with an answer that should work better for you by grgarside. :-)