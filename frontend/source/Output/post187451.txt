How do I make this terminal script work properly? <body> I want it to appear like I'm contacting a bunch of ip-adresses and it works fine until the third line in the code and I want to be able to fix it. Also the 4 bottom lines don't work.  So this is basically what I've got so far:  precodefor((i=0;i&lt;=100000000;i++));      do echo "Request #" $i " returned ip-adress " [$((RANDOM%256)).$((RANDOM%256)).$((RANDOM%256)).$((RANDOM%256))];   if["$i" = "100000000"]     do echo "All ip-adresses have been stored in local hard drive." -$((RANDOM%256)).$((RANDOM%256)).$((RANDOM%256)).$((RANDOM%256));   if["$i" = "100000000"]     do echo [Process Completed]; done /code/pre  <answer187564> Don't know what you are trying to accomplish here, but doing a test for the exit condition while still being inside the loop isn't really necessary:  precodefor ((i=0;i&lt;=100000000;i++)); do     echo "Request #$i returned ip-adress" [$((RANDOM%256)).$((RANDOM%256)).$((RANDOM%256)).$((RANDOM%256))] done  echo "All ip-adresses have been stored in local hard drive." echo "[Process Completed]" /code/pre  hr  The syntax for codeif ... then ... else/code (in case you need this for something else) actually is  precodeif [ $i -eq 100000000 ]; then     echo "Got a match!" fi /code/pre  <answer187602> Two issues:  ol liYou need whitespace between "ifcode/code[" as well as "[code/codenumerical evaluationcode/code]” to execute properly. /li liThe logical syntax is incorrect. codeif/code strongx/strong; codethen/code (and only then) strongy/strong; codeelse/code strongz/strong;codefi/code;codedone/code. codeElse/code is not necessary, but you can’t declare two identical codeif/code statements like so:    ul licodeif/code strongx/strong, codethen/code strongy/strong. /li licodeif/code strongx/strong, codethen/code strongz/strong. /li /ul/li /ol  That makes no logical sense.  On the other hand:  ul licodeif/code strongx/strong, codethen/code strongy &amp; z/strong does.    /li /ul  That said, here’s what you’re looking for:  precode#! /bin/bash  for((i=0;i&lt;=100000000;i++));      do echo "Request #" $i " returned ip-adress “[ $((RANDOM%256)).$((RANDOM%256)).$((RANDOM%256)).$((RANDOM%256)) ]; if [ "$i" = "100000000" ];     then echo "All ip-adresses have been stored in local hard drive." -$((RANDOM%256)).$((RANDOM%256)).$((RANDOM%256)).$((RANDOM%256)) &amp;&amp; echo [Process Completed]; fi done /code/pre  Which, when saved as a script, codetest.sh/code returns the following:  precodeMacBook-Pro:~ njboot$ test.sh Request # 0  returned ip-adress  [ 0.84.37.68 ] Request # 1  returned ip-adress  [ 169.181.247.217 ] Request # 2  returned ip-adress  [ 164.183.119.15 ] Request # 3  returned ip-adress  [ 191.149.177.224 ] Request # 4  returned ip-adress  [ 84.28.26.92 ] Request # 5  returned ip-adress  [ 54.38.89.138 ] Request # 6  returned ip-adress  [ 86.222.217.2 ] Request # 7  returned ip-adress  [ 57.178.16.75 ] Request # 8  returned ip-adress  [ 26.22.140.245 ] Request # 9  returned ip-adress  [ 222.255.194.118 ] Request # 10  returned ip-adress  [ 188.26.150.197 ] … Request # 100000000 returned ip-adress  [ 233.66.114.134 ] All ip-adresses have been stored in local hard drive. -181.167.202.102 [Process Completed] /code/pre  <comment221591> What are you even trying to do?  This doesn't store anything to the hard drive as is.  Simply saying fix this script for me won't work if no one can guess what you are trying to accomplish.