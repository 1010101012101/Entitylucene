Run zsh alias via automator? <body> I am using zsh with oh-my-zsh in iTerm on macOS. There are some aliases defined in my .zshrc I use often, like this:  precodedeploy(){  cd ~/Path/To/My/Project;  build ...;  rsync ...; } /code/pre  To execute this, I have to switch over to iTerm and run the alias. Now I'd like to be able to do that from anywhere via a hotkey.  I've read that automator is the tool of choice.  I created an action "run shell script" and chose `/bin/zsh/' from the list of available shells.  But running my alias returns codezsh:1: command not found/code.  Am I on the wrong shell? But codeecho $0/code in iTerm gives me code-zsh/code.  How can I run my alias without being in the iTerm window? Any approach will do, Automator is just how I'm trying to accomplish it.  <answer284930> Automator runs in its own environment and does not read your shell rc files. The PATH is limited to code/usr/bin:/bin:/usr/sbin:/sbin/code. None of the environment is exported for further use. You could define the function in Run Shell Script and run it like this:  precode deploy () {  cd ~/Path/To/My/Project;  build ...;  rsync ...;  }   deploy /code/pre  Though this is somewhat limited.  <answer285531> I found a workaround without automator;  On https://apple.stackexchange.com/a/136931/60854 I read about hotkeys in iTerm. I made a hotkey in Keys  Hotkey to call iTerm to the foreground and another one in Profile  Keys  Key Mappings to enter a string codedeploy\n/code. Now I press codecmd-i cmd-o/code and here we go.  <comment359268> Well, that is a function. Normally, you would write the function in a separate file and place it in a directory defined by `fpath`. In your `.zshrc` you would `autoload` the function in order to use it. <comment359274> Oh! And then it would be available in all shells & automator, I guess. Would you say https://coderwall.com/p/ktv3hq/zsh-autoloading-functions-i which came up after following your hint would be correct? <comment359280> What do you get from `echo $SHELL`? <comment359369> `echo $SHELL` returns  /bin/zsh <comment359370> That sounds reasonable.  But I have several functions, e.g. for build and rsync. Can they be "nested" in Run Shell Script? <comment359390> @Urs Function definitions must precede their first call. Assuming that you are doing so in your script, I see no issues.