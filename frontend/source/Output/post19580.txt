What scenarios benefit from Mac OS X allowing apps to run when no document windows remain? <body> As a rule of thumb programs on Mac OS X stay running when you close all their document windows.  This is the behavior I noticed in MacVim, VmWare Fusion, Chrome and host of other applications.  I personally find this of no use and frankly quite annoying, although having had some number of experiences confirming that my opinion is not always the prevailing in a given target group, I assume that there could be a reason for this decision.  What are scenarios where this function could be useful?  <answer19581> When you are using Windows and you open an application like MS Word or Adobe Photoshop, it will open up the application window with some sort of empty background. When you do this on a Mac however, there is no background, there is simply the menu options in the very top bar. So say you had a file open in Photoshop in Windows and you closed that file, you would see the same blank application window that you saw when you started up Photoshop. On a Mac, you will see the menu in the top bar, but again, since there is no background you simply see the desktop. So really, there is no difference in the way that Windows and Mac OS X handle the applications, other than one had a visible window and the other doesn't.  The benefit of doing it the OS X way: If you DO plan on keeping the application open, it keeps you from having to minimize the app like you would in windows. All you have to do it click on something else in the background and it will make the applciation lose focus. To close it, simply right click on the application icon in the dock and choose 'Quit'.  img src="https://i.stack.imgur.com/EnkHC.jpg" alt="enter image description here"  <answer19586> The upside of this behavior is that it caters to users that wish to enjoy the difference between having to launch an entire application framework or just open a new document within an already running app.  You can set those apps to launch at log in if you have enough RAM or just a pokey CPU. The virtual memory system will sort out what pages you need swapped to disk and which can remain in RAM.   As long as the apps leak memory emslowly/em, it is a great plan to not quit any app you may use again.   It's basic performance tuning - re-use work, divide the work into chunks, get the work done before the user is waiting for it.  <answer19587> Fundamentally, OSX and Windows have different approaches to top-level windows.  In Windows, the window contains the entire application instance including the menu bar.  In OSX, the window contains the open document, which explains why you can have an application displaying only a menu bar.    Keep in mind that the handling of "empty" applications will be changing in the near future as more and more applications are updated for Lion.  The common behaviour will be that document-based applications that have no documents opened (as opposed to things like Calculator) will indicate to the OS that it can shut the app down when no documents are open.  The idea is that there will be less of a need to manage which applications are open.  See John Siracusa's detailed Lion review for more on this.  <answer20437> h1Interpretation/h1  Based on the accepted answer, I see two aspects to the question:   ul liwhether an application should run without windows/li liwhich windows should present when an application runs./li /ul  h2Automatic and sudden termination/h2  Recommended reading for any user of Lion concerned about running applications:   ul liMac OS X Application Programming Guide: The Core Application Design: The Application Life Cycle: Automatic and Sudden Termination of Applications Improve the User Experience/li /ul  A highlight:      … the system … is better equipped to handle the job. Users do not need to manage processes manually …   h3Quit quitting!/h3  If well-written applications are used, and strongif the user can break a habit of quitting applications/strong (a habit learnt from less intelligent systems) then:   ul liallowing the Lion strongsystem/strong to manage things can result in a vastly improved user experience./li /ul  It takes a leap of faith to work in this way — emwithout/em command-q — but many user reports do confirm what's suggested by Apple.   h2Shift key suppression of windows/h2  Sometimes comparable to discarding windows.   In Mac OS X 10.7 (Build 11A511): without changing global or application-specific settings for restoration of windows (a feature of the Transparent App Lifecycle (TAL)), applications respond in different ways to use of the shift key before the application is launched.   h3Examples/h3  strongNeoOffice/strong 3.2.1 Beta Patch 0 respects the shift key. If a saved file was open at quit time, then shift key before launch will suppress restoration of the window to that file. If in addition you prefer nothing at launch (a feature that's independent of the TAL) you'll get nothing.   img src="https://i.stack.imgur.com/EytYW.png" alt="screenshot of menu options in NeoOffice"  strongPreview/strong 5.5 (719) respects the key. If only saved files were open before quit, then shift key will cause Preview to present nothing, no windows.   strongSafari/strong 5.1 (7534.48.3) respects the key. If your preference for new windows is an empty page, and if you were browsing various pages before quit, then shift key before launch will cause presentation of just one window, an empty page.   strongTerminal/strong 2.2 (297) and strongTextEdit/strong 1.7 (288) behave in ways that are consistent with Preview and Safari.   For each application, a different logic may apply but essentially, at launch time:   ul lishift key should suppress something. /li /ul  strongMail/strong 5.0 (1244.2/1244.3) seems to ignore the key. If you have multiple viewer windows, the activity window and a window to a received message: all of those will be restored. This inconsistency smells buggy and should be fed to Apple; I expect Mail to present at least one window (viewer), not everything.   h3Hint/h3  Do not release the shift key too soon.   h3Side note: resuming editions/h3  Editions that were unsaved before quit are usually resumed as editions.   In some environments, editions that were unsaved before quit are not resumed. When you open any such file you should find that the system (not you) saved a version.   <answer20477> ul liApplications that take a lot of time to open can be kept running on the background even if they have no open windows/li liApplications without open documents don't have to display an empty window that covers the screen/li liYou can close the last window of an application and open a new one without having to quit and reopen the application/li /ul  <comment21483> another advantage is it reduces launch time the next time you open it. <comment21493> The fact that well-behaved mac apps don't throw up a huge canvas makes this behavior more powerful.  It's fine for a document to take the whole screen, but bad form for apps to do that simply because they are launched. <comment22562> The Ars Technica link for *automatic termination* refers to a page that is not authorised for public viewing. <comment22596> I assure you that it's a public link; I do not have an Ars account and it works for me.  Perhaps you are being redirected to a private page? <comment22614> Hi, it's within the page, the Ars Technica link for *automatic termination* refers to https://developer.apple.com/library/prerelease/mac/documentation/General/Conceptual/MOSXAppProgrammingGuide/CoreAppDesign/CoreAppDesign.html#//apple_ref/doc/uid/TP40010543-CH3-SW22 which redirects to http://developer.apple.com/devcenter/ios/unauthorized/ (unauthorised based on my membership, so I guess it's not authorised for public viewing). My answer nearby gives a link to an Apple page that's hopefully public. (An Ars Technica mistake, not yours; you have the up vote :) <comment163971> I'm curious about the recent down vote on this. A comment from the voter will help – thanks.