How to move files to trash from command line? <body> I do a lot of terminal work, and today had the experience of typing  precoderm fileInQuestion.txt /code/pre  Before finding out that I did actually need fileInQuestion.txt. If I'd deleted in the GUI then I would have just gotten it out of the Trash. I'd like to know if it's possible to overload 'rm' in the Terminal in such a way that it sends the file/files to the Trash on the way out.  <answer50847> In your .bashrc (or wherever you keep the parameters for your shell), try adding an alias that changes the behaviour of rm to moving stuff to ~/.Trash, as in:  precodealias rm='move/to/.Trash' /code/pre  This alias if far from trivial to implement (at least for me) though, because the use of mv (the prime candidate to use for this job) is  precodemv file where /code/pre  so having an alias that puts the 'where' part in front of the file to be moved might be pretty sketchy.  I'll look into it an might get more substantial advice.  EDIT:  I just tried to add the following to my .bashrc, and it works:  precodefunction trash { mv "$@" ~/.Trash ; } /code/pre  It is much more primitive than other suggestions, but you avoid installing new stuff.  <answer50849> Properly trashing stuff (so that it is definitely recoverable) is trickier than simply a codemv/code to code~/.Trash/code.   osx-trash might be what you're looking for. (emCaveat emptor/em - I haven't tried it, and cannot vouch for how safe it is.)  <answer50852> I wouldn't advise aliasing coderm/code to codemv/code as you might get in the habit of coderm/code not permanently deleting files and then run into issues on other computers or under other user accounts when it emdoes/em permanently delete.  I wrote a set of codebash/code scripts that add more Mac OS X-like command line tools (in addition to a number of the built-in ones like codeopen/code, codepbcopy/code, codepbpaste/code, etc.), most importantly codetrash/code. My version of codetrash/code will do all the correct things that aliasing coderm/code won't (and hopefully nothing bad, but I've been using it on my own Macs for a few years now without any lost data), including: renaming the file like Finder does if a file with the same name already exists, putting files in the correct Trash folder on external volumes; it also has some added niceties, like: it attempts to use AppleScript when available so you get the nice trash sound and such (but doesn't require it so you can still use it via SSH when no user is logged in), it can give you Trash size across all volumes.  You can grab my tools-osx suite from my site or the latest and greatest version from the GitHub repository.  There's also a codetrash/code command developed by Ali Rantakari, but I haven't tested that one myself.  <answer50881> While it is possible to make coderm/code move files to Trash instead of removing them, I would advise against bringing the mindset of the safety net of graphical user interfaces to the UNIX shell. There are many ways to do serious damage using the terminal. The best advise IMHO is to simply think twice before hitting the kbdenter/kbd key in a shell window.  If you want coderm/code to remind you that you are about to delete a file consider using the following alias (for code/bin/bash/code put this line in code.bashrc/code in your home directory):  precodealias rm "rm -i" /code/pre  This will make coderm/code request confirmation before attempting to remove emeach/em file.  If you have TimeMachine running (I hope so!) you can always get your file from backup. This way you can lose at most one hour of work. Which is bad enough, of course. So think again before pressing that kbdenter/kbd key!  <answer79032> I found a pretty nice code that can be added at the end of user's batch profile and causes coderm/code to move the files to the trash each time it is run.  strongnano ~/.bash_profile/strong  precode#... append at the end function rm () {   local path   for path in "$@"; do     # ignore any arguments     if [[ "$path" = -* ]]; then :     else       # remove trailing slash       local mindtrailingslash=${path%/}       # remove preceding directory path       local dst=${mindtrailingslash##*/}       # append the time if necessary       while [ -e ~/.Trash/"$dst" ]; do         dst="`expr "$dst" : '\(.*\)\.[^.]*'` `date +%H-%M-%S`.`expr "$dst" : '.*\.\([^.]*\)'`"       done       mv "$path" ~/.Trash/"$dst"     fi   done } /code/pre  source: http://hints.macworld.com/article.php?story=20080224175659423  <answer95881> A simple function could let you trash files by moving them to the user's .Trash folder:   precodetrash() {    mv $1 ~/.Trash } /code/pre  <answer162354> I have an executable called coderem/code somewhere in my code$PATH/code with the following contents:  precode#!/usr/bin/env python import os import sys if len(sys.argv) &gt; 1:     for arg in sys.argv[1:]:         if os.path.exists(arg):             os.system('osascript -e \'tell app "Finder" '                       + 'to move the POSIX file "'                       + os.path.abspath(arg) + '" to trash\'')         else:             print "Error:", os.path.abspath(arg), "does not exist" else:     print "usage: rem file(s)"     print "       move file(s) to Trash" /code/pre  It behaves in exactly the same way as deleting from the Finder. (See blog post here.)  <answer172069> The trash command line tool can be installed via codebrew install trash/code.   It allows you to restore trashed files via command line or the Finder.  <answer177109> I have simply put this script  precode#!/bin/bash application=$(basename "$0") if [ "$#" == 0 ]; then     echo "Usage: $application path [paths...]"     exit 1 fi trashdir="/Users/${USER}/.Trash" while (( "$#" )); do     if [ -e "$1" ]; then         src=$(basename "$1")         dst=$src         while [ -e "$trashdir/$dst" ]; do             dst=$src+`date +%H-%M-%S`         done         mv -f "$1" "$trashdir/$dst"     else         echo "$1" does not exist.     fi     shift done /code/pre  in code~/bin/trash/code, made it excutable codechmod +x ~/bin/trash/code, and added the following line to code~/.bash_profile/code  precodePATH=$PATH:$HOME/bin /code/pre  Then one can use it as  precode$ trash broken.js olddir cleanup.* /code/pre  <answer177508> a modern approach using swift  https://github.com/reklis/recycle  precode// // main.swift // recycle // // usage: recycle &lt;files or directories to throw out&gt; //  import Foundation import AppKit  var args = NSProcessInfo.processInfo().arguments args.removeAtIndex(0) // first item in list is the program itself  var w = NSWorkspace.sharedWorkspace() var fm = NSFileManager.defaultManager()  for arg in args {     let path = arg.stringByStandardizingPath;     let file = path.lastPathComponent     let source = path.stringByDeletingLastPathComponent      w.performFileOperation(NSWorkspaceRecycleOperation,         source:source,         destination: "",         files: [file],         tag: nil) } /code/pre  <answer213611> Check out codetrash-cli/code. It works cross-platform, no trash sound, and supports Put Back.  You can install it with em(requires Node.js)/em:  precode$ npm install --global trash-cli /code/pre  emAlternatively, if you don't want to use Node.js, you can install the native binary codeosx-trash/code manually./em  <comment58246> Excellent answer, much better than mine! <comment58254> I've used `trash` by Rantakari for quite a while and can really vouch for it. It is compiled Objective-C and cleverly uses standard filesystem APIs and, should it fail (ie. user doesn't have sufficient rights), it calls Finder to trash the files (effectively prompting for authentication). You can read more info of `trash` from [hasseg.org/blog](http://hasseg.org/blog/post/406/trash-files-from-the-os-x-command-line/). <comment58269> Aliasing `rm` to anything is dangerous because it may break installer scripts. I learned this the hard way when I aliased `rm` to `rm -i` and had installs hang. <comment58270> Don't do it! Installer scripts may use `rm` and hang with the alias `rm -i`. <comment58272> @Old Pro, that's the alias I use for rm in all my computers, from day 0, and I never had issues because of it.  Care to give an example? <comment58273> I don't recall the specific application I was installing, but I do recall that installing it (probably an upgrade) hung and it took me about a month to figure out it was because one install script used `rm` instead of `rm -f` and the script was hung waiting for confirmation that it was OK to delete some file.  Removing the alias from my .bashrc allowed the install to complete and I've refrained from using that alias on OS X ever since, even though I still use it on every other Unix system. I'm not sure what your alias will do with `rm -f someFile`. <comment58274> @OldPro: `.bashrc` is only executed if the shell is interactive. Check the [man page](https://developer.apple.com/library/mac/#documentation/darwin/reference/manpages/man1/bash.1.html)! <comment58276> @OldPro: `.bashrc` is only used for _interactive_ shells. If you run `./install.sh` a new process is started and the alias will _not_ be active. However, if you run `. install.sh` your current process will execute the installer and the alias is active. RTFM... <comment58278> I was using a standard installer started by double-clicking in the Finder.  I determined the process that was stuck was `rm -i` by using `ps` to see the command line and I fixed the problem by removing the `rm` alias.  YMMV <comment58280> Then the installer was running an interactive shell and therefore was seriously broken. One broken installer is hardly enough reason to advise against shell aliases in general. YMMV <comment91974> trash is also available via the brew package manager. just use: `brew install trash`. <comment92087> @landon9720 Good point. And, to clarify for others, the `trash` command available through [Homebrew](http://mxcl.github.com/homebrew/) is Alai Rantakari's (see the [`brew` formula](https://github.com/mxcl/homebrew/blob/master/Library/Formula/trash.rb)). <comment108775> However, it *is* good advice to not alias the `rm` command, as morgant said, because you'll become comfortable with `rm` not actually removing files and then might accidentally delete something on a system where no such alias has been added. Also, moving a  file to the trash is *not* as simple as just `mv {} ~/.Trash`. If the file is on a separate volume, for example, this will *copy* the file to your home directory and delete the original. <comment140099> i would advise against removing safety nets, or admonishing others to do so. <comment140100> @landon9720 love me some homebrew trash! <comment141992> This is v clever but I still wouldn't recommend this.  It's clever because its in the bash profile for the user and so only the user can execute this version of the function by typing it in, scripts that rely on rm will still call the original.  But I wouldn't recommend doing this because the user will get used to rm acting in this way when it doesn't on other machines.  I'm going to use this but rename the function "trash" <comment157747> There are programs that can recover deleted files (as long as those sectors on the hard drive are not overwritten in the mean time!).  When this happens, you should use one of those... <comment165774> I just saw your git page: 336 lines of bash code to move a file to the trash? ;) <comment165775> ? why a negative vote? this would be my thought as well.. <comment165783> I also use this short function in my .bashrc; however, you need to this change to `function trash { mv "$@" ~/.Trash ; }` to avoid it breaking on folder names with spaces in it. <comment165813> @CousinCocaine Haha, yes, it could use some consolidation after all these years. That said, it's well commented and supports a lot of functionality (trash across multiple volumes, moving to trash directly or via AppleScript, empty & secure empty, etc.), so it wouldn't be particularly short anyway. :) <comment165854> @morgant, indeed. It looks clean and very complete. Nice. <comment195853> I have been using Ali Rantakari's `trash` command for years, and I like it. But I upgraded to Yosemite and it stopped working. I get an error saying `-bash: /usr/bin/trash: /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby: bad interpreter: No such file or directory`. Does anyone know how to fix this? <comment196473> I was able to fix the error by running `brew remove trash` and then `brew install trash`. <comment209996> While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference.  Link-only answers can become invalid if the linked page changes. <comment210028> @jherran thanks for the reminder, I added a code segment <comment213454> I am using the same function with two changes: ① I corrected a bug in the function that causes any folder to be renamed to the timestamp, if it has been tab-completed to include a trailing slash: This requires the following changes: Replacing the line `local dst=${path##*/}` with `local dst=${mindtrailingslash##*/}` and inserting another line just before that one that says `local mindtrailingslash=${path%/}`. ② I use the name `function rr`. Like this, it does not interefere with plain `rm`, but the name is similarly short and fast to type (any other name would do). <comment219540> You probably need `$*` instead of `$1`, but then you would end up with the same answer as `mv "$@" ~/.Trash`. Why people vote it negatively, check the comments from the other answer. <comment221777> What an elegant solution! <comment224121> Be careful with this alias; this works if you only have one partition or drive. If you're working on a second volume or network share, this will actually *copy* the file to your home directory's trash, which is probably not what you wanted to do! <comment234403> Also see http://askubuntu.com/q/468721/250556 for googlers looking for ubuntu/debian/linux file trashing. <comment234745> Also available in macports: `port install trash` <comment252954> This is my preferred answer because it uses the same underlying logic and APIs as the GUI. <comment252956> Now if only there were a Python version that avoided the need for a 3MB binary to make one system call. <comment257755> every time I try to `brew install trash`, I get this: http://pastebin.com/N92cM7d8 <comment260208> @BenC.R.Leggiero I would take that issue over to https://github.com/ali-rantakari/trash/issues. Did you `brew update` first? Works good on my end. <comment260209> @PaulWenzel yes, and it seems to update just fine. I'll post an issue. <comment273566> Change the name of `rm()` to `rmt()` - This way you can still use the `rm` command when you want. I think of rmt in my head as `remove to trash` :D <comment280023> This should have more points IMO. Because it is AppleScript it uses the actual trash process to move the file to trash, which means it will behave exactly the same. Shame a one-liner was not provided however. <comment280131> Well, someone downvoted it on Oct 31 '15 at 10:26 - at precisely the same time that someone else was posting an answer to this question! <comment350795> This answer is an object lesson in how to do things right. It works with shell wildcards *and* it works through the Finder. It doesn't reinvent any wheels, and it's about as simple as can be. I put it in my `~/bin`, named it `trash`, and it worked the first time—enabling me to trash a whole lot of files way more efficiently than if I had to click on them in Finder windows. Much gratitude. I hope you'll post more answers!