System Integrity Protection breaks DYLD_LIBRARY_PATH for python scripts <body> I have some custom modules that are generated using SWIG that are installed in a a local path eg:  precodecatkin_ws/devel/lib/python2.7/site-packages /code/pre  When I try to run a python script that uses one of these modules, I get an import error:  precode"/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.py", line 37, in import_module     __import__(name) ImportError: No module named _mag_manip /code/pre  I've figured out that this is due to the shebang at the top of the python script:  precode#!/usr/bin/env python /code/pre  Because /usr/bin/env is protected by System Integrity Protection (SIP), the DYLD_LIBRARY_PATH environment variable is not loaded and some modules cannot be found. A fix is to replace the shebang with the hardcoded path of python ie:  precode#!/usr/local/bin/python /code/pre  Since my code runs on Linux and Mac OSX, replacing the normal python shebang with a hardcoded path on mac is not a really good solution. Does anybody know what the best solution is here?  <answer286320> Note: This only works in the Z shell (zsh).  Although I would normally say this is a bad idea, I can't see anything wrong with doing this with env, which is a pretty harmless command. Try copying codeenv/code into /usr/local/bin and replacing code/usr/bin/env python/code in the shebang with just codeenv python/code (without the absolute path). Assuming you have /usr/local/bin somewhere near the beginning of your PATH variable on OS X, it'll pick up the relocated one, which will no longer be covered under SIP. That shebang will also work on Linux.  <comment361232> Don't think that works because if I just put env in the shebang, I get:  `env: bad interpreter: No such file or directory` <comment361271> Sorry, I meant `env python`. <comment361275> That works in `zsh` but barfs in `ksh` and `bash`. <comment361276> Oh my, I had completely forgotten about the behavior of BASH. Whoops. ZSH really is so much more convenient, for this and countless other reasons. In any case, I'll leave this up for Z-Shell users.