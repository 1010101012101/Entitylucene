How can I make compiled applescripts on $PATH be found and executed? <body> I have some short applescripts that I want to use as utility functions inside shell scripts-- for example, one returns the name of the frontmost application.  The scripts reside in a personal scripts directory that is on my code$path/code.  When in another directory, I can just run  precode$myscript.applescript /code/pre  And, because the scripts directory is on the path, this file will be found and executed (at the top is code#!/usr/bin/env osascript/code).  However, when I run  precode$myscript.scpt /code/pre  To try and run the compiled version, I get:      zsh: exec format error: get_front_app_name.scpt   I would like to use the compiled version but would also like to be able to run these like any executable on my code$path/code, that is, without having to specify the interpreter name (codeosacompile/code) or the path to the file.  As of now, the only way I can see to execute the compiled .scpt applescript is to do both:  precode$osascript path/to/myscript.scpt /code/pre  Is it possible to run the compiled form without this baggage?  <answer108539> Since .scpt are not executable you won't be able to do this.   The shebang (!#) is not in the AppleScript syntax and therefore it won't do anything.    <comment127237> Applescript shebang is : #!/usr/bin/osascript <comment127238> That's not an Applescript, that's a shell script starting an AppleScript. <comment127240> But you can use it in a compiled applescript and plain text file. It allows you to run any Applescript using it's native syntax. But yes it will not run without the osascript command. P.S I marked you back up was trigger happy. <comment127241> In a compiled AppleScript ? How would you do that ? Adding it to the AppleScript ByteCode just messes up the file. <comment127246> No. I am incorrect. You are right the shebang is not for compiled Applescript just the plain text un compiled form to allow the script to use native applescript and as a shell scriptI knew this and was just being thick. <comment127247> Not a big deal :)