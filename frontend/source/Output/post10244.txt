What is the md5/sha1 checksum for Xcode 3.2.6 and iOS 4.3 SDK final? <body> I downloaded the iOS SDK file strongxcode_3.2.6_and_ios_sdk_4.3__final.dmg/strong from the Apple developer site but I'm not sure about its integrity.  Could anyone provide me the md5 or sha1 checksum for it?  <answer10249> I believe that opening a .DMG file automatically verifies it.   Basically, it contains a checksum in the file (or are you worried about malicious packages, rather then just corruption?).   Anyways, when I open a .dmg file, I see the message box with a progress bar say "Verifying" for a while, before it actually mounts.  hr  Asmus added in a comment above:br "you can use codehdiutil verify /path/to/image.dmg/code on the command line to compare an image against its internal checksum."  <answer10277> Having an external checksum would still be a benefit. I don't have the resources to download the 4G file without interruptions (power/bandwidth) and I would really like to get it from "somewhere else" where the download technologies are more liberal but be reasonably assured that the file would not be tampered with by some evildoer.  <answer10290> For what it is worth, here are some of the hash values for the copy of the file that I downloaded:  precode% md5 xcode_3.2.6_and_ios_sdk_4.3__final.dmg  MD5 (xcode_3.2.6_and_ios_sdk_4.3__final.dmg) = 7c202dee660271397112e1eef96e5f17 % openssl sha1 xcode_3.2.6_and_ios_sdk_4.3__final.dmg  SHA1(xcode_3.2.6_and_ios_sdk_4.3__final.dmg)= b58be47d6d273b694904eba8fd7df629188fd1f8 % openssl sha512 xcode_3.2.6_and_ios_sdk_4.3__final.dmg  SHA512(xcode_3.2.6_and_ios_sdk_4.3__final.dmg)= 86d8f84a6a0d5e863dacd1f926cc4a7997a140a7748ea03ce7ce774353fe2fa09fb58ffd86ba8f20843c2698faa2479bf93f0df3741dc6c8f59a17d8f6c2b95d /code/pre  The hashes can be useful to make sure you are not dealing with malicious modification, but if you are just worried about corruption during transfer, then the internal checksums should be sufficient.  <answer84334> I wrote some unattended scripts that automate the download and installation Xcode and/or Xcode CLT.    It is most likely that Apple watermarks DMGs with your Apple ID.  Supporting Evidence: Try googling for the md5, sha1, etc. of the dmgs.  0 results likely.  Try this:  ol liDownload a file using different accounts./li liUse a binary diff tool to compare them./li /ol  Betting against bitsquatting, MITM long-tail issues and other things end-users cluelessly ignore/dont understand are unnecessary, avoidable gambles.  <comment10669> I *believe* that opening a .DMG file automatically verifies it. Basically, it contains a checksum in the file (or are you worried about malicious packages, rather then just corruption?). <comment10670> I'm just worrying about the corruption. And I'm also curious about where Apple stores the checksum in the file? Can I extract it from the dmg? <comment10683> @Fake Name: I guess you should repost this as an answer, to get the proper upvotes this deserves.  @stid: you can use `hdiutil verify /path/to/image.dmg` on the command line to compare an image against its internal checksum. <comment10776> They are different than mine. But my dmg file did pass the validation check and the installation is successful. I believe that apple offers an unique dmg file for each user. <comment35738> when you generate an MD5, there's no guarantee you'll get the same code each time, however each of these different codes will correlate properly with the target when verifying. <comment35740> Curse those evildoers! <comment35854> @slomojo: MD5, like other [cryptographic hash functions](http://en.wikipedia.org/wiki/Cryptographic_hash_function) is completely deterministic with respect to the input. A given sequence of input bytes (the contents of the file) will always produce the same output hash value. If someone computes a different value for their copy of the file, then they can be sure that their file is not identical to mine (or that I was lying about my value). <comment35947> @ChrisJohnsen - not sure where I picked up that notion, I must have a fudged memory, the last time I was playing with an MD5 generator, I could've sworn I was getting different hash values each time.  Chances are it was a bad implementation, it was a web based MD5 generator, but even so seems unlikely, or I simply misremembered (more likely!) Thank you anyway, always good when duff information gets removed from my brain, even if I do look a bit stupid in the process :) <comment36256> @slomojo: The generator you remember using may have been a [salted](http://en.wikipedia.org/wiki/Salt_(cryptography)) MD5. Salting is often used as *one* part of password handling systems because it helps reduce the effectiveness of precomputed lookup tables. A *salted* hash will produce different outputs for the same input (password), but only because a salt value is included as a part of the input to the hash function. A random salt value is selected when setting a password and is stored with the hashed output; this stored salt is used (in place of a random value) when checking passwords. <comment36467> @ChrisJohnsen, that sounds plausible, but I think I probably misremembered. <comment97063> BitTorrent is a proven distribution model but it's "not invented here." <comment97067> @Slomojo confused password hashes with file digest hashes. If the data of a file has not changed, the digest must always be the same, otherwise the digest is broken or there is a hardware or PEBKAC problem. <comment97107> That's right @Barry, but as you can see, Chris and I figured that out about 2 years ago.  Thanks though.