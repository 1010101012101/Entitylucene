Why the launchd has multiple instances per user (not only me and root, but also _spotlight and _windowserver)? <body> I found that the codelaunchd/code process has multiple instances in the process list. What is looking interesting is that there are four users under which these codelaunchd/code processes are running:  ul liroot/li li&lt; current_user[i.e. me] /li li_windowserver/li li_spotlight/li /ul  As described in Apple's docs (Creating Launch Daemons and Agents), codelaunchd/code will be launched per user. But why are the users which requires codelaunchd/code such as code_spotlight/code and code_windowserver/code. I would expect only coderoot/code and code&lt;current_user[i.e. me]&gt;/code. Why both users (code_spotlight/code and code_windowserver/code) require the launchd? I would appreciate for any references to Apple docs or any other resources.  the process strongparent-child/strong relations are as following:  precodekernel_task(0,root) -&gt; launchd(1,root) -&gt; launchd(130, _windowserver)                                        -&gt; launchd(150, &lt;current_user[i.e. me]&gt;)                                        -&gt; launchd(470, _spotlight) /code/pre  <answer129261> The clear answer is that by separating processes into users, you separate the permissions that each process inherits. This is a long standing unix idiom for security and control of resources by placing per user limits on things like open files and memory and even threads/processes.  On OS X - spotlight needs to spawn processes to index files, window server is responsible for bringing up the lock screen, and things to prepare for the first graphical user to log in. Root is the defacto admin account with broad levels of power and permissions. Each user process gets a launchd to start the programs and things they need.  As far as official documentation, I'd start with this article on Daemons and Services.  https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/Introduction.html  It shows the user vs system level split already in the first page. You can search for other launchd topics from that link if needed (or use Xcode to browse the documentation offline).  <comment151291> thanks for the detailed explanation! One additional question: `_spotlight` and `_windowserver` requires `launchd` to start with its help their own processes (are lock screen and indexing [e.g. `mdsd`] those processes which are scheduled by spotlight and window server)?