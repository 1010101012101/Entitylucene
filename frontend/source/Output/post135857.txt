How does one reverse engineer how the Finder performs an operation? <body> I'm trying to figure out how OS X implements it's secure empty trash operations and it seems like I should be able to get more finely grained information than what the process monitor tells me.  The Finder is, after all, just another application.  So how does one dig-down into what actually gets called for a given operation? Is there a way to monitor which command-line utilities are being executed?    <comment161072> [This question (and answer)](http://apple.stackexchange.com/questions/123753/does-secure-empty-trash-actually-write-random-patterns-of-data) might be helpful for you; while it does not cover tracing what the Finder actually does, it discusses secure deletion and the command line tool `srm`. <comment161144> I indeed read that question and I commented on the answer about the incorrect assertion that srm underlies the secure delete function. <comment161152> Ah, I missed that ;-) Regarding your question: the main issue here is the assumption that Finder.app would actually have to call a command line tool - instead of having a "native" Obj-C code implemented that securely empties the trash. <comment161156> Right, well, how do I dig into all of that.  I'm from a Java and scripting background, so it feels like everything should be sitting around somewhere, ready for me to take apart.  I just don't know where to start.  For instance, secure delete starts up a new process called locum which hides all of the activity.  I often find that generic kernel processes are taking up huge amounts of CPU time, but I can't penetrate their veil.