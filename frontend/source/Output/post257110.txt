'sudo ifcong en0 down' - does not stay down in OS X? <body> My goal is to terminate all ethernet traffic through en0 until I bring it back up with codeifconfig en0 up/code.  When I run codeifconfig en0 down/code through terminal, and then confirm codeifconfig/code and all interfaces are inactive.  However, the next day, I find that en0 is back up automatically. How can I find out what brought it up, and is there a better way to ensure it stays down?   <answer257113> Use the codenetworksetup/code emcommand/em instead. On my system codeen0/code is Wi-Fi, so I use codenetworksetup -setairportpower en0 off/code. I actually use a little AppleScript that sits in my Dock and toggles the state. See the networksetup manual page for additional information using codenetworksetup/code.  Save the AppleScript emcode/em as an application named Toggle Wi-Fi and then you can run it as needed/wanted. If you run it and Wi-Fi is on, it turns it off, and if it's off, it turns it on.  pre class="lang-none prettyprint-override"codeon run     set interface to "en0"     set status to do shell script "ifconfig " &amp; interface &amp; " | awk '/status:/{print $2}'"      if status is "inactive" then         do shell script "networksetup -setairportpower " &amp; interface &amp; "  on"         display dialog "The Wi-Fi Network Adapter is turned: ON" with title "Wi-Fi Network Adapter Status" buttons {"OK"} default button 1 giving up after 3     else         do shell script "networksetup -setairportpower " &amp; interface &amp; "  off"         display dialog "The Wi-Fi Network Adapter is turned: OFF" with title "Wi-Fi Network Adapter Status" buttons {"OK"} default button 1 giving up after 3     end if end run /code/pre  hr  Updated to address Ethernet Adapter usage:  pre class="lang-none prettyprint-override"codeon run     set interfaceNumber to "en0"     set interfaceName to "Display Ethernet"     set status to do shell script "ifconfig " &amp; interfaceNumber &amp; " | awk '/status:/{print $2}'"      if status is "inactive" then         do shell script "networksetup -setnetworkserviceenabled " &amp; quoted form of interfaceName &amp; " on with administrator privileges"         display dialog "Network Adapter " &amp; interfaceNumber &amp; " is turned: ON" with title interfaceName &amp; " Network Adapter Status" buttons {"OK"} default button 1 giving up after 3     else         do shell script "networksetup -setnetworkserviceenabled " &amp; quoted form of interfaceName &amp; " off with administrator privileges"         display dialog "Network Adapter " &amp; interfaceNumber &amp; " is turned: OFF" with title interfaceName &amp; " Network Adapter Status" buttons {"OK"} default button 1 giving up after 3     end if end run /code/pre  Note: In the emcode/em above the name of my Ethernet Adapter is "Display Ethernet" and you'll need to change it to whatever the name of your Ethernet Adapter is. You can ascertain it in System Preferences  Network.  <comment320907> Interesting, on my system en0 and en1 are wired interfaces.  en2 is wireless.  I actually turn off wireless through network settings itself.  Your implementation of toggling, is what I am looking to do for the wired interface.  Could I modify your apple script to do that? <comment320916> Out of curiosity, does `sudo networksetup -setnetworkserviceenabled Ethernet off` behave differently? <comment320925> Thank you @MacManager, I had not tried 'sudo networksetup -setnetworkserviceenabled Ethernet off'.  I will tonight.  I hope it works! <comment320928> @klanomath, Yes, all are inactive.  Its strange, because you would think 'sudo ifconfig en0 down' would stay down.  I always check ifconfig after and confirm it went to **inactive**.  But, I find the next morning something brought en0 back up. <comment320930> Sure thing. To get the name of the network service I used `networksetup -listnetworkserviceorder` and looked for the en0 entry. <comment320931> @HarryPotter I meant: if you just disable en0 with ifconfig, en1/en2 shouldn't be down/inactive if they have been active previously. <comment320932> @Harry Potter, I've updated my answer with an example using an Ethernet Adapter. <comment320939> @klanomath en0 and en1 are my ethernet.  en2 is wireless, which is always off, so inactive.  en0 is my only active.  Which is why I want to shut it down and terminate all traffic.  Seems like I have done this with other machines. <comment320948> thanks for that!  It seems very clever and it looks like it serves to what I want it to do.  But, I am curious though, why go to this much effort - is it because the terminal commands are not persistent?  That is what is perplexing me. <comment320950> @Harry Potter, The original AppleScript _code_ works with Wi-Fi without administrator privileges and I made it into an app because I toggle the state of the Wi-Fi Network Adapter daily and sometimes several times daily. Yes I could do it in Terminal or use Preferences  Network however it's always about what makes repetitive actions the easiest. Had your `en0` been Wi-Fi vs. Ethernet this would have just been as simple as using what I originally supplied. For Ethernet it's a bit different. That said, use Terminal if you prefer! :) They'll both do the same thing. <comment320952> thank you!  I will be doing this repetitively also.  Call me paranoid, but if I am away from my machines I have always disabled all internet access.  With your script you could have one toggle for wireless and another for wired.  I will probably implement both.  Thanks for sharing, most appreciated. <comment320956> @Harry Potter, I don't think it's paranoid, I think it just one of many different security measures that can be employed. I too disable Internet connectivity from my MBP when I'm not sitting there in front of it. :) <comment320978> I just tried your Ethernet apple script @user3439894.  I did change to my interface name and ran it as an application through automator.  Placed the icon in my Dock.  However, it is not toggling en0.  Briefly, I see a gear in the system titlebar, but the interface stays active.  Any idea what I could be doing wrong? <comment320989> User error, I redid it again with success.  I would recommend this script for anyone running OS X.  If you want a quick way to toggle your active interfaces on/off.  That way you terminate any traffic when you are away from your machine.  If you have ever ran a firewall and have seen the number of outbound calls a machine actually makes, you will appreciate this nifty script.  Kudos to @user3439894 for updating the code to include Ethernet toggle.