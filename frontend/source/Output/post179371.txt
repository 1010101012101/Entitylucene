Shell set environment variables for command <body> I want to run a program in Terminal and set its environment variables. According to my research one can do this using:  precodeVARIABLE="value" VARIABLE2="value2" run_program /code/pre  Now I'd like to set a variety of variables using a configuration file. Indeed, I could inject variables into the active shell using:  precode. program_variables.config /code/pre  I then can use codeecho $VARIABLE/code in the terminal.  Anyway, when I now run  precode. program_variables.config run_program /code/pre  I cannot access the variables within the program. I also tried separating the two parts with code;/code and code&amp;&amp;/code.  After thinking about what's happening there I had the following ideas:  precodecat program_variables.config | xargs run_program cat program_variables.config | tr -d '\n' run_program /code/pre  and a few more.  I didn't write the called program myself so I cannot change the behavior how variables are read.  Any ideas how I output the file as if I would have written its content in the shell myself?  <answer179372> The variables are set only in the current scope, to make them visible in a program that is called or after a source (e.g. code. file/code) you need to export them.  Thus program_variables.config should be  precodeexport VARIABLE="value"  export VARIABLE2="value2" /code/pre  Then just run the executable,  This can all be in one script to run the executable  precode#!/bin/sh export VARIABLE="value"  export VARIABLE2="value2" run_program /code/pre  Save this file and make it executable.br Then just use the name os this file as the program  <comment212579> I cannot put everything in a shell script, because the config file path is a variable itself and everything is called using a CI. But adding `extern` to the variables enables me to use  `. program_variables.config && run_program` which is perfect for my needs.