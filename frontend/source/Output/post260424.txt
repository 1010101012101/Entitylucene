AppleScript: How to write to text file in specific location (signaled by specific character)? <body> I have a .txt file saved on my computer. I want my Automator application to add a bit of text to the .txt file (the text will be entered by the user). I already know how to append text or prepend text in AppleScript. However, I want the text to be inserted into a specific location.  For example, this is the contents of my .txt file entitled emMy Fruit Log.txt/em. This is what the .txt file looks like embefore/em the text is written to the file:  img src="https://i.stack.imgur.com/7rATX.png" width="446"  You can see where exactly I want the text to be saved in the file in this image:  img src="https://i.stack.imgur.com/9kefq.png" width="446"  Is what I want to do clear? I want the text to be written on the line directly above the first blank line found in the file. Note: It is not necessarily the second line from the top where I want the text to be written. Depending on what text has already been written to the file, the text might be saved on a lower line. For example:  img src="https://i.stack.imgur.com/qFCP6.png" width="444"  The location where I want the text to be written must be at least the second line from the top, but it may also be as further down as the seventh line from the top. So, the most reliable way to articulate where I want to write the text is "on the line before the first instance of a blank line in the document."  Can this be accomplished in AppleScript?  <answer260434> Here's a shell script:  precodesed -i '' -e ':a' -e 'N' -e '$!ba' -e 's/\n\n/\ Write the new line you wish inserted in your file here\ \ /' ~/Desktop/file.txt /code/pre  You can wrap this in a ‘do shell script’ if you really want AppleScript, but for an Automator script, you can use a Run Shell Script action and just use the shell script.  hr  Here's an AppleScript wrapper for the script, where the TextToWrite variable and the Target_Filepath variable have been defined elsewhere per your comments:  precodeset addline to "sed -i '' -e ':a' -e 'N' -e '$!ba' -e 's/\\n\\n/\\ " &amp; TextToWrite &amp; "\\ \\ /' \"" &amp; Target_Filepath &amp; "\"" do shell script addline /code/pre  <answer260763> If I understand your question correctly, you what to write some new text content to the text file directly above the first blank line and if that's correct then here's an example of one way it can be done.  Note that sometimes the AppleScript codedo shell script/code emcommand/em can get complex when having to emescape/em certain instances of emspecial charters/em, emordinary charters/em and or if multiple emcommand lines/em are involved, etc.  So in the following example I'm going to limit the codedo shell script/code emcommand/em to something as simple as I can that doesn't require lots of escaping while allowing for a emvariable filename/em and will return the embyte count/em up to the first emblank line/em in the file, as I believe this is the insertion point you're requesting for where the new text is to be written.  I will then use the embyte count/em as the emoffset/em point as the reference point to where the new text would be written to the target text file. I'll do this by reading into emvariables/em from the start of the file up the emoffset/em and reading from the emoffset/em to the end of the file, then concatenate the three emvariables/em to one emvariable/em to write to the target file from the beginning of the file. Thus overwriting the old content with the combination of new and old content.  hr  AppleScript emcode/em:  precodeset filePathName to POSIX path of (path to desktop as string) &amp; "My Fruit Log.txt"  try     set offsetCount to (do shell script "grep -b -m1 '^$' \"" &amp; filePathName &amp; "\" | cut -f1 -d:") end try if offsetCount is equal to "0" or offsetCount is equal to "" then     display dialog "The contents of the target file does not conform to the necessary requirements for processing and or may contain consecutive 0D Carriage Return Characters, instead of the 0A Line Feed Characters expected by default in macOS." buttons {"OK"} default button 1     return end if  set newContent to "I ate a strawberry at 1 am."  try     set referenceNumber to open for access filePathName with write permission      set oldContentUpToFirstBlankLine to read referenceNumber from 1 to offsetCount     set oldContentFromFirstBlankLine to read referenceNumber from offsetCount to eof      set allContent to oldContentUpToFirstBlankLine &amp; newContent &amp; oldContentFromFirstBlankLine      write allContent to referenceNumber starting at 0     close access referenceNumber  on error eStr number eNum     display dialog eStr &amp; " number " &amp; eNum buttons {"OK"} default button 1 with title "File I/O Error..." with icon caution     try         close access referenceNumber     end try     return end try /code/pre  hr  Terminal output of "My Fruit Log.txt" before running AppleScript emcode/em:  precode$ cat "$HOME/Desktop/My Fruit Log.txt" 2016_11_09 -  2016_11_08 - I ate a banana at 8 am. I ate a kiwi at 11 am. I ate a mango at 6 pm.  2016_11_07 - I ate a pear at 6 am. I ate a tangerine at 4 pm. I ate a peach at 8 pm. $  /code/pre  Terminal output of "My Fruit Log.txt" after running AppleScript emcode/em:  precode$ cat "$HOME/Desktop/My Fruit Log.txt" 2016_11_09 - I ate a strawberry at 1 am.  2016_11_08 - I ate a banana at 8 am. I ate a kiwi at 11 am. I ate a mango at 6 pm.  2016_11_07 - I ate a pear at 6 am. I ate a tangerine at 4 pm. I ate a peach at 8 pm. $  /code/pre  hr  So as you can see, this inserts the new text content above the first blank line in the file.  Below we see the Event Log of the AppleScript Editor when the above AppleScrip emcode/em is run:  pre class="lang-none prettyprint-override"codetell current application     path to desktop as string         --&gt; "Macintosh HD:Users:me:Desktop:"     do shell script "grep -b -m1 '^$' \"/Users/me/Desktop/My Fruit Log.txt\" | cut -f1 -d:"         --&gt; "13"     open for access "/Users/me/Desktop/My Fruit Log.txt" with write permission         --&gt; 172     read 172 from 1 to "13"         --&gt; "2016_11_09 - "     read 172 from "13" to eof         --&gt; "  2016_11_08 - I ate a banana at 8 am. I ate a kiwi at 11 am. I ate a mango at 6 pm.  2016_11_07 - I ate a pear at 6 am. I ate a tangerine at 4 pm. I ate a peach at 8 pm. "     write "2016_11_09 - I ate a strawberry at 1 am.  2016_11_08 - I ate a banana at 8 am. I ate a kiwi at 11 am. I ate a mango at 6 pm.  2016_11_07 - I ate a pear at 6 am. I ate a tangerine at 4 pm. I ate a peach at 8 pm. " to 172 starting at 0     close access 172 end tell /code/pre  <comment326069> You said "_So, the most reliable way to articulate where I want to write the text is "on the line before the first instance of a blank line in the document."_", well that's not what the images show where your wrote "_I ate a coconut at 10 am._ was in between two lines that didn't have a blank line between them. So what is it that you really want? <comment326079> @user3439894 No, the images are correct. The second image is to explain that the line to be entered isn't always the second line, but rather the line indicated by "This is the location…". <comment326114> @user3439894 In the second image, I don't want the text to be written where it says, "I ate a coconut at 10 am." I want the text to be written where it says, "This is the location where I want the AppleScript to write to." It may be the second line from the top, or it may be the fourth line from the top. The number of lines from the top varies, but the location will always be directly above the first instance of a blank line. What grgarside wrote is correct. <comment326173> Can you show how to do this in AppleScript? I have a rather convoluted code, so it would be much easier to implement if it is in AppleScript, as opposed to a Run Shell Script action. Also, what edits to the code are necessary if the text to write is a variable (e.g., a string entitled _TextToWrite_ instead of the actual text like you've provided)? <comment326236> I've tried writing _do shell script_ followed by your whole code in double quotes, but I get an error. So I assume converting your code to AppleScript is not as simple as that (unless I made an obvious mistake... which is likely). <comment326253> @rubik'ssphere I've added an AppleScript wrapper to my answer and used the value of the TextToWrite variable in the script. <comment326761> It works great! What edits to the code are necessary if the file path is a variable and this variable contains spaces? E.g., a string entitled _Target_Filepath_ that contains the text: /Users/Me/Desktop/November_My Fruit Log.txt <comment326764> You understood me correctly. Question: How does your code differ, functionally, from grgarside's code? Both codes produce the same effect... is one code "superior" than the other in some way? <comment326768> @rubik'ssphere I've edited my answer to include that variable too. I encourage you to take a look at some AppleScript documentation — you can start at the [AppleScript Fundamentals](https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_fundamentals.html) guide. <comment326808> @rubik's sphere, I posted my answer 2 days ago when it looked like you were having issues with grgarside's answer, based in part on the comments, so you'd have an alternative... although he did edit his answer today. Suffice it to say there's usually more then one way to code anything and generally speaking it doesn't necessarily mean one way is superior to the other if it works for your needs and you understand what and how it's doing it and why you might choose one method over the other. I strongly echo grgarside's comment "_I encourage you to take a look at some AppleScript documentation_". <comment326902> Believe me I have. Once we enter shell scripts territory, I'm illiterate. <comment327776> Either my original post was unclear or I've discovered a bug in your code. Please see my edit to the OP. In the second image in my post, you'll see there is a single blank line between "This is the location..." and "2016_11_08 -". However, your code inserts _two blank lines_ here. But, oddly enough, when I run your code a second time, which corresponds to the third image in my original post, only the previous two blank lines remain; no additional blank lines are added. The code should not be adding _any_ additional blank lines, and should merely preserve the original (one) blank line. <comment327844> @rubik'ssphere No-repro unfortunately, it works fine for me without any additional new lines. Are you sure there's no accidental new line at the end of your "TextToWrite" variable? That's all I can think of at the moment <comment327962> My apologies; I was mistaken about your code adding an extra line. You are correct; I had written faulty code that added an extra line after the date string. However, I am now having a new difficulty. Will your code work correctly if there is a space in the filename of the file that _Target_Filepath_ directs to (such as, in my /Users/Me/Desktop/November_My Fruit Log.txt example in my earlier comment)? It is likely that I am mistaken, but I think the answer is _"no."_ <comment327969> @rubik'ssphere It will work fine, I added an extra layer of quotes in the AppleScript version to permit this. <comment327981> You're right; the space in the filename is not the issue. I cannot figure out what the issue is to save my life. The second edit of your code works, but the third (current) edit does not. When I run the script, the script completes without error, but the file does not change (ie, _TextToWrite_ is not added to the file), despite there being a blank line in the file. <comment327985> Please download the script [here](https://dl.dropboxusercontent.com/s/lou3zaab5b4u0wt/Script%20to%20%22write%20text%20to%20first%20blank%20line%20in%20file%22%20does%20nothing.zip#). Please place the file1.txt file on your Desktop and change the "Me" in the file path string that constitutes _Target_Filepath_ to your username. Do you have the same experience as me? <comment328225> When I run your code, I get: "The action “Run AppleScript” encountered an error. File permission error." I am the administrator. I've right-clicked the .txt file in Finder, clicked "Get Info", and then set the "Privilege" for "Me","staff", and "everyone" to "Read & Write". I still get the error; nothing is written to file. <comment328462> Have you had a chance to see what I'm talking about @grgarside? <comment328662> Can you please download [my .txt file](https://www.dropbox.com/s/b29du9rdf535jur/file1.txt?dl=1) and see if your code works properly on your computer @user3439894? I am unable to run your code without error and the `newContent` text is never written to my .txt file. I am presented with one of the following error messages: _"File is already open."_, _"End of file error."_, or _"File permission error."_ <comment328755> No worries, thank you very much <comment328757> @rubik's sphere, This is not working for you due to the same issue with another resent question of yours that I answered, being `0D0D` instead of what it's supposed to be `0A0A`. Also, you need to understand that _code_ being presented is not necessarily all the code you you might need and is just _proof of concept code_! You are expected to build upon what's being presented by adding requisite _code_ so it conforms not only to your specific needs/wants but also proper programing paradigms as well. Continued in next comment... <comment328758> In other words, while the _code_ I originally presented did not contain error coding, nonetheless you're expected to implement it where appropriate. I have updated the _code_ to reflect what I'm talking about and you can review the edit history to see the difference. That said, while I've added some error handling in the form of `try` statements, `if` condition test and `on error` handler, I have not updated it (yet) to deal with the real issue plaguing you. **You need to resolve the underlying issue and not expect someone to write code to deal with the anomaly!**  Continued in next comment... <comment328759> The errors mention in your last comment, before this 3 comment reply, were caused by not having the requisite code which I've now added to the code, which I showed you in another previous answer the one with the Clipboard issues, so you're expected to add appropriate error checking all along the way while writing code. You'll need to close any open file handles cause by the lack of proper error checking and the easiest way at this point is to reboot your system if you don't know any other way to do this without asking. This wouldn't have been an issue if you didn't have the `0D0D` issue! <comment328761> I didn't realize that the result of all these error messages was only because of the `0D0D` issue. I apologize. And I think I've figured out how to fix that issue once and for all. I was copying the same filler text instead of typing the text out manually. When copied, the clipboard would also bring along the `0D0D` with the text. Now your script works perfectly with my .txt file. Thanks for originally bringing the `0D0D` issue to my attention! <comment328771> @rubik's sphere, It wasn't just the `0D0D` issue alone, **although that was the root cause** because we expect `0A0A` by default in this scenario, lack of proper error handling played into it as well. I can only hope that this has been a valuable learning experience for you and going forward you understand that the code answers presented should be treated as _proof of concept_ **and you'll add appropriate error handling to everything you code** so as to avoid fatal errors and or help to determine what the error is all about if/when it happens. Anyway, I've enjoyed helping you along the way! :) <comment328773> @rubik'ssphere Your file1.txt doesn't actually *have* any blank lines for the script to insert your added line on. [Here's an image.](https://i.stack.imgur.com/Bf8A0.png) Write a standard document in TextEdit with normal line endings and it should be fine (don't just copy your file1.txt into TextEdit, that will preserve the incorrect carriage return marks). <comment328775> Ah, curses. You are right. I'm a fool. My apologies to you again.