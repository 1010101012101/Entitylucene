How to determine reason for SSH broken pipe <body> Over the last week, my SSH connection to an Amazon EC2 instance keeps getting disconnected with     Write failed: Broken pipe   Reading through a few sites, I assumed it was due to no timeouts being set so I created a code~/.ssh/config/code file as follows based on   ul lihttps://superuser.com/questions/374087/how-to-increase-the-default-time-out-for-ssh-on-os-x/li lihttps://serverfault.com/questions/367205/error-encountered-when-setup-github-on-mac-write-failed-broken-pipe/li lihttp://www.ericmichaelstone.com/?p=5852/li /ul   precode### Stop timing out connections ServerAliveInterval 120   ServerAliveCountMax 20    TCPKeepAlive yes  ### SSH Connection pooling for faster additional connections to a machine ControlMaster auto   ControlPath /tmp/ssh_mux_%h_%p_%r  Host *     ControlMaster auto     ControlPath ~/.ssh/control/%r@%h:%p     ControlPersist 3600    ### Make it so ssh-ing from one server to another passes keys around automagically Host * ForwardAgent yes  ### Get rid of SSH connection delays GSSAPIAuthentication no  ### Use less encryption on servers I cant get to off-network Host 10.* 172.* 192.168.*   Ciphers blowfish-cbc /code/pre   These settings didn't seem to have an effect, yet I realized that when I'm emnot/em at home, the connection stays idle like it has for the last year. I've ssh'ed into the instance on two separate networks other than my home Wifi, so I'm guessing there is something that happened at home in the last two week to change how the SSH connection behaves.  Using Wireshark or otherwise how can I follow/diagnose what/where the problem for broken SSH pipes occurs on my home network?  Using  ul liMac OS 10.7.5/li liOpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011/li liAmazon EC2 AMI t1.micro/li /ul  <answer94385> You don't state what OS is running on your EC2 instance.   Let's assume it's a variant of linux.    The first thing you should do is increase the amount of logging your SSHD provides.  You have two ways of doing this.  You could either change the options so that SSHD always starts with the debug flags, or you could start up another instance on a non-standard port.  Either way, the secret to getting debug output is to use -d's.  From the man page on an Mint (Ubuntu variant) server           -d      Debug mode.  The server sends verbose debug output to standard error, and does not put itself in the background.  The server also will not fork                  and will only process one connection.  This option is only intended for debugging for the server.  Multiple -d options increase the debugging                  level.  Maximum is 3.      From your client, you can use the verbose options for ssh TO the server, such as ssh -vvv user@host.com -p port you used for your sshd.  One more thing I would suggest is to get rid of most of the items in your config file, just to make sure you're not adding to the problem.  None of these things are answers, but they could get you closer to one.    <answer157068> Check for local keep alive settings on your mac. These were mine...:  precodesysctl -a | grep tcp.keep net.inet.tcp.keepidle: 3600 net.inet.tcp.keepintvl: 150 net.inet.tcp.keepinit: 75000 net.inet.tcp.keepcnt: 8 /code/pre  I needed to change the keepintvl setting to some higher value:  precodesudo sysctl -w net.inet.tcp.keepintvl=7500 /code/pre  Then the ssh "write failed: Broken pipe" error messages vanished. 