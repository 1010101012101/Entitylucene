Where Is Darwin's ARP Cache? <body> The Linux kernel generally tends to cache its ARP tables here:br code/proc/net/arp/code.br Darwin &amp; Mac OS X, however, emdo not/em seem to follow the same convention.br So where can I find the Darwin &amp; Mac OS X equivalent of:br code/proc/net/arp/code?  <answer205031> OS X doesn't cache things on /proc so there's no equivalent exposure of kernel data through the filesystem idiom.  You can call codearp -a/code to dump the current table to the location of your choosing if that sort of DIY caching has benefits for your code or use case.   <answer205032> It looks like the cache on OS X isn't stored anywhere. An inspection of the codearp/code command reveals no open data files during runtime, and codeman 4 arp/code claims that the cache is dynamically created.  <comment247247> The mach kernel is the reason for the data structure being isolated from the filesystem. <comment247268> That's actually what led me to ask the question; whilst experimenting with the `arp` command i noticed a significant lag/delay between the initiation of peer network traffic/activity and the subsequent reflection of resolved, live hosts by `arp -a`. My hope was that `cat /proc/net/arp` (or something similar) might be more responsive. <comment247269> How exactly did you inspect the `arp` command? <comment247276> @tjt263 No such luck. You'd need to attach to the kernel and grab the internal state unless someone knows how to send a unix signal to the process to dump a debug portion of the stack. It might be possible, but unless Apple engineering documents it or someone susses it out, you might be stuck running the command to regenerate the list (-a causes a flush and then reports back the results). You could also craft a `tcpdump` and/or just log the arp results if you needed a pseudo file that was somewhat regularly kept up to date. <comment247351> I did "arp -a & lsof /|grep arp". You may have to run it a few times to get anything. It depends on at which point in arp's execution lsof catches it. It seems that arp also opens the hosts file for a split second, which you may or may not notice, again for the same reasons. <comment247868> I thought that `sudo ping -c 10 255.255.255.255 && arp -a` might do the trick (a la ICMP/ping sweep). It doesn't seem to even _TRY_ pinging _ALL_ the available (or potentially available) hosts though.. <comment247870> Where is the hosts file? `/proc/net/hosts`? <comment247956> There is no proc directory on OS X. It's /etc/hosts <comment272806> I don't think that ping command is supposed to try all available hosts, it's just going to send out one packet with that IP address in the destination field and leave it to the switches to flood it out all their ports (which they would do for any IP address not in their ARP cache anyway).