'which' location different from executable location <body> I'm trying to install ruby/rubygems on the latest version of 10.6. I used MacPorts to install coderuby/code after noticing that my version was old. coderuby/code was installed into code/opt/local/bin/code.  I changed code.bash_profile/code and added:  codeexport PATH=/opt/local/bin:/opt/local/sbin:$PATH/code  When I codeecho $PATH/code, I get:  precode/opt/local/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/git/bin:/usr/X11/bin /code/pre  So when I type codewhich ruby/code I get:  code/opt/local/bin/ruby/code  Which works correctly. However, when I type codewhich gem/code I get:  code/opt/local/bin/gem/code  When using codegem -environment/code I get (codegem/code is in the above directory):  precode-bash: /usr/bin/gem: No such file or directory /code/pre  I'm completely open to uninstalling everything and starting over if necessary. I'm just not sure why it's still trying to grab it from code/usr/bin/code!  <answer20006> The default codegem/code is a function and they get called before $PATH and also before the command codehash/code.   Try playing with codehash/code (or clearing it with codehash -r/code ) to see if your path isn't getting a say in which gem to call.  codetype gem/code will confirm whether yur gem is really a function...  <answer20218> What a mess. I ended up removing all versions of ruby and MacPorts and compiling 1.9.2 from source. Everything is working fine now.  <comment287551> To elaborate a bit: if an outdated hashed location is the issue, then `hash -d gem` will clear the entry for `gem`, after which the instance given by `which gem` should be the one that gets called.  Opening a new `bash` instance should also clear the hashed commands.