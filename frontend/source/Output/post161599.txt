swap mapping of left and right shift keys <body> I have an odd, highly specific problem when using my third-party USB keyboard with my MacBook Pro:   codeoption + left-shift + right-arrow/code (which as Mac programmers will know means "highlight the word to the right of the cursor") does not work.   The reasons behind this are unclear, but I know it's not to do with user-level software preferences, nor directly to with a low-level hardware problem (see my original question on superuser for the full troubleshooting logic).  I should note that it's a made-for-Windows keyboard: a Thinkpad USB Keyboard with Trackpoint, in factâ€”the trackpoint being the reason I like it so much and stick with it despite its problems. So the key I'm that I'm mapping to codeoption/code in the System Preferences is in fact the "Windows Logo" key.  It emdoes/em work if I use codeoption + RIGHT-shift + right-arrow/code but this is a very clumsy hand position for moving quickly around my documents.  strongSo I'd like to try swapping the Mac's interpretation of the left and right shift keys/strong. Is this possible, and if so, how?  hr  Update:  At the suggestion of Tetsujin I tried Karabiner but it seems like the problem is happening at a lower level.  The keyboard event for right-arrow never even reaches Karabiner if the codeWindows-logo/code and (physical) codeleft-shift/code keys are held down (and it doesn't matter whether codeWindows logo/code is mapped to another modifier: the problem is stuck to that specific emphysical/em key combo).  In response to the comment by  Insomniac Software here's what the Karabiner EventViewer says when I press:  codeWindows-logo + left-shift + left-arrow/code:  precodeeventType:keyMod          code:0x3a       name:Option_L        flags:Opt                                misc:KeyCode::OPTION_L  characters:     eventType:keyMod          code:0x38       name:Shift_L         flags:Shift Opt                          misc:KeyCode::SHIFT_L   characters:     eventType:keyDown         code:0x7b       name:Left            flags:Shift Opt NumPad Fn                misc:KeyCode::CURSOR_LEFT   characters:     eventType:keyUp           code:0x7b       name:Left            flags:Shift Opt NumPad Fn                misc:KeyCode::CURSOR_LEFT   characters:     eventType:keyMod          code:0x38       name:Shift_L         flags:Opt                                misc:KeyCode::SHIFT_L   characters:     eventType:keyMod          code:0x3a       name:Option_L        flags:                                   misc:KeyCode::OPTION_L  characters:     /code/pre  codeWindows-logo + left-shift + right-arrow/code:  precodeeventType:keyMod          code:0x3a       name:Option_L        flags:Opt                                misc:KeyCode::OPTION_L  characters:     eventType:keyMod          code:0x38       name:Shift_L         flags:Shift Opt                          misc:KeyCode::SHIFT_L   characters:     eventType:keyMod          code:0x38       name:Shift_L         flags:Opt                                misc:KeyCode::SHIFT_L   characters:     eventType:keyMod          code:0x3a       name:Option_L        flags:                                   misc:KeyCode::OPTION_L  characters:     /code/pre  codeWindows-logo + right-shift + right-arrow/code:  precodeeventType:keyMod          code:0x3a       name:Option_L        flags:Opt                                misc:KeyCode::OPTION_L  characters:     eventType:keyMod          code:0x3c       name:Shift_R         flags:Shift Opt                          misc:KeyCode::SHIFT_R   characters:     eventType:keyDown         code:0x7c       name:Right           flags:Shift Opt NumPad Fn                misc:KeyCode::CURSOR_RIGHT  characters:     eventType:keyUp           code:0x7c       name:Right           flags:Shift Opt NumPad Fn                misc:KeyCode::CURSOR_RIGHT  characters:     eventType:keyMod          code:0x3c       name:Shift_R         flags:Opt                                misc:KeyCode::SHIFT_R   characters:     eventType:keyMod          code:0x3a       name:Option_L        flags:                                   misc:KeyCode::OPTION_L  characters:     /code/pre  (NB: codewindows-logo + right-shift + left-arrow/code also works, in case you were wondering).  Note that in the specific case of codewindows-logo + left-shift + right-arrow/code Karabiner sees fewer events in the first place. I see the same story (at least, from what I can tell) from Karabiner's debug log: fewer events generated by that specific problematic combo.  I've trimmed away everything up to code--Debug--/code on each line, for the same three cases:  precode# Windows-logo + left-shift + left-arrow KeyboardEventCallback [ caught]: eventType 12, flags 0x80080020, key 0x003a, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x00080020, key 0x003a, kbdType  40, repeat = 0 KeyboardEventCallback [ caught]: eventType 12, flags 0x800a0022, key 0x0038, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x000a0022, key 0x0038, kbdType  40, repeat = 0 UpdateEventFlagsCallback [ caught]: flags 0x002a0022 KeyboardEventCallback [ caught]: eventType 10, flags 0x802a0022, key 0x007b, kbdType  40, repeat = 0 UpdateEventFlagsCallback [sending]: flags 0x002a0022 KeyboardEventCallback [sending]: eventType 10, flags 0x002a0022, key 0x007b, kbdType  40, repeat = 0 KeyboardEventCallback [ caught]: eventType 11, flags 0x802a0022, key 0x007b, kbdType  40, repeat = 0 UpdateEventFlagsCallback [ caught]: flags 0x000a0022 KeyboardEventCallback [sending]: eventType 11, flags 0x002a0022, key 0x007b, kbdType  40, repeat = 0 UpdateEventFlagsCallback [sending]: flags 0x000a0022 KeyboardEventCallback [ caught]: eventType 12, flags 0x80080020, key 0x0038, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x00080020, key 0x0038, kbdType  40, repeat = 0 KeyboardEventCallback [ caught]: eventType 12, flags 0x80000000, key 0x003a, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x00000000, key 0x003a, kbdType  40, repeat = 0   # Windows-logo + left-shift + right-arrow KeyboardEventCallback [ caught]: eventType 12, flags 0x80080020, key 0x003a, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x00080020, key 0x003a, kbdType  40, repeat = 0 KeyboardEventCallback [ caught]: eventType 12, flags 0x800a0022, key 0x0038, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x000a0022, key 0x0038, kbdType  40, repeat = 0 KeyboardEventCallback [ caught]: eventType 12, flags 0x80080020, key 0x0038, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x00080020, key 0x0038, kbdType  40, repeat = 0 KeyboardEventCallback [ caught]: eventType 12, flags 0x80000000, key 0x003a, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x00000000, key 0x003a, kbdType  40, repeat = 0   # Windows-logo + right-shift + right-arrow KeyboardEventCallback [ caught]: eventType 12, flags 0x80080020, key 0x003a, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x00080020, key 0x003a, kbdType  40, repeat = 0 KeyboardEventCallback [ caught]: eventType 12, flags 0x800a0024, key 0x003c, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x000a0024, key 0x003c, kbdType  40, repeat = 0 UpdateEventFlagsCallback [ caught]: flags 0x002a0024 KeyboardEventCallback [ caught]: eventType 10, flags 0x802a0024, key 0x007c, kbdType  40, repeat = 0 UpdateEventFlagsCallback [sending]: flags 0x002a0024 KeyboardEventCallback [sending]: eventType 10, flags 0x002a0024, key 0x007c, kbdType  40, repeat = 0 KeyboardEventCallback [ caught]: eventType 11, flags 0x802a0024, key 0x007c, kbdType  40, repeat = 0 UpdateEventFlagsCallback [ caught]: flags 0x000a0024 KeyboardEventCallback [sending]: eventType 11, flags 0x002a0024, key 0x007c, kbdType  40, repeat = 0 UpdateEventFlagsCallback [sending]: flags 0x000a0024 KeyboardEventCallback [ caught]: eventType 12, flags 0x80080020, key 0x003c, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x00080020, key 0x003c, kbdType  40, repeat = 0 KeyboardEventCallback [ caught]: eventType 12, flags 0x80000000, key 0x003a, kbdType  40, repeat = 0 KeyboardEventCallback [sending]: eventType 12, flags 0x00000000, key 0x003a, kbdType  40, repeat = 0 /code/pre  <answer180855> I ran across this article in my travels and it looks like it might be of some help.    Remapping Keyboard Keys Mac OS X Mavericks  <answer192784> I had a similar problem with a DAS keyboard that was actually made for my Mac - the left Option key caused a mysterious combination of keys to be pressed, rather than Option. For me, this ended up being a hardware issue and I had to replace the keyboard from the manufacturer.   <answer196868> From your edits, it seems like the specific keyboard you're using is causing the problem. I don't know any way to fix that, unfortunately, but I thought I'd answer the original question anyway.  You can remap modifier keys in OS X from at least 10.4 through to 10.10.4 by changing a Property List (.plist) file. The file is located within code~/Library/Preferences/ByHost/code, and is named code.GlobalPreferences.[a long identifier].plist/code, where each user's long identifier varies. (In the Terminal, you can just use Tab-completion to pick up the specific name of your file.)  Here are the steps to copy, convert, edit, and replace the .plist:  ol liIn System Preferences  Keyboard, click "Modifier Keys" and remap at least one of the buttons (e.g. Caps Lock  Control). This will ensure that the proper section exists in the .plist, and make it easier to find./li liIn Terminal, go to or create a directory where you'll do the work, then:  ol licodecp ~/Library/Preferences/ByHost/.GlobalPreferences/code (then press Tab to autocomplete the unique filename)/li licodeplutil -convert xml1 -o ./keys-xml.plist ./keys-binary.plist/code/li /ol/li liOpen the converted XML file. (You can use codeopen /Applications/TextEdit.app keys-xml.plist/code to launch TextEdit from the Terminal.)/li liLocate the section in the file called "codecom.apple.keyboard.modifiermapping/code...". You should see at least one "dict" group within that section. It will actually be one entry per specific key that's been remapped, so if you remapped Control to Shift, you'd see entries remapping LeftControl to LeftShift and RightControl to RightShift./li liModify the existing entry using the table below, changing the codeHIDKeyboardModifierMappingSrc/code key value to the Source key (the physical button you'll press, and the codeHIDKeyboardModifierMappingDst/code key value to the Destination key you want (the key you want to take effect)./li liCopy the entire dict section (from code&lt;dict&gt;/code to code&lt;/dict&gt;/code, including the key mappings, and paste one per key you want to remap, changing the Src and Dst for each./li liSave and close the file. Then, back in Terminal:  ol start="3" licodeplutil -convert binary1 -o ./keys-binary_new.plist keys-xml.plist/code/li licodecp ./keys-binary_new.plist ~/Library/Preferences/ByHost/.GlobalPreferences/code (then Tab to autocomplete)/li /ol/li liLog out and back in for the changes to take effect./li /ol  Here are the key values to use for each modifier key in the Src/Dst mapping:  precode+-----------------+-----------+ |    Key Name     | Key Value | +-----------------+-----------+ | None            |        -1 | | Caps Lock       |         0 | | Shift (Left)    |         1 | | Control (Left)  |         2 | | Option (Left)   |         3 | | Command (Left)  |         4 | | Keypad 0        |         5 | | Help            |         6 | | Shift (Right)   |         9 | | Control (Right) |        10 | | Option (Right)  |        11 | | Command (Right) |        12 | | ~~Kernel Panic~~|      ~~16~| +-----------------+-----------+ /code/pre  strongNB:/strong Key Code 16 should typically not be used.  Source: Rewritten from http://hints.macworld.com/article.php?story=20060825072451882  <comment189551> A late thought - what about [Karabiner](https://pqrs.org/osx/karabiner/)? <comment189603> Thanksâ€”that's a good answer to this question, although it turns out not to help.  I tried Karabiner, and it does indeed let me remap modifier keys to each other, including left and right shiftâ€”pretty cool! Unfortunately it turns out that my approach doesn't work to solve the original problem.  I guess this very-specific Windows-logo + left-shift + right-arrow  problem is happening at a lower level (i.e. the information never reaches Karabiner). So strange to have this fail when Windows-logo + right-shift + right-arrow works, and Windows-logo + left-shift + left-arrow works.  Ah well. <comment189604> Have you tried swapping out for any old Win keyboard, just to check if it's very specific to that model? [wouldn't fix it, but might narrow things down a bit] <comment189606> Yes, everything works fine on a logitech K120 keyboard. <comment189607> By now, I'd have hit it with a hammer - I admire your tenacity & patience. I really do wish you luck on this one, but I'm about out of ideas, sorry. <comment189609> Thanks.   I'd been using workarounds (e.g. skip to end of word, then highlight it backwards) and having a trackpoint is *just about* worth that annoyance.  Thanks to your earlier suggestion I have a new workaround to try:  hit right-shift instead of left. Maybe my hand will get used to it :) <comment190800> In Karabiner, launch the Event Viewer feature.  What does it show when you press each of the keys on their own then what does it show when you press `option + left-shift + right-arrow`?  If it doesn't send the proper codes, try enabling [debug mode](https://pqrs.org/osx/karabiner/document.html.en#debugmode) to get the raw codes.  You might be able to configure Karabiner to send the proper codes for `option + left-shift + right-arrow` <comment190880> @InsomniacSoftware I've edited the question to include all the Karabiner output. AFAICS there's nothing to re-map: the event simply doesn't reach Karabiner. <comment190982> Since the debug output shows that the system isn't even receiving the key codes, you are not going to be able to remap. It is something unique to the keyboard and that key combo. I have a similar prob with Microsoft Sculpt keyboard. Some keys and combos send strange codes that work in Windows with the proper driver but not on the Mac. Have you tried the [USB Overdrive](http://www.usboverdrive.com/) driver yet?  Finally, look at https://discussions.apple.com/thread/4693176 and ask Bill if he has this issue too. If this is a USB code issue, he mentions a new Bluetooth model that might work. <comment229588> I have the same problem with two Lenovo TrackPoint USB Keyboards (55Y9003 and 0B47190), so it's not a manufacturing defect but a hardware issue (feature?). I discovered that the page forward/back keys on 55Y9003 (for internet browsing--so 1990s) also do something weird, and I can't reliably map them using USB Overdrive. Slightly off-topic, but do you have any idea how I can increase the TrackPoint sensitivity? I've tuned the speed and acceleration way up in USB Overdrive, but the TrackPoint still isn't as sensitive (i.e., takes more force to be registered as a movement) as when I use the keybo