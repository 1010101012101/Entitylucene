Start/Stop Internet Sharing via Terminal in Yosemite without AppleScript <body> Okay, I see this question has been asked a few times before (here, here, here and here), but none of those really answer the question for me.  I don't want to use the AppleScript suggestions provided to enable/disable Internet Sharing since future updates to the System Preferences GUI may break the AppleScript, as was the case in the linked posts above, and the solution seems a little clumsy, to be honest.  On Yosemite, codesudo launchctl load -w /System/Library/LaunchDaemons/com.apple.InternetSharing.plist/code no longer works as there's no longer a code.plist/code called codeInternetSharing/code.  I tried  codesudo defaults write /Library/Preferences/SystemConfiguration/com.apple.nat NAT -dict-add Enabled -int 1/code  which I saw somewhere else, but that only toggles the actual checkbox in System Preferences and doesn't actually enable IS.  So ultimately, my question is this. What processes do I have to call from the command line to enable Internet Sharing, or conversely, what processes do I have to kill to disable Internet Sharing?  <answer175652> First, bring down any active internet interfaces using the terminal command:  codeifconfig [interface*] down/code  Then a launch daemon found here:  code/System/Library/LaunchDaemons/com.apple.NetworkSharing.plist/code  needs to be toggled with the codelaunchctl/code command.  then bring up the interfaces with the command   codeifconfig [interface*] up/code  strong*Note:/strong en0 is the wired ethernet interface, while en1 is the wifi interface. Executing the codeifconfig/code command by itself lists all interfaces, active or inactive.  <answer181404> I stumbled across a seemingly stupidly easy way to enable/disable Internet Sharing the other day. There's just a bit of prep work to be done first.  ol liOpen System Preferences  Network/li liHighlight the interface you want to share your connection FROM and click the gear below the interface list/li liSelect 'Duplicate Service...'/li liGive the duplicated service a name and save it/li liSet the service to 'DHCP with manual address' (because some DHCP servers will not assign an additional address to a MAC) and input a valid IP/li /ol  That's the prep work done. Now you just need to change your IS settings to share from the new service instead of the existing one. Then, you can use  codenetworksetup -setnetworkserviceenabled &lt;networkservice&gt; &lt;on off&gt;/code to toggle the network service you just created on or off. Doing so disables IS as there is no service to receive internet access from, and you still retain access on your machine because there is still an active interface connected to your network!  <comment207176> Have you tried to bring down the ethernet interface using **ifconfig en0 down** then back up with **ifconfig en0 up**. This example uses en0, but your interface name will vary depending on which one is in use. That might force the change. <comment207178> Yup, tried that. Although I only tried restarting the wi-fi (which I'm sharing to) and not the ethernet (which I'm sharing from), although I doubt which interface I restarted would affect the outcome. <comment207179> I'd try the ethernet interface, too. <comment207180> There is a /System/Library/LaunchDaemons/com.apple.NetworkSharing.plist Have you tried toggling this off/on? <comment207210> You, sir, are a wonderful being. A combination of bringing down the two interfaces and toggling the daemon between sorted the trick. I'll leave it to you to post the answer so I can give you rep. :) <comment207228> Perhaps I spoke too soon. While this works fine for disabling Internet Sharing, it doesn't seem to work too well to re-enable it again. :( <comment207260> Have you tried toggling the daemon after you bring up the interfaces? <comment207303> I've tried toggling the daemon then bringing up the interfaces, the same with a delay to allow for initialisation, toggling after bringing up the interfaces, toggling the sharing interface after toggling the daemon, and even using the `start` option of `launchctl`, all to no avail. <comment213931> Unfortunatly, it isn't that simple. I am actually trying to debug how all this "stuff" is working. <comment213932> Yeah, it worked a couple of times when I tried it but alas, no more. :( <comment213935> I can insure you of one thing: it just worked because `natpmpd`, `pfd`, `bootpd` & `wifid` were either still running or their effect on the interfaces (`en0`, `bridge100`) hadn't been cancelled. <comment259247> Can't thank you enough for this answer, been trying to find a scripted way to do this for ages; now I can finally have it switch off at night so my computer can sleep, and switch on again when I wake it.