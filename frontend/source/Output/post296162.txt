What's the difference between "Initialize" and "Erase"? <body> I was recently handed an old backup hard drive that my co-workers couldn't read because it used one of the EXT file systems. They didn't tell me what they wanted at first, so I assumed I should try to get the data off of it.  I plugged it in, and my a dialog asked me to eminitialize/em, emeject/em, or emignore/em. img src="https://i.stack.imgur.com/1x1L0.png" alt="enter image description here"  I ignored it, because I knew I would need to install codeosxfuse/code and codeext4fuse/code, which I did, and I was able to read the disk just fine. Only after that, my coworker told me that he wanted the disk erased and formatted with a filesystem that he could use on his PC. But even though I had the disk mounted and readable, my attempts to format it failed. I tried:  ul liemDisk Utility  Erase  ExFAT/em, which gave a simple "operation failed" error,/li licodediskutil eraseVolume ExFAT NewName disk2/code, which gave a "cannot unmount disk" error,/li licodeumount/code, which gave a "disk isn't mounted" error, and/li liall of the above after unplugging the drive various ways./li /ul  Finally, I rebooted, and when I plugged in the drive again, I was asked to eminitialize/em, emeject/em, or emignore/em. I choose to eminitialize/em this time, and suddenly I could erase to various formats with no issues.   This behavior surprised me because I assumed "initialize*, emerase/em, and emformat/em were all synonyms. I guess they're not. So what's the difference? How can one force the initialize dialog to appear?  <answer296201> Looking up the definitions, we find:     strongInitialize:/strong  On Apple Macintosh computers, initializing a disk means formatting it.   As erase is more a more generic term; from Merriam-Webster we get:     strongErase:/strong    to remove (recorded matter) from a magnetic medium; also :  to remove   recorded matter from erase a videotape; to delete from a computer   storage device erase a file   strongWhen you eminitialize/em a device, you make it usable by the operating system./strong   When you emerase/em a device/file, you remove the contents.  Initializing a device previously used with an incompatible format will inherently, erase the device.  To put it another way, you can erase without initializing, but you cannot initialize without erasing.    codediskutil/code's codeeraseDisk/code command requires you to specify the format so in effect you are always initializing the disk.  However, there is also the codereformat/code command that, that allows you to strongemerase an existing volume with same name and type./em/strong   <comment374335> I'm not sure I needed a lesson in English. DiskUtility uses the term "erase" for its tool that lets you change the formats of disks. Moreover, most "erase" operations don't actually remove recorded matter from your disk; they merely *forget* them.   How is that different from your definition for Initialize? You're not clear whether you actually think these are different operations. <comment374350> @Merchako - you are conflating the *terms used by DiskUtility* for the actual technical processes.  The command `diskutil eraseDisk` has the ability to both initialize and erase a device and as stated in my answer, *initializing will inherently, erase the device* <comment374351> @Merchako - as far a *"erasing not actually removing recorded matter"*, that's no longer the case with SSDs.  [The cells get marked as unused and will return zeros or gibberish on a read operation almost instantly after an erase command is issued.](https://apple.stackexchange.com/questions/269863/can-the-data-on-an-macbook-pro-ssd-be-recovered-after-formatting-using-disk-util/269916#269916) <comment374353> @Allan You can initialize a disk without erasing it: a disk without any partition table (GPT/MBR/APM...) newly attached can be initialized but won't get "erased". <comment374354> @klanomath - but  you can't *use* it until you write put a file system on it.  *Partitioning* in an of itself is not initializing.  Initializing is when you make it so the operating system can read/write to it.