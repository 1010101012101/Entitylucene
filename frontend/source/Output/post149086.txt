What is the best practice for creating a daemon with launchd that runs at lower than default priority <body> I have a daemon I would like have to parallelize up to the number of cores on a user's machine, but I don't want it interfering with foreground tasks.  Traditionally, in unix, I would just run this daemon at nice=1, e.g.  precodenohup nice -n 1 MyDaemon &amp; /code/pre  The Apple launchd plist documentation features several items that speak to priority issues, but they're vaguely defined, specifically,   precodeProcessType=Background LowPriorityIO=true Nice=N /code/pre  Is there someplace where the exact behavior of ProcessType=Background is defined?  It would seem that it may be "smarter" than just setting Nice and LowPriorityIO.  <answer149090> Summarized from codeman launchd.plist/code:  strongLowPriorityBackgroundIO/strong: Specifies whether the kernel should consider this daemon to be low priority when doing file system I/O when the process is throttled with Darwin-background classification.  strongProcessType/strong: This optional key describes, at a high level, the intended purpose of the job.  The system will apply resource limits based on what kind of job it is.  If left unspecified, the system will apply light resource limits to the job, throttling its CPU usage and I/O bandwidth.  strongProcessType=Background/strong: Background jobs are generally processes that do work that was not directly requested by the user.  The resource limits applied to the Background are intended to prevent them from disrupting the user experience.  <comment175627> I'm familiar with those definitions - that's the "documentation" I referred to in my question (I should have been more specific).  Those definitions are pretty vague; my question remains - how do ProcessType, the IO priority flags, and Nice interact? <comment175632> Have you tried running a Debug on the launch daemon and watching the process?  Since there is no Dependency's with them I don't believe you can set who goes first to my knowledge.