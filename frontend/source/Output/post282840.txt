Batch change creation dates based on file names <body> I have files that are named like "12. 2017-04-11 063118.jpg", and "123. 2016-09-05 115236.jpg". The number to the left of the "." counts up like an index from 1 to 1400.   How can I set the creation date and time according to how it is specified in the file name for all 1400 files I have in the folder. I know the command touch -t changes the creation date, but I do not know how to extract the date/time information from the file name and put this into a command so this is done automatically for all files.  I know from another thread that the below should work. but i don't know how to tweak the text conversion to correctly apply to my file naming convention.   precodefor f in *; do     t=$(echo $f | sed -E 's/([A-z]*-)|([ ,;])|(\..*)//g' | sed -E 's/(.*)(..)/\1.\2/')     touch -t $t "$f" done /code/pre  The above code works if my file naming convention is like "clip-2014-01-31 18;50;15.mp4", however, I have a different format: "12. 2017-04-11 063118.jpg", and "123. 2016-09-05 115236.jpg". Does anyone know how to tweak the codesed/code function command to process the conversion into the correct format for touch?  <answer282845> Bash parameter expansion will work:  precodefor f in *; do     t="${f#* }"     t="${t%%.*}"     t="${t:0:4}${t:5:2}${t:8:2}${t:11:2}${t:13:2}.${t:15:2}"     touch -t $t "$f" done /code/pre  ul licodet="${f#* }"/code strips off the part before code/code (&lt; the first space)/li licodet="${t%%.*}"/code strips off the part after code./code/li licodet="${t:0:4}${t:5:2}${t:8:2}${t:11:2}${t:13:2}.${t:15:2}"/code formats the content of the date variable (t) for touch which requires the following format: [[CC]YY]MMDDhhmm[.SS]./li /ul  And as one-liner:  precodefor f in *; do t="${f#* }"; t="${t%%.*}"; t="${t:0:4}${t:5:2}${t:8:2}${t:11:2}${t:13:2}.${t:15:2}"; touch -t $t "$f"; done /code/pre  <answer282848> If the files contain exit tags, the free 'exiftool' can change the file name according to values within the file.  Installing it also installs a detailed man page.  http://www.sno.phy.queensu.ca/~phil/exiftool/  I have used this tool to not only change file names, but to write HTML snippets to show the files on a web page.  <answer282854> Since you asked how you could tweak what you already had, you'd change the capture groups in the first occurrence of codesed/code to match the new pattern, while leaving the second codesed/code as is. Also double quote the code$f/code in codeecho "$f" |/code.  Note however, I've eliminated the use of the pipe and second occurrence of codesed/code, code| sed .../code, by use of the code-e/code option, which appends the editing commands into a list of commands.  precodefor f in *; do     t=$(echo "$f" | sed -E -e 's/(.*\. )|([-])|([ ])|(\..*)//g' -e 's/(.*)(..)/\1.\2/')     touch -t $t "$f" done /code/pre  Here it is tweaked as a one-liner:  precodefor f in *; do t=$(echo "$f" | sed -E -e 's/(.*\. )|([-])|([ ])|(\..*)//g' -e 's/(.*)(..)/\1.\2/'); touch -t $t "$f"; done /code/pre  Here's an explication of the capture groups in the first codesed/code editing command:  img src="https://i.stack.imgur.com/b9YTY.png" alt="enter image description here"  Which leaves you with code20160905115236/code and when processed by the second codesed/code editing command, it becomes code201609051152.36/code as code(.*)(..)/code breaks it down to two capture groups, the second containing the last two characters and the first containing everything else. The code./code gets placed in the substitution portion having back-referenced code/\1.\2//code both capture groups.  <comment356472> OK, my bad.  Reading it again, I see you want to change the file dates, not the name.  It may be that exiftool can do that.  My MAC is not working, so I can't read the man page. <comment356617> Thanks for the above and for the how to on the details of the function. Teach a man to fish and feed him for life! <comment356775> The `bare *`(glob) will list every file system object in the directory. Do you think that using `*.jpg` would be a better choice? <comment356777> @fd0 The solution will only work for the given format `something_without_spaces YYYY[.|-|:]MM[.|-|:]DD hhmmSS.someextension`. It won't change the creation date if the required format CCYYMMDDhhmm.SS is wrong though (e.g. contains letters or if the dot is missing).