Terminal returns not found for most commands Mac OSX <body> I'm really new to Mac OSX and UNIX based systems. I wanted to run a few Windows games on my Mac Mini so I started installing Wine and MacPorts.  Having done so, I typed in codesudo port install wine/code and the terminal returned a not found error. I tried other basic commands like codesay/code and codeclear/code and all of them return the not found error. I've googled this and all I've understood so far is that the PATH might be incorrectly set. So I ran this command: codeecho $PATH/code and it returned this:      /opt/local/bin:/opt/local/sbin:/opt/local/bin:/opt/local/sbin:/opt/local/bin   Can anyone tell me how to set this path correctly? I'm a complete newbie to mac and have no idea where .bash_profile or any of those files are. If it helps, I've also installed Xcode and the Command Line tools for Xcode. I'm running Mountain Lion.  <answer83026> $PATH should contain these folders: code/usr/bin:/usr/sbin:/bin:/sbin/code.  Try editing code~/.bash_profile/code, code~/.profile/code, or code~/.bash_login/code (with for example code/usr/bin/open ~/.bash_profile -a TextEdit/code) and commenting out any lines that modify the path.  If that works, you can add a line like codeexport PATH=/opt/local/bin:/opt/local/sbin:$PATH/code to code~/.bash_profile/code.  <answer83045> It sounds like you overwrote you path rather then just adding to it.  Make sure when you set your PATH you include code"${PATH}"/code to include your existing path as well  By default the $PATH is set in a couple of files. Technically you should add to your $PATH in the .bash_profile file in you home directory.  One suggestion if to check if certain folder exist before you add them to your PATH.  For example I have:  precodeif [ -d /usr/local/bin ] ; then     PATH=/usr/local/bin:"${PATH}" fi  if [ -d /usr/local/mysql/bin ] ; then     PATH=/usr/local/mysql/bin:"${PATH}" fi  if [ -d /opt/local/bin ] ; then     PATH=/opt/local/bin:"${PATH}" fi  if [ -d /opt/local/sbin ] ; then     PATH=/opt/local/sbin:"${PATH}" fi  if [ -d ~/bin ] ; then     PATH=~/bin:"${PATH}" fi /code/pre  ( The code-d directory/code command check to see if the directory exists )  <answer208425> In addition to the fix it answers, I'd also like to call out one thing to test.  If your current window simply has a bad PATH variable and your system isn't more broken, you can fix the path easily:  precodeecho $PATH /usr/libexec/path_helper /code/pre  Compare the output of the two above commands. If you want to return to a "safe" path, just copy and paste the line that the codepath_helper/code provides into that terminal. On an unmodified Mac 10.11 system, you should have this output from the helper tool:  precodePATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"; export PATH; /code/pre  If your path needs to be customized, then look to the excellent answers also on this question.  <answer282002> Your terminal's ./bash_profile may have been overwritten.  Use codeexport PATH=/usr/bin:/bin:/usr/sbin:/sbin/usr/local/bin/code in the terminal to temporarily rewrite the current PATH settings. This should give you access to codesudo/code and codenano/code which you will then use codenano .bash_profile/code. For me, deleting everything in the file worked.  <answer295231> For me I got into this exact issue when I attempted to add a new directory to PATH using an incorrect export command in my code~/.bash_profile/code. Both examples below.  precodeexport PATH=/some/new/path:PATH (incorrect, note missing $) /code/pre  vs  precodeexport PATH=/some/new/path:$PATH (correct) /code/pre  <comment95710> I tried export PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin and it works but once I close and reopen the terminal, it goes back to the same error again. I'm a complete noob and I have no idea where ~/.bash_profile or any of those files are located. I'm assuming they're hidden? <comment95718> `~/` is the home folder (`/Users/username/`). Files starting with a period are hidden, but you can show them with for example `ls -la`. <comment95728> Unfortunately I think you need a tutorial on Unix as although we can answer the question we probably cannot provide enough background to help you understand it. As for Wine - easiest is try Crossover(costs) or Wineskin(free) which do not require terminal use <comment251426> Or you could issue `PATH=$(/usr/bin/getconf PATH)` to get a usable PATH in the current shell. `/usr/local` does not exist on an unmodified system. <comment255552> Excellent @fdo - I'm not aware of what might mess up getconf so that might be just as good as just hard coding things. It's also shorter than my "brute force" fix. <comment255784> `path_helper` constructs the PATH from the current PATH, the `/etc/paths` file, and any files within `/etc/paths.d`. It can also be influenced by any PATH settings in `/etc/launchd.conf`. `getconf` prints the system PATH hard coded in the kernel- `sysctl user.cs_path`.