Simple Way to Package an Executable as a .app <body> I created and compiled a very simple c++ game into a single executable. I've tested in on several macs and it works if the person just manually double clicks the file.  However, because the game creates its own data folder, and because executable files look sketchy, I would rather package this executable as an app. Basically all I need is a .app that a user can double click which will launch my executable file.  My first approach was to create an empty automator application. I went into the app and replaced the "Application Stub" with my own executable. This works perfectly on my machine. Unfortunately, whenever I send it to someone else, it gives them an error "This application requires OS X 10.11 or later"  So I went onto a machine running 10.6.8, I created a new automator application, and replaced the application stub with my own executable. I proceeded to upload this app to a computer running 10.10.5 and again I see the same error.  This leads me to believe that something in the executable Application Stub is telling the app "don't open me if the computer isn't running 10.11." However, if I manually view the contents of the app and find the executable, I can run it just fine on 10.10.5. In other words, the executable is completely runable when ran directly, but for some reason when it is packaged in the app it won't let the system open the app.  So my question is: Is there any way I can package my executable in a .app that anyone can run? Even if they have an incompatible version, I would hope it would still try to open the app only to have the executable quit with an error like "Illegal Instruction"  strongUPDATE/strong  I have gotten a solution, but not an ideal solution. I can make an automator app that runs a shell script which cd's inside the app and runs my executable which I place next to the application stub. It works, but it means the app takes significantly longer to open, and if the user changes the name of the app it doesn't work. Here is the script:  precodeDIR=`ps x | grep Brick\ Breaker | grep -v grep | cut -c 28- ` DIR=`dirname "$DIR"` cd "$DIR" nohup ./BrickBreaker &gt;/dev/null 2&gt;&amp;1 &amp; /code/pre  Still looking for a better way to do this though.  <answer201234> You must wait for OS 10.11. Finally Apple will allow even non-Developer users to export XCode projects in .app (same goes for iOS, which is .ipa, amiright?)  Further infos on how-to in XCode 7 (which is still in beta version anyway): http://mhassan.me/2013/02/15/using-xcode-without-provisioning-profile/  <comment242535> What OS X SDK did you link with in the executable? <comment242536> Im not sure exactly, I was using CLion (an IDE) and didn't ever have to pick one. Perhaps this has to do with the version of Xcode I have? <comment242538> Xcode can run may SDKs it will be what Clion set it to <comment242541> So I should be able to change my build process such that it links to an older OS X SDK. Then once I do that it will run on older computers? I still find it strange that the executable is still runable though. <comment242565> Unfortunately I have my code in an IDE called CLion rather than Xcode, but perhaps it might be my only option. <comment242569> Never used that, to be honest. But if you want to develop something in C, C++, Cocoa, iOS etc... then have a look at XCode. It's a 100% Apple IDE for many languages. I use C/C++ (even for University purposes) with XCode: never had a problem. I'm pretty excited about this new feature, but you must have XCode Beta 7 and Mac OS X El Capitain Beta i guess to test it right now. If you're patient, i suggest you wait till this fall, when the final version will be released to the public