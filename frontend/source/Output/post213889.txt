Why does pidof from homebrew returns always zero? <body> I've installed codepidof/code via homebrew  precodebrew install pidof /code/pre  And think about two cases:  precode$ pidof bash &gt; /dev/null; echo $? $ pidof asdf &gt; /dev/null; echo $? /code/pre  The results are:  precode0 0 /code/pre  Why does it happen? Other linux throw 1 when codepidof/code couldn't find process.  <comment258400> "echo $?" is simply showing you whether or not the previous command, in this case "pidof" exited with an error code. 0 means success, any value greater than 0 is an error. I've never used pidof, but surely it returns the process ID of the process you pass it, why are you directing that output to /dev/null? surely "pidof bash" or "pidof asdf" will give you what you what you want? <comment258402> Redirecting to /dev/null is just because I don't want to see PID (if it exists). What I wonder is, pidof of linux throws 1 if no PID found, but pidof of Mac OS X always throws 0 even if it doesn't find PID. <comment258403> In that case, I don't know why echo $? would return 1 instead of 0 on Linux assuming there was no error. Hopefully someone else will have an explanation :)