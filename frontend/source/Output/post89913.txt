How do i autorun .command files from a USB drive when I plug it in? <body> I've made two .command files, "lock" and "unlock". The first hides hidden files with: codedefaults write com.apple.Finder AppleShowAllFiles TRUE/code, then refreshes finder with codekillall Finder/code. The second does the opposite, I simply replaced codeTRUE/code with codeFALSE/code, in the first command.  I'd like to copy these over to a USB thumb drive in such a way that when I plug this USB into my laptop, it automatically executes the "unlock" file, and as soon as I unplug it, the "lock" file is executed.   I don't know to what extent this is possible and what drawbacks/problems it may entail, but any help or input is very much appreciated. I'm also only doing this for fun, so I'm perfectly okay with experimenting!  <answer89916> A codelaunchd/code service supports the WatchPaths option, which launches a program when the contents of a folder are changed:     WatchPaths &lt;array of strings&gt;        This optional key causes the job to be started if any one of the listed paths are modified.   By watching /Volumes, a shell script can be created which would check whether your external disk is mounted or not° and run the appropriate commands°°.  ° The simplest way would be checking for the presence of a /Volumes/disk-name/ folder, but it would also be the simplest to fool with by renaming the partition or having another one with the same name, causing the mount point to be modified.  °° It would be appropriate to use a temporary file storing the result of the last execution to avoid killing the Finder if emanother/em disk was to be [un]mounted.  <answer89952> I couldn't get this to work reliably, but you could try saving a property list like this as code~/Library/LaunchAgents/showall_external.plist/code:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd &gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;showall_external&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;bash&lt;/string&gt;         &lt;string&gt;-c&lt;/string&gt;         &lt;string&gt;k=com.apple.Finder\ AppleShowAllFiles sleep 3 if [[ -d /Volumes/WD/ ]]; then     if [[ $(defaults read $k) = 0 ]]; then         defaults write $k -bool true         osascript -e 'quit app "Finder"'     fi else     if [[ $(defaults read $k) = 1 ]]; then         defaults write $k -bool false         osascript -e 'quit app "Finder"'     fi fi&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;WatchPaths&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/Volumes/WD/&lt;/string&gt;     &lt;/array&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  It can be loaded with codelaunchctl load ~/Library/LaunchAgents/showall_external.plist/code or by logging out and back in.  Without the sleep command /Volumes/WD/ sometimes existed when the volume was being unmounted. The program is also run when files under /Volumes/WD/ are modified, so it checks the current value of the key first. The program gets throttled if it has been run in the last 10 seconds, so there can be a delay of up to 10 seconds before it is run.  ControlPlane can run a script when a USB device is attached, but I couldn't figure out how to run a script when a USB device is disconnected or a volume is ejected.  <comment108701> Keyboard Maestro 6 apparently has a feature like this, but I haven't used it yet. There's also EventScripts: http://www.mousedown.net/mouseware/EventScripts.html which may be able to do what you are looking for.