Executing cd in a bash function called by subshell causes extraneous output <body> Consider the bash function:  precodefunc() {   cd /;   echo test; } /code/pre  Calling it does what you'd expect:  precode~:&gt;func test /:&gt; /code/pre  But when called from a subshell (eg using backticks or $()) it performs very strangely.  precode~:&gt;func() { cd /; echo test; } ~:&gt;echo $(func) test Saving session... ...saving history...truncating history files... ...completed. ~:&gt; /code/pre  This issue does not appear if codecd/code is not executed in the function:  precode~:&gt;func() { echo test; } ~:&gt;echo $(func) test ~:&gt; /code/pre  This is causing issues with some scripts that rely on certain output behavior, eg codeCLASSPATH=$(func)/code where codefunc/code is complex and requires the use of codecd/code.  What's strange is that this worked fine before. It did not start to happen until recently, but I don't know what would have caused it.  strongNote:/strong codealias cd/code reports "alias: cd: not found" and codewhich cd/code returns /usr/bin/cd which is a script that is identical to another Mac which does not have the problem.  <answer268751> There seems to be something odd going on as codecd/code is not defined to behave as you are seeing it. Evidence suggests it's definition is being over-ridden somewhere.  It is possible that your codecd/code command is aliased somewhere.  The codealias/code command with no arguments will display a list of aliased commands on most shells. A workaround for an aliased command is to preface the command with a backslash (code\cd/code). That quotes the first letter of the command and defeats any alias processing by the shell.  It is also possible that it is a shell function.  codedeclare -f/code should list the defined functions, at least in codebash/code, and you can see if codecd/code is being defined as a function.  With luck, your codewhich/code command may support short-cut ways to do these checks.   Check out this on-line man page for how one implementation of codewhich/code can be used to check functions and aliases, then see if your codewhich/code operates in a similar manner.    <comment337437> Looks like the function runs in its own shell somehow. I can't reproduce this here though. Did you change anything in your shell configuration recently? <comment337449> Does that come from your `~/.bash_logout`? <comment337950> I haven't changed anything recently, but an OS update may have occurred. <comment337951> I don't have any ~/.bash_logout either <comment337952> I tried `\cd` but it had no effect. Note: `alias cd` reports "alias: cd: not found" and `which cd` returns /usr/bin/cd which is a script that is identical to another Mac which does not have the problem. <comment338147> gs`cd` should be built into your shell in most every case. <comment338198> huzzah: `declare -f cd` results in a script that appears to have been installed by Ruby. <comment338330> Ah!  Ruby.  You must be using `rvm` to manage your rubies.  I believe that implementation requires redefinition of `cd`.  Glad you figured it out!