Why do some Unicode text messages crash the iPhone OS? <body> Recently a new "glitch" has surfaced over the Internet over the last few weeks where if an iPhone user is sent:  precode  effective.        Power            لُلُصّبُلُلصّبُررً ॣ ॣh ॣ ॣ  冗 /code/pre  strongvia iMessage/strong it crashes the phone OS temporarily and force restarts the receiving phone.  Why does this work?  <answer189048> It is something for Apple to fix.  The problem appears to come from the way that the phone tries to show the message in notifications. The characters cause that system to break, so that it briefly tries to show it before crashing and then re-setting the phone in an attempt to fix it.  Here are some short term fixes you can do till Apple fixes the problem.  ul liHave the person who sent you the malicious message send another message effectively canceling out the initial strand/li liSend yourself a message via Siri, the share sheet, or from your Mac./li liAnother reader notes that “sending a photo to the contact via the Photos app can allow them to access the message history and delete the conversation”/li /ul  subsource: http://www.redmondpie.com/how-to-fix-ios-text-messages-crash-bug//sub  <answer189064> If you need a fix for this, use Siri or a Mac using iMessage to send yourself a new message. See https://support.apple.com/en-us/HT204897  It's a three step procedure to recover and a future software update will patch this bug.  ol liAsk Siri to "read unread messages."/li liUse Siri to reply to the malicious message. After you reply, you'll be able to open Messages again./li liIf the issue continues, tap and hold the malicious message, tap More, and delete the message from the thread./li /ol  hr  As to why it happens, it's a specific bug in the way Notification Center renders the Unicode content of this message. The code performs an "unsafe" operation (something akin to 5 divided by 0 and then doesn't check for an unexpected results) that causes an unhandled error.    Then since Notification Center can not render the block of text and ultimately crashes the Springboard which didn't have code to handle this failure gracefully. When no specific error handler is present, most operations have a fail safe "reboot yourself" to try and remedy the error.  Unicode is a way of encoding characters used to handle languages that have a greater character count than English. Programmers can have problems with it because they learned to program using ASCII text and they neglect to write their software with full Unicode support.  One good article on this explains "if you're still programming that way, you're not much better than a medical doctor who doesn't believe in germs".  This other article explains this specific situation well.  Apple could either do tighter code reviews, have specific unit tests or let end users fuzz test their code like in this and similar cases.  <comment224011> Actually, I believe only the Arabic characters (and maybe the ones after them) are required. The "effective power" text is just a filler and can be anything, but should be long enough so that the notification gets truncated (or at least attempts to, as this is what causes the crash) at the foreign characters. <comment224822> https://www.youtube.com/watch?v=hJLMSllzoLA