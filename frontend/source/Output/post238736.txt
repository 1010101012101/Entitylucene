Why does 'set -x' cause the terminal to dump garbage <body> This problem is quite annoying and I cannot search Google for 'set -x' because the minus sign has another terminology there.  In my MacBookPro, when I use 'set -x' strongto debug bash commands/strong, I'm getting the following each time I press enter. Any idea how to stop this ugly dump? because of this, for each command I run, I need to scroll back two pages to find the actual command I was running.  precode++ update_terminal_cwd ++ local url_path= ++ local i ch hexch LC_CTYPE=C LC_ALL= ++ (( i = 0 )) ++ (( i &lt; 24 )) ++ ch=/ ++ [[ / =~ [/._~A-Za-z0-9-] ]] ++ url_path+=/ ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=U ++ [[ U =~ [/._~A-Za-z0-9-] ]] ++ url_path+=U ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=s ++ [[ s =~ [/._~A-Za-z0-9-] ]] ++ url_path+=s ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=e ++ [[ e =~ [/._~A-Za-z0-9-] ]] ++ url_path+=e ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=r ++ [[ r =~ [/._~A-Za-z0-9-] ]] ++ url_path+=r ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=s ++ [[ s =~ [/._~A-Za-z0-9-] ]] ++ url_path+=s ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=/ ++ [[ / =~ [/._~A-Za-z0-9-] ]] ++ url_path+=/ ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=i ++ [[ i =~ [/._~A-Za-z0-9-] ]] ++ url_path+=i ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=s ++ [[ s =~ [/._~A-Za-z0-9-] ]] ++ url_path+=s ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=h ++ [[ h =~ [/._~A-Za-z0-9-] ]] ++ url_path+=h ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=a ++ [[ a =~ [/._~A-Za-z0-9-] ]] ++ url_path+=a ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=h ++ [[ h =~ [/._~A-Za-z0-9-] ]] ++ url_path+=h ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=a ++ [[ a =~ [/._~A-Za-z0-9-] ]] ++ url_path+=a ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=k ++ [[ k =~ [/._~A-Za-z0-9-] ]] ++ url_path+=k ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=/ ++ [[ / =~ [/._~A-Za-z0-9-] ]] ++ url_path+=/ ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=D ++ [[ D =~ [/._~A-Za-z0-9-] ]] ++ url_path+=D ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=o ++ [[ o =~ [/._~A-Za-z0-9-] ]] ++ url_path+=o ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=w ++ [[ w =~ [/._~A-Za-z0-9-] ]] ++ url_path+=w ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=n ++ [[ n =~ [/._~A-Za-z0-9-] ]] ++ url_path+=n ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=l ++ [[ l =~ [/._~A-Za-z0-9-] ]] ++ url_path+=l ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=o ++ [[ o =~ [/._~A-Za-z0-9-] ]] ++ url_path+=o ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=a ++ [[ a =~ [/._~A-Za-z0-9-] ]] ++ url_path+=a ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=d ++ [[ d =~ [/._~A-Za-z0-9-] ]] ++ url_path+=d ++ (( ++i )) ++ (( i &lt; 24 )) ++ ch=s ++ [[ s =~ [/._~A-Za-z0-9-] ]] ++ url_path+=s ++ (( ++i )) ++ (( i &lt; 24 )) /code/pre  Thank you!!  <answer238737> The place to look is the bash manual  This includes     Using ‘+’ rather than ‘-’ causes these options to be turned off.    So try codeset +x/code  <answer238759> What you're seeing here is some fancy behind-the-scenes scriptery that Apple added in OS X 10.11 to set the Terminal window title based on the current working directory. Since codeset -x/code shows what commands are being executed by bash, it also winds up showing all this normally-behind-the-scenes stuff (in painful detail). It's fairly easy to disable it, though:  precodeunset PROMPT_COMMAND /code/pre  ... and then you can debug in peace, but your window title bar won't update any more. If you're done debugging and want to re-enable title bar updates, just reset the variable:  precodePROMPT_COMMAND=update_terminal_cwd /code/pre  <comment292831> You could have easily typed `help set` in Terminal and seen "Using + rather than - causes these flags to be turned off.". Consult the documentation before posting questions that are already answered in the documentation! <comment292832> I probably didn't explain myself well. I do want the set -x, but I don't want this ugly stuff - only the commands which I actually run. Of course set +x will disable it. It will also turn off my debugging... <comment292833> Can you edit the question to make this clear (My answer is not likely to change much the answer is on the bash documentation page -v) <comment292834> Especially as the question is not what the OP really means <comment292838> I tried better... <comment292846> Still not clear - cut down the original example and then show what you want to see. <comment292987> Please see Gordon's answer. I'm sure other people will know to appreciate my question