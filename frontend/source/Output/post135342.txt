How can I set a user-specific environment variable that includes a space character? <body> I'd like to add an environment variable for a specific account where the variable has a space. It seems that editing .bash_profile like below doesn't work:  precodeexport ENV_VAR=“/Applications/Android Studio.app“ /code/pre  and neither does:  precodeexport ENV_VAR=“/Applications/Android\ Studio.app“ /code/pre  I'm having to settle with changing the name of the application package, which isn't preferable.  <answer135344> codeexport ENV_VAR="/Applications/Android Studio.app"/code should set the variable properly, but it's likely the program/script that emuses/em the variable doesn't quote it properly. If if you can figure out what's using the variable, it might be possible to fix the script/program.  My first guess would be that the environment variable is used by a shell script that does something like:  precodesomecommand $ENV_VAR/subdir/filename /code/pre  The problem occurs because the shell will expand the variable, then perform word splitting -- that is, it will split code/Applications/Android Studio.app/subdir/filename/code into two arguments: code/Applications/Android/code and codeStudio.app/subdir/filename/code. Note that embedding escapes or quotes in the variable value doesn't do anything useful, because the shell processes quotes and escapes embefore/em performing variable substitutions. Thus, if you used codeexport ENV_VAR="/Applications/Android\ Studio.app"/code, it would be split into code/Applications/Android\/code and codeStudio.app/subdir/filename/code; if you used codeexport ENV_VAR="'/Applications/Android Studio.app'"/code it would be split into code'/Applications/Android/code and codeStudio.app/subdir/filename'/code.  The solution is to put double-quotes around the variable reference, like this:  precodesomecommand "$ENV_VAR/subdir/filename" /code/pre  which tells the shell not to perform word splitting after substitution, removing the problem.  Note that it's also possible that it's something other than a shell script, or a shell script that's doing something more complicated like using the variable to construct another variable, and possibly depending on word splitting when that variable is used.  Fixing this sort of usage can get messy.  <comment160411> Ah got it. Along with that, I realised from your answer that my text editor was using curly quotation marks, instead of straight ones. All sorted!