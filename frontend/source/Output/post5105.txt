Is there a bash command to check to see if Time Machine has finished backing up? <body> I'm writing a script that will rsycnc my Time Machine directory to a remote server using ssh. I've switched from a shell script to an AppleScript and then back to an Apple script and I don't really care what kind of script the solution will require.   I've had success starting the backup process with this little snippet of code.  precodedo shell script "/System/Library/CoreServices/backupd.bundle/Contents/Resources/backupd-helper &gt;/dev/null 2&gt;&amp;1 &amp;" /code/pre  What I'm trying to do now is have an rsync command performed once that backup is completed. Is there any clean way in AppleScript to check to see if the backup process is completed? Or is there a good "hook" that you can use in bash to check to see if it's completed?  <answer5108> Here's one way - I know it's nowhere near a "proper" solution, but I imagine it would work.  codeps ax | grep "/System/Library/CoreServices/backupd.bundle/Contents/Resources/backupd-helper" | grep -v 'grep'/code  What it does is search the process list for the backupd-helper process, then filters out the grep command itself from showing up.  If the command returns  0 results, the backupd-helper process is still active.  If not, the process has ended, and so you might assume it's done.  <answer20039> h3Absence of backup-related processes is emnot/em assurance that a Time Machine backup is complete/h3  On the volume to which Time Machine writes its backups: alongside the …code/Latest//code… directory, consider:   ul lithe …code.inProgress//code… bundle. /li /ul  If that bundle exists, a backup is incomplete.   <answer26288> codetmutil status/code is the Lion way now that we have a nice tool for this sort of query.  <answer26330> You might also start the backup with codetmutil startbackup -b/code. code-b/code blocks the command until the backup has finished.  <answer40990> codetmutil status|grep -c "Running = 1"/code  returns '1' when running, '0' when not.  <answer115738> codetmutils/code only exists from 10.7 on. Before that you can use, as mentioned, code/System/Library/CoreServices/backupd.bundle/Contents/Resources/backupd-helper/code to manually run Time Machine.  You can then use codewait/code to wait until the process is finished. Without arguments it will simply wait; if you provide the PID you can get its return value (exit status).  Particularly, codewait $!/code will wait for the last process started in that shell. However, as Lauri mentioned, this wait will return before time machine is finished because backupd-helper finishes before the backup is done. I was not able to find any process name that indicated that the backup was not complete.  Looking at the contents of /var/logs/system.log (or via the Console), I noticed that when the backup is finished, the last thing that is done is to eject the time machine disk image. Sure enough I checked that (this is OS X 10.6.8) during the backup there is a code/Volumes/Time Machine Backups/code. Thus you can simply check if the directory exists. When it no longer does, Time Machine is finished.  I am not sure if this will work for everyone since I've followed the directions here to backup to a Windows machine on the network.  <answer129188> The following work for me...  hr  Script backup_status:  precode    #!/usr/bin/env bash     #     # Determines if Time Machine is running and works with older Mac OS x versions     #     if [ x == x`type -P tmutil` ]; then             # Older OSx             count=`ps -ef | grep -v grep | grep -c 'CoreServices/backupd'`             # Should also detect /Volume/Time Machine …/Latest/… directory ….inProgress/… bundle existence here to make it tight.     else             # OSx 10.7+             count=`tmutil status | grep -c "Running = 1"`     fi      if [ $count == 0 ]; then             echo stopped     else             echo running     fi /code/pre  hr  Script backup_wait:  precode    #!/usr/bin/env bash      #     # Waits for Time Machine backup to complete     #     while [ `backup_status` == running ] ; do             sleep 2     done /code/pre  hr  <comment5178> I would ask why not just rsync the original - I ask this as far as I understand rsync does not understand the hard link directories so that you will end up taking multiple copies of every file. <comment5183> ... `pgrep backupd-helper` <comment5187> Do you mean with each successive backup that is performed, Time Machine will generate a backup with hard links to the original files that have been backed up already? I ask this because I'm not that familiar with Time Machine. If that is the case, then yes I'd copy the original. But I am pretty sure that rsync has an option that will cause it to ignore recreating hard links. <comment5188> I found a more elegant way! TIME_MACHINE_PID=$! wait $TIME_MACHINE_PID <comment5192> @VxJasonxV nice.  Thank you. <comment5202> Yes that is how TM works - rsync can understand hard file links but I don't think t understands hard directory links which are unique to OSX since 10,5 <comment22128> @whitneyz please could you elaborate on `TIME_MACHINE_PID=$! wait $TIME_MACHINE_PID` maybe in a separate answer? Thank you. <comment60371> Oh, wow. Thanks so much for mentioning this. <comment60372> Yes - `tmutuil` is so full of win, it's hard to express how nice it is to peek and poke at the backup status, stats, and drive things programatically. <comment124012> Crazy that it's apparently undocumented!