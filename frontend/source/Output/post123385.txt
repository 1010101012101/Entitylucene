AppleScript: Press Enter Every X minutes If Terminal is Open and Application Has Been Idle for X Minutes <body> I am new to AppleScript and am attempting to use it.  If I am using Terminal and if I have not pressed a key for codex/code minutes I want my Mac to press the return key. It is to repeat this process every codey/code minutes. I would like this process to continue until I close Terminal or stop the AppleScript.  My programming attempt is below:  precoderepeat 52 times delay 840 tell application "Terminal" set currentTab to do script ("Return") in front window end tell delay 840 end repeat /code/pre  <answer123386> Why not fix it in the terminal?  I would suggest something like  precodewhile true;   do &lt;whatever your terminal actions is&gt;;   sleep 60; #sleep 60 seconds done; /code/pre  This will go in a continuos loop. When the program exits, it jumps to sleep 60. Which will cause it to sleep for 60 seconds and then jump back to the execution part.  Although this is not specifically what you asked for, this might be an easier way to deal with it.   A bit closer to what you are suggesting:  precode for i in {1..52};    do &lt;your action&gt;;    sleep 840;  done /code/pre  <answer123499> Save this as a stay open application:  precodeon idle     if application "Terminal" is running then         tell application "Terminal" to set currentTab to do script "" in front window     end if     return (14 * minutes) end idle /code/pre  <answer123509> There are two key parts to your AppleScript, pressing a key and performing a task after inactivity.  h2Pressing a key/h2  Automating a key press in AppleScript is well covered; the accepted answer to the linked question suggests:  precodetell application "System Events" to key code 36 /code/pre  h2Performing when inactive/h2  The second part, performing a task when your Mac has been idle is more tricky. You can use third party software to schedule your AppleScript after inactivity, or you can use a scripted approach to extract the idle time information from the system:  precodeioreg -c IOHIDSystem | perl -ane 'if(/Idle/) {$idle=(pop @F)/1000000000; print $idle, "\n"; last;}' /code/pre  Wrapping this up in AppleScript becomes:  precodeset inactive_seconds to do shell script "ioreg -c IOHIDSystem | perl -ane 'if(/Idle/) {$idle=(pop @F)/1000000000; print $idle, \" \"; last;}'" /code/pre  Where codeinactive_seconds/code contains the number of inactive seconds.  h2Putting it together/h2  Putting it together depends on your looping approach. Consider a while loop that checks if the Terminal.app is running. John Gruber's article will be helpful for this, How to Determine if a Certain App Is Running Using AppleScript and Perl:  precodetell application "System Events"     count (every process whose name is "Terminal") end tell /code/pre  The greater while loop could be:  precodetell application "System Events"     repeat while ((count (every process whose name is "Terminal")) &gt; 0)          -- check idle time and conditionally perform key press         -- wait n minutes to avoid excessive polling      end repeat end tell /code/pre  <answer123533> What problem are you trying to solve?  For instance, that's a common behavior of an SSH client, and is more easily, and better, solved by adding codeServerAliveInterval 60/code to your ssh config.  <comment144063> Is it working? What is your question, actually :) <comment144228> This doesn't answer the OP's question. <comment144231> Fair point. I merely put this in as an alternative approach. Sometimes having more tools/approaches, gives you new insights on how to address your problem. <comment144235> Another fair point. <comment144289> This is an answer to the problem a reasonable person would assume exists upon reading the question - no need to delete even totally wrong answers if they move the discussion forward and could be helpful to others with a similar question. <comment144397> @bmike The OP asked to "press the return key". Although Koen van Rhee answer adds a delay, it does not answer the question. <comment144433> @adayzdone  If your action is `echo ^J` it might well be a correct answer as well as any answer.