Remove all files in folder apart from one using OS X Terminal <body> I would like to remove the whole content of a folder, apart from one file. The problem is can't copy the file to another folder and then back to the first folder, because then the application doesn't accepts the file, so the one file must stay in the folder.  Exists there a command like I described?  <answer194643> I would go about it like this:  precodefind . ! -name &lt;filename&gt; -delete /code/pre  for this to work with folders, you have to replace the codedelete/code with an codeexec rm -r/code  precodefind . ! -name &lt;filename&gt; -exec rm -rv {} \; /code/pre  This breaks down to  codefind/code = find  code./code = in current working directory, you can replace code./code with a path, like code~/Documents//code  code!/code = not  code-name/code = name  code&lt;filename&gt;/code = file  code-exec/code = execute  coderm -rv/code = verbose remove   code{}/code = results of the find  code\;/code = close the execution  Find all files and folders in your working folder, that strongdo not/strong have the name codefilename/code and then execute the remove command on the results.  You should do a dry run without the delete option, first:  precodefind . ! -name &lt;filename&gt; /code/pre  This command gives you a list of all files and folders in your working directory that are not named code&lt;filename&gt;/code. Adding code-delete/code or code-exec rm -rv {} \;/code, will delete this files and folder (the codeexec/code version).  hr  You could also use  precoderm -v [^filename] /code/pre  for folders add code-r/code  precoderm -rv [^filename] /code/pre  Somehow I feel more comfortable using the codefind/code option. Mainly because you can do a dry run. Either way I would start with a dummy folder and try both options.  <answer194647> For being really sure about this, you could use find to create a deletion shellscript with "rm" commands:  precodefind . ! -name "&lt;filename&gt;" -exec echo "rm -rf {}" &gt;&gt; /tmp/rm.sh \; /code/pre  Delete every line in the shellscript /tmp/rm.sh you do not like, then execute it by  precodebash /tmp/rm.sh /code/pre  But be careful - find also finds directories and "rm -rf" would then delete them recursively as well! Narrow down your search by telling find the filetype to search for:  precodefind . ! -name "&lt;filename&gt;" -type &lt;filetype&gt; -exec echo "rm -rf {}" &gt;&gt; /tmp/rm.sh \; /code/pre  Have fun! :-)  <comment232246> Works that version also with folders? EDIT: With `find . ! -name filename` I'm getting a long list in Terminal. <comment232249> Is there a way to add a path to the command line so that I get only results from the path? <comment232250> `find . ! -name filename` gives you all files (and folders) in your current folder.  As about deletion of folders: I changed my answer to also delete folders. <comment232296> Replace the "." with your path.       find your path ! -name "filename" -type filetype -exec echo "rm -rf {}"  /tmp/rm.sh \; <comment232364> The surroundings changed ... Now I'm having a folder and their content must stay. Is that possible with `find`? <comment232482> Is it easier with `ls`? If I copy the files with `cp` the files are outside of their folders.