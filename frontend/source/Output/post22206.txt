How can I find the intersection of two lists in AppleScript? <body> Let's say I have two lists in AppleScript:  precodeset listA to {"red", "green", "blue"} set listB to {"green", "blue"} /code/pre  I'd like to create a third list that has strongonly the items present in both lists/strong:  precodeset listC to intersection of listA and listB --something like this -- would return {"green", "blue"} /code/pre  Basically, something like PHP's array_intersect().  strongIs there a built-in way to do this?br If not, I'd love a recommendation for a scripting addition that solves this problem./strong  <answer22215> The List &amp; Record Tools Scripting Addition provides codeintersection of listA and listB/code (among other bits of terminology).  There is no built-in “primitive” for computing a list intersection. Usually one would just use one or more loops to check each element of one list against the other. This can be simplied (and sped upsup1/sup) a bit by using one of the codeis in/code/codeis contained by/code/codecontains/code operators (or a negation thereof):  precodeset listA to {"red", "green", "blue"} set listB to {"green", "blue"}  to intersection of listA against listB     local newList, a     set newList to {}     repeat with a in listA         set a to contents of a -- dereference implicit loop reference         if {a} is in listB then set end of newList to a     end repeat     newList end intersection  intersection of listA against listB --&gt; {"green", "blue"} /code/pre  sup1/supThe codeis in/code operator and its relatives are implemented by the AppleScript runtime environment in lower-level code where they execute much faster than the normal interpreted AppleScript code.  hr  Incidentally, handlers that use labeled parameters have a limited set of terms that can be used for the labels. For example, codeintersection of listA and listB/code is not possible as a user-defined handler because codeand/code is not a recognized label. See the AppleScript Language Guide section on handlers with labeled parameters for a list of valid labels. Applications and OSA extensions can defined their own terminologies (e.g. the List &amp; Record OSAX provides this exact syntax), but user-defined handlers are not as flexible. I usually just use positional parameters (codehandlerName(param1, param2, …)/code) instead of trying to make invocations of my handlers look like prose.  <comment24588> Thanks! I had been using the loop method; I was just looking for an easier way. I'm installing that addition now; it looks perfect.