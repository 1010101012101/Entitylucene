Is it possible for an AppleScript .scpt file to retain a custom icon, even after edits have been made to the code? <body> h2The file:/h2  I created an AppleScript .scpt file in Script Debugger.app.  Here is how I assigned a custom icon to this .scpt file:  ul liI downloaded a unique icon (in the "512px PNG" format) from IconArchive.com./li liI opened the .png file with Preview.app. In Preview, I clicked kbdEdit/kbd ⟶ kbdCopy/kbd, to place this image on my clipboard./li liI opened the .scpt file's kbdGet Info/kbd window in Finder. I left-clicked on the default icon, found in the top-left corner of the kbdGet Info/kbd window. A blue outline then appeared around the default icon, reflecting that the icon was selected./li liFinally, I pasted the custom icon over the default icon via the keyboard shortcut, kbd⌘ command/kbd + kbdV/kbd. The custom icon was set immediately. I closed out of the kbdGet Info/kbd window./li /ul  hr  h2The bug:/h2  When I open the .scpt file in Script Debugger, to edit the code, and then resave the .scpt file, the custom icon disappears.  On save, the following icon immediately takes the place of the custom icon:   img src="https://i.stack.imgur.com/zXvDj.jpg" width="200"  (This is OS X's default icon for .scpt files.)  Of course, having to go through the process of setting the custom icon every time that I save (i.e., edit) the file is an inconvenience.  But, there is also a second, corollary bug: Each time that I re-add the custom icon in the kbdGet Info/kbd window, the file size of the .scpt file strongcumulatively increases./strong In other words, when Script Debugger deletes the custom file icon, the icon's file size is still included, somehow, as part of the overall .scpt file size.  Case in point: the file size of the .scpt file in question is 12.6 MB, at the moment. The file should not be larger than .5 MB.  hr  h2The question:/h2  I understand how to set a custom file icon to an AppleScript strong.app file/strong, so that this custom icon remains in place after editing, but I am curious if the same can be done for an .scpt file.  Is there a way for my custom script icon to remain in place, even after the .scpt file has been modified in Script Debugger?  This is an .scpt file that is launched via the FastScripts.app menu bar drop-down menu. (The .scpt file is located in code/Users/Me/Library/Scripts/code.) The FastScripts drop-down menu actually displays the file icons of the scripts, which is a nice feature. This is the reason why I want to set a custom icon to the .scpt file (i.e., so that I can observe an apposite icon in the FastScripts shortcut menu).  No, it is not a big deal to simply convert the AppleScript .scpt files that I want to have a custom file icon to AppleScript .app files. I ask this question just to see if there is something that I am missing or overlooking here.  hr  h2What about emScript Editor/em?/h2  It appears that this bug is unique to strongScript Debugger/strong.  When I follow the same steps in OS X's native AppleScript editing program, strongScript Editor.app/strong, the .scpt file icon remains in tact, upon save. However, emI could've sworn/em that I have, in fact, experienced this issue in Script Editor, in the past.  For example, I recall that, once, Script Editor refused to save a .scpt file that I had edited; a vague error dialog was presented on Save. To successfully save the file, I had to either delete the custom icon from Finder's kbdGet Info/kbd window, or copy the code text and paste it into a new .scpt file (which, of course, would necessarily possess the default .scpt file icon).  But, at this time, I can no longer reproduce the error in Script Editor.  At any rate, I try to not use Script Editor to edit my AppleScripts anymore. This is because Script Editor is laggy, potentially crashes when using a third-party script library, and can be temperamental when it comes to opening and saving files.  In my experience, so far, Script Debugger has none of these issues.  Of course, Script Debugger does have at least one issue, though (i.e., the issue detailed in this post).  hr  subOS X El Capitan, version 10.11.6. /sub  hr  <answer286526> Generally speaking, when a User assigns a custom icon to a file by copying and pasting an emimage file/em into the icon, in the top left corner, on the file's Get Info sheet, the image file is stored as a codecom.apple.ResourceFork/code emextended attribute/em of the file it's applied to, and can be seen in Terminal using codels -l@ filename.ext/code to show the file has emextended attributes/em. To manipulate the emextended attributes/em, use the codexattr/code utility in Terminal. Note that the use of the term emimage file/em in this contact is any valid source copied on the Clipboard to then be pasted in the Get Info sheet.  Having to reapply the icon file after having saved the .scpt file in Script Debugger causes the codecom.apple.ResourceFork/code emextended attribute/em to continue to grow in size, while possibly loosing access to the accumulated icon files, can't say for sure as I've not done enough testing. Unfortunately, while Script Editor keeps the custom icon file, nonetheless it appears to grow the size of the codecom.apple.ResourceFork/code emextended attribute/em as well.  To reduce the size of file by removing specifically the codecom.apple.ResourceFork/code emextended attributes/em,  use the following emcommand syntax/em in Terminal:  precodexattr -d com.apple.ResourceFork filename.ext /code/pre  Then reapply the custom icon to the file.  Have a look at the man page for codexattr/code in Terminal by typing, codexattr/code and then emright-click/em on it selecting strongOpen man Page/strong from the context-menu.  The issue with Script Debugger resetting to the default icon will probably have to be taken up with the Developer, or use the workaround suggested in wch1zpink's answer.  Since the codecom.apple.ResourceFork/code emextended attribute/em grows regardless of which of the apps you use, Script Editor or Script Debugger, this is an issue that Apple need to address.  I know you're using OS X El Capitan 10.11.6, however I tested this under macOS Sierra 10.12.5 and the behavior apparently being the same, it probably doesn't matter that I tested this in a later OS release. I was using Script Debugger 6.0.4.   Because of the repetitiveness of what you're doing, a scripted solution is in order here to reduce the effort necessary to maintain both a small file size, inclusive of it emextended attributes/em, and the custom icon.  hr  strongUpdate:/strong  Having gone down a similar road, under OS X 10.8.5, with programmatically setting a file's icon, and having tested almost every solution presented under How can I change a file or folder icon using the Terminal, I chose to use codesetfileicon/code from this answer, as it worded the best for my needs at the time.  The following AppleScript code is example code that can programmatically delete the codecom.apple.ResourceFork/code emextended attribute/em of the target file to reduce it accumulative size and reset the target file's icon. It is written around the use of the workaround suggested in wch1zpink's answer, referencing locking the file to keep the icon intact during a save under Script Debugger.  The main purpose of this example code is to show how to delete the codecom.apple.ResourceFork/code emextended attribute/em of the target file and reset its custom icon programmatically. I've thrown in the code to unlock/lock the target file if you choose to use that method of keeping the icon intact between saves, if not it can be removed. I guess it just depends on how often to want to reset the size of the target file's codecom.apple.ResourceFork/code emextended attribute/em.  precodetell current application      set theTargetFilename to "filename.scpt" as string     set theHomeFolderPath to (path to home folder) as string     set theScriptsFolder to (path to scripts folder) as string     set theTargetFilePathname to theScriptsFolder &amp; theTargetFilename as alias     set theTargetIcon to quoted form of (POSIX path of (theHomeFolderPath &amp; "bin:icon.icns") as string)     set theTargetExecutable to quoted form of (POSIX path of (theHomeFolderPath &amp; "bin:setfileicon") as string)      tell application "Finder" to set locked of theTargetFilePathname to false     do shell script "xattr -d com.apple.ResourceFork " &amp; quoted form of (POSIX path of theTargetFilePathname) &amp; "; exit 0"     do shell script theTargetExecutable &amp; " " &amp; theTargetIcon &amp; " " &amp; quoted form of (POSIX path of theTargetFilePathname)     tell application "Finder" to set locked of theTargetFilePathname to true  end tell /code/pre  Notes:  For the purpose of this example code, I've placed the codesetfileicon/code command line utility and target codeicon.icns/code files in the embin/em folder within the root of my emHome/em folder. The codeicon.icns/code file is the em.icns/em file of the one linked in your question. You could use the emPNG/em file, however I believe the em.icns/em file produces a better image.  The script could be more hard coded and not as verbose, however I coded it this way for a few reasons of which I'm not going to get into the details of unless you need it explained. Feel free to utilize the example code to implement a working solution as needed/wanted in your environment.  This was tested this under macOS Sierra 10.12.5, however it should also work under OS X El Capitan 10.11.6.   <answer286536> Actually there is a solution.  I downloaded the .icns file from the link you provided. I then dragged the entire .icns file from the Finder window to the icon image in the Get Info window of the script which I created in Script Debugger app.  After the new icon was set, I selected the option to “lock file” in the Get Info window.  img src="https://i.stack.imgur.com/rtnQd.png" alt="enter image description here"  After this, I opened that script again in Script Debugger app and made a few changes to the script, recompiled the script and re-save it.  When I tried to save it again, I got this message window.  img src="https://i.stack.imgur.com/rrbDo.png" alt="enter image description here"  I selected the option to “Save Ayway” and BINGO!! The edits were saved but the custom icon remained unchanged.  hr  Here is a suggestion that maybe somebody can grab the ball and run with it.  Instead of saving it as a script file in script debugger, save it as a script bundle (.scptd).  After doing this, ctrl + click on that file in finder and select “Show Package Contents”.  Add your custom .icns file to the Resources folder. You'll also notice an info.plist file. Open the info.plist file in Xcode.  If you hit the + button on the information property list row, it gives the option to add icon files.  img src="https://i.stack.imgur.com/bKC5G.png" alt="enter image description here"  This is above the scope of my knowledge but maybe somehow the custom icons file can be set here.  <comment361523> "Of course, having to go through the process of setting the custom icon every time that I save (i.e., edit) the file is an inconvenience." You could write a Script to do it for you. As you say, Script Editor keeps custom icons between saves of .scpt files. <comment361527> You wrote, _"As you say, Script Editor keeps custom icons between saves of .scpt files."_ But, I don't see how this is a good, or useful, thing? I mean, how do I access the custom icon after a save? I see this behavior as a bad thing, because it keeps on increasing the file size of the .scpt file, indefinitely, with zero benefit or purpose. If I do what you suggest, and create a dedicated AppleScript that sets the file icon of the .scpt file as a custom icon, the file size of the .scpt file would still continue to grow larger and larger, each time that the custom icon is set. <comment361529> If it's keeping the old custom icon, you can scroit a cut to clipboard. <comment361537> I still don't understand your suggestion. Upon save of the .scpt file, the custom icon immediately disappears. How can you cut the custom icon to the clipboard, after it has already been overwritten with the default file icon? <comment361545> That's an interesting workaround for Script Debugger not reseting the custom icon but unfortunately the `com.apple.ResourceFork` _extended attribute_ of the file continues to grow each time it's saved. So periodically the `com.apple.ResourceFork` _extended attribute_ will need to be deleted and the icon reset. The file will have to be unlocked to do this, as even using `sudo` won't bypass the lock. <comment361555> I do not believe a document bundle supports an Icon file property in the Info.plist, but application bundles do. <comment361556> I believe you are correct in that observation because I made the necessary adjustments in the plist file, In the document bundle but they did not keep the custom icon if I open the .scptd in script debugger again and make and save changes. <comment361613> Brilliant.  Especially the "set locked" ;-) <comment361615> @wch1zpink, The credit for locking the file to keep the custom icon intact when saving with Script Debugger, as a workaround, is all yours (and I need to +1 your answer for that)! But what a nasty issue with the com.apple.ResourceFork extended attribute continuing to grow! At least between both our answers, there's a workaround to handle both issues. <comment361616> I was just actually in the man pages for xattr and doing some learning and reading.  I've only been scripting for about eight months now, with zero programming skills under my belt prior to this.  So much to learn.  Honestly your answers and replies have taught me so much.  Thanks dude <comment361617> Was also reading the iconset man page, checking to see if there were any commands we could use.  Interesting stuff <comment361691> *Masterfully* done. Your code flawlessly takes care of both bugs. Thank you for your ingenuity! Thank you as well, @wch1zpink! This answer is a work of art. <comment361778> @user3439894 Here is a thought/question.  Could your script be saved as a handler by just adding to the top and bottom of your script..  on deleteResourceFork()  -- your script end deleteResourceFork And adding the value for "filename.scpt" as a variable?  Because I know script editor and script debugger allow saving text to other files.  This way, all that needs to be done, In any new scripts created in script debugger, Would be to just add a property to load script file (your script) Then call that handler any time you want? <comment361818> @wch1zpink, Interesting idea however keep in mind that you'd obviously only want this to occur on a saved AppleScript script/app that has a custom icon added in the mentioned manner, as that's the only time the `com.apple.ResourceFork` _extended attribute_ of the target file is needlessly increased in size. As such, incorporating this into the _code_ of a script/app isn't going to do anything of value since there is no mechanism, that I know of, from within Script Debugger or Script Editor, to trigger the code only upon the script/app that has a custom icon after being saved in either app.