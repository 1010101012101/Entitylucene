rbenv global version of ruby vs Sierra ruby version <body> Following this OSX Sierra tutorial from the folks at gorails, I am having trouble getting rbenv global to associate the install of 2.3.0 with the coderuby/code command and to override the default ruby version on my MacBook Air with macOS Sierra v10.12.2  precode$  rbenv -v rbenv 1.1.0 $  rbenv install 2.3.0 /Users/user_name/.rbenv/versions/2.3.0 installed $  rbenv global 2.3.0 $  ruby -v ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16] /code/pre  I tried coderbenv rehash/code but ruby2.0.0 is still the default version. Briefly reviewing this blog about ruby and $PATH environment, I find I'm a little lost as to where the default Ruby "executable" actually lives...  gem env shows me that Ruby 2.0.0 lives here:  precode/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby /code/pre  and codewhereis/code tells me something different:  precode$  whereis ruby /usr/bin/ruby /code/pre  The tutorial says to add rbenv to my .bash_profile    precodeecho 'if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi' &gt;&gt; ~/.bash_profile source ~/.bash_profile` /code/pre  Do I need to set my path to ignore the default ruby?  For what it is worth:  precode$  rbenv exec ruby -v ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin16] /code/pre  but obviously I don't want to write out the executive command everytime I want to use ruby... Per the blog, adding codeeval "$(rbenv init -)"/code doesn't make the coderuby/code command defer to the rbenv global version... Help.  <answer266063> I entered this:  precodeecho 'if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi' &gt;&gt; ~/.bash_profile source ~/.bash_profile /code/pre  but it should be:  precodeecho 'if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi' &gt;&gt; ~/.bash_profile source ~/.bash_profile /code/pre  ...now it works fine.  <comment333627> @klanomath ::tips hat, nods::