Creating a project inside XCode <body> In fact I want to port my wxWidgets-based application over to Mac using OS X 10.8 and Xcode 5. My application at this point will consist of the main executable and couple of dylib's.  So, after opening the XCode and going to the "File-New", I see there are "Project" and "Workspace" submenus.  I'm at a loss to:  ul lipresume I need to create a workspace, and then in there create 1 project for the main executable and 1 project for each dylib library./li liforget about the "Workspace" and just start with the project for my main binary and then continue with another project on the same level for the library/li /ul  Could someone shed some experience please?   <answer231517> This is an example of where a simple C++ command line application and dynamic library are created. The version of Xcode is 7.2.1 which requires at least OS X 10.10.5 execute, but can generate applications that only require OS X 10.7 or newer.  h2Part I: Create the Workspace, Projects and Source Code Files./h2  ol liUsing the Finder application, create a folder. In this case, I created the folder named "simple" in my "Documents" folder./li liLaunch the Xcode application. If the "Welcome to Xcode" window pops up, close the window. From the menu bar, select the strongFile-New-Workspace.../strong item. I used the name "simplews.wcworkspace", which I selected to place in the "simple" folder./li liFrom the menu bar, select the strongFile-New-Project.../strong item. Select "OS X Application", then "Command Line Tool". Click the "Next" button./li liFor "Product Name:" and "Language:", I used "simple" and "C++", respectively. Click the "Next" button./li liUnder "Add to:" select "simplews". Click the "Create" button./li liFrom the menu bar, select the strongFile-New-Project.../strong item. Select "Framework &amp; Library", then "Library". Click the "Next" button./li liFor "Product Name:", "Framework:" and "Type:", I used "simplelib", "None (Plain C/C++ library)" and "Dynamic", respectively. Click the "Next" button.     Note: I choose a dynamic library. If you need a static library, substitute "Static" for "Dynamic". You can also change this after   creating the project. (Look for "Mach-O Type" under "Build   Settings".) /li liUnder "Add to:" select "simplews". Under "Group:" and "simplews". Click the "Create" button./li liFrom the menu bar, select the strongFile-New-Group/strong item. On the created folder, replace the name "New Group" with "simplelib"./li liHighlight the "simplelib" folder. From the menu bar, select the  strongFile-New-File.../strong item. Select "OS X Source", then "C++ File". Click the "Next" button./li liFor "Name:" use "simplelib.cpp". Make sure the "Also create a   header file" is strongnot/strong checked off. Click the "Next" button./li liVerify the "Group" is the "simplelib" folder and under "Targets",   "simplelib" is checked off. Click the "Create" button./li liHighlight the "simplelib" folder. From the menu bar, select the   strongFile-New-File.../strong item. Select "OS X Source", then "Header File". Click the "Next" button./li liFor "Save As:", use "simplelib.h". Under "Group" select the folder  "simplelib". Under "Targets", make sure "simplelib" is checked off.  Click the "Create" button./li /ol  h2Part II: Configure Project Dependences/h2  ol liProject "simple" has to be able to find the headers from project "simplelib". Highlight project "simple", then "Build Settings". Change "Header Search Paths" to "../simplelib". An illustration is shown below.     Hint: Click on the image or open in a new window for a better view.   img src="https://i.stack.imgur.com/lrEaM.png" alt="700"/li liProject "simple" has to be able to link to the library created by project "simplelib". Highlight project "simple", then "Build Phases". Under "Link Binary With Libraries" click on the + sign and add "libsimplelib.dylib. An illustration is shown below.  img src="https://i.stack.imgur.com/0BUuk.png" alt="701"/li liRemove the library search paths added by step 2. Highlight project "simple", then "Build Settings". Under "Library Search Paths", delete paths "$(inherited)" and "$(PROJECT_DIR)lib/build/Debug". An illustration before the deletions is shown below.  img src="https://i.stack.imgur.com/PMK0x.png" alt="702"  When finished, "Library Search Paths" should show no paths as shown in the image included in step 1./li /ol     Note: The dependency of project "simple" on project "simplelib" should be detected automatically. Therefore, the step to include one has been omitted.   h2Part III: Build and Run the Application/h2  strongAsk Different/strong is not about programming. However, I will include the code that I entered.   simplelib.h  precode#ifndef simplelib_h #define simplelib_h  class sample { public:     static void print(); };  #endif /* simplelib_h */ /code/pre  simplelib.cpp  precode#include &lt;iostream&gt; #include "simplelib.h"  void sample::print() {     std::cout &lt;&lt; "Hi from simplelib!\n"; } /code/pre  main.cpp  precode#include &lt;iostream&gt; #include "simplelib.h"  int main(int argc, const char * argv[]) {     std::cout &lt;&lt; "Hello, World!\n";     sample::print();     return 0; } /code/pre  ol liTo build the application first select strongProduct-Scheme-Simple/strong from the menu bar. The sets the focus on application project "Simple".     Note: The check mark does not always move after making a selection. This has been a bug for quite some time. /li liNext, select strongProduct-Build/strong from the menu bar./li liFinally, select strongProduct-Run/strong from the menu bar. The output is shown in the image below./li /ol  img src="https://i.stack.imgur.com/Zoe1H.png" alt="704"  <comment282725> I'm tempted to migrate this to SO as we don't really entertain code level questions here. Before I do that - is there a reason why you asked here as opposed to SO? We allow some basic - Xcode errors or how do I download the app, but this seems more like how to style your setup as opposed to the mechanics of getting the app to run or to understand the developer program service. <comment282726> @bmike, SO is for the programming questions only. This one is more for a project design in the un-familiar environment. I do have a lot of experience with MSVC, where the workspace is created along with the first project, but I'm not sure the same paradigm applies to XCode <comment282728> @bmike, Like I said the structure of the project is "main application + dylib's". And it is more an XCode question than the programming one. <comment282737> @bmike, From the quick look at https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Workspace.html it definitely looks like I need a workspace first and then keep adding the libraries project in it. Can you confirm? <comment282744> 2 questions: First - I have XCode 5.1.1 under OSX 10.8. Which one do you have? 2. My project contains static library as well which statically link to one of the dylib. Could you give an example of this scenario as well? Thank you. <comment282748> There are many tutorials on Xcode I thunk this is too broad to be answered here