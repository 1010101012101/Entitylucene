PHP 5.4 Installation on Mountain Lion <body> I just installed Mountain Lion, and of course I've had to set up Xcode Command Line Tools, reinstall Git, and do other things to get up and running again for programming. Naturally, PHP was pushed back to 5.3 from 5.4 that I previously had installed when my MacBook Pro was running Lion. I ran through the process downloading PHP 5.4, unzipping it (tar xf php5.4), configuring it (./configure with and without options), making it (make), running the make test (make test), and installing the make (sudo make install). When I ran configuration with options it did not allow me to make and when I ran without configuration options it failed to pass make test a few times (when this occurred I sent the information to Zend). When it did pass make test though, it said that it installed successfully, but when I would check the version (php -v) it still comes up with PHP 5.3. I've done this almost nine times with restarts and re-downloading the package every time; no sauce. Does anyone have any ideas what could possibly be going wrong? Any help on this issue would be greatly appreciated.  <answer58361> I've installed MAMP and everything works fine.  <answer58362> I strongly suggest you use the package installer or use a full stack of configuration options when compiling, including the --prefix option so you know where the binary gets installed to.  I can only guess PHP 5.4 installed itself into code/usr/local/bin/code or somewhere else and didn't just overwrite the default binary in code/usr/bin/code. And you seem to have not modified your codePATH/code variable to prioritise the bin directory of code/usr/local/code with e.g. codePATH="/usr/local/bin:$PATH"/code in your .bash_profile. So, it's expected running codephp/code will still use code/usr/bin/php/code and not code/usr/local/bin/php/code.  Alternatively, you could just symlink the new php binary to /usr/bin/php, (delete or rename the default binary before that):  precodeln -s /usr/local/bin/php /usr/bin/php /code/pre  <answer58418> Have you tried installing it via Homebrew?  Also just found a blog post (you have to scroll down a bit to the Homebrew section) which is saying that the problem with compiling PHP might be because ML doesn't come with X11, but there's a workaround.  Actually, here's the relevant bit from the blog post:     Apple removed support for X11 in Mountain Lion. This means that   anything that was linking to a library that was supplied by X11 would   now complain and die. This meant our custom compiled version of PHP at   work. dylibs were missing which prevented PHP from running and header   files could not be found which prevented an update to PHP from   compiling.      The Homebrew folks saw it coming a while back. There are pull requests   and changes in branches that deal with this issue. However the best I   can tell not all of that has made it in to master and its still not   ready to go.      There is a work around, and it relies on installing XQuartz to provide   the required X11 libraries. This may not be required for everyone, but   for those of us that run specific versions of software it means a   headache. In our case, for PHP, it meant that libraries required for   font and image handling were missing. And these are just the errors   that came up first. Iâ€™m not sure how many other things that X11   provided were waiting to error out should we have tried to link in the   parts as we found the errors.      First, download and install XQuartz. After doing that symlink it in to   where Homebrew expects X11 to be. We had folder there, presumably left   over from the upgrade.  precode$ cd /usr $ mv X11 X11.bak $ ln -s /opt/X11 X11 /code/pre      Now, since this was an OS upgrade all of the config and ini files have   been renamed and replaced. This means that the Apache conf and PHP ini   files needed replacing. Fortunately for us we had a custom Homebrew   Formula that handled this portion of the environment for us. So we   just had to uninstall and reinstall that Formula to re-configure   Apache and PHP how we had it. Your setup will of course be different.   <comment67102> MAMP does not include PHP 5.4. <comment67155> The installer won't just magically tell the system to use the newer php binary over the one in /usr/bin. Either symlink or set your PATH variable. Do a `/usr/local/php5/bin/php -v` to see that the new binary is correctly installed <comment67246> Indeed it does: http://www.mamp.info/en/documentation/releases.html <comment67255> my apologies: looking at the [MAMP *product* page](http://www.mamp.info/en/mamp/index.html) it did seem the contrary. (I also had noticed the lack of 5.4 the hard way, but this was before 2012-07-12.) <comment67410> This was the answer I was looking for. After I modified my `$PATH` in my `.bash_profile` and set up Apache it worked. Now, I'm just having issues getting my localhost to work, ugh. <comment91782> I was having issues with installing PHP 5.4 on Mountain Lion as well. I wrote down the steps I followed in a blog post: http://www.sawantshah.com/web-development/installing-php-5-4-on-mac-os-x-mountain-lion-from-source/. You, and others who might be having issues, may find a resolution (there were many issues I came across) on this link.