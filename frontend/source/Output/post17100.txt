In OS X 10.6 how do you mount an AFP share at boot or before user login? <body> Is there a way to mount an AFP share at boot so it is accessible to the system without a user logged in?  I would like to run scripts via SSH or as a daemon on boot that check files on my AFP share. Unfortunately, the shares don't mount until a user logs in.  <answer17101> Not sure that you can.  I would think for security reasons a user has to be logged in, so that a set of credentials can be used.  There's probably some scripts that are run pre-login though, so I suppose if you specify your credentials in there it would be fine.  <answer17103> Indeed you can script it all from terminal.  You will want to learn a little about launchd - that will specify when the mount will happen. At $5 the Lingon app from the App Store is great if you don't want to learn launchd configuration files.  Next, you'll need a command to make the AFP mount.  Last, you might learn security command to store or retrieve a password from the keychain if you don't want to store your afp password in the script.  Each of these should be easy to learn more with a few internet searches.  <answer17143> Here you go.  A bit outdated, but you can see how to do what you want from here.   http://www.real-world-systems.com/docs/launchctl.1.html    <answer50312> Yes, this can be done, and it's actually necessary when you want the share point available to something like servers which are started and run without a user logged in.  I did this years ago for something, and just again needed to do it, but my notes were inadequate. After a lot of fiddling, I've written enough details out so that I'll never have to do that again (I hope).  You combine launchd and a script, but there's some details that many other posts fail to mention. I captured them (at least for my setup).  All the nitty gritty details are here:  http://www.gregwillits.ws/articles/using_launchd_to_mount_afp_share_point_upon_startup  <answer53052> I would look into AutoFS. You can have AFP mounted on demand (see page 14 of the linked PDF).  <comment18641> Actually, having a user logged in when the mount happens makes tons of sense. Someone will see an error and connect it to something that is happening now. Next, the user can provide credentials and thirdly, if the credentials are stored in a user keychain, then it's more secure on multi user systems. <comment18701> @bmike - I agree.  Why 'actually'?  Did you think I was arguing that a user shouldn't be logged in, or...? <comment18702> Ooh.  Retrieve passwords from keychain.  I like it. <comment18704> Im scratching my head too about actually - I think I wanted to say additionally. <comment59344> Welcome to Ask Different and thanks for posting an answer greg! Can you please summarize the contents of the link you posted? Link have a tendency to disappear over time, leaving an answer that is not relevant to those who may find your answer down the road. Thank you!