USB to Serial Adaptor works once for every reboot <body> Update#2, After testing with different console applications, I think the conclusion is GNU screen coming with Mac OS X 10.11.4 has a defect causing this issue. Hope some dev can see this and help diagnose for a fix...  Update#1, Now I upgraded to the 10.11.4 and also upgraded cable driver... Issue still happens...help!!!  I have a USB to Serial Adaptor for connecting to CONSOLE port of switch/router and I use "screen" inside Terminal to connect. Recently I found the "screen /dev/cu.usbserial 9600" works only once for every system reboot. Here are the steps to replicate:  ol liThe output of "ls /dev/emusb/em" shows the correct device./li liLogin to console of the device with "screen /dev/cu.usbserial 9600"/li liPress "Ctrl+A, Ctrl+K" to exit screen/li li(optional), disconnect/reconnect the usb to serial adaptor from laptop OR disconnect/reconnect the console cable from target device./li liThe output of "ls /dev/emusb/em" still shows the correct device./li liTry to connect to console again with "screen /dev/cu.usbserial 9600", the screen process will hang. Once that is happening, the screen process can not be killed via "sudo kill -9" and only be solved by complete power cycle. BTW, the laptop will also hang during reboot/shutdown, until I keep pressing on power button.../li liOnce screen hang, The output of "ls /dev/emusb/em" would show nothing./li /ol  Once laptop boots up again, I can connect with the same screen command and same scenario for step 2-3 above...  I have Mac OS 10.11.3 and adaptor is Micro Innovations branded (Prolific chip). I downloaded and installed/re-installed driver from Prolific site and no difference...  Any idea?  <answer232088> Firstly, does codecu -l /dev/cu.usbserial -s 9600/code work more than once? If not, how does it fail?  Because the second open blocks and does not die even with codekill -9/code it probably it is a driver issue with the call to codeopen(2)/code getting the initial device handle blocking. The device open might block if the device is not in local mode and the CD input is low.  Some versions of those devices have hardware flow control bugs. You could try a hardware fix of looping RTS to CTS and connecting DTR, DSR and CD on the connector and just let the RX, TX and ground pins connect to the console port.  Another possibility is running codestty clocal &lt; /dev/cu.usbserial/code. This should make the device ignore control signals. This is worth trying from a different terminal while the second open is blocking.  Update:  You need to run codecu/code with codesudo/code so that it can write a lock file to /var/spool/uucp. If you have no contention for ports (unlikely on a single user Mac), you can change the lock directory path using a config file. Create an empty directory, then create a config file setting codelockdir/code to that directory path. Something like:  precodelockdir /User/yourname/lockdir /code/pre  Then run using a command line like this:  precodecu -I /path/to/conf/file -l /dev/cu.usbserial -s 9600 /code/pre  <answer272008> I would like to mention, not being mentioned anywhere else, that I have the exact same problem on a Raspberry Pi with the same USB to serial connector.  One question that remains unanswered is how to disconnect: I found that out in the codecu/code man page: code~./code  Also I found out that codesudo cu -l /dev/cu.usbserial -s 9600/code works on reconnection to the RPi (RPi 1, Model B); but codesudo cu -l /dev/cu.usbserial -s 115200/code doesn't; which is at odds with Adafruit's instructions, which say codescreen /dev/cu.usbserial 115200/code.  I am happy now to be able to connect and disconnect to the RPi at will. I am also able to codecu/code without codesudo/code. Thank you @janm.  <answer275559> To resolve this, I removed the FTDI extension and reinstalled the most current version of the 'driver' (v2.3) downloaded from FTDI's website.  precoderm /Library/Extensions/FTDIUSBSerialDriver.kext Install new version Restart /code/pre  Now I can disconnect and reconnect the USB to Serial cable without restarting.  <answer295636> I also had this issue, exactly as described with a PL2303 USB/serial device.  The solution I went with was to use the driver from https://www.mac-usb-serial.com/  Screen worked fine after this for multiple connections.  <comment278962> Anyone could help? Or I am the only experiencing the issue? <comment283454> Now I upgraded to the 10.11.4 and also upgraded cable driver... Issue still happens...help!!! <comment283620> `cu -l /dev/cu.usbserial -s 9600` works more than once. I think your are right on the open(2)...I also tried `stty clocal  /dev/cu.usbserial` but after that screen still hang on second connect... <comment283621> To just save hacking effort on the adaptor and money to buy anther adaptor, should I just simply use `cu` instead of `screen` when I need to connect to console? <comment283698> @m1xed0s Yes, you should use `cu` instead of `screen`. If you need the detach functionality, you can do `screen cu -l /dev/cu.usbserial -s 9600`. The issue is probably around `screen` changing the RS-232 signal handling on the port, and `cu` leaving it alone. <comment283699> @m1xed0s With the `stty clocal  /dev/cu.usbserial` command, did you try it while `screen` was hanging? Trying it before the second command and during the second command test different things; it's worth trying both. <comment283722> I don't need detach feature of the `screen` but the only downside with `cu` is i have to run with `sudo`... I will check the `stty` again and report back <comment283797> does not make any difference with `stty clocal  /dev/cu.usbserial` either between the two `screen` OR after the second `screen`...I guess I will go forward staying with `cu`, just need to figure out how to run `cu` without the `sudo` part :) <comment283918> The issue with needing to use `sudo` is writing the lock file to /var/spool/uucp. If you aren't on a multiuser system where port contention is a problem, you can change lockdir in the config file. See updated answer. <comment285817> Sorry, Have been busy recent and did not have time to check this. What do you mean by "If you have no contention for ports (unlikely on a single user Mac)"? What ports, ethernet or you mean the ports used for `cu`? I use the serial usb adaptor on my work laptop which I am pretty much the only account on it. BTW, I think there is a typo in your last example command which would be `-l` before the `/dev/cu.usbserial`. <comment285872> @m1xed0s Thanks for pointing out the typo. I mean multiple users or processes attempting to open the serial port at the same time. This was an issue on multiuser Unix machines with pools of modems, but it is a non-issue on your Mac. <comment285880> First, I would not use screen to connect to serial consoles. minicom is is the tool you want, it can be installed via MacPorts. Second, the Prolific chip is problematicâ€“particularly with Cisco hardware. The only reliable USB-Serial that I have used is the Keyspan USA-19HS. <comment286146> @medbot, the one I have is provided by the company...so cheaper from my perspective. I really did not have issue with connecting to different vendor devices via `screen`, just recently started causing me issue on Mac.