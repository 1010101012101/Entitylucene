Program, or workflow to update a single file and update all instances of it everywhere else <body> Is there a program, or a workflow that is best for working with a single file, and when saving to update all instances of the file on the computer, whether it be in different projects folders?  strongEdit (Response to Comments):/strong Well, I have javascript and css files that are shared between multiple projects. When I update or amend a file, I find myself having to manually copy and paste to replace the same files in all the other projects that rely on the same file(s).   <answer103105> What you are describing might be accomplished with a hard link.  Hard links mean that one file on the drive is seen as a file in multiple folders.  So, if you had a file recipe.doc and stored in your ~/Documents folder, you could hard link it elsewhere - perhaps /Users/Shared and ~/Projects/Cooking/Pasta/recipe.doc  So, the link count would be 3 for that file and only one recipe would take space on the disk. If you deleted the file in /Users/Shared - rather than deleting the file, it just removes that one link and decrements the file counter to 2. When the last link goes away, you have a link count of 1 and the file remains, but no copies in other folders.  If you want to learn more, the link command is a terminal command written as ln.  Also, you could check that file into some sort of code control system like git and script the checkout in the folders of your liking. It really depends on how much time you'll save or if you just want to write a quick and dirty shell script to push the changed file elsewhere (or use rsync to copy just the changed bits and be Ã¼ber efficient).  <answer103221> Theoretically you could use Folder Actions to watch for changes on shared files and copy them over to all the other projects/folders. In practice this will not really work because Folder Actions tend to be not very reliable. I found that Hazel works quite well for this though, a lot of stuff can be automated that way.  hr  Depending on your requirements you may also want to think about structuring your files differently because duplicating files emwill/em lead to problems especially if you use version control, work in larger setups or if several people are involved. So instead of having several projects in a structure like  precode+ project-1   + common-file-1   + common-file-2   + specific-file-1.1   + specific-file-1.2 + project-2   + common-file-1   + common-file-2   + specific-file-2.1   + specific-file-2.2 /code/pre  and probably building/packaging them from there you could switch to something like  precode+ common   + common-file-1   + common-file-2 + project-1   + src     + specific-file-1.1     + specific-file-1.2   + build /code/pre  and then use a build script in codeproject-1/code to copy all the relevant files from codecommon/code and codeproject-1/src/code into codeproject-1/build/code for further use. It may take some effort to change your current structure into something like that but it might bring benefits on the long run. If you want to dig depper into this, Pragmatic Project Automation is a good place to start with.  <comment121358> What exactly are you trying to accomplish here, can you maybe mention a specific example of such a file? <comment121362> Added edit in response to your comments <comment121378> Any solution based on links (whether hard or soft) depends on how the editor saves files after an edit. If a new file gets written (and the old one renamed to .bak for instance) links will not work. <comment121384> @bmike, thanks for the input, and answer. Sounds like something that is worth checking into. I know that do tend to change version numbers of the files (name wise) i.e. "jquery.plugin-v3.7.js" as patrix mentioned. <comment121388> @leetou You can choose whatever name you want when linking (hard or symbolic links) so that each copy of the file can have a different name if you prefer. <comment121390> @patrix I would file a bug report on any program that didn't gracefully handle hard links, but you're right many do not. It's worth considering and testing before investing a lot of time in converting your file structure to links. <comment121391> @bmike there is no "right" way to handle this situation (I could easily argue both options) but if the OP is careful with naming conventions (and maybe uses a script to refresh any mishappenings) it should work out ok. <comment121392> Thanks guys for also pointing out some of the flaws. I'll be sure to do small initial test before any large overhaul to the file structure. @patrix, you mentioned refresh scripts, can you give an example? Thanks! <comment121528> thanks for your feedback. Yes, I agree with with duplication there can be issues. I'll do some small test with this and see if it's a feasible option as well. Thanks!