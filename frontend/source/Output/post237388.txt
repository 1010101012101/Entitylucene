setup youtube-dl destination to ~/Downloads <body> How do I setup codeyoutube-dl/code to default download to ~/Downloads instead of the home folder?  <answer237390> There is no way of setting a default folder. Instead, you have to append the option code-o/code every time.  precode -o ~/Downloads/%(title)s-%(id)s.%(ext)s /code/pre  ul licode%(title)s-%(id)s.%(ext)s/code is the default filename format for every download./li /ul  <answer237392> It doesn't download to your home, but to the current working directory. Change it before you want to download. If you're using codebash/code, you might want to create a function in your code.bashrc/code like this:  precodefunction youtube-dl () {     cd ~/Downloads/ &amp;&amp; {         `which youtube-dl` "$@"         cd - &gt; /dev/null     } } /code/pre  This changes the working directory to the Downloads folder in your home, runs the original codeyoutube-dl/code with the command line arguments you passed to the function and then changes the directory back.  You also may want to have a look at this: How do I run a program with a different working directory from current, from Linux shell? as this also applies to OS X.  <answer237393> h1codeyoutube-dl/code Config File/h1  To set a default download location, create a codeyoutube-dl/code configuration file at:  precode~/.config/youtube-dl/config /code/pre  Within this file enter the line:  precode-o ~/Downloads/%(title)s-%(id)s.%(ext)s /code/pre  You can create this file using the following two commands:  precodemkdir -p ~/.config/youtube-dl/ echo "-o ~/Downloads/%(title)s-%(id)s.%(ext)s" &gt; ~/.config/youtube-dl/config /code/pre  The first command codemkdir/code, creates the folders leading to the configuration file. The second command codeecho/code writes the output option into the file.  Options set within your configuration file are applied to every call to codeyoutube-dl/code. Use the code--ignore-config/code option to disable reading of the configuration file.  <comment290700> I like grahams solution better than mine for use with youtube-dl. My version works for every application, though. <comment290706> Did you test whether the ``which youtube-dl`` part works? Doesn't this expand to the function once it (the function) is defined? <comment290709> No. Functions are not in the scope of `which`. Which searches in PATH. I also tested the script a few times ;) <comment290710> To expand functions by name, use `typedef -F` or `-f` <comment290719> Thank you! This is the solution. But now Iâ€™m getting mkv instead of mp4 files. <comment290721> Add the following line to your config file to either request mp4 files or have youtube-dl convert after downloading to mp4: `--format mp4` <comment290751> Hmm, `which` is aliased to `type -p` here which returns nothing if `type -t` wouldn't return `file` (which is doesn't as it is a function now). Great if it works in your case, strange nevertheless. <comment290754> `which`s manpage states the following: "locate a program file in the user's path". `which which` also returns an executable under PATH. `alias which` returns nothing for me, neither on the old-age bash OS X shipped version nor on a current one.   Besides, as `youtube-dl` can take more than one argument, I intentionally didn't add quotation marks around `$@`. <comment290756> This question is not specific to OS X. youtube-dl is pretty much cross-platform application. I think it must be moved to Superuser. <comment290757> '$@' *must* have quotation marks to properly expand in all cases, check Parameters/Special parameters in `man bash` for details (`When the expansion occurs within double quotes, each parameter  expands  to  a  separate               word.   That is, "$@" is equivalent to "$1" "$2" ...`) . <comment290849> If `\`which youtube-dl\`` is intended to avoid the function calling itself, a better (and portable!) approach is to use [`command youtube-dl`](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/command.html). <comment290870> What system lacks which? <comment290962> Your approach will fail if `youtube-dl` is located at a path that contains spaces. It's fixable, but why not just use the standard commands the way they're supposed to be used? <comment346276> the standard Commands (```...-o ~/Downloads/%(title)s-%(id)s.%(ext)s```) failed to work for me. I'm Using Mac OS X 10.12. This did the trick, I don't know why..