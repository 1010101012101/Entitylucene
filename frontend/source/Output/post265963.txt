Use of regular expressions in macOS search fields <body> Does anyone know where I can find the docs describing Regex parsing capabilities of macOS search fields?  What I mean, I'd like to read about the regex syntax rules that are allowed and parsed by the search field. For example, what I didn't know until today that, in macOS Preview (or any other application with a standard search field, guessing) we can use input like this:  code"\s" AND "an" AND "\s"/code   This works and hints that search fields interpret more regex then we know, strongand this is what I want to read/find out about/strong. The example above searches for strong"an"/strong with one trailing and leading whitespace character code\s/code within a opened document.  I'd like to know more about those grouping rules and regex characters wrapping/escaping so it can be correctly parsed. Also does this format of input apply to systemwide search fields of any application?   I can't find any docs describing these features and was found only this on developer.apple.com library instead.  Below you can see an example of strongdefault/strong search behaviour for a "an" word within a PDF document, it shows all strong"an" occurences/strong in the results, regardless if you put a space before the "an" word, so your input is strong" an "/strong   img src="https://i.stack.imgur.com/7DlpK.png" alt="enter image description here"  When we put code"\s" AND "an" AND "\s"/code into the search field we get the more desired search result  img src="https://i.stack.imgur.com/dNvLU.png" alt="regex input search field behaviour"  This makes a huge difference for searches containing common words!  strongIn short:/strong I'd like to know more about the functionality you see above. Where can I find any (official) documentation about it?  The answers provided (so far) are not answering my question, thank you for them though - aggregating more related information is good.  <answer266430> I don't know if you discovered this already but you just need to click on the magnifying glass in the search field, it has a little down-pointing caret which is the clue, see this screenshot:  img src="https://i.stack.imgur.com/fphzz.png" alt="enter image description here"  After clicking choose codeInsert Pattern/code and you get a range of options:  This is basically user-friendly regex, i.e. you get tokens you can easily arrange into quite powerful search patterns.  img src="https://i.stack.imgur.com/WoejC.png" alt="enter image description here"  The example in the screenshot is TextEdit however this option doesn't appear to be available in Preview.  <comment333973> Will this [link](https://developer.apple.com/library/content/documentation/OpenSource/Conceptual/ShellScripting/RegularExpressionsUnfettered/RegularExpressionsUnfettered.html) be of any help to you? <comment334317> Hi- thank you for the long answer, BUT this is TextEdit you are showing... not the system-default search window like the one in Preview option, therefore it is not the answer i'm looking for.  The search Window I mean is (highly probable) an instance of https://developer.apple.com/reference/appkit/nssearchfield#overview <comment334320> Hi Denis, thank you for the link- but this is more or less the posix regex manual ;-) and if you look carefully into my example above- its not posix regex- since the common syntax isn't working and that is why the question is here. Im not sure if words like AND OR are in posix regex (correct me, if i'm wrong) anyways. That being said- I can't find the specifics of the syntax for this kind of search field. It is (probably) an instance of https://developer.apple.com/reference/appkit/nssearchfield#overview (guess) but I can't dig out the regex specifics. <comment338112> Are you sure that we’re talking about regex here? I tried your example in Preview, and a few regex variations, but none of them seemed to behave as a proper regular expression. That doesn’t answer your question, but might help in looking in the right place. <comment338216> Yes, you are right - and this is what I want to find out! Where is a document describing what kind of syntax is parsed and how? It's not posix regex, but it's regex-ish enough, so what is it? :)