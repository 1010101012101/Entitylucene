Is there a way to change the font color of the current path in termial? <body> I'm styling my codeTerminal/code and what I need is to change the color of the path, if you still don't understand what I mean, here's a pic:  img src="https://i.stack.imgur.com/IRwmK.png" alt="terminal"  There you can see the shaded area (codeJonathans-MacBook-Pro:~ feniixx$/code), That is what I want of other color than dark yellow, is it possible?  <answer219133> The text you highlighted is the emprompt/em. It is stored in the codePS1/code shell variable.  You can read the current value with  precodeecho $PS1 /code/pre  and then set it with (for example)  pre class="lang-none prettyprint-override"codePS1='\[\033[1;32m\]\h:\W \u$\[\033[0;39m\] ' /code/pre  where  ul licode\[\033[1;32m\]/code starts colouring in green/li licode\h/code shows the machine name/li licode\W/code the current path/li licode\u/code the user/li licode\[\033[0;39m\]/code stops the colouring/li /ul  The embackslash-escaped special characters/em are described in the bash manual page  pre class="lang-none prettyprint-override"codePROMPTING        When  executing  interactively,  bash displays the primary prompt PS1 when it is ready to read a command, and the secondary prompt PS2 when it needs more input to complete a command.        Bash allows these prompt strings to be customized by inserting a number of backslash-escaped special characters that are decoded as follows:               \a     an ASCII bell character (07)               \d     the date in "Weekday Month Date" format (e.g., "Tue May 26")               \D{format}                      the format is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-specific time representation.  The braces are                      required               \e     an ASCII escape character (033)               \h     the hostname up to the first `.'               \H     the hostname               \j     the number of jobs currently managed by the shell               \l     the basename of the shell's terminal device name               \n     newline               \r     carriage return               \s     the name of the shell, the basename of $0 (the portion following the final slash)               \t     the current time in 24-hour HH:MM:SS format               \T     the current time in 12-hour HH:MM:SS format               \@     the current time in 12-hour am/pm format               \A     the current time in 24-hour HH:MM format               \u     the username of the current user               \v     the version of bash (e.g., 2.00)               \V     the release of bash, version + patch level (e.g., 2.00.0)               \w     the current working directory, with $HOME abbreviated with a tilde (uses the value of the PROMPT_DIRTRIM variable)               \W     the basename of the current working directory, with $HOME abbreviated with a tilde               \!     the history number of this command               \#     the command number of this command               \$     if the effective UID is 0, a #, otherwise a $               \nnn   the character corresponding to the octal number nnn               \\     a backslash               \[     begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt               \]     end a sequence of non-printing characters         The  command  number  and  the history number are usually different: the history number of a command is its position in the history list, which may include commands restored from the        history file (see HISTORY below), while the command number is the position in the sequence of commands executed during the current shell session.  After the string is decoded, it  is        expanded via parameter expansion, command substitution, arithmetic expansion, and quote removal, subject to the value of the promptvars shell option (see the description of the shopt        command under SHELL BUILTIN COMMANDS below). /code/pre  While the colours can be changed with escape sequences. See http://bluesock.org/~willg/dev/ansi.html for a list.  <comment265045> Yes you can change the color of this thing (by the way this is called PROMPT) there are already a lot of entries to this on stackexchange and also on www in general. - so a good reference i used to do my tweaking was this site: http://code.tutsplus.com/tutorials/how-to-customize-the-command-prompt--net-20586