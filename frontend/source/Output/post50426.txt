Automatically Mount a Network Drive and Copy a File to a Network Folder (AppleScript) <body> I've a rather complex task to solve. I don't use OS X, but now I have to provide some colleagues with a simple application that automatically copies a certain file to a network folder. Normally I'd use a shell script, but some minimal GUI is a must-have thing in this case. So I thought I could use AppleScript.  I'd have to perform these steps:  ol liConnect to a network drive (codesmb://myserver/public/code, where every user has different login names and passwords, so wiring the usernames and passwords in the code is not an option)./li liNavigate to a folder on the network drive (every user has a different folder on the network drive)./li liCopy a certain file from the user's desktop to the opened folder on the network drive./li /ol  So when running the script the user has to enter his or her username and password for connecting the network drive, and the user has to enter the name of the folder they should copy the file to. Can the name of the folder be stored permanently somehow? So the user won't have to enter the folder name each time when he or she runs this script. But from time-to-time these folders may change, so there has to be an option to change the folder before copying. Also how can I check if the network drive is already mounted, so the user won't be asked for username and password each time he or she runs this script?  hr  Here is how far I've been able to go in assembling a script to accomplish this task:  I'm struggling to understand how AppleScript likes to store a path to a file/folder on a mounted network drive.   So here is what I have now:  precodeproperty userName : "myfolder" property folderName : "myusername"  property serverName : "public" property serverAddress : "smb://myserver/public" property serverStatus : 0  on connectToServer()     global userName     global folderName     global serverName     global serverAddress     global serverStatus      set mountedDisks to list disks     if mountedDisks does not contain serverName then         mount volume serverAddress as user name userName with password (display dialog "Enter password for" &amp; quoted form of serverName with title "" default answer "" giving up after 3 with hidden answer)     end if      set mountedDisks to list disks     if mountedDisks contains serverName then         set serverStatus to 1     else         connectToServer()     end if end connectToServer  on mainLoop()     global userName     global folderName     global serverName     global serverAddress     global serverStatus      if serverStatus is equal to 0 then         connectToServer()     end if      set mainDialog to display dialog ¬         "Your username: " &amp; userName &amp; " Your folder's name: " &amp; folderName buttons {"Quit", "Settings", "Copy file"} with title "File Copier" default button 1     set mainDialogAnswer to button returned of mainDialog      if mainDialogAnswer is equal to "Quit" then         quit     end if      if mainDialogAnswer is equal to "Settings" then         display dialog "Enter your username" with title "Step 1 of 2" default answer userName         set userName to {text returned of result}          display dialog "Enter your folder's name" with title "Step 2 of 2" default answer folderName         set folderName to {text returned of result}          mainLoop()     end if      if mainDialogAnswer is equal to "Copy" then         -- copy the file     end if end mainLoop  mainLoop() /code/pre  <answer50460> Copying of files in Applescript is best done either through emSystem Events/em or emFinder/em, using the codeduplicate … to/code command, i.e.  precodetell application "System Events" to duplicate sourceFile to targetFolder /code/pre  where both codesourceFile/code and codetargetFolder/code need to be the correct object type for the application used – meaning emdisk item/em or emfinder item/em (both objects can be created from AppleScript emalias/em objects, or textual path values with a bit of type coercion – I’d add the details, but you have not stated how the paths to both are stored / acquired in your script).  A few notes on your code:  ul liThere is no need to use globals when you have defined them as properties already. AppleScript properties are script scoped and persist across execution – they are only reset when the script is recompiled. If you assign those that need user setting codemissing value/code when declaring, you can even check if they are already set and skip re-prompting the user (there would be an even more comfortable and secure solution if Apple hadn’t deprecated Keychain Access Scripting)./li liThere is no need for the repeated assignments and recursive call in your codeconnectToServer()/code handler. The following code  precodeset timeOutCounter to 0 repeat while (list disks) does not contain serverName and timeOutCounter is less than timeOutInterval     -- mount drive     delay someInterval -- recommended, so you don’t hectically loop     set timeOutCounter to timeOutCounter + someInterval -- time out loop  end repeat /code/pre  will try to connect in the interval defined by codesomeInterval/code, until the mount is available or codetimeOutInterval/codeis reached (assuming these values are declared. As properties, best – see above)./li liYou might also want to offer your user a more comfortable way of selecting the target folder than typing a folder name from memory. Check out emStandard Additions/em’s AppleScript dictionary for the codechoose folder/code command./li liFinally, but that is mainly a matter of taste and coding style, I’d rather move the codedisplay dialog/code command into its own handler and call that, if needed repeatedly, from the script body, than use a C style codemainLoop/code handler. I’ve found that, generally speaking, AppleScript runs out of Stack space easily when recursing and can get very confused about variable assignments, so it is a good idea to avoid recursive constructs where they are not necessary./li /ul  <comment57879> I spoke with a moderator from SO and we'd both like to keep this here for a bit to see if we can get you an answer. I'm going to promote the question so it rises to the top of our queue. Let's see how things go and you are most welcome to flag this again if you _really_ feel strongly that it should be moved. <comment57910> Well, you do have an answer … anything wrong with it you feel the need for SO? Just asking, I’d be glad to improve on it :): <comment57972> Thanks. No need for SO anymore. <comment58013> Thanks for the answer. Any advice on ho to set timeout? How often should I check if the network drive is mounted? I suppose `delay` measures in seconds. <comment58016> @szantaii: yes, `delay` measures in seconds. You will have to test a little on different systems – I’d recommend setting your timeout to one and half time to two times the slowest connect time you encounter, and your delay to about the fastest connect time you encounter.