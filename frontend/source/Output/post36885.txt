/bin/sh: rm: command not found <body> I have problems with some applications that use AppleScript codeshell script/code feature. For example, Growl's uninstall scripts shows an error:  precodeerror "/bin/sh: rm: command not found" number 127 /code/pre  The source of the script is  precodedisplay dialog (localized string "title") if button returned of result = "OK" then     try         quit application id "com.Growl.GrowlHelperApp"     end try     try         quit application id "com.Growl.MenuExtra"     end try     do shell script "rm -rf /Library/PreferencePanes/Growl.prefPane ~/Library/PreferencePanes/Growl.prefPane" with administrator privileges     display dialog (localized string "succeeded") buttons {localized string "OK"} default button 1 end if /code/pre  I've added codeecho $PATH &gt; /omg.txt &amp;&amp;/code to the command to see what's the search path for rm. But it has a weird value:  precode$ cat /omg.txt  Ã¢ /code/pre  What can I do? I don't understand what's going on. When I just run codesudo /bin/sh/code in Terminal, the environment is just fine!  Now, I know that to uninstall Growl I can just run the command it tries to run in the Terminal. But it won't solve this problem, just postpone it until another application fails with the same error (it happened before).  <answer36889> According to Apple's official documentation, it is by design that shell scripts invoked from AppleScript's codedo shell script/code action do strongnot/strong inherit the code$PATH/code variable from your login shell's environment.   Accordingly, Apple instructs users to use full paths to commands when invoking shell scripts from AppleScript rather than relying on the $PATH variable in the environment.  In the script in your example, you could replace coderm/code with code/bin/rm/code  According to the aforelinked documentation, this is the intended, documented behavior; a script that expects the environment's code$PATH/code to be set for codedo shell script/code commands is a script with a bug.  That said, if you absolutely need to use relative paths and use $PATH to complete them, you could prefix any shell script called by codedo shell script/code with the command codePATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin;/code  <answer36890> hotfix = give the location of coderm/code command:  precodedo shell script "/bin/rm -rf /Library/PreferencePanes/Growl.prefPane ~/Library/PreferencePanes/Growl.prefPane" with administrator privileges /code/pre  <answer36936> You could actually use Daniel's suggestion of exporting paths, but save it as a script unto itself (call it "dss" for do shell script, or something) and place it in emusr/local/bin/em. That way the next time you need to run an emosa/em script like the Growl uninstall, you can call your script from the command line to set $PATH, run the emosa/em job, and then be finished.  Not a permanent solution, but highly workable.   <comment41964> this won't work for all the others scripts :( <comment41965> it won't solve the problem once and for all :( <comment41989> Scripts that rely on the $PATH variable to be set are, according to the documentation, buggy. See revised answer. <comment41997> Will the osa pass its inherited environment on to scripts it spawns with `do shell script`? <comment42000> I believe so, at least if the script is using subroutines. Subroutines of a parent script will inherit the environment variables for that process.