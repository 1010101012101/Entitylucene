AppleScript: How to get all window names of processes that share the same title? <body> The process, codeRSScriptRunner/code, represents a currently running script that was triggered by FastScripts.app. (FastScripts does not assign unique process titles to scripts that it triggers.)  If one has multiple processes titled codeRSScriptRunner/code running simultaneously, then the following code:  precodetell application "System Events" to windows of process "RSScriptRunner" /code/pre  will only return the window name of the process that began the earliest.  However, I would like to get every window name of every codeRSScriptRunner/code process.  Does anyone know how to accomplish this in AppleScript?  hr  My ultimate intent here is to implement a check that ensures that only one instance of one script can run simultaneously. Multiple different scripts running is okay, but multiples of a script running at the same time is undesirable.  The code would look something like this:  precodetell application "System Events"     set theWindowList to windows of process "RSScriptRunner"     if theWindowList contains "The title of the initial dialog of this script goes here." then         error number -128     end if end tell /code/pre  This check would be located at the very top of the script.  hr  Note:  This is very much a situation where minimal latency is crucial.  I had devised a long-winded method that successfully realized my desired outcome. The method entailed getting every current process title into one list, and getting every current process ID into another, corresponding list. I then retrieved the window name of each codeRSScriptRunner/code process via its respective process ID (which, unlike the process name, must be unique).  However, this method brought with it a couple seconds of latency. I need a solution that is nearly instant (such as, the line of code above).  <answer286942> Note: On my system, strongmacOS Sierra/strong, there is no window for this process.  You can use a strongwhose/strong clause, like this:  For a process that contains only one window, use this script:  precodetell application "System Events"     set theWindowList to name of window 1 of (processes whose name is "RSScriptRunner")     if theWindowList contains "The title of the initial dialog of this script goes here." then         error number -128     end if end tell /code/pre  hr  For a process that can contain one or more windows, use this script:  precodetell application "System Events"     set myList to name of windows of (processes whose name is "RSScriptRunner") -- get a list of lists, each sublist contains names  end tell set theWindowList to my subListsToOneList(myList) --  Flattening a list of lists  if theWindowList contains "The title of the initial dialog of this script goes here." then     error number -128 end if  on subListsToOneList(l)     set newL to {}     repeat with i in l         set newL to newL &amp; i     end repeat     return newL end subListsToOneList /code/pre  hr  The solution for strongmacOS Sierra/strong, maybe it works for other strongOSes/strong as well, to get the name of the launched scripts, is to use the codeps/code and codepgrep/code commands.  precodeset theNameList to paragraphs of (do shell script "ps -p $(pgrep -x RSScriptRunner) | sed -n 's:.*RSScriptRunner.*/::p'") -- get the name of the scripts if theNameList contains "the name of this script.scpt" then error number -128 /code/pre  emInformations/em:  ul licode$(pgrep -x RSScriptRunner)/code : A sub shell to get the process ID of each instance of the strongRSScriptRunner/strong, the '-x' option: require an exact match of the process name/li licodeps -p/code: get the command of each PID (the result contains the path of the launched script)./li liThe codesed/code command : delete characters from the beginning of the line through the last slash character to get the name of the script (the code-n/codeoption is to print the line which contains the 'strongRSScriptRunner/strong' word only, because the first line is the headers -- codePID TTY           TIME CMD/code)./li /ul  <comment362234> Your first solution works perfectly. Regarding the second solution (i.e., the third code block in your answer), I had to change `if theNameList contains "name.scpt" then` to `if item 1 of theNameList contains "name.scpt" then` in order to get it to work on El Capitan (10.11.6), but this solution works perfectly, as well. Thank you for the solutions! <comment367648> In my previous comment, I was mistaken. Your second solution works perfectly on 10.11.6 - without any modification whatsoever.