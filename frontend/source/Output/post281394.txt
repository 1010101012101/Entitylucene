How to secure macOS's clipboard? <body> Is it possible for a third party app to access macOS's clipboard content? I am asking in relation to copy &amp; paste sensitive data such as passwords and sensitive file content.  <answer281399> No security for data that is in one of the system clipboards is possible by design.   The macOS clipboard is a public billboard open to all processes. Clipboard is the mechanism to let all apps read / modify shared data.   Either restrict your set of apps installed to those you trust with the data or don't ever copy sensitive content into the clipboard for your least trustworthy app.   From here, the rabbit hole for developers and security minded people using macOS begins with an overview of secure text input options within programs to prevent key loggers in addition to pasteboard snoopers from grabbing secure input:  ul liTechnical Note TN2150: Using Secure Event Input Fairly /li liinsecure keyboard entry - a blog post by Daniel Jalkut/li liHow secure is “Secure Keyboard Entry” in Mac OS X's Terminal? /li /ul  <answer281403> Any process with sufficient permissions can read your clipboard at any time, and you can't easily prevent this. Security is always a trade-off with usability, and this is the choice that most (but not all) OSes take when implementing the clipboard.  Some apps that store sensitive data (e.g. 1Password) implement a timeout such that any information you copy out of that application is cleared from the clipboard a short time later. If you'd like to do something like that globally, you could look at the answers to this previous question for ideas.  <comment354056> Welcome to Ask Different. Unfortunately, your question doesn't provide enough detail for us to help you. Reading [how to ask a question](http://apple.stackexchange.com/questions/how-to-ask) may improve your chances of getting a good answer. For now, can you please edit your question (there's an _edit_ link below it) to add info such as: (1) What version of macOS you're running? (2) If you're on macOS Sierra, are you referring to just the normal clipboard, the universal clipboard, or both? (3) When you refer to _third party app_, what do you actually mean by this? <comment354062> Rather than close this as too broad, I've removed your follow on question. Please review [help] and the comments above before asking how to modify clipboard. That will allow us to migrate code level questions to an appropriate site if you are seeking to program something as opposed to configure the os. <comment354069> what are other easy ways to copy passwords from some place to a browser field for example? besides always typing them by hand <comment354072> @SargeBorsch That's what password managers are for, generally. I expect there are safe password managers for Mac OS; though I also expect that applications with the same or higher level of permissions could intercept their methods as well. <comment354073> @Luaan but do you know specific examples? besides these popular but proprietary applications, which are created to harvest passwords. <comment354074> @SargeBorsch Nope, not really my field of interest. But it's obvious that this kind of thing requires *trust* :) <comment354076> @Luaan free software doesn't require trust, it can be inspected. <comment354104> well for one thing you definitely cannot copy+paste anything in a password box on macOS... <comment354139> @SargeBorsch - Even unintentional security flaws go unnoticed in open source, much less actual malicious backdoors and trojans. The notion that any old user is capable of inspecting the code of any nontrivial piece of software they use, then build it on their machine once it's known to be safe - after doing so for the compiler, of course - is flat out ridiculous, and contradictory to actual practice. (I.e. using package repositories with signed packages, meaning you implicitly trust a distribution's contributors to take care of this for you.) <comment354160> @dalearn To be more precise, you can paste INTO a password box, but you can't copy FROM a password box. I know I've frequently copied passwords from Keychain Access to password input boxes. <comment354172> @SargeBorsch: See [Ken Thompson's incredibly brilliant (and frightening) Turing Award acceptance speech / lecture](https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf) and the discussion thereof on [the wiki](http://wiki.c2.com/?TheKenThompsonHack). <comment354183> Great point that by clearing known sensitive content on a timer, you limit the time frame where a less trusty process can be launched and snoop on text from the clipboard. This also lessens the risk someone would walk away from a computer and have the password to paste hours later into twitter or other social media. <comment354185> It's a valid question. It does not matter what version of OS X/macOS. Third party meaning is very clear to anyone. <comment354190> @JörgWMittag yeah, interesting point. But it mostly applies to compilers. Or that an application authors secretly teamed up with compiler authors to make use of a hidden compiler glitch to produce harmful code without being detected. <comment354191> @Luaan OSX Keychain keeps track of passwords and decides which apps have access to which passwords. I doubt a malicious program could compromise it without root access. <comment354198> @BrianMcCutchon Which falls under "the same or higher level of permissions". There's not a lot of other ways to do things... <comment354452> @SargeBorsch: It applies to everything that processes programs: a compiler, an assembler, a linker, a loader, the OS kernel, the CPU, you name it. And it doesn't require cooperation from the program's author. That's the genius, nefarious, and frightening part: you can't detect the hack, because it doesn't have to exist where the hack takes place. <comment354473> @JörgWMittag how is that related to password managers? Are you trying to prove that since OS, CPU, compilers, etc _may_ be hacked, the quality/availability of other software's source code doesn't matter?