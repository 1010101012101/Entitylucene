How to resolve permissions errors on OS X Lion after Homebrew install <body> I just upgraded from Snow Leopard to Lion and am trying to get Homebrew installed. However after the installation, I run codebrew doctor/code per the installation instructions, and see a series of errors indicating that /usr/local directories aren't writable. For example:  precodeError: /usr/local/share isn't writable. This can happen if you "sudo make install" software that isn't managed by Homebrew.  If a brew tries to write a file to this directory, the install will fail during the link step.  You should probably `chown` /usr/local/share /code/pre  I get these for a bunch of directories:  precodeYou should probably `chown` /usr/local/include  You should probably `chown` /usr/local/share  You should probably `chown` /usr/local/share/man /code/pre  I can't figure out why this error is coming up, as it appears that I am part of the Unix group that has write permissions to these directories:  precodeMini:~ felciano$ ls -ld /usr/local/share drwxrwxr-x  4 root  admin  136 May 13 15:53 /usr/local/share Mini:~ felciano$ whoami felciano Mini:~ felciano$ dscl . -read /Groups/admin GroupMembership GroupMembership: root felciano Mini:~ felciano$ /code/pre  What am I missing?   <answer51718> I believe you just need this:  codebrew update/code  Then try codebrew doctor/code again.  You might still get errors about any dependencies you aren't using (Java in my case), which is okay. If you have the Command Line Tools for Xcode installed instead of the full installation of Xcode you will also get an error message saying you have an invalid path, but right in the message you will also read that there is no valid path if you're just using the Command Line Tools for Xcode, so that's okay as well.  For the benefit of others: Keep in mind that you need to be logged in as an admin when doing this for it to work.  <answer52072> I followed a combination of iolsmit's and Phil M's suggestions: I chowned these directories to my username, then ran codebrew update/code again followed by codebrew doctor/code. This got rid of all the error messages and brew installations now seem to work nicely. Thank you both!   <answer54558> strongEDIT:/strong The problem is now fixed in Homebrew:  ul lihttps://github.com/mxcl/homebrew/commit/8aa4f9dd3bbd885350776171d3d9403d381e1a59/li /ul  If you still experience the problem, update Homebrew like this:  precodebrew update /code/pre  If you want to know what the problem was, I have kept my original answer below.  hr  h2Ignore the permisson issue for now/h2  I am experiencing the exact same problem and in my opinion the problem is in codebrew doctor/code rather than in your and my installation.  I think you should ignore the issue rather than changing the ownership of code/usr/local/code. Alternatively, you could fix your local codebrew doctor/code script until a fix is released. See below.  I don't consider it correct to make code/usr/local/code owned by a specific user. I have more than one admin user on this machine. You should leave code/usr/local/code owned by coderoot:admin/code as owner and group.  h2My investigation/h2  Like for you I have a code/usr/local/code that is perfectly writable by my user which is also a member of the codeadmin/code group:  precode$ ls -ld /usr/local/ drwxrwxr-x  14 root  admin  476 22 Jun 23:33 /usr/local/ $ whoami mgd $ dscl . -read /Groups/admin GroupMembership GroupMembership: root mgd rgd /code/pre  Let's test that the dir is emreally/em writable:  precode$ ls -l /usr/local/newfile ls: /usr/local/newfile: No such file or directory $ touch /usr/local/newfile $ ls -l /usr/local/newfile -rw-r--r--  1 mgd  admin  0 23 Jun 14:52 /usr/local/newfile /code/pre  Further investigation into the codebrew doctor/codecode led my to the conclusion that the use of the ruby function codePathname.writable?/code is causing the problem. Consider this interactive Ruby session:  precode$ irb &gt;&gt; require 'pathname' =&gt; true &gt;&gt; Pathname('/usr/local').writable? =&gt; false /code/pre  Function codePathname.writable?/code says code/usr/local/code is not writable even though we know it is.  Using codePathname.writable_real?/code instead gives the correct result – it says that the dir is writable:  precode&gt;&gt; Pathname('/usr/local').writable_real? =&gt; true /code/pre  This should be fixed in code/usr/local/Library/Homebrew/cmd/doctor.rb/code. You can fix it in your own installation while waiting for a fix.  The difference between the two functions are (according to the Ruby docs here and here):  strongwritable?(file_name) → true or false:/strong Returns true if the named file is writable by the effective user id of this process.  strongwritable_real?(file_name) → true or false:/strong Returns true if the named file is writable by the real user id of this process.  <answer55937> Thumbs up for @mgd's investigation and clarification... it's spot on!  It appears that a similar issue was raised on github.com about a year ago, but was never em(properly?)/em resolved, at least not by using codewritable_real?/code ... maybe it's time for a pull request?!? :-)  <comment59115> Why don't you "chown" these directories to your user name, as suggested ? They should not belong to "root" anyway. For multiple users you could also change the group permissions: http://apple.stackexchange.com/q/42127/14994 <comment62486> @iolsmit: I have the exact same problem. However, I don't see why `/usr/local` should belong to _me_ instead when this machine has multiple admin users. Also, It is possible for me to write to the locations `brew doctor` is complaining about. Any other ideas? <comment64219> Thumbs up for mgd's investigation and clarification... it's spot on!  It appears that a similar issue was raised [on github.com](https://github.com/mxcl/homebrew/issues/4544) about a year ago, but was never _(properly?)_ resolved, at least not by using `writable_real?` ... maybe it's time for a pull request?!? :-) <comment68792> Fixed: https://github.com/mxcl/homebrew/commit/8aa4f9dd3bbd885350776171d3d9403d381e1a59