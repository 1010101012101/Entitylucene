Pipe output of grep to a variable <body> I need to be able to write whether the test for a grep is either strongTRUE/strong or strongFALSE/strong to a variable so I can use it later  For the following, if I run  precodedefaults read com.apple.Finder | grep "AppleShowAllFiles" /code/pre  on my system, it would return  precodeAppleShowAllFiles = FALSE; /code/pre  Cool. So now I want to pipe this response to a test of some kind. This is where I get stuck.  I think if I can pipe/assign this output to a specified variable, I would be able to run a test on it. Now, just say, I've assigned  the value of this output to a variable, in this case I will use code$ASAF/code as my variable, I can run it in a test like this  precodeif [ $ASAF = "AppleShowAllFiles = TRUE;" ]; then       defaults write com.apple.Finder AppleShowAllFiles FALSE       killall Finder   else       defaults write com.apple.Finder AppleShowAllFiles True       killall Finder   fi /code/pre  If there is some other way to do this, I would be more than open to options. I've not had to do something like this for a while, and I'm a bit stumped. I searcehd Google a bit, but it was all answers without explanations and using the return value of code0/code or code1/code. I think the returned output being assigned to a variable would be more appropriate, as then I can use it over and over in the script as need be.  <answer103607> Try  precodeif [[ $(defaults read com.apple.Finder | grep "AppleShowAllFiles") == "AppleShowAllFiles = TRUE;" ]]; then     defaults write com.apple.Finder AppleShowAllFiles FALSE else     defaults write com.apple.Finder AppleShowAllFiles True fi killall Finder /code/pre  code$(...)/code executes the part between code()/codeand replaces it with the result. So you could also do  precodeASAF=$(defaults read com.apple.Finder | grep "AppleShowAllFiles") /code/pre  to assign the result to code$ASAF/code.  PS: I also changed two other things in your script  ul liuse code[[/code for the test part (has more functionality than code[/code and is builtin in bash/li liuse code==/code to compare strings (code=/code is for assignments only`)/li /ul  <answer103625> You don't need to use codegrep/code at all:  precode[[ $(defaults read com.apple.finder AppleShowAllFiles) = 0 ]] &amp;&amp; bool=true || bool=false defaults write com.apple.finder AppleShowAllFiles -bool $bool osascript -e 'quit app "Finder"' /code/pre  codedefaults read/code prints boolean values as code1/code or code0/code. For example codeTrue/code or codeYES/code as a string is also interpreted as a boolean value, but code-bool true/code specifies the value to be actually boolean.  <comment121918> I'm looking at your edit of my post. How did you get the lines that start with `defaults write.com.apple` to indent further than the lines above and below? I tried to get that to work for formatting value, and it failed. :-/ <comment121921> `` is for quoting, 4 space characters are for code :-) <comment121929> I found that I can assign the output directly to a variable when I invoke it using `foofoo=$(defaults read com.apple.foobar | grep "foo")`. I shall use your method in future. It seems more stable. <comment121950> `=` can also be used for comparisons inside `[[` and `[`/`test` in bash. POSIX defines `=` but not `==` (but POSIX doesn't define `[[` either). <comment121978> This is exactly what I want. Using the `TRUE` or `FALSE` values of a response. Even better than `grep` to test. Thank you!