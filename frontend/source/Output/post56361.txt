Scheduling a task to repeat at a set interval <body> I have written a Ruby script that I need to run every 12 hours. Is there an easy way to do this in OS X (specifically Lion)?  <answer56365> There are a couple of ways of doing this, but the details depend on a couple of questions: Does the script need to run as root (Admin) or a regular user?  Does it need to run on any specific schedule, or just a 12-hour interval?  The OS X-ish option is to create a LaunchDaemon.  Create a file named /Library/LaunchDaemons/local.scriptname.plist, with contents like this:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;         &lt;key&gt;Label&lt;/key&gt;         &lt;string&gt;local.scriptname&lt;/string&gt;         &lt;key&gt;ProgramArguments&lt;/key&gt;         &lt;array&gt;                 &lt;string&gt;/path/to/script&lt;/string&gt;                 &lt;string&gt;someargument&lt;/string&gt;                 &lt;string&gt;anotherargument&lt;/string&gt;         &lt;/array&gt;         &lt;key&gt;StartInterval&lt;/key&gt;         &lt;integer&gt;43200&lt;/integer&gt;         &lt;key&gt;RunAtLoad&lt;/key&gt;         &lt;false/&gt;         &lt;key&gt;KeepAlive&lt;/key&gt;         &lt;false/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  Notes: 43200 is 12 hours in seconds, meaning that this will every 12 hours starting at boot.  You should replace scriptname with a more appropriate identifier in both the Label value and the filename (and if you're going to publish this, replace "local." prefix with your domain name in reverse order, e.g. "example.com.scriptname").  If it should run as someone other than root, add:  precode        &lt;key&gt;UserName&lt;/key&gt;         &lt;string&gt;usertorunas&lt;/string&gt; /code/pre  If you need it to run at particular times of day, replace the StartInterval key and value with something like this:  precode        &lt;key&gt;StartCalendarInterval&lt;/key&gt;         &lt;array&gt;                 &lt;dict&gt;                         &lt;key&gt;Hour&lt;/key&gt;                         &lt;integer&gt;6&lt;/integer&gt;                         &lt;key&gt;Minute&lt;/key&gt;                         &lt;integer&gt;0&lt;/integer&gt;                 &lt;/dict&gt;                 &lt;dict&gt;                         &lt;key&gt;Hour&lt;/key&gt;                         &lt;integer&gt;18&lt;/integer&gt;                         &lt;key&gt;Minute&lt;/key&gt;                         &lt;integer&gt;0&lt;/integer&gt;                 &lt;/dict&gt;         &lt;/array&gt; /code/pre  ...replacing Hours 6 and 18 (6pm) with the hours you want it to  run.  The other option is to use cron, which is more generic-unix (but works fine on OS X).  Use the command codecrontab -e/code to create/edit the crontab file.  The crontab will be created for whichever user you create it with, so if your script should run as root, use codesudo crontab -e/code.  The crontab should look something like this:  precode0       6,18       *       *       *       /path/to/script someargument otherargument /code/pre  Note that there's no equivalent of StartInterval here, this always runs it at 6am and 6pm.  <answer56412> Great advice above.  However, I'd have to say using cron is the best, most robust solution.  Not only is it stable; it will also prepare you to work in other environments outside of OS X.  <comment64758> LaunchDaemons are definitely the way to go on OS X. If you don't feel like messing with plist files, check out an app called Lingon: http://www.peterborgapps.com/lingon/index.html that will create them for you. <comment64770> I tried the cron method, however it seems to not be working properly. I have a line in my script that writes the last time it ran to a text file, and the text file isn't updating at the times I specified for the script to run. <comment64786> I'd try logging when the script *starts*, and see if that's any different.  Also, try adding `/tmp/scriptname.log 2&1` to the crontab entry, and see if anything informative shows up in that log.  One possibility is that your script depends on some bit of environment (e.g. search paths) that aren't set by cron (it runs jobs in a *very* minimal environment, and this is a common source of trouble with them). <comment64815> Per-user services that don't need to be run as root are normally saved to ~/Library/LaunchAgents/. The property lists have to be loaded manually with something like `launchctl load ~/Library/LaunchAgents/local.scriptname.plist` or by logging out and back in. You have to unload and reload a plist to apply changes. If someone doesn't know how to use vi, you can change the EDITOR variable like `EDITOR=nano crontab -e`. <comment64816> And `StartCalendarInterval` can also be an array of more than one dictionary, so you don't need to save two separate property lists. <comment64848> @Lri: good point on the array of dictionaries; I've edited my answer to use this.  Re LaunchAgents: they only run while the user is logged in, while a LaunchDaemon with a `User` key will run independently of any login. <comment64853> cron is deprecated on Mac OS X; launched is Apple's recommended replacement. <comment64895> I've got other cron jobs working properly, for example I have one that uses the say command to speak something at a certain time each day, and I have another that uses the osascript command to run an applescript every morning, however it doesn't seem to be working properly with the ruby command as `ruby path/to/script` has anyone else experienced this?