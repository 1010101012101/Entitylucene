How to convert a RAW 16-bit audio file to something else on Mac? <body> I plan to write a little program that will output a RAW audio file  let me convert RAW audio format files to WAV or AU or anything else?  <answer41853> Unless I'm mistaken, you can download pre-built SoX binaries for the Mac direct from Sourceforge. I just tried it on Lion and it seems to work for me.  Alternatively, codeafconvert/code is built-in and can be used to convert a wide variety of audio file formats.  precodeUsage: afconvert [option...] input_file [output_file]     Options may appear before or after the direct arguments. If output_file     is not specified, a name is generated programmatically and the file     is written into the same directory as input_file. afconvert input_file [-o output_file [option...]]...     Output file options apply to the previous output_file. Other options     may appear anywhere.  General options:     { -d | --data } data_format[@sample_rate][/format_flags][#frames_per_packet]         [-][BE|LE]{F|[U]I}{8|16|24|32|64}          (PCM)             e.g.   BEI16   F32@44100         or a data format appropriate to file format (see -hf)         format_flags: hex digits, e.g. '80'         Frames per packet can be specified for some encoders, e.g.: samr#12         A format of "0" specifies the same format as the source file,             with packets copied exactly.         A format of "N" specifies the destination format should be the             native format of the lossless encoded source file (alac, FLAC only)     { -c | --channels } number_of_channels         add/remove channels without regard to order     { -l | --channellayout } layout_tag         layout_tag: name of a constant from CoreAudioTypes.h           (prefix "kAudioChannelLayoutTag_" may be omitted)         if specified once, applies to output file; if twice, the first           applies to the input file, the second to the output file     { -b | --bitrate } total_bit_rate_bps          e.g. 256000 will give you roughly:              for stereo source: 128000 bits per channel              for 5.1 source: 51000 bits per channel                  (the .1 channel consumes few bits and can be discounted in the                  total bit rate calculation)     { -q | --quality } codec_quality         codec_quality: 0-127     { -r | --src-quality } src_quality         src_quality (sample rate converter quality): 0-127 (default is 127)     { --src-complexity } src_complexity         src_complexity (sample rate converter complexity): line, norm, bats     { -s | --strategy } strategy         bitrate allocation strategy for encoding an audio track         0 for CBR, 1 for ABR, 2 for VBR_constrained, 3 for VBR     --prime-method method         decode priming method (see AudioConverter.h)     --prime-override samples_prime samples_remain         can be used to override the priming information stored in the source         file to the specified values. If -1 is specified for either, the value         in the file is used.     --no-filler         don't page-align audio data in the output file     --soundcheck-generate         analyze audio, add SoundCheck data to the output file     --codec-manuf codec_manuf         specify the codec with the specified 4-character component manufacturer         code     --dither algorithm         algorithm: 1-3     --mix         enable channel downmixing     { -u | --userproperty } property value         set an arbitrary AudioConverter property to a given value         property is a four-character code; value is signed 32-bit integer.         A maximum of 8 properties may be set.         e.g. '-u vbrq &lt;sound_quality&gt;' sets the sound quality level              (&lt;sound_quality&gt;: 0-127)  Input file options:     --read-track track_index         For input files containing multiple tracks, the index (0..n-1)         of the track to read and convert.     --offset number_of_frames         the starting offset in the input file in frames. (The first frame is         frame zero.)     --soundcheck-read          read SoundCheck data from source file and set it on any destination          file(s) of appropriate filetype (.m4a, .caf).  Output file options:     -o filename         specify an (additional) output file.     { -f | --file } file_format         use -hf for a complete list of supported file/data formats  Other options:     { -v | --verbose }         print progress verbosely     { -t | --tag }         If encoding to CAF, store the source file's format and name in a user         chunk. If decoding from CAF, use the destination format and filename         found in a user chunk.     { --leaks }         run leaks at the end of the conversion     { --profile }         collect and print performance information  Help options:     { -hf | --help-formats }         print a list of supported file/data formats     { -h | --help }         print this help /code/pre  Also, typing codeafconvert -hf/code will show you the supported audio formats  <comment57031> @Mithras the [homebrew](http://mxcl.github.com/homebrew/) package manager has a `sox` recipe. It will build it from source for you. <comment57040> After all the edits you've done, it's hard to know what you mean so I've rolled this back to the original statement. Flag or see us in chat if you have questions on making this better for the site and for your needs.