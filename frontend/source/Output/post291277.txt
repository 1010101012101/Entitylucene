AppleScript do shell will not work on Application Support directory <body> I've spent the day doing several researches and attempts on how to copy a file that is located inside an AppleScript app to the root Application Support directory (codehdd -&gt; Library -&gt; Application Support/code).  Originally I thought it was an issue with calling codedo shell script/code and codeadministrator privileges/code but for some reason if I have a file located in an AppleScript app I try to call that file to be added to Application Support, for example:  precodeset foo to "Macintosh HD/Users/vader/someapp.app/Contents/Resources/Scripts/foobar.txt" set bar to "Macintosh HD/Library/Application Support/"  do shell script "cp " &amp; (quoted form of foo) &amp; space &amp; (quoted form of bar) with administrator privileges /code/pre  I've taken this down to the basic form when it comes to the folder path and file path but when I run the above I get an error message of:     cp: Macintosh   HD/Users/vader/someapp.app/Contents/Resources/Scripts/foobar.txt: No   such file or directory   I can return true that the file exists in the app with:  precodeset foobar to POSIX path of (path to resource "foobar.txt" in directory "Scripts") if not (exists foobar) then     return false else     return true end if /code/pre  I've tried this with:   precodetell application "Finder" to duplicate file (foo) to folder (bar) /code/pre  but that didn't work either.    strongResearch when I tried to remove the file after manually adding it (yes I have admin permissions on my box):/strong   I've researched several areas to see how to implement the prompting of permissions using codeadministrator privileges/code but with no luck:  ul liCan't delete directory via AppleScript/li liAppleScript: match and delete files in folder/li liAutomatically delete temporary ~/Library/Application Support folders/li liDelete folders if exist and delete/li liApplescript oe shellscript to delete config file?/li liDelete files with AppleScript to recycle bin or permanently/li /ul  Here are the following attempts I've tried:  strongAppleScript System Events:/strong  precodetell application "System Events" to delete file appWithPath /code/pre  strongdo shell attempts:/strong  emattempt 1/em  precodedo shell script "rm -f " &amp; appNamewithQuotedFormPath with administrator privileges /code/pre  emattempt 2/em  precodedo shell script "find " &amp; quotedPathToDirectory &amp; " -name \"" &amp; applicationName &amp; "\" -type f -delete" with administrator privileges /code/pre  It still wouldn't work and I checked with:  precodedo shell script "echo " &amp; appNamewithQuotedFormPath with administrator privileges /code/pre  After digging into Script Editor I found I was getting code-10004 error/code so I researched:  ul liUnknown cause for -10004 error/li /ul  so I moved the add and removal of the file in Application Support to a handler that didn't have a try block but still nothing.  Thinking it might be an issue with the used privileges I tried all of the following parameters used with codeScripting Additions/code:  img src="https://i.stack.imgur.com/fKQLh.png" alt="enter image description here"  In an AppleScript app how can I emadd/em and emremove/em a file that exists in the app to the root Application Support directory?  hr  strongEDIT:/strong  After further testing I removed the usage of codeMacintosh HD/code and the codedo shell script/code would work which I do not understand why that would cause the script to fail.  Why would adding codeMacintosh HD/code to the path cause the script to error out?  <answer291292> If you are hardcoding, without testing if the file exists, then use the following example:  precodeset foo to quoted form of "/Users/vader/someapp.app/Contents/Resources/Scripts/foobar.txt" set bar to quoted form of "/Library/Application Support/" try     do shell script "cp " &amp; foo &amp; space &amp; bar with administrator privileges end try /code/pre  If you are calling it from the script within the application bundle,  then use the following example:  precodeon run     try         set foo to POSIX path of (path to me as string) &amp; "Contents/Resources/Scripts/foobar.txt"         set bar to quoted form of "/Library/Application Support/"          tell application "System Events"             if exists file foo then                 tell current application                     do shell script "cp " &amp; quoted form of foo &amp; space &amp; bar with administrator privileges                 end tell             end if         end tell     on error eStr number eNum         display dialog eStr &amp; " number " &amp; eNum buttons {"OK"} default button 1 with icon caution         return     end try end run /code/pre  hr  strongNote:/strong When working with the codedo shell script/code emcommand/em, POSIX pathnames must be used, not aliases. codeMacintosh HD/code is not valid in a codePOSIX path/code, just in an alias. In a codePOSIX path/code of the codestartup disk/code, everything starts in the emroot/em of the emvolume/em: code//code  Example:  precodetell application "Finder" to get name of startup disk as alias tell application "Finder" to get POSIX path of (name of startup disk as alias) /code/pre  Returns:  precodeMacintosh HD  / /code/pre  <answer291384> @user3439894 has already explained how to solve the problem; I'd like to take a stab at explaining why the confusion exists. It goes back to the fact that the Macintosh OS wasn't always based on unix (/POSIX). Back before OS X (which is unix-based), Mac OS was a completely different OS with its own file path notation. When OS X came out it had to support both the unix file access APIs (which used unix path notation) and the traditional Mac OS APIs (which used traditional Mac OS path notation). Over the years, OS X (/macOS) has deprecated some of the traditional Mac OS APIs and switched more and more towards pure unix path notation. But AppleScript is an exception: it predates OS X, so it natively uses the old traditional Mac OS notation.  Here's a summary of the differences:  ul liUnix (/POSIX) paths use "/" as delimiters (and allow ":" within filenames), while Mac OS paths use ":" as delimiters (and allow "/" within filenames)./li liUnix paths are absolute if they start with the delimiter ("/"); Mac OS paths are absolute if they emdo not/em start with the delimiter (":")./li liAbsolute Mac OS paths start with the volume name, while absolute unix paths start at the top of the root volume, and other volumes appear as folders somewhere under it./li /ul  Here are some examples:  precodeMac OS: Macintosh HD:Users:vader:someapp.app:Contents:Resources:Scripts:foobar.txt Unix: /Users/vader/someapp.app/Contents/Resources/Scripts/foobar.txt  Mac OS: Other disk:daily notes:7/19/2017 meeting.rtf Unix: /Volumes/Other disk/daily notes/7:19:2017 meeting.rtf  Mac OS: :Documents:file.txt Unix: Documents/file.txt /code/pre  In AppleScript, you can use codePOSIX path of/code and codeas alias/code to convert between these. 