Mimic Xcode's camelCase selection keyboard shortcuts in OS X <body> I spend a very large amount of time editing text in Xcode, and I would like maneuvering around text within the rest of the Cocoa Text System to offer an identical experience. There are 3 versions of cursor keyboard shortcuts that I use regularly in Xcode (only showing forward, non-selection-altering versions for brevity):  ol likbd⌃/kbd+kbd→/kbdMove cursor 1 subword forward (^camelCase - camel^Case - camelCase^)/li likbd⌥ Option/kbd+kbd→/kbd Move cursor 1 word forward/li likbd⌘ Command/kbd+kbd→/kbd Move cursor to the end of the line/li /ol  The OS X default keybindings respect 2 and 3, but there is a disparity with 1. Outside of Xcode, kbd⌃/kbd+kbd→/kbd behaves like kbd⌘ Command/kbd+kbd→/kbd. It's not applicable terribly often, but every time kbd⌃/kbd+kbd→/kbd takes me to the end of a line in Mail or something, it's like a little firecracker goes off in my brain. It's just annoying enought that I'm willing to invest in any hackery to "fix" the behavior once and for all.  To avoid covering old ground, I'm already aware of this little tidbit, and this list of selectors, but I'm not aware of any API in the Cocoa Text System for subword selection. Maybe there's undocumented API in there somewhere?   hr  I don't always attempt to make camelCase selections outside of Xcode with keyboard shortcuts, but when I do I want OS X to obey.  <answer162476> Sorry but what you want is not possible.  You could try adding the XCode keybindings that do this  precode"^\UF702" = "moveSubWordBackward:";                     /* Ctl-Left Arrow */ "^$\UF702" = "moveSubWordBackwardAndModifySelection:";  /* Ctl-Shift-Left Arrow */ "^\UF703" = "moveSubWordForward:";                      /* Ctl-Right Arrow */ "^$\UF703" = "moveSubWordForwardAndModifySelection:";   /* Ctl-Shift-Right Arrow */ "^\177" = "deleteSubWordBackward:";                     /* ctl-delete */ "^\UF728" = "deleteSubWordForward:";                    /* ctl-forwardDelete */ /code/pre  into your code~/Library/KeyBindings/DefaultKeyBindings.dict/code file but unless the application is written to respond to these methods, it won't work.  As you've said, these methods are not part of the standard Text System so these calls in an app will just go unanswered or you will get a system beep.  <answer162776> To navigate camel case (aka sub-words) to the right use   kbd^/kbd + kbd[/kbd to move a sub-word to the left   kbd^/kbd + kbd]/kbd to move a sub-word to the right  I confirmed this in OSX 10.10.1 running Xcode 6.1.1.  <comment159477> On my mac ⌃→ switches spaces by default, and it does not behave like ⌘→ <comment159943> This assumes you've disabled that shortcut in System Preferences. <comment159957> Nope. On OS X (Mavericks) the default behaviour of ⌃→ is switches spaces. http://osxdaily.com/2011/09/06/switch-between-desktops-spaces-faster-in-os-x-with-control-keys/ <comment167691> Want it too. I think there is can be an external tool like Yandex' PuntoSwitcher to manipulate input cursor in any text box. <comment190959> I think the gist of this question is to get the Xcode sub-word commands outside that one app and on the rest of the standard apps. <comment190995> @bmike, perhaps it is. If so, one would probably have to code this because the feature is inherent to Xcode and not the OS. But one would *hope* that an Xcode user would know that.