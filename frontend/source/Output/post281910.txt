AppleScript: How to check if the clipboard consists of a file (instead of text)? <body> If my understanding is correct, there are two types of content that can be copied to the Mac global (systemwide) clipboard:  ul licodetext/code/li /ul  or  ul licodefile/code/li /ul  Even though they are two different, discrete data types, they share the very same clipboard. For example, if you have an image codefile/code on your clipboard, and then you copy a codetext/code sentence, the sentence will overwrite the image file, and vice versa. Please correct me if I am wrong.  strongMy question is, how can I determine if the clipboard does not contain codetext/code, using AppleScript?/strong  The context of my question is an AppleScript .scpt file that speaks the selected text in the System Voice at a specified volume. The selected text is copied to the clipboard, and then the text is spoken via the codesay/code command. The script is triggered by keystroke via FastScripts.app.  Every so often, I am given an error dialog that states, "Error Number: -1728." This error occurs when, instead of codetext/code being highlighted, I have highlighted or selected an actual codefile/code. Mac's Speech function cannot speak a codefile/code; Speech can only verbalize codetext/code.  So, I would like to create an codeif...then/code statement in my script to catch this error. Ideally, I would then like to convert the codefile/code to codetext/code, if possible in the way that TextEdit does.  <answer281920> If the Clipboard contains a emfile object/em, then codeclipboard info/code will contain, e.g., code«class furl»/code (a file URL), along with many other classes.  The follow example emcode/em will check for the presence of code«class furl»/code in the codeclipboard info/code:  precodeif ((clipboard info) as string) contains "«class furl»" then     say "the clipboard contains a file named " &amp; (the clipboard as string) else     say "the clipboard does not contain a file" end if /code/pre  hr  Update:  As I mentioned in one of my comments, there are other ways to code this, and this approach will return either an empty emlist/em or a emlist/em containing one emlist/em, which should be faster instead of the 14 that the first example returns if it contains a emfile/em. If the Clipboard does not contain a emfile/em, then the emlist/em returned is empty and it errors out, setting codecbFile/code to codefalse/code, and if not empty, setting it to codetrue/code, which then is tested against in the following example.  precodetry     (item 1 of (clipboard info for «class furl»))     set cbFile to true on error     set cbFile to false end try if cbFile then     say "the clipboard contains a file named " &amp; (the clipboard as string) else     say "the clipboard does not contain a file" end if /code/pre  By the way, I ran the codepurge/code emcommand/em in Terminal in between testing these two examples and it felt like the second example is a bit faster, however YMMV.  <comment354862> Your first assumption is wrong: text *or* file (probably you really mean *xor*). It's much more complicated. You can check the content of the clipboard with the Apple (Xcode) app "Clipboard Viewer". It's available in Auxiliary Tools for Xcode 7. <comment355075> Do you also know how to get just the filename (not the full path) as text, of a file that's on the clipboard? If the if condition is met: `if ((clipboard info) as string) contains "«class furl»"` then I would like my script to `say` the filename of the clipboard file. <comment355076> Let me know if you think that the question in my above comment warrants a dedicated post. <comment355115> @rubik's sphere, I've updated the answer to handle the condition set in your comment. By the way, if you want the fully qualified pathname you'll need to use Cocoa-AppleScript and NSPasteboard, which I'm not up on as regular AppleScript. <comment355116> Another narrow question would be best, @rubik'ssphere . Linking the two here in comments would be nice as well. I'll edit the question you posted here down to make it clearer the topic here. <comment355125> To the down-voter, please explain a legitimate reason for it, does this not answer the question asked? Do you have a better answer instead of an unwarranted down-vote!? <comment355184> One could also easily create an Automator service (assigned to a keyboard shortcut via the Keyboard system preference pane) that receives the selected text in any application and then runs the actions _Set Computer Volume_ and _Speak Text_, with no need to copy the selected text to the clipboard. (Of course, you may have good reasons for using your AppleScript instead!) <comment355188> @user3439894 Your solution works nicely. But I notice that there is a short delay before the script speaks, _"The clipboard contains a file named filename."_ Is there anything that I can do to shorten or eliminate this delay? <comment355191> @BigMac 1. My AppleScript code allows me to stop the Speech with the same keystroke that I use to start the Speech. 2. My code does not actually affect the system volume; it defines the volume of the Speech process as a percentage of the current system volume level. 3. Triggering a systemwide Service by keyboard shortcut is unreliable. See: [_Keyboard shortcut for service only works after I manually run the service_](https://apple.stackexchange.com/questions/260683/). FastScripts.app, OTOH, is reliable. But, FastScripts, of course, can only trigger .scpt files, not Automator Service files. <comment355196> @rubik'ssphere Thanks for explaining; I don't know of any way to do #1 in Automator, so that's reason enough to use AppleScript! #3 would also rule out an Automator service, but fortunately I haven't experienced that problem (yet). #2 could probably be done in a _Run AppleScript_ action within Automator (instead of using the actions I mentioned). I would love to see your final script, if you're willing to share it, since I too use Apple's text-to-speech often. <comment355199> @BigMac (1/2) The **heart of my code** is the genius solution provided by jackjr300 here: [_AppleScript: Is it possible to check if Speech is currently running?_](https://apple.stackexchange.com/questions/272573/applescript-is-it-possible-to-check-if-speech-is-currently-running/272699#272699). To set the volume of the Speech, as a percentage of the current system volume (I chose 35%), see: [_How to change volume of “say” in AppleScript?_](https://apple.stackexchange.com/questions/276711/how-to-change-volume-of-say-in-applescript). I discovered a command-line bug, so see here for a workaround: <comment355200> (2/2) [_How to get around “say” command bug when setting volume?_](https://apple.stackexchange.com/questions/278659/how-to-get-around-say-command-bug-when-setting-volume) Finally, the answer by @user3439894 to this very post makes the script speak the filename of a selected _file_: [_AppleScript: How to check if the clipboard consists of a file (instead of text)?_](https://apple.stackexchange.com/questions/281910/applescript-how-to-check-if-the-clipboard-consists-of-a-file-instead-of-text/281920#281920) Put this all together, and you'll have created my current AppleScript file. <comment355209> @rubik's sphere,  How long of a delay?... When I run this example _code_ in Script Editor, as is, I really do not notice a delay. Are you noticing a delay with this example _code_ in Script Editor, as is, or have you taken this example and reworked it to fit your needs in the larger script and that's were you notice a delay? If the former, there's more then one way to write this code and I've tested different codings but really don't notice a delay on my system. If the latter, then without seeing the _code_ to test against, there's really nothing I can say, (_code_ pun intended). <comment355220> @user3439894 When I run your code in Script Editor.app, verbatim, there is a 1 second delay before _"The clipboard contains a file named..."_ is spoken, but _"The clipboard does not contain a file"_ is immediately spoken. This is true no matter the type or location of the file that is on the clipboard. Do you not experience the delay on your system? This is obviously not a big delay, but it is long enough for me to notice the delay every time. Would it be possible for me to test the other coding method(s)? <comment355222> @rubik's sphere, Now that I know you're comparing a diff between the two states, that's to be expected as there is more processing taking place when it evaluates to true. If false, the return of `clipboard info` can contain as few as 4 classes and if true, can contain many more, e.g. 14, classes. All of which have to be enumerated and some of those may take longer to enumerate then others, which further adds to the expected delay. So that alone starts the delay diff. Also if true, the Clipboard is queried for the filename as a string, thus adding more to the delay diff. Does that make sense? <comment355225> @rubik's sphere, I updated the answer adding another example for you to test to see if it's any faster. <comment355255> @user3439894 Yes, that makes sense. Thanks for the detailed explanation.  I'm still surprised that such a powerful & advanced machine cannot perform this relatively simple task instantly. I suppose that some inefficient code on Apple's part is to blame. I have found that your alternate method is not faster than the original method, as far as I can tell. The new method still has a 1 second delay. I am unable to accurately measure the runtime down to the millisecond. Thank you for all of your help. <comment355311> @rubik's sphere, FWIW Saving both versions of code as .scpt with modding the false branch, so say would say the exact same thing as the true branch, done so for best comparison, and running with `osascript` as an argument of `time`, there was a difference between the 2 versions. I closed/opened Terminal and used the `purge` command in between each run and when all was said an done ver1 had a 0.719s diff between the T/F branch and ver2 had a 0.363s diff between the T/F branch in comparison with a 0.356s diff between each version. While ver2 was technically faster the differential is negligible. <comment355324> @user3439894 Interesting analysis. In that case, I will go with the alternate method.