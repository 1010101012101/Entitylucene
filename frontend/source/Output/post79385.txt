Execute command on launch of custom Terminal Window in OSX10.5+ <body> I'm trying to find a way to automatically launch a command when Terminal is run, but:  ol liHave the Terminal window close after command has returned control to it / after (using &amp;) after command has started launching./li liNot have the user change any settings themselves / not have the settings changed globally./li /ol  I have found (mainly from a relatively very comprehensive write-up on http://docstore.mik.ua/orelly/unix3/mac/ch01_03.htm) the ability to create a .terminal file and edit the contents (plist) to contain xml like the below.  precode    &lt;key&gt;ExecutionString&lt;/key&gt;     &lt;string&gt;ssh xyzzy.oreilly.com; exit&lt;/string&gt; /code/pre  However:  ol liGiven the date of other postings (on google) showing this functionality/li liThe fact that the procedure which I eventually found to create custom Terminal windows, was subtly different from the instructions in the article above/li liThe fact that (at least with OSX10.5) they are now .term files (and complain that the file is not executable if changed to .terminal)/li /ol  ... am guessing that some version of OSX, post all the information I can find on this technique, changed this functionality. Is this correct in any version of OSX 10.5+?  Also, is there still a way to launch a command automatically in a custom terminal window (or similar, that emisn't/em AppleScript / Automater / etc)?  <answer115204> ExecutionString was changed to CommandString Use it in the same way. When you do a Shell  Export Settings… it outputs a .terminal file. In my file it is located immediately after   precode&lt;key&gt;BackgroundSettingsForInactiveWindows&lt;/key&gt; &lt;true/&gt; &lt;key&gt;CommandString&lt;/key&gt; &lt;string&gt;/blah/blah/blah/blah.sh run&lt;/string&gt; /code/pre  (MountainLion 10.8.5)  So then you would run the following command from terminal or a script…  precodeopen ~/Documents/blah.terminal /code/pre  <comment91675> When does the program run - how does the user start it? And why not automator? <comment91676> It's not very clear to me what exactly you are trying to do. Your description is confusing. Maybe you can express your question in a more concise way? <comment91678> Mark - Currently we supply instructions to clients to create a .command file to run our program on certain machines that need the `arch` programs functionality to run properly, so the .command program is run ad-hoc. However, unless the user has set the Terminal program to close on shell closure (either with the condition of last command finishing cleanly, or not), the best we can do is `exit` and have the Terminal window stay open with `[Process Completed]` in it, which seems pointless as our program doesn't output anything to stdout. A custom terminal with the above xml seems to be ideal. <comment91679> @Gerry - What is confusing... The entire concept, or certain aspects? Are you familiar with this ¿old? functionality of .terminal files? <comment91731> If you are getting money for this I would suggest the professional way is to write an objective C wrapper program that class fork or exec and have all the programs syored in the app bundle <comment91762> Thanks for the suggestion Mark, but this is not something that those who develop the application are interested in doing, nor would I probably get approval to distribute this if I did it myself.