How can I remove leading/trailing whitespace from filenames in Automator? <body> My wife tediously renames files all the time when storing on her backup external storage, so I investigated using automator to do this for her. I now have an automator folder where she just drops the file in there and it will rename the file appropriately.  I'm now faced with a situation where the file may now contain leading and/or trailing whitespace, how might I simply trim this whitespace?  I've never really used AppleScript but am proficient in shell scripting, can I simply write a shell script that will perform this task? I will give AppleScript a go if someone could point me in the right direction.  <answer29692> There's one line script for that, cd to that folder and ...    precodefor f in *; do mv "$f" "$(echo $f)"; done /code/pre  Put it into a shell script and call it from Applescript:  precodetell application "Terminal"     do script "whatever" end tell /code/pre  <answer29713> There's an AppleScript (very similar to Automator) that trims file names. It's a bit long, so I can't post it here, but here is a link to the code. Make sure you read the beginning part of the code, as it explains what the script does and how it works.  <answer29741> For a correct answer that basis on that of Tuan's answer the following is needed which will not only rename the file but also preserves the action chain for following actions.  Take note also that we don't want to rename the parent folder in any way, just the files.  precodefor f in "$@" ; do     dirname=$(dirname "$f")     basename=$(basename "$f")     name=${basename%.*}     ext=${basename##*.}     name="$(echo "$name" | sed -Ee 's/^ +//;s/ +$//')"     new="$dirname/$name.$ext"     mv "$f" "$new"     echo "$new" done /code/pre  You also don't need to put this into a shell script itself, automator can have this embedded into the action "Run Shell Script".  <answer29766> codefor f in "$@"; do new="$(echo -n "$f" | sed -E 's|/$||;s| +$||;s|^ +||;s|/ +([^/]+$)|/\1|;s| +(\.[^.][a-zA-Z0-9.]*)$|\1|g')"; mv "$f" "$new"; echo "$new"; done/code  (Paste as a emRun Shell Script/em action and select emPass input: as arguments/em.)  <answer65521> I was also looking to remove trailing whitespace from file and folder names. This Super User post helped me out.   <comment34074> This only works for filenames with 4 leading blanks :-( <comment34077> for f in *; do mv "$f" "`echo $f | cut -b 1-`"; done  [man cut](http://ss64.com/bash/cut.html) <comment34079> `for f in *; do mv "$f" "$(echo $f)"; done` then, doesn't have anything to do with `cut` at all. <comment34082> Thanks guys, but how does this work? Wouldn't automator call the script with an argument of the files? Wouldn't `for f in "$@"; do echo mv "$f" "$(echo $f)" ; done` be more appropriate? <comment34085> @BrettRyan: `*` refers to every file (or directory) in the `pwd`, so no need for anything more elaborate.  Also, when you do this, make sure you don't use the `echo` in `do echo mv "$f"` like you have in your comment, otherwise you will just `echo` what you want to do instead of actually doing it. <comment34086> @TuanAnhTran - You can simplify the one liner as: `for f in *; do mv "$f" $f; done` <comment34087> @frozenwithjoy: This fails if $f contains blanks inbetween as well, e.g. " foo bar  ". <comment34088> Had a look at the script, now I don't know whether I should laugh or cry... <comment34089> @patrix  - good point!  thanks. <comment34103> Just write a shell script that will do this, as you had suggested and in Automator you can run shell scripts. In Automator look for Run Shell Script. <comment34114> @frozenwithjoy - Yes, but if you only want it acting on new items moved to the folder and not existing ones you shouldn't be using `*`. The correct script would actually be as I have mentioned but with an extra `echo` of the resultant file name to standard out as to preserve/allow any other actions in the action chain, without it nothing would input into the next action. <comment34116> Please see my answer for what I have settled on <comment34241> Interesting, I like how you changed the variable names in mine to make it easier to read yet you put everything in a single regex in yours. One thing you might need to consider though is that we don't want spaces removed from existing paths, while they shouldn't be there that would actually cause the Automator script to fail. <comment34244> Ah wait, my bad, you only capture the last / in the group. Okay, you win :) <comment34247> Change your regex to this `s|/$||;s| +$||;s|^ +||;s|/ +([^/]+$)|/\1|;s| *\. *([^\.]+)$|\.\1|;` We may allow other characters in the extension and we also don't want the extension starting with a space. <comment34257> `s| *\. *([^.]+)$|\.\1|` would replace `EOL + . + LF.plist` with `EOL +.+ LF.plist`. It wouldn't affect `some .tar.gz`. <comment34297> Point noted, though neither does your regex. Actually, the extra period character looks to be in error before the group inclusion as it replaces a space with a period (`some .tar.gz` becomes `some..tar.gz`). Removing the period works, but doesn't prevent the space in the extension from appearing at the start. Suffice to say it doesn't matter too much, these things are more trivial and can be questioned forever. <comment34370> @BrettRyan Oh, I fixed that extra dot error. <comment77021> I was also looking to remove trailing whitespace from file  http://superuser.com/questions/405127/how-to-remove-leading-whitespace-from-filenames-folders-snow