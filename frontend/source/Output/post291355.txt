Applescript to get track number of song from multi-cd album in iTunes? <body> I have an Applescript that reports the currently playing song name, album, song number, and total number of songs on the album. If the album comes from a single CD or if the song comes from CD 1 of a multi-CD album, everything works, and I get the following:  precodeSong 2 of 30 /code/pre  However, if the album comes from a multi-CD set, then the song number is incorrect for songs from CD 2, CD 3, etc. Here's an example: emL'Elisir d'Amore/em has two CDs, and in iTunes, it is entered as such (e.g., CD 1 of 2 and CD 2 of 2). The script correctly reports there are 30 songs (16 on CD 1 and 14 on CD 2). When playing a song from CD 1, everything is accurate. When playing a song from CD 2, the song number begins again at 1, so the very last song appears as  precodeSong 14 of 30 /code/pre  because it is the 14th song on CD 2. Is there a way to get the script to display Song 30 of 30 for the last song on CD 2 without some kludge of figuring out the number of CDs, then counting up the songs in CD 1 and then adding to the track number of the song in CD 2? This kludge gets quite ugly for albums spanning as many as 14 CDs.  Here's the simplified bit of code:  precodetell application "iTunes"     -- code to check that there is a current song     set z_album to album of current track as string     set z_num to count of (every track whose album is z_album)     set z_song to name of current track as string     set z_trk to track number of current track     log z_song &amp; " (" &amp; z_trk &amp; " of  " &amp; z_num &amp; ")" end tell /code/pre  <answer291539> Personally I do not have much of a need, if any, to automate iTunes with AppleScript. In the past I've found iTunes to be one of the more difficult apps to automate. Nonetheless, I took a look at your emcode/em, the AppleScript Dictionary for iTunes, a few web searches that basically yielded nothing noteworthy, and some failed programmatic attempts to emeasily/em get a emlist/em of emdiscs/em and codetrack count/code for each emdisc/em of an codealbum/code.  I'll assume the strongkludge/strong context in your question is because there is emno easy direct way/em to programmatically ask an codealbum/code for its codedisc count/code and codetrack count/code per emdisc/em to do the emmath/em with, in a emstraight forward manner/em. So with that... here's emmy/em strongkludge/strong, which was tested and works as desired on strongemmy/em/strong iTunes Library:  precodetell application "iTunes"     try          set theCurrentTrackProperties to (properties of current track)          if (disc number in theCurrentTrackProperties) is not greater than 1 then              set theSongName to (name in theCurrentTrackProperties)             set theTrackNumber to (track number in theCurrentTrackProperties)             set theTrackCount to (track count in theCurrentTrackProperties)              log theSongName &amp; " (" &amp; theTrackNumber &amp; " of " &amp; theTrackCount &amp; ")"          else              set theSongName to (name in theCurrentTrackProperties)             set theTrackNumber to (track number in theCurrentTrackProperties)             set theTrackCount to (count of (every track whose album = (album in theCurrentTrackProperties)))              set theDiscNumber to (disc number in theCurrentTrackProperties)             set theAlbumsTracksProperties to (properties of every track whose album = (album in theCurrentTrackProperties))              set theAlbumsDiscNumberTrackCountInfo to ""             repeat with i from 1 to (count of theAlbumsTracksProperties)                 tell item i in theAlbumsTracksProperties                     set theAlbumsDiscNumberTrackCountInfo to (theAlbumsDiscNumberTrackCountInfo &amp; disc number &amp; space &amp; track count &amp; linefeed)                 end tell             end repeat             tell current application                 set theAlbumsDiscNumberTrackCountInfo to (do shell script "sort -n -k1 -u &lt;&lt;&lt;" &amp; quoted form of theAlbumsDiscNumberTrackCountInfo &amp; " | sed '/^$/d'")                 set theTracksPerDiscCount to ""                 repeat with i from 1 to (theDiscNumber - 1)                     set theTracksPerDiscCount to (theTracksPerDiscCount + (word 2 of paragraph i in theAlbumsDiscNumberTrackCountInfo))                 end repeat                 set theTrackNumber to (theTrackNumber + theTracksPerDiscCount)             end tell              log theSongName &amp; " (" &amp; theTrackNumber &amp; " of " &amp; theTrackCount &amp; ")"          end if      on error eStr number eNum         display dialog eStr &amp; " number " &amp; eNum buttons {"OK"} default button 1 with icon caution         return     end try end tell /code/pre  The example AppleScript emcode/em, shown above, does the following:  ul liSets the emproperties/em of the codecurrent track/code to the emvariable/em codetheCurrentTrackProperties/code./li liChecks to see if the emvalue/em of the codedisc number/code emproperty/em in the emvariable/em, codetheCurrentTrackProperties/code, is not greater than 1./li liIf the emvalue/em of the codedisc number/code emproperty/em is not greater than 1, it's straight forward processing and logs the desired information./li liIf the emvalue/em of the codedisc number/code emproperty/em is greater than 1, then the codeelse/code embranch/em preforms the strongkludge/strong to do the emmath/em, and logs the desired information./li /ul  What the strongkludge/strong does:  ul liSets some additional initial emvariables/em.  ul liOne for the emvalue/em of the codedisc number/code emproperty/em of the codecurrent track/code,codetheDiscNumber/code, is used to determine how many emdiscs/em the codetrack count/code is needed for./li liAnother to hold the emproperties/em of every codetrack/code of every codedisc/code in the codealbum/code, codetheAlbumsTracksProperties/code.  ul liThe emvalue/em of the emvariable/em, codetheAlbumsTracksProperties/code, is processed in a coderepeat/code emloop/em to which the emoutput/em of is held in the emvariable/em codetheAlbumsDiscNumberTrackCountInfo/code./li /ul/li /ul/li liThe emvariable/em codetheAlbumsDiscNumberTrackCountInfo/code, is a emlist/em of the codedisc number/code and codetrack count/code from every codetrack/code in the codealbum/code.  ul liThis emlist/em is then processed to remove all duplicate info, so as to have a singular entry for the codetrack count/code of each codedisc number/code in the codealbum/code./li /ul/li liThe codedo shell script/code emcommand/em uses codesort/code and codesed/code to process the emlist/em, the emvalue/em of the emvariable/em codetheAlbumsDiscNumberTrackCountInfo/code.  ul licodesort -n -k1 -u &lt;&lt;&lt;/code  ul licode-n/code compare according to string numerical value/li licode-k1/code start a key at POS1/li licode-u/code without strong-c/strong, output only the first of an equal run/li licode&lt;&lt;&lt;/code directs input from the emcommand line/em, not a emfile/em/li /ul/li licodetheAlbumsDiscNumberTrackCountInfo/code the emlist/em as emcommand line input/em directed to codesort/code/li licode| sed '/^$/d'/code  ul licode|/code pipe the emoutput/em of the codesort/code emcommand/em to codesed/code/li licodesed '/^$/d'/code delete blank lines/li liBecause the emvalue/em of the emvariable/em codetheAlbumsDiscNumberTrackCountInfo/code is a concatenation with a codelinefeed/code at the end of each coderepeat/code emloop/em, it becomes the first line of emoutput/em from the codesort/code emcommand/em and is removed with codesed/code, so as not to have to account for the leading blank line later in the emscript/em. If it was left as a part of emvalue/em of the emvariable/em codetheAlbumsDiscNumberTrackCountInfo/code, that's (re)set by the emreturn/em of the codedo shell script/code emcommand/em, then codeword 2 of paragraph i/code would have to be codeword 2 of paragraph (i + 1)/code in order to skip the leading blank line. So it makes more sense to remove it before it ends up as part of the final emvalue/em of the emvariable/em codetheAlbumsDiscNumberTrackCountInfo/code./li /ul/li /ul/li liWith the emvariable/em, codetheAlbumsDiscNumberTrackCountInfo/code, now only containing a emlist/em of codedisk number/code with its corresponding codetrack count/code, one line for each emdisc/em in the codealbum/code, it's now easy to do the emmath/em, whether the codealbum/code contains 2 emdiscs/em or as many as 14 emdiscs/em, or more./li liThe remaining AppleScript emcode/em, which includes another coderepeat/code emloop/em, preforms the emmath/em necessary to add up the codetrack count/code of each codedisc number/code preceding the codedisc number/code the codecurrent track/code is from, and adds them together, and then logs the desired information./li /ul  hr  That said, if anyone knows an emeasy direct way/em to programmatically ask an codealbum/code for its codedisc count/code and codetrack count/code per emdisc/em to do the emmath/em with, in a straight forward manner to avoid a strongkludge/strong, please post an answer.  <comment369952> It would be nice to know if my kludge worked for you, thanks. <comment369987> Thanks for the suggestion, which does work, and is less kudgy than mine. This was really just for informational purposes than for any important reason: I have the info displayed and didn't want to repeatedly execute a largish script. <comment369988> I accepted the answer, which does work and may be suitable for other purposes. I also really liked the clear explanation! However, I'll continue to reply on reporting Song 12 of Disc 3 of 4 simply to keep the script to only a half-dozen lines. <comment370055> @RPW, Thanks. you said, "I'll continue to reply on reporting Song 12 of Disc 3 of 4 simply to keep the script to only a half-dozen lines.", and if I may, why is there and issue with keeping the number of lines of code down?