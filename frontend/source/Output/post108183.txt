Open command doesn't like non escaped characters even between quotes? <body> Is it me or the codeopen/code command does only accept escaped characters in parameters ?   It tried codeopen "~/Library/Messages/Attachments/87/07/079C263B-0586-48C6-B721-3C6AABAC76DF/Messages Image(1020754653).jpeg"/code  which returns codeThe file /Users/Kyro/Library/Messages/~/Library/Messages/Attachments/87/07/079C263B-0586-48C6-B721-3C6AABAC76DF/Messages Image(1020754653).jpeg does not exist./code  When actually codeopen /Users/Kyro/Library/Messages/Attachments/87/07/079C263B-0586-48C6-B721-3C6AABAC76DF/Messages\ Image\(1020754653\).jpeg/code works quite well.   Edit : Running Mavericks here.   <answer108192> Well I did not read correctly the output of the error.    codeopen/code is one hell of a strong*/strong.   It adds the working directory ahead of the command when using quotes.   code/Users/Kyro/Library/Messages/~/Library/Messages//code doesn't make any sense.   <answer108213> It's not codeopen/code, it's the fact that code~/code only works when it's not in quotes. code~/code isn't actually part of a standard file path, it's a shell metacharacter that the shell replaces in contexts where it looks like the beginning of a path (and quotes suppress this). Here are some examples:  precode$ echo ~ /Users/gordon $ echo "~" ~ $ ls ~/Library Accounts        Fonts Disabled      Printers [...] $ ls "~/Library" ls: ~/Library: No such file or directory /code/pre  Note the last command above: since code~/code is inside double-quotes, it doesn't get replaced by the path to my home folder, and then codels/code just treats is as a normal filename (that happens not to exist). The same thing is happening in your codeopen/code command.  Since the file you're actually trying to open has other shell metacharacters in its name, what you should do is partially-quote the path: leave the code~/code outside the quotes, but make sure the filename part is inside quotes. Something like this:  precodeopen ~/"Library/Messages/Attachments/87/07/079C263B-0586-48C6-B721-3C6AABAC76DF/Messages Image(1020754653).jpeg" /code/pre  <answer108215> As an appendix to @Gordon Davidsons answer:  From the Bash Man Page:  EXPANSION     Expansion is performed on the command line after it has been split   into words.  There are seven kinds of  expansion  performed: brace   expansion, tilde expansion, parameter and variable expansion, command   substitution, arithmetic expansion, word splitting, and pathname   expansion.   Tilde Expansion     If a word begins with an unquoted tilde character (`~'), all of the   characters  preceding  the  first unquoted  slash (or all characters,   if there is no unquoted slash) are considered a tilde-prefix.  If none   of the characters in the tilde-prefix are quoted, the characters in   the  tilde-prefix  following the  tilde are treated as a possible   login name.  If this login name is the null string, the tilde is   replaced with the value of the shell parameter HOME.  If HOME is   unset, the  home  directory  of  the user  executing  the  shell is   substituted instead.  Otherwise, the tilde-prefix is replaced with the   home directory associated with the specified login name.      If the tilde-prefix is a code~+', the value of the shell variable PWD   replaces the tilde-prefix.  If the tilde-prefix is a/code~-', the value   of the shell variable OLDPWD, if it is set, is substituted.  If the   characters following the tilde in the tilde-prefix consist of a number   N, optionally  prefixed  by  a code+'  or  a/code-', the tilde-prefix is   replaced with the corresponding element from the directory stack, as   it would be displayed by the dirs builtin invoked with the   tilde-prefix as an  argument.   If  the characters  following the   tilde in the tilde-prefix consist of a number without a leading code+' or   /code-', `+' is assumed.      If the login name is invalid, or the tilde expansion fails, the word   is unchanged.      Each variable assignment is checked for unquoted tilde-prefixes   immediately  following  a  :  or  the first  =.   In  these cases,   tilde expansion is also performed.  Consequently, one may use file   names with tildes in assignments to PATH, MAILPATH, and CDPATH, and   the shell assigns the expanded value.   <comment126868> open "./a b/1.txt" works for me (OSX 10.9) <comment126869> Well yeah your right, here too. <comment126870> Alright, so you have solved your problem then, right?