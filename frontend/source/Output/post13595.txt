How to prevent ssh from adding my key to ssh-agent on Snow Leopard? <body> I recently started using Snow Leopard (after using Leopard for a few years), and I noticed that when I ssh using a passphrase-protected private key, ssh will automatically add the key to ssh-agent. Question 1: How do I prevent strongssh/strong from behaving this way (doing the auto-add)?  I am strongnot/strong looking to disable the auto-launching of ssh-agent. I actually use it, but I want keys to be added manually (via ssh-add), not automatically.  My current workaround: I've edited /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist to run with the argument "-t 1" and that works well. But I'm afraid that some software update will revert it. Question 2: If I put the modified plist in ~/Library/LaunchAgents/ will the one in /System be ignored for my user? This would qualify as a stable workaround.  <answer13710> h1Automatically Added Keys/h1  There are three ways SSH keys are added to emssh-agent/em in Snow Leopard.  ul limanually, with emssh-add/em,/li liautomatically, by emssh/em when you supply a key’s passphrase via the GUI prompt, and/li liautomatically, by emssh-agent/em when it first starts./li /ul  The last two methods are Apple extensions: there are no “automatic” additions with stock OpenSSH. All references to emssh/em, emssh-agent/em, and emssh-add/em below are to Apple’s Snow Leopard versions unless I prefix the program name with the adjective “stock”.  You can disable all of Apple’s keychain-oriented SSH modifications with a (undocumented?) preference setting:  precodedefaults write org.openbsd.openssh KeychainIntegration -bool false /code/pre  h2Keys Added Automatically By emssh/em/h2  (This is the part I missed in the previous version of my original answer since I usually use a “stock” emssh/em.)  Whenever emssh/em tries to use a passphrase protected SSH key to authenticate itself to a remote host, it will issue a GUI prompt for the SSH key’s password. The key is also loaded into the agent (if the passphrase is correct) whether or not you mark the “Remember password in my keychain” checkbox.  There are two (undocumented?) ways to prevent emssh/em from issuing this GUI prompt (and thus adding the SSH key to the emssh-agent/em):  ul liA preference setting:  precodedefaults write org.openbsd.openssh AskPassGUI -bool false /code/pre/li liAn codessh_config/code entry (or code-o/code option to emssh/em) that specifies codeAskPassGUI no/code.  (see codekeychain_read_passphrase/code in codekeychain.c/code; the codeoAskPassGUI/code parameter comes from the codeAskPassGUI/code configuration setting)/li /ul  When codeAskPassGUI/code is disabled, emssh/em will prompt you in the normal way for the key’s password (i.e. through the tty).  You could also avoid automatic adds from emssh/em by using a “stock” emssh/em (e.g. OpenSSH compiled by MacPorts, Homebrew “duplicates” from homebrew-alt, or Fink).  h2Keys Added Automatically By emssh-agent/em/h2  The keys that emssh-agent/em automatically adds are those that have their passphrases stored in a keychain. These strong“remembered keys”/strong are automatically added when a new emssh-agent/em starts. There is no command line or configuration option (other than codeKeychainIntegration/code, described above) to prevent emssh-agent/em from automatically loading the “remembered keys” (see the call to codeprocess_add_from_keychain/code (defined in codekeychain.c/code) from codemain/code in codessh-agent.c/code). If, however, you can arrange to lock the keychains that store your SSH key passphrases, you can click Cancel when emssh-agent/em asks to unlock the keychain(s) and effectively get emssh-agent/em to skip adding these “remembered keys” when it first starts.  If there is no emssh-agent/em running, your first use of emssh/em will likely trigger emlaunchd/em to start an emssh-agent/em which will load all the “remembered keys”. This makes it seem like emssh/em is loading the keys into the agent, but it is really the agent itself that is loading the keys. It only does this automatically when it first starts.  The code-k/code option of emssh-add/em provides a manual way to add the “remembered keys” (see codeadd_from_keychain/code in codessh-add.c/code which ends up as a message to the agent which calls codeprocess_add_from_keychain/code from codeprocess_message/code in codessh-agent.c/code).  h1emlaunchd/em Configuration/h1  You are right that a system update could overwrite your modification to the file in code/System/Library/LaunchAgents//code. You should always avoid changing things under code/System//code; most things can be (re)configured without making changes there. In this case, it looks like you should be able to override the system default emlaunchd/em job specification on a per-user basis with a file in code~/Library/LaunchAgents//code.  From what I can tellsup1/sup, entries are loaded in this ordersup2/sup:  ol licode~/Library/LaunchAgents//code/li licode/Library/LaunchAgents//code/li licode/Network/Library/LaunchAgents//code (not present on most systems)/li licode/System/Library/LaunchAgents//code/li /ol  It does not seem to be documented, but only the first job configuration for each Label (e.g. codeorg.openbsd.ssh-agent/code) will be kept. Any configuration from a later directory with the same Label as a configuration from an earlier directory is effectively skipped.  hr  sup1/sup See codeNSStartSearchPathEnumeration/code used in codelaunchctl.c/code and defined in codeNSSystemDirectories.h/code/codeNSSystemDirectories.c/code.  sup2/sup emlaunchd/em also looks in the codeLaunchDaemons//code directories next to the various codeLaunchAgents//code directories for other types of jobs.  <comment14450> Good question, but I don't see the need for the first warning sentence... <comment14517> Starting after `ssh-add -D`, what sequence of commands causes the keys to be added? `ssh somwhere` by itself should not add keys. A newly started agent does add keys that have passphrases stored in a keychain and *launchd* will start an agent automatically whenever an SSH command tries to use the advertised agent socket. However, such automatically added keys are immune to the default lifetime `-t` (due to a bug?), so if adding `-t` is effective, then your keys are being added in some other way (`ssh-add` in a shell startup script or some commonly run script?). <comment14699> @chris-johnsen are you actually testing this on **Snow Leopard** ? SSH on SL acts differently from Leopard. I know that SL's ssh is adding my key to the ssh-agent because I tried this on a new Mac. I can clear the stored key with "ssh-add -D" afterward and then I get the passphrase dialog box again, but that's not an acceptable solution. Logging out will also clear the stored key (this behavior is consistent with quitting ssh-agent). The problem is reproducible. I'm not the only one: http://www.serverfault.cms-forex.info/details/144147/ssh-passphrase-remembered-in-macosx-snow-leopard/ <comment14702> @chris-johnsen I realize you're trying to be helpful, but please try to understand the details of the problem before laying out an entire step-by-step solution. <comment14763> Yes, I am using Snow Leopard, but I have always used a “stock” *ssh* instead of the version that Apple provides. I reproduced your “ssh auto-adds” behavior with Apple’s *ssh*. When I investigated the code, I found an undocumented setting that looks like it will solve your problem (though you will have to give up the GUI-based passphrase prompting). <comment14781> I will try your "AskPassGUI" solution when I'm at my SL machine. If it works I'll accept your answer. Also, I reverted /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist and put my modified copy in /Library/LaunchAgents/. My mod was loaded. <comment14894> The "AskPassGUI" worked. Looks like it's actually the passphrase gui that did the adding to ssh-agent.