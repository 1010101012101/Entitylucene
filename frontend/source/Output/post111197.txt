runaway distnoted process <body> Sometimes I see a codedistnoted/code process suddenly spin up and chew up 100% CPU (on one core) and a ton of memory, often in the neighborhood of 1.5G or so. This happens a few times a day, starting a month or so ago.  The command line is code/usr/sbin/distnoted agent/code, and it's started by codelaunchd/code, neither of which help much. It's usually been running for somewhere between 4h and 24h before it spins up and pegs the CPU.  Web searches say codedistnoted/code manages notification delivery, and lots of other people report the same problem with it, but I haven't yet found a fix. Some people find that closing a culprit application (e.g. Skype) stops it, but I haven't found a culprit on my machine yet. I'm usually only running a few apps: Emacs (24.2 from Homebrew), Firefox, Adium, and Dash.  I'm on Mavericks on a late 2012 13" Retina MBP. Thanks in advance!  strongUpdate:/strong  I've turned on codedistnoted/code logging in the system log by touching code/var/log/do_dnserver_log/code, but it doesn't help much. I see lines like these (uid 501 is me, 89 I haven't found yet):  precodedistnoted[80011]: # distnote server agent  absolute time: 48754.144787848   civil time: Wed Nov 20 10:52:03 2013   pid: 80011 uid: 501  root: no distnoted[20]: # distnote server daemon  absolute time: 2.808112262   civil time: Tue Nov 19 09:52:24 2013   pid: 20 uid: 0  root: yes distnoted[444]: # distnote server agent  absolute time: 16.656997509   civil time: Tue Nov 19 09:52:38 2013   pid: 444 uid: 501  root: no distnoted[1271]: # distnote server agent  absolute time: 52.518265717   civil time: Tue Nov 19 09:53:14 2013   pid: 1271 uid: 89  root: no distnoted[689]: Interruption - exiting now. /code/pre  I've also run codesudo dtruss -p PID/code on a spun-up codedistnoted/code process, and it spews lines like this:  precodekevent64(0x3, 0x7FFF7C3FD130, 0x1)       = 1 0 workq_kernreturn(0x20, 0x0, 0x1)         = 0 0 workq_kernreturn(0x20, 0x0, 0x1)         = 0 0 kevent64(0x3, 0x7FFF7C3FD130, 0x1)       = 1 0 workq_kernreturn(0x20, 0x0, 0x1)         = 0 0 workq_kernreturn(0x20, 0x0, 0x1)         = 0 0 kevent64(0x3, 0x7FFF7C3FD130, 0x1)       = 1 0 workq_kernreturn(0x20, 0x0, 0x1)         = 0 0 __disable_threadsignal(0x1, 0x0, 0x0)    = 0 0 __disable_threadsignal(0x1, 0x0, 0x0)    = 0 0 __disable_threadsignal(0x1, 0x0, 0x0)    = 0 0 kevent64(0x3, 0x7FFF7C3FD130, 0x1)       = 1 0 workq_kernreturn(0x20, 0x0, 0x1)         = 0 0 ... /code/pre  <answer111461> strongSummary from the OP/strong: This was a great tool for debugging. It originally pointed me to Spotlight reindexing the filesystem, but I narrowed down the things it's allowed to index, and I still saw the problem. I ended up setting up a cron job to kill distnoted regularly. See answer farther down.  hr  You can debug distnoted by creating the file code/var/log/do_dnserver_log/code  This causes the codeCFNotificationCenter/code server (codedistnoted/code) to record information about all notifications to the system log.  I would start there, reboot and look at the system log when the CPU spikes up. This should out the culprit easily.  More info on codeCFNotificationCenter/code debugging can be found in official Developer docs here: Technical Note TN2124  CFNotificationCenter  <answer111636> I've seen this too.  Emacs 24.3.1, Mavericks 10.9.  I've found that the distnoted process calms down within seconds after I quit out of Emacs.  I've filed an Emacs bug here: http://permalink.gmane.org/gmane.emacs.bugs/80836  <answer113608> I've been doing different combinations of stripping customizations in order to narrow down this behavior; I think it's comint mode. On 10.9 with emacs 24.3.1 from homebrew (or from emacsforosx) the distnoted + emacs leak (they both slowly increase in memory consumption) will happen with one shell-mode buffer open. It won't if you just visit files.  Just wanted to note it here, gmane appears to be down and I keep finding this discussion on my twice weekly search for followups to this issue.  <answer114262> i gave up and took the sledgehammer approach: kill it automatically, every minute. sigh.  i put this in code~/Library/LaunchAgents/org.snarfed.pkill_distnoted.plist/code:  precode&lt;plist version="1.0"&gt; &lt;dict&gt;   &lt;key&gt;Label&lt;/key&gt;   &lt;string&gt;org.snarfed.pkill_distnoted&lt;/string&gt;   &lt;key&gt;ProgramArguments&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;pkill&lt;/string&gt;     &lt;string&gt;-KILL&lt;/string&gt;     &lt;string&gt;-f&lt;/string&gt;     &lt;string&gt;distnoted&lt;/string&gt;   &lt;/array&gt;   &lt;key&gt;StartInterval&lt;/key&gt;   &lt;integer&gt;60&lt;/integer&gt;  &lt;!-- every minute --&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  and then installed it with codelaunchctl load ~/Library/LaunchAgents/org.snarfed.pkill_distnoted.plist/code.  <answer115541> For what it's worth, I was able to fix this problem by disabling my anti-virus software.  <answer118336> I know I'm late to the party but this is a memory leak specific to Cocoa emacs on Mavericks that is fixed in the trunk. For now there is a patch you can use to build emacs 24.3 with just the fix.  https://gist.github.com/anonymous/8553178  hr  <answer133072> This happened to me as well, distnoted was going crazy. After closing a bunch of applications, nothing helped.   Then I noticed one of those 'Report to Apple' dialogs from a crashed Python process had been left open all night.  Though it could just be coincidence, after closing the dialog the distnoted process calmed down.  <answer133165> This happens to me to, a few times a day.  I can't narrow it down to one specific app that makes it happen.  My theory is that some sort of IPC is happening between distnoted and something else.  I can see distnoted is processing incoming XML messages when it gets busy.  I want to know what process is sending it messages when that happens.  Is there any way to trace  inter-process-communication in Mac OS X?  I have also created do_dnserver_log, but I'm not seeing any messages to the system log.  Possibly it's wrapping, is there a log size limit that causes older messages to be purged?  Update: This seems to be fixed for me in MacOS 10.9.4.  It was still happening in 10.9.3.   <answer163160> Peter Buckley is right, I'm wrong.   I hate it when that happens.  Don't remove distnoted, the next boot will be no fun at all.  pre wrong I took a more sledgehammer approach wrong  wrong    sudo mv /usr/sbin/distnoted /usr/bin/distnoted.unwanted wrong wrong This is a work machine and I have no interest in sync'ing with iTunes.  /pre  <answer179154> I ran into a similar issue with distnoted a few months ago and could not track down why the CPU usage was spiking above 100%. Finally, I added an entry to my crontab to codekillall distnoted/code every 2 minutes which solved my problem.  Recently, I have been having an issue with Sublime Text where typing codesubl path/to/file/code was failing to open the file correctly in the Sublime Editor. A restart of the app fixed the issue, but it quickly began to happen again.  After racking my brain to no end, I identified the fact that I was killing distnoted process every 2 minutes to why the subl command had mysteriously stopped working.  The conclusion: the super high CPU usage may have been related to sublime. Now that sublime has updated, hopefully my conclusion is correct, CPU usage remains low, and my subl command returns to working as expected now that distnoted is running again without my crontab killing the process every 2 minutes.  <answer183060> I think I can only remember 2 occasions where distnoted has gone haywire. On this occasion there were 2 of them sitting to top of cpu list and one was over 400%. It happened shortly after returning to the office and plugging in a couple of external displays - one of which is usb powered - I took a guess that it might be related. I did nothing else to try and fix the problem before pulling the USB display out which brought sanity back instantly. And then plugging it back in resulted in no repeat problem.  Which proves what? No idea!  I plug them in hundreds of times and this is the first time that it occurred to me that it might be related. And since it doesn't happen everytime I plug them it, then it might have something to do with plugging them both in too quickly after each other, or something random like that. Anyhow thought I would share in case other people find it has anything to do with plugging in peripherals (if that is what an external screen is)  <answer187413> I also see distnoted go haywire, in my case it seems related to fontd. I have three distnoted running, one for _spotlight, one for _distnote and one for my user.  precodedistnoted   0,0 6:39,85 2   0   101 _distnote   0 bytes 0 bytes     No      -   No  No  No  0 bytes 0 bytes 64 bit distnoted   0,0 0,05    2   0   642 _spotlight  0 bytes 0 bytes     Yes     -   No  No  No  0 bytes 0 bytes 64 bit distnoted   82,1    1:19:38,30  49  1   353 nils    0 bytes 0 bytes     No      -   No  No  No  0 bytes 0 bytes 64 bit /code/pre  Whenever distnoted eats cpu (30-90%), fontworker and fontd eats about 30-60% cpu each. As soon as I kill fontd, distnoted and fontworker for my user calms down. Killing fontworker does nothing. After a couple of minutes when fontd has restarted and been running a while it all starts again.  precodefontworker  27,2    52,81   4   1   1073    nils    0 bytes 0 bytes     No      -   No  No  No  0 bytes 0 bytes 64 bit /code/pre    precodefontd   32,6    1:07,41 6   0   1072    nils    0 bytes 0 bytes     No      -   No  No  No  0 bytes 0 bytes 64 bit /code/pre  I have no clue on why this is happeningâ€¦  <answer229148> I've had this problem too, for quite some time now, but intermittently. Apparently distnoted is part of iTunes and has caused problems on Windows as well. When I killed iTunes (which was playing a song), the codedistonted/code process that was using 400% of my CPU (I have 4 cores) stopped being a problem.   So my answer, until I know better, is to recommend that you kill iTunes, not codedistnoted/code, and let us know what happens.  <answer234478> I've been having the same problems with codedistnoted/code on codeel capitan/code for some time. My solution isn't as harsh as killing it regularly, rather I check for it running out of control (high CPU usage), and then kill it. I use this script:  precode#!/bin/sh # # check for runaway distnoted, kill if necessary # PATH=/bin:/usr/bin export PATH  ps -reo '%cpu,uid,pid,command' |      awk -v UID=$UID '     /distnoted agent$/ &amp;&amp; $1 &gt; 100.0 &amp;&amp; $2 == UID {          system("kill -9 " $3)      }     ' /code/pre  The script is run from cron every minute with this line in crontab:  precode*   *  *   *  *   sh "$HOME/bin/checkdistnoted" /code/pre  In practise, the script kills codedistnoted/codeonce or twice a day, and typically this occurs after codebackupd/code starts.  For those not comfortable with the using the OS X shell (command line), the following script will install both the codecheckdistnoted/code script and the crontab entry:  precode#!/bin/sh # # install $HOME/bin/checkdistnoted # setup crontab to run every minute #  # MWR Apr 2016 #  INSTALLCMD=bin/checkdistnoted cd "$HOME" [ ! -d bin ] &amp;&amp; mkdir bin [ -f $INSTALLCMD ] || {     cat &gt; $INSTALLCMD &lt;&lt;-"!!"     #!/bin/sh     #     # check for runaway distnoted, kill if necessary     #      PATH=/bin:/usr/bin     export PATH      ps -reo '%cpu,uid,pid,command' |          awk -v UID=$UID '         /distnoted agent$/ &amp;&amp; $1 &gt;= 100.0 &amp;&amp; $2 == UID {              # kill distnoted agent with &gt;= 100% CPU and owned by me             system("kill -9 " $3)          }         ' !!     chmod +x $INSTALLCMD      echo installed $INSTALLCMD }  INSTALLCRON="# check for runaway distnoted every minute: * * * * * sh \"\$HOME/$INSTALLCMD\"" crontab -l | grep -q '$HOME'/$INSTALLCMD || {     crontab -l &gt; mycron     echo "$INSTALLCRON" &gt;&gt; mycron     crontab mycron     rm mycron     echo updated crontab } /code/pre  You need to save the above as codeinstall_checkdistnoted.sh/code on your desktop, then run codeApplications/Utilities/Terminal/code and type:  precodecd Desktop sh install_checkdistnoted.sh  /code/pre  If it works fully it will print confirmation of each of the steps. The script won't overwrite an existing codecheckdistnoted/code script or crontab entry.  [Fixed syntax error in script August 2016 - MR]  <answer244062> This seems to happen when an application somehow makes a wrong use of the notification API provided by macOS. In my case the culprit was iTerm2. After quitting it, the codedistnoted/code processes exited. Other culprits that have been identified are Emacs and iTunes.  <comment131185> thanks! good call, i've now done that. i'm not seeing any distnoted entries in `/var/log/system.log`, but it also hasn't spun up since i started the logging. fingers crossed. <comment131340> i am seeing distnoted log lines now, but they're not too useful. sigh. example: `Nov 23 07:56:15 hell.local distnoted[2644]: # distnote server agent  absolute time: 77.445654904   civil time: Sat Nov 23 07:56:15 2013   pid: 2644 uid: 89  root: no` <comment131373> Try to attach DTrace script to that process and see what it actually does, start with `sudo dtruss -p PID` and see what syscalls does the process actually try to do and if there are any failed ones (status is not 0). <comment131380> Also, what is the UID 89 on your system? Does the UID in notifications change? Does the pid 2644 correspond to distnoted or another process? <comment131491> thanks for the ideas! i'm familiar with `strace`, but i didn't know about `dtruss`. i'll definitely try that next time. the pids are just the corresponding distnoted process, and the only uids are me and `_appserveradm`, a built-in system user i don't know much about. <comment131519> thanks again, @Temikus. i've added `dtruss` output. also, i take it back, uid 89 isn't `_appserveradm`. i actually don't see it in the output from `id` at all. i'll keep searching, but do you know of anywhere else i should look? <comment131521> ah. on mac os x i want `dscl . -list /Users UniqueID`, not `id`. turns out uid 89 is `_spotlight`, which is a great lead. maybe this is just spotlight indexing in the background? <comment131578> Could be. I would shut off indexing for a day or two and see whether the incidents appear again. If not - I'll try to think of how we can debug this further. <comment131650> agreed, will do. <comment131865> i reigned in spotlight's indexing settings, and it seems like this has stopped. fingers crossed. thanks for the debugging help! <comment131906> Glad to hear, cheers! <comment133099> Just fishing here, but by any change are you all running [flux](http://justgetflux.com)? For me, they seem to be related. If I quit flux when emacs goes berserk, emacs either crashes or returns to normal. I'm not sure if this a fluke (only happened twice), but if everyone's running it, there might be something to it. <comment133106> i'm not running flux, but maybe others are. <comment133319> thanks! i might actually be seeing the same thing. i thought neutering spotlight (the accepted answer) had worked for me, but i'm still seeing runaway distnoteds after all. thanks again for the lead, i may follow this and debug more too. <comment133362> I believe it's something to deal with my Emacs process as well. distnoted calmed right down after I killed off Emacs. I have server.el, edit-server.el and a python shell running at all times for the record. <comment138098> great find, thanks! <comment145484> Also seen with Emacs v23.4.1. <comment146544> aquaemacs causes this process to flip out on me. <comment146807> Seeing the same thing! Emacs to blame! <comment154520> I updated to a nightly build from the Emacs for Mac OS X (in March) and still have the problem. It appears to happen if I create an interactive session for R or Clojure (programming languages). The distnoted process will slowly climb to GB of RAM and will free it as soon as I exit Emacs. <comment157162> Same here. Never imagined it was caused by Emacs! Thanks <comment157268> Same problem that @mattrepl mentioned. <comment161130> For me, I've been having the converse problem - Emacs starts using all CPU, and killing my user's distnoted clears the problem temporarily. In this case, looking at the Emacs process I see a lot of threads - non-Emacs originated ones - all waiting on the com.apple.root.default-overcommit-priority queue/mutex (run lldb, "process attach --pid pid", and then "thread backtrace all" to see them all) <comment161219> and this is an interesting read on what all those threads actually are: http://newosxbook.com/articles/GCD.html (my killing distnoted might be a 'magic feather', and not the thing that brings it back to normal) <comment163982> Right on, thanks! <comment165482> I had a very similar problem (possibly the same problem) and my problem went away with the 10.9.4 OS update. <comment166361> Homebrew appears to have integrated this patch. So `brew reinstall emacs --cocoa --with-gnutls` may fix the problem too. It's also supposed to be fixed in 24.4 but that hasn't hit stable yet. <comment169078> I don't even know what comint mode is and I have the distnoted problem from emacs at times.  So maybe no specific package is to blame. <comment170611> Noticed this today.  The culprit was the OS X (10.9) Google Drive app (1.17.7290.4094).  First time I've seen this. <comment196124> That's nuts. As is noted in [Apple's page about distnoted](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man8/distnoted.8.html), distnoted is part of OS X, deals with distributed notifications, and has been around since at least 2005. <comment199216> I have the same problem with pathfinder 7.1.1 (1672). Every time I turn it on my distnoted uses 70 ti 100% CPU and it stops when I quit the app. Any idea ? <comment248324> I had a similar situation. When I unplugged my USB display adapter distnoted stopped consuming excessive CPU (according to "top"), and when I plugged it back in, the problem did not immediately reappear. <comment277711> Just happened on 10.11.3.  No emacs, but I am running f.lux. <comment279473> Are you running iTunes? <comment280542> This has happened to me now several times on 10.11.3. I was not running iTunes any of the times, nor is there any external access to this machine's iTunes library (e.g. by an Apple TV). Actually "this" is more severe than the OP's description, as it brings my machine to its knees taking 400% CPU, requiring holding the power button down to turn the machine off. I had thought it might be connected to Mail or Calendar, but the last time it happened, neither were running. This last time I was running only Terminal, Mathematica, CrashPlan, Chrome, and Acrobat Pro. Oh, and Finder of course. <comment280843> I just had the same thing; looks like for me it was caused by Time Machine trying to start a backup to a networked Time Machine backup volume that was busy doing something else. Certainly it reproducibly coincided with that happening, anyway. <comment283888> Just experienced this problem with Emacs 24.5 (fix was supposed to be in 24.4) .. in my case, Emacs was showing the spinning ball and distnoted was taking almost 400% CPU (per `top`) and killing -9 emacs wasn't working, but after killing -HUP disnoted emacs responded to the kill. <comment283889> Also seen with Emacs v24.5 on OS X 10.11.3 <comment283891> strangely enough, this also made my hot corners stop working (that was the first clue something was up). but after fixing the problem, hot corners are STILL not working <comment284018> Whatever you do, DO NOT move `distnoted` as ConorR mentioned (and later corrected, thanks!), it's required to boot OSX (10.9.5 in my case). <comment286417> Anyone here running Fujitsu's ScanSnap software? Just trying to figure out what's causing this for me, too... <comment286663> I'm using Fujitsu ScanSnap, but I don't see evidence it causes the problem. I have had it happen whilst logging on, editing mail, submitting a Safari form, and during Time Machine backups (system otherwise idle). I've posted my solution below (monitor and kill if hogging the CPU). <comment288760> Me too, often not able to wake up mac from sleep, having to ssh to my iMac from a laptop, and `killall -quit distnoted`, instantly everything works, and it's apparent it's been hogged for a while as overnight notifications pop up.  Running f.lux, decided to not use it from now on and see, it's more useful in winter anyway, hope it will become a part of new OS in the autumn. <comment291554> THANK YOU! Terrific solution that allows me to keep disnoted, but shuts it down when it gets out of control.  For other people like me who may not be familiar with the Unixy way of doing things: 1). your home folder won't have a bin directory, create a bin folder under your user name, and put the script in there as a text file named "checkdisnoted". 2). To create the cron entry, run "crontab -e" in terminal, hit the "i" key to get into insert mode, and paste the whole line with the asterisks, then hit "esc" to get back in command mode, and enter ":wq" to save file and exit the editor. <comment291555> Michael Rourke's approach below is a touch cleaner, as it only kills disnoted when it starts eating cpu. <comment294231> @Temikus `syscall::bsdthread_ctl:return` and `syscall::workq_kernreturn:return` both showing error `invalid user access in action #5 at DIF offset 0` <comment294233> Also, it seems like if I send a HUP to the offending process another process starts taking CPU and `dtruss` shows the same errors for it.  After I killed distnoted I started noticing opendirectory taking CPU and outputting those errors, and after I killed it, WindowServer started doing the same thing. <comment295626> Just had this same problem, I'm running Flux if that makes any difference. <comment295661> Dash just did this to me. No idea why it crashed. <comment299390> `id 89` should show the account with user id 89, and other information. <comment303909> iTerm2 causes it for me as well. <comment310324> @Michael Rourke: This is a great solution. However, the installation script contains syntax errors under my Mac's builtin bash "GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin15)".  The "||" logic shortcut and "-" don't seem to work here. <comment310412> Hmm seems after 3 years the problem still persists. <comment310644> @kakyo - very sorry, the script failed because a tab became spaces - fixed now.