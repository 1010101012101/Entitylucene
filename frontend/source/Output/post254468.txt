macOS Sierra doesn’t seem to remember SSH keys between reboots <body> I have to run this command since upgrading to macOS:  precodessh-add -K /code/pre  Corrects the problem after the reboot but I have to run this command every time I log on to my computer.  If I do not run the command above, my keys in code~/.ssh/code are skipped and I am being asked server password in order to establish the connection.  <answer254714> I had this issue as well when attempting to deploy some code using Capistrano. Very frustrating. Here are two methods I know of to deal with this issue.  h3Method 1: Add emall known/em keys to the SSH agent./h3  So one solution I found is to run codessh-add/code with the code-A/code option—which adds all known identities to the SSH agent using any passphrases stored in your keychain—like this:  precodessh-add -A /code/pre  Now this works but it won’t persist across reboots. So if you want to never worry about this again, just open up your user’s code~/.bash_profile/code file like this:  precodenano ~/.bash_profile /code/pre  And add this line to the bottom:  precodessh-add -A 2&gt;/dev/null; /code/pre  Now when you open a new Terminal window, all should be good!  h3Method 2: Add emonly SSH keys that are in the keychain/em to the agent./h3  So while the codessh-add -A/code option should work for most basic cases, I ran into an issue recently where I had 6-7 Vagrant boxes (which uses SSH keys/identities for access) setup on a machine on top of the more common codeid_rsa.pub/code in place.  Long story short, I ended up being locked out of a remote server due to too many failed tries based on SSH keys/identities since the server access was based on a password and SSH keys/identities are SSH keys/identities. So the SSH agent tried emall/em of my SSH keys, failed and I couldn’t even get to the password prompt.  The problem is that codessh-add -A/code will just arbitrarily add every single SSH key/identity you have to the agent even if it’s not necessary to do so; such as in the case of Vagrant boxes.  My solution after much testing was as follows.  First, if you have more SSH keys/identities added to your agent than you need—as shown with codessh-add -l/code then purge them all from the agent like so:  precodessh-add -D /code/pre  With that done, then start the SSH agent as a background process like so:  precodeeval "$(ssh-agent -s)" /code/pre  Now, it gets weird and I am not too sure why. In some cases you can specifically add the code~/.ssh/id_rsa.pub/code key/identity to the agent like so:  precodessh-add ~/.ssh/id_rsa.pub /code/pre  Type in your passphrase, hit kbdReturn/kbd and you should be good to go.  But in other cases simply running this is enough to get the key/identity added:  precodessh-add -K /code/pre  If that’s all worked, type in codessh-add -l/code and you should see one lone SSH key/identity listed.  All good? Now open up your code.bash_profile/code:  precodenano ~/.bash_profile /code/pre  And add this line to the bottom; comment or remove the code-A/code version if you have that in place:  precodessh-add -K 2&gt;/dev/null; /code/pre  That will allow the SSH key/identity to be reloaded to the SSH agent on each startup/reboot.  h3UPDATE: Apple has now added a codeUseKeychain/code option to the open SSH config options and considers codessh-add -A/code a solution as well./h3  As of macOS Sierra 10.12.2, Apple has added a codeUseKeychain/code config option for SSH configs. Checking the man page (via codeman ssh_config/code) shows the following info:  precodeUseKeychain         On macOS, specifies whether the system should search for         passphrases in the user's keychain when attempting to use a par-         ticular key. When the passphrase is provided by the user, this         option also specifies whether the passphrase should be stored         into the keychain once it has been verified to be correct.  The         argument must be ``yes'' or ``no''.  The default is ``no''. /code/pre  Which boils down to Apple seeing the solution as either adding codessh-add -A/code to your code.bash_profile/code as explained in this Open Radar ticket or adding codeUseKeychain/code as one of the options in a per user code~/.ssh/config/code.  <answer256070> I've written a short post about this topic that might help you.  A solution is calling codessh-add -A/code command on every startup.  Just add code.plist/code file with the following content to the path code~/Library/LaunchAgents//code or create one with Lingon app:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;ssh-add-a&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;ssh-add&lt;/string&gt;         &lt;string&gt;-A&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt;  &lt;!-- @@@@LingonWhatStart:ssh-add -A@@@@LingonWhatEnd --&gt; /code/pre  <answer256849> I found that codessh-add -K/code gave me "strongillegal option -- K/strong". This was because ssh-add was a strange version coming from /usr/local/bin (installed by brew?). I was able to add the key by specific use of the ssh-add located in /usr/bin:  precode/usr/bin/ssh-add -K ~/.ssh/id_rsa /code/pre  <answer259769> I had this problem before and I've found a way to bypass this. I just created a file named codeconfig/code in my code~/.ssh/code folder, where I've added the following lines:  precodeHost github.com HostName github.com IdentityFile ~/.ssh/github IdentitiesOnly yes /code/pre  I am not sure why, but codeHost/code and codeHostName/code both are important. In my case if one of them was not present then the solution didn't work.  Then, I just did an codessh-add -K/code and it was working even after the restart.  <answer264974> As of macOS Sierra 10.12.2 Apple added an codessh_config/code option called codeUseKeychain/code which allows a 'proper' resolution to the problem. Add the following to your code~/.ssh/config/code file:  precodeHost *    AddKeysToAgent yes    UseKeychain yes      /code/pre  From the codessh_config/code codeman/code page on 10.12.2:     strongUseKeychain/strong      On macOS, specifies whether the system should search for passphrases in the user's keychain when attempting to use a particular key. When the passphrase is provided by the user, this option also specifies whether the passphrase should be stored into the keychain once it has been verified to be correct.  The argument must be 'yes' or 'no'.  The default is 'no'.   <answer270417> Since macOS 10.12.2 you can use the codeUseKeychain/code option.  Read more here or look into codeman ssh_config/code.  precode     UseKeychain          On macOS, specifies whether the system should search for passphrases in the user's keychain          when attempting to use a particular key. When the passphrase is provided by the user, this          option also specifies whether the passphrase should be stored into the keychain once it has          been verified to be correct.  The argument must be ``yes'' or ``no''.  The default is ``no''. /code/pre  strongSo just do the following:/strong  codeecho "UseKeychain yes" &gt;&gt; ~/.ssh/config/code  <answer274602> Amending ~/.ssh/config to add UseKeyChain for all hosts  is enough to stop this recurring nightmare ;)  precodeHost *  UseKeychain yes /code/pre  If the file is empty or doesn't exist simple create and/or add the above configuration.  <answer275432> As explained here, this is the recommended method since emmacOS 10.12.2/em:  ol liAdd the following lines to your code~/.ssh/config/code file:  precodeHost *     UseKeychain yes     AddKeysToAgent yes /code/pre/li liAny key you add to the emssh-agent/em using the codessh-add /path/to/your/private/key/id_rsa/code command will be automatically added to the keychain, and should be autoloaded upon reboot./li /ol  hr  I'm adding this answer because:  ul liOther answers tell you to add the codeIdentityFile ~/.ssh/id_rsa/code line, but that option is not needed for autoloading the keys (and it'll actually bind that particular key for the host section your add it to, which you won't want if you use different keys for different hots)./li liThe accepted answer mentions codeUseKeychain/code, but that is not enough to persist the keys in codessh-agent/code after a reboot./li /ul  <answer287133> If you are using a different version of ssh (e.g. installed via homebrew) the above solutions will not work out of the box. For instance, codeAddKeysToAgent yes/code and codeUseKeychain yes/code in the code.ssh/config/code file are not recognized by non-Apple ssh versions and will cause an error. The same for the code-A/code or code-K/code option for the codessh/code client.  That means @mluisbrown's answer will not work at all. You can use method 1 of @JakeGould's answer and explicitly use the macOS codessh-add/code utility in your code.bash_profile/code to add all keys to the keychain, i.e.:  precode/usr/bin/ssh-add -A /code/pre  <comment318260> `$ ssh-add -K` gives me `ssh-add: illegal option -- K` <comment318261> Doesn't work for me; but i have a passphrase on the key. <comment318280> You will need to enter the private key path after `-K`. See @JakeGould 's answer for resolution. <comment318281> Works great for me. Thank you. <comment318402> @modius: if you have a pw protected key, do `ssh-add -K [path to key]` and enter pw when prompted. Keychain will store password and ssh-add will get it from there after that. <comment320655> Note the -A is for adding identities to the agent using any passphrases stored in your keychain. If you additionally have identities without passphrases, you will need to omit the -A option to add them to your agent. <comment331665> Host is your user-defined name/alias for a particular server and demarcates  entries per server: stylistically it's nice to indent the lines that follow the Host entry. HostName indicates the server's network addressable name like github.com, but you could use an IP address too. Host and HostName don't have to be the same thing, but yes, they are both integral to the ssh config format. <comment332277> Just to add a bit more visibility to this, Apple has update the man page for ssh_config to include `UseKeychain` and `AddKeysToAgent` to automatically add your keys from your ssh_config. No shell scripting needed. See @mluisbrown answer below for the updated info for 10.12.2 <comment332280> @RyanGibbons “No shell scripting needed.” This is a good tip, but if given the choice between editing an `~/.ssh/config` config to add 4 lines of configuration versus adding one line of `ssh-add -K [path to key]` to a `.bash_profile`, neither solution is ideal. The ideal scenario is an upgrade to macOS 10.12.2 would eliminate the need to do *any* modification of *any* config manually to achieve this basic—and expected—functionality. <comment332281> This is a good tip, but ultimately it’s not too much better than adding `ssh-add -K [path to key]` to a `.bash_profile` since both methods require a level of user modification of files in a user account that was never needed in the past to achieve the same functionality. <comment332307> According to this link: https://openradar.appspot.com/27348363 Apple has "re-aligned [their] behavior with the mainstream OpenSSH in this area". <comment332374> It's absurd that Apple modified behaviour in a way which will cause issues for the vast majority of developers (because of GitHub push if nothing else) and said nothing to anyone! <comment332377> The 10.12.2 update eliminated some unnecessary server password requests for me. You may now no longer need to run the ssh-add -K. <comment332465> @JakeGould I get what you are saying, I actually like what they are doing. Instead of automatically saving the passphrase to the Keychain and loading it on boot, they are giving you control of your security. /shrug <comment332773> I think the `IdentityFile ~/.ssh/id_rsa` is redundant and not needed (when looking at default options). I've never set that option in my ssh config file. <comment332863> @RyanGibbons FWIW, look at the official suggestion from [Apple Developer Relations](https://openradar.appspot.com/27348363#ag9zfm9wZW5yYWRhci1ocmRyFAsSB0NvbW1lbnQYgICA8JvQ6QoM) in this answer on OpenRadar: **“You can fix this pretty easily by running `ssh-add -A` in your rc script if you want your keys to always be loaded.”** `¯\_(ツ)_/¯` <comment332941> LOL, thanks for that - So they add in ssh_config options to handle this automatically but don't recommend using them. <comment332990> @JakeGould IMO changing `~/.ssh/config~` is preferable as it solves the problem at the `ssh` level. Not 100% sure that the `.bash_profile` mod will work for GUI clients using ssh without using a shell. <comment341239> Using `` is at risk if you input the command multiple times. Better do a manual edition of the file, as described by [mluisbrown answer](https://apple.stackexchange.com/a/264974/62697) or [ChrisJF answer](https://superuser.com/a/1163862/214362). <comment341532> You are right there :-) <comment346062> Apple published [Technical Note TN2449](https://developer.apple.com/library/content/technotes/tn2449/_index.html) regarding that change. <comment363810> The mention of `id_rsa` in this answer is confusing. <comment364321> @commonpike @therealmarv I've removed the `IdentityFile` option from the answer as it's not required.