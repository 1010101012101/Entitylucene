How to replace Mac OS X utilities with GNU core utilities? <body> I found there is some differences between the utility command I used on the mac OSX and linux. I want to make my experience united.   How could I replace all my mac utilities with GNU utilities?  <answer69238> I'm not sure that I would recommend emreplacing/em them; however, you can install them to a different path and utilize them that way.  Overall, if you are coming from Linux and would like access to more "generic" *nix utilities, and a system similar to apt, then I would recommend looking into Macports: http://www.macports.org  It allows, for example, using the latest "generic" GCC, as opposed to/in addition to Apple's included GCC, just as an example.  <answer69332> This adds symlinks for GNU utilities with g prefix to code/usr/local/bin//code:  precodebrew install coreutils findutils gnu-tar gnu-sed gawk gnutls gnu-indent gnu-getopt /code/pre  See codebrew search gnu/code for other packages. If you want to use the commands without a g prefix, install the formulas with code--default-names/code (or code--with-default-names/code if your codebrew/code version is newer), or add for example code/usr/local/opt/coreutils/libexec/gnubin/code before other directories on your codePATH/code.  precode$ brew info coreutils coreutils: stable 8.21 http://www.gnu.org/software/coreutils Depends on: xz /usr/local/Cellar/coreutils/8.20 (208 files, 9.4M) /usr/local/Cellar/coreutils/8.21 (210 files, 9.6M) * https://github.com/mxcl/homebrew/commits/master/Library/Formula/coreutils.rb ==&gt; Caveats All commands have been installed with the prefix 'g'.  If you really need to use these commands with their normal names, you can add a "gnubin" directory to your PATH from your bashrc like:      PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"  Additionally, you can access their man pages with normal names if you add the "gnuman" directory to your MANPATH from your bashrc as well:      MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH" /code/pre  You can install GNU codegrep/code by tapping homebrew/dupes:  precodebrew tap homebrew/dupes; brew install grep /code/pre  <answer88812> Besides codebrew install coreutils/code, you may also need to install some other packages, such as codegnu-sed/code, codegrep/code (some of the packages require you to run codebrew tap homebrew/dupes/code first):  precodebrew install findutils --with-default-names brew install gnu-indent --with-default-names brew install gnu-sed --with-default-names brew install gnutls brew install grep --with-default-names brew install gnu-tar --with-default-names brew install gawk /code/pre  The code--default-names/code option is optional, turn on this if you really need to use these GNU commands as default ones, or they will be compiled with a codeg/code prefix.  Reference: http://www.topbug.net/blog/2013/04/14/install-and-use-gnu-command-line-tools-in-mac-os-x/  <answer209393> I've written a script to do exactly this!  The script can be viewed here (or below).  However, I can't always guarantee this post will reflect the latest version of the script linked previously.  Upon running the script, Homebrew will be installed (if not already), all the associated GNU utilities will be installed (if not already), and the codePATH/code variable will be built from the installed utilities.  precode#!/bin/bash  # Install Homebrew (if not already installed) ruby -e "$(curl -fsSL "\ "https://raw.githubusercontent.com/Homebrew/install/master/install)"  # Install required packages from Homebrew brew tap homebrew/dupes brew install coreutils binutils diffutils ed findutils gawk gnu-indent gnu-sed \   gnu-tar gnu-which gnutls grep gzip screen watch wdiff wget bash gdb gpatch \   m4 make nano file-formula git less openssh python rsync svn unzip vim \   --default-names --with-default-names --with-gettext --override-system-vi \   --override-system-vim --custom-system-icons  # Empty the .bash_path file that holds GNU paths &gt; ~/.bash_path  # Build PATH variable script in ~/.bash_path for i in /usr/local/Cellar/*/*/bin; do   echo 'export PATH="'$i':$PATH"' &gt;&gt; ~/.bash_path done for i in /usr/local/Cellar/*/*/libexec/gnubin; do   echo 'export PATH="'$i':$PATH"' &gt;&gt; ~/.bash_path done for i in /usr/local/Cellar/*/*/share/man; do   echo 'export MANPATH="'$i':$MANPATH"' &gt;&gt; ~/.bash_path done for i in /usr/local/Cellar/*/*/libexec/gnuman; do   echo 'export MANPATH="'$i':$MANPATH"' &gt;&gt; ~/.bash_path done  # Check if .bash_path is being called from .bash_profile PATCH=`grep "~/.bash_path" ~/.bash_profile` if [ "$PATCH" == "" ]; then   # Add Ubuntu-style PS1 to .bash_profile   cat &lt;&lt;EOF &gt; ~/.bash_profile export PS1="\[\033[1;32m\]\u@\h\[\033[0m\]:\[\033[1;34m\]\w\[\033[0m\]# " EOF   # Add .bash_path to .bash_profile   echo "source ~/.bash_path" &gt;&gt; ~/.bash_profile fi /code/pre  <comment80474> For instance, tar and zip from Mac OS X know about metadata that the GNU versions do not. <comment80565> There are Apple supplied apps, which are just GUIs for some command line tools and if you replace them the apps may start behaving strangely, so go with adding, not replacing. <comment80567> Right; something like Macports adds them, it doesn't replace them. <comment82612> See also http://apple.stackexchange.com/questions/71119/benefit-of-using-macports-coreutils-instead-of-stock-os-x. <comment104094> Could you please summarise the info here and not just provide a link - answers should be standalone with links only for extra information <comment104096> Welcome to the site. Answers on Ask Different need to be more than just a link. It's okay to include a link, but please summarize or excerpt it in the answer. The idea is to make the answer stand alone. <comment126583> This comment is very usefull ! But I think that `brew`don't provide gnu grep package. But you can use MacPorts too :) <comment126647> @IdrissNeumann `brew install grep` will install GNU grep <comment126665> @xuhdev : when I run this command, I get this message `Error: No available formula for grep` ... but with other package like `coreutils`, `gawk`, `gnu-sed`, `findutils`, ... it's work well. However, I succeed to install gnu grep with MacPort (`sudo port install ...`). <comment126706> @IdrissNeumann You need to run `brew tap homebrew/dupes` first. I'll edit the answer. <comment134377> `brew untap homebrew/dupes; brew tap homebrew/dupes; brew install grep` worked for me. <comment134388> @StefanSchmidt I guess something went wrong with your homebrew. `homebrew tap --repair` should work as well. <comment134721> @xuhdev Yes, you're right. I ran into some other issues today when calling `brew doctor` involving dead formula which could be solved with the aforementioned `brew tap --repair`. <comment153244> FWIW, I have a Homebrew Formula that acts as a meta-package for all those great GNU utils: see `shiny-and-gnu.rb` in https://github.com/al-the-x/homebrew-mine/ <comment168776> Most of these tools are already installed by `brew install coreutils` <comment206900> The first PATH works, but MANPATH failed, why? Is it because I'm using OSX10.10? I echoed $MANPATH, and I got `/usr/local/opt/coreutils/libexec/gnuman:`, seems original MANPATH wasn't include. After commented out the MANPATH conf in my bashrc, I got nothing by `ecoh $MANPATH`. And of course, if I use `man pwd`, I got the BSD manual. How to fix this? <comment209805> Here's a guide https://www.topbug.net/blog/2013/04/14/install-and-use-gnu-command-line-tools-in-mac-os-x/ <comment211805> I sympathize with your frustrations but I believe that, in the long term, it will cause greater frustration if they are *replaced* - After seeking to do the same thing I'd recommend using `homebrew` as mentioned below, and then just learning to use the utilities with a `g` ( `gsed`, `greadlink`, etc ) instead of replacing the system utilities. <comment218026> For `findutils`, you need to add `PATH="/usr/local/Cellar/findutils/4.4.2/bin:$PATH"` which is not stated in the installation console output. <comment237829> In addition, to get the right man page for `findutils`, add this to your `$MANPATH` `/usr/local/opt/findutils/share/man` <comment252561> @Zen: the right way to initiate `MANPATH` so as to keep the default system value is: `MANPATH="/usr/local/opt/coreutils/libexec/gnuman:${MANPATH-/usr/share/man}"`. The key is in the construct `${var-default_value}`. <comment253824> Is there a package available that installs all of these tools at once? <comment263233> Don't you just love the downvotes with no critical comments? Thank you for the script. <comment263261> @JustinForce No problem!  Thank you for the feedback. <comment273206> -1. This scripts does too much magic. All of the `.bash_path`-mangling is not really necessary if you follow @user495470 and @xuhdev's answers. And changing PS1 is completely out of the scope of this question. <comment273812> @GregDubicki unfortunately, the bash path "mangling" is required for some of these packages.  You may check this for yourself.  In regard to changing PS1: this script is for personal use.  Anyone who wishes to revert it may do so very easily. <comment288013> For grep, see http://apple.stackexchange.com/questions/193288/how-to-install-and-use-gnu-grep-in-osx <comment316973> If you want to use the GNU utilities by default with MacPorts you can add `/opt/local/libexec/gnubin` to the front of your `PATH` environment variable. <comment317080> I'm running this to generate symlinks in my ~/bin directory: `utilDir=coreutils/8.25; cp -a /usr/local/Cellar/${utilDir}/libexec/gnubin/* ~/bin`  Just change the `utilDir` for each set of utilities you want to link. Then I can just set `PATH="/home/me/bin:$PATH" without making such a mess with different directories. <comment341050> @danielAzuelos, it seems your snippet has some weird Unicode chars in it which show up when copy-pasting: https://i.imgur.com/qQWygg2.png <comment350239> @Sridhar-Sarnobat What's that for? <comment350266> I don't remember. But I needed it for mine to work. I guess it would not use the GNU version of `find` or some other common program, which you can always tell when getting an error using `find` without a directory argument. <comment358490> Setting `PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"` helped. Thanks! <comment364229> I disagree with @cwd, using `--with-default-names` is only affects the local user. It could be an issue with mac oriented terminal utilities, but if you use homebrew for everything, you might aswell pretend you're using linux. Mixed with iterm2, it's working great for me, I can basically pretend I'm home with my linux boxes.