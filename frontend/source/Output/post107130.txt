Slapd daemon can't start: TLS init def ctx failed: -1 <body> Yesterday I had to restart my Mac OS X Lion Server and after reboot I observed that I do not have any connection to my LDAPv3 on the localhost as well as no users available in Server application.  Next, Server application has showed three outdated certificates. Their names starting with "APNS".   I am not sure whether the issue is connected to those certificates specifically, but unfortunately "slapd" refers to issues with main certificates for my internal domain.  Following is the log from slapd itself:  precodeOct 27 17:49:57 apple slapd[723]: @(#) $OpenLDAP: slapd 2.4.23 (Jun 24 2012 23:35:56) $     root@grace.apple.com:/private/var/tmp/OpenLDAP/OpenLDAP-186.5~1/servers/slapd  Oct 27 17:49:57 apple slapd[723]: daemon: SLAP_SOCK_INIT: dtblsize=8192 Oct 27 17:49:57 apple slapd[723]: main: TLS init def ctx failed: -1  Oct 27 17:49:57 apple slapd[723]: slapd stopped. /code/pre  System log obviously shows:  precodeOct 27 17:53:19 apple com.apple.launchd[1] (org.openldap.slapd[879]): Exited with code: 1   Oct 27 17:53:19 apple com.apple.launchd[1] (org.openldap.slapd): Throttling respawn: Will start in 10 seconds /code/pre  While trying to start slapd from command line (using: code/usr/libexec/slapd -d -1/code), I receive the following message before crash:  precodeTLS: attempting to read  `/etc/certificates/domain.com.456DACFFC771F8EB2F5A8E0EBB269969B8164097.key.pem'. execv failed  TLS: could not use key file  `/etc/certificates/domain.com.456DACFFC771F8EB2F5A8E0EBB269969B8164097.key.pem'. LS: error:0D07207B:asn1 encoding routines:ASN1_get_object:header too long /SourceCache/OpenSSL098/OpenSSL098-49/src/crypto/asn1/asn1_lib.c:150 main: TLS init def ctx failed: -1 slapd destroy: freeing system resources. slapd stopped. /code/pre  If I remove TLS configurations options from "/etc/openldap/slapd_macosxserver.conf" then I am able to start the daemon (using: code/usr/libexec/slapd -d -1 -f slapd_macosxserver.conf/code. All my users a back, I can log-in via Workgroup Manager or Server application.  Meanwhile the Server Admin in the Open Directory entry shows that:  ol liLDAP Server is: Running/li liPassword Server is: Stopped/li liKerberos is: Running/li /ol  I have tried couple of things, but still have no idea how to fix the problem.  <answer107384> I'd recommend creating another self-signed cert in Server.app that you can use for securing services (if the others were expired/deleted). By creating the certificate using Server.app, it will automatically be available for other services (like Open Directory).  After you've created a new self-signed certificate, follow steps 6 through 12 in this article (which describe how your SSL certificate can be configured for use with Open Directory). Performing the Open Directory - Settings - LDAP - SSL configuration through Server Admin will write the correct certificate paths into the codeslapd/code config file.  Once you've corrected the certificate problems, Open Directory (codeslapd/code) should start normally (without you having to start it by hand). If Password Server still doesn't show running after that, you might try a reboot (or check to see if it's generating crash logs or other errors in Console.)  emstrongEdit/em/strong  After modifying the certificate configuration for use with LDAP, it's probably worth checking to see that the machine has provided updated certificate paths to codeslapd/code in the codeslapd_macosxserver.conf/code file. That is, the unique string of numbers and characters in the key/cert paths should have changed.  To confirm that codeslapd/code can access the corresponding private key for the certificate that you're securing LDAP services with, you can check the file at code/etc/openldap/slapd_macosxserver.conf/code...Look for a line mentioning codecertadmin/code...That line specifies the command that codeslapd/code is using to retrieve the private key from the Keychain. It's possible to perform that command (copy and paste) in Terminal to see if the private key passphrase can be retrieved:  precode/usr/sbin/certadmin --get-private-key-passphrase /etc/certificates/domain.com.456DACFFC771F8EB2F5A8E0EBB269969B8164097.key.pem /code/pre  Once you've retrieved the passphrase, see if you can view the private key using that passphrase:  precodesudo openssl rsa -in /etc/certificates/domain.com.456DACFFC771F8EB2F5A8E0EBB269969B8164097.key.pem -text -noout /code/pre  When prompted for the pass phrase, copy and paste the value that you obtained in the step above. You should see the private key data output on the screen. This would confirm that:  1.) Your private key passphrase can be retrieved from the Keychain  2.) The pass phrase in the Keychain can be used to decrypt the key  If you are unable to get the pass phrase and unlock the key, it's possible that codeslapd/code is not able to either. I believe that the software is using a keychain item in the System keychain named "Mac OS X Server certificate management" with a kind of "application password". The "Account" for that keychain item should be set to the same unique string of characters and numbers (code456DACFFC771F8EB2F5A8E0EBB269969B8164097/code in this example) that you see in the cert/key paths in code/etc/certificates/code. If you do not see one of these corresponding application passwords in the System keychain, it may be your issue.  <answer122695> The following has been tested on snow-leopard 10.6 and lion 10.7 versions of the operating system when OpenDirectory LDAP server will not start and Password Server is still running.  If you have a look at the tail of the file codesudo tail /etc/openldap/slapd.d/cn=config.ldif/code you will see a set of TLS Certificate entries similar to the block below:  precodeolcTLSCertificateFile: /etc/certificates/[myservername].ECA88C7518AEDE947AAC94D9A259D1B2E5621169.cert.pem  olcTLSCACertificateFile: /etc/certificates/[myservername].ECA88C7518AEDE947AAC94D9A259D1B2E5621169.chain.pem  olcTLSCertificateKeyFile: /etc/certificates/[myservername].ECA88C7518AEDE947AAC94D9A259D1B2E5621169.key.pem  olcTLSCertificatePassphraseTool: /usr/sbin/certadmin --get-private-key-passphrase /etc/certificates/[myservername].ECA88C7518AEDE947AAC94D9A259D1B2E5621169.key.pem  entryCSN: 20120628190714.643255Z#000000#001#000000 /code/pre  If you compare these entries to the values shown in /etc/certificates you will most likely find that the magic number is different for your certificate to the value shown in the /etc/certificates directory for your certificates.  If you run the command  precodesudo /usr/libexec/slapd -d 1 /code/pre  you will see towards the end of the trace a line approximating  precodeTLS: could not load verify locations (file:`/etc/certificatesâ€¦ /code/pre  To overcome this problem remove the last five lines from the code/etc/openldap/slapd.d/cn=config.ldif/code file manually using your favourite editor and strongsudo/strong.  Then to restart ldap issue the following commands  precodesudo /usr/bin/db_recover -h /var/db/openldap/openldap-data sudo launchctl load /System/Library/LaunchDaemons/org.openldap.slapd.plist /code/pre  All should then be fixed.  <comment126015> Thank you for answer. Did this as well, the first thing I have tried just because it is obvious and in front of my eyes. It rewrites `slapd_macosxserver.conf` with new TLS... options, then tries to start the service for more than a minute and crashes. <comment126027> @Dexterite I added some additional suggestions above (retrieving pass phrase for private key) <comment126744> Thank you @Eddie, these steps I have performed as well and had no issues, both command lines worked well. The problem was completely solved by Update to Mavericks, the actual thing I did want to avoid. In any case thank you for reply. <comment151786> _I have tried couple of things_, what are the things you did try already? <comment152149> Remove the last five lines from `/etc/openldap/slapd.d/cn=config.ldif` is not specific enough. Do you mean from line containting `47AAC94D9A259D1B2E5621169.key.pem` in your example or from line starting with `olcTLSCertificateFile: /etc/certificates/`? <comment152155> reformatted block - it should be clear now that the last 5 lines are the 5 lines shown in the code block.