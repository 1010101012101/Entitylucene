How can I determine if the screen is asleep in Mountain Lion, from the command line? <body> I have a script that needs to run every so often, but only if the screensaver is active or if the screen is asleep (to make sure nobody is actively using the computer first). I need to have a way to determine whether the screen is asleep from the command line. (One-liner preferred)  I'm using "ps -acxw | grep ScreenSaverEngine | grep -v grep" to determine if the screensaver is running, which always worked fine in previous OS versions, but in Mountain Lion, the screensaver is disabled when the screen goes to sleep, so I need a way to determine that as well now.  Help is appreciated...  <answer74394> Though not directly answering your question this line will give you the time in seconds since the last user interaction which comes from what OS X considers to be an idle user. (independently of screen-savers or black displays.)  precodeecho $((`ioreg -c IOHIDSystem | sed -e '/HIDIdleTime/ !{ d' -e 't' -e '}' -e 's/.* = //g' -e 'q'` / 1000000000)) /code/pre  <answer103346> I think I've figured it out. This does it for me:  precodeioreg -n IODisplayWrangler | grep -i IOPowerManagement | perl -pe 's/^.*DevicePowerState\"=([0-9]+).*$/\1/' /code/pre  As for the number that this returns, in my case it appears to be in the range of 0-4.  I don't know what each number specifically means for sure, but when the display is "on", I get 4, and when the display has been put to sleep by idle I get 0. I assume the in-between states are for dimming, etc, but I don't have a laptop here, so I'm not sure.  <answer243122> Thanks, based on the tip by ipmcc, I've created the one-liner that outputs a boolean value.   precodeecho $(ioreg -n IODisplayWrangler | grep -i IOPowerManagement | perl -pe 's/^.*DevicePowerState\"=([0-9]+).*$/\1/')/4 | bc /code/pre  <comment86412> Hmmm... this might be a good alternative to sensing the Screen Saver or Display Sleep status. Thanks. Still would like the original answer as well, but this might be a good alternative. <comment86413> Wait... your command gives me this error: "Illegal variable name" <comment86437> Did you copy/paste the command? Mixing up the different kinds of quotes and backticks will break it. Just in case copying doesn't work here use this paste bin http://pastebin.com/7JrPNxYU <comment86466> Yes, I cut and pasted it. Tried the cut-and-paste bin too... no luck. Same error. I've been cutting and pasting for 18 years too. (-; It doesn't seem to work on 10.8.2? I can see what you're trying to do with it, too... I may try to roll my own from that, but having difficulty. <comment86469> It works perfectly on my machines running 10.6.8 (bash) as well as 10.8.2 (zsh). (I don't have a Lion Mac at hand.) You could also try to derive from `echo $(( $(ioreg -c IOHIDSystem | grep HIDIdleTime | sed -e 's/[^0-9]//g') / 1000000000 ))` <comment86470> There might be the problem... I'm running in 10.8.2 with tcsh <comment86472> Since my script runs in bash, it works. Thanks! <comment86474> oops... actually it is showing me what appears to be the number of seconds since the last full reboot? I can log in and open apps and such, but it doesn't reset to zero. <comment86475> Could it be that you're running a non OS X bundled version of see or GNU sed? Have you checked your $PATH just in case your shell uses sed installed for example by `port`, `homebrew` or `fink`? <comment86479> I have the standard sed installed that comes with 10.8.2... haven't done any port or other aftermarket installs. <comment86485> Hmmm... it is looking like the snippet you gave me does not detect when a user has logged in using a remote control software such as Timbuktu Remote... if an actual user is controlling things, the number gets reset to zero, but if I log in using remote management software, the OS doesn't register it as active... So I guess I still need some way to detect if the screen is asleep directly. <comment86499> It does detect HID, which Timbuktu (*lol* that still exists?) obviously does not. You may get a simulated HID event by using VNC (e.g. with ScreenSharing.app). You original post didn't say anything about remote control. Just out of curiosity, what is it that you want to run and why would it need the user to be idle. (And what happens when the user becomes active again while it is still running?) <comment86502> I have a script that propagates a Thunderbird address book from one machine to 5 others remotely, all through ssh. The source machine should not have someone using it when I shutdown Thunderbird to snag the preference files from it. Also, the destination machines should not have anyone using them when I update their preference files. I have had it running for two years with no glitches until OSX 10.8.2 suddenly began turning the Screensaver process off during screen sleep. The entire process takes about 18 seconds and only runs once per night. <comment86507> So actually checking if Thunderbird is currently in use would be sufficient if you could prevent the user from launching it during runtime. (For example by removing the execute priv from the binary. Though this would be a very hacky way.) <comment86520> Yeah... I'd rather the user not even know anything at all. Also, I have their machines set up to have Thunderbird running at all times to keep the email server's quota empty. So, when this script runs, Thunderbird quits, updates, and launches again. People would freak if they saw their apps quitting and launching automatically while they were watching. ;-) <comment121618> I too have been trying to find a way to query the display sleep state from the command line. Coming up empty so far. :( <comment278782> If this code returns a `4` then the screen is awake, if it returns a `1` then the screen is asleep.  `ioreg -n IODisplayWrangler -r IODisplayWrangler -w 0 | sed -n 's/^.*"CurrentPowerState"=\([0-9]\+\).*/\1/p'` <comment282574> This does work and confirm. 4 indicates on, 0 for off. Tried on a laptop, did not see the other states. Assuming anything larger then 0 is on maybe a safe bet. (have yet to see a value other then 4 or 0)