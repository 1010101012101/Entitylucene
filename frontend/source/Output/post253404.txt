How does Homebrew no longer need ownership of /usr/local? <body> Today I ran codebrew update/code and after migrating the repository, it reported that it no longer needed ownership of code/usr/local/code:  precode$ brew update Updated Homebrew from 5371359 to 13f08a2. ... ==&gt; Migrating HOMEBREW_REPOSITORY (please wait)... ==&gt; Migrated HOMEBREW_REPOSITORY to /usr/local/Homebrew! Homebrew no longer needs to have ownership of /usr/local. If you wish you can return /usr/local to its default ownership with:   sudo chown root:wheel /usr/local /code/pre  This change seems a little dubious. How does brew accomplish this new behavior, apparently bypassing security controls?  <answer253415> According to this ruby script: update-report.rb, they've just moved stuff to /usr/local/Homebrew, which is still owned by you.  <answer255582> We now create all the root directories of code/usr/local/code that you need and check ownership on them rather than requiring it on code/usr/local/code itself.  <comment315334> What security controls is it bypassing?  The `/usr/local` is not included in SIP. See [About System Integrity Protection on your Mac](https://support.apple.com/HT204899) under "Paths and applications that third-party apps and installers can write to include:" `/usr/local` is listed. <comment315335> That said, not being a user of Homebrew, as I compile directly from _source code_ the utilities I want that are not included n OS X, nonetheless I'd imaging that Homebrew has be rewritten as needed/necessary to act normally like other apps have done in the past. IMO Homebrew should have been written from the get go not to have to usurp root ownership to begin with! <comment315371> I mean, if `/usr/local` and its children are owned by `root:admin` or `root:wheel` and aren't group writeable, then I don't have access to write to those directories (and neither would homebrew, presumably), but if that's the case, how can Homebrew manage installing and removing applications from those locations? <comment315376> Doesn't /usr/local need to be writeable by $USER for the creation of /usr/local/Homebrew to take place? What about other directories, like /usr/local/Cellar or /usr/local/opt? Doesn't homebrew still need (non-sudo) access to write to those directories? How can it do that if the dirs are owned by root and not group-writeable? <comment315380> I'm just noticing that the message only references `/usr/local` and not its decendants. And looking at what a brand new homebrew install does, it does set all of the subdirs to be owned by $USER and group writeable. <comment315444> On first install, they still use sudo to create homebrew repository, see [install](https://github.com/Homebrew/install/blob/master/install#L211). The script in my answer for updating, at that point you still owns /usr/local which you chown-ed in old version.