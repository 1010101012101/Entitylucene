Loading User LaunchAgent Successfully <body> I have created a plist file to replace an emxinetd/em process that I used successfully in Windows (Cygwin) and Linux to stream an emimapd/em connection from a remote server via codessh/code on a port on the localhost.   The codeplutil/code command says my configuration is OK. codelaunchctl load path-to-plist/code runs without errors.    When I run codelaunchctl list/code the agent does not display.  When I try to connect to the port on the localhost, I get connection refused.  Here is my plist file:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt;     &lt;dict&gt;         &lt;key&gt;Label&lt;/key&gt;             &lt;string&gt;com.my.ssh_tunnel&lt;/string&gt;         &lt;key&gt;Program&lt;/key&gt;             &lt;string&gt;/usr/bin/ssh&lt;/string&gt;         &lt;key&gt;ProgramArguments&lt;/key&gt;             &lt;array&gt;                     &lt;string&gt;-F /Users/userx/.ssh/config&lt;/string&gt;                     &lt;string&gt;dname /usr/sbin/imapd&lt;/string&gt;             &lt;/array&gt;         &lt;key&gt;Sockets&lt;/key&gt;             &lt;dict&gt;                 &lt;key&gt;Listeners&lt;/key&gt;                 &lt;dict&gt;                     &lt;key&gt;SockServiceName&lt;/key&gt;                         &lt;string&gt;dname-imapd&lt;/string&gt;                     &lt;key&gt;SockType&lt;/key&gt;                         &lt;string&gt;stream&lt;/string&gt;                     &lt;key&gt;SockProtocol&lt;/key&gt;                         &lt;string&gt;TCP&lt;/string&gt;                 &lt;/dict&gt;             &lt;/dict&gt;         &lt;key&gt;inetdCompatibility&lt;/key&gt;             &lt;dict&gt;                 &lt;key&gt;Disabled&lt;/key&gt;                 &lt;false/&gt;                 &lt;key&gt;Wait&lt;/key&gt;                 &lt;false/&gt;             &lt;/dict&gt;         &lt;key&gt;EnvironmentVariables&lt;/key&gt;             &lt;dict&gt;                 &lt;key&gt;SSH_AUTH_SOCK&lt;/key&gt;                     &lt;string&gt;/Users/userx/.ssh-agent.sock&lt;/string&gt;             &lt;/dict&gt;     &lt;/dict&gt; &lt;/plist&gt; /code/pre  I have added a line to /etc/services for emdname-imapd/em and an unassigned port (49022).  Ultimately I will be using this in conjunction with ssh-agent (to make this work 'passwordless') and Thunderbird to retrieve mail from a very locked down system.  There are essentially two questions here.  One, how do I know my agent is being loaded (and how do I confirm that)?  Two, is my plist actually correct?  Here's my original emxinetd/em config:  precodeservice imapssh {         disable         = no         type            = UNLISTED         port            = 2208         socket_type     = stream         protocol        = tcp         wait            = no         server          = /usr/bin/ssh         server_args     = dname /usr/sbin/imapd         user            = userx } /code/pre  Thanks for any help.  This is driving me a little crazy.  This is on an El Capitan Macbook Pro.  Also, I've tried a straight ssh tunnel but that doesn't really work (before anyone suggests it).  Unless someone knows how to make it work like eminetd/em and spawn every time the mail client connects to the port.  <answer264310> OK, addressing your second question first (emis my plist actually correct?/em), codeplutil/code (in its default invocation) "lints" (checks) codeplist/code files for correctness:  precodeplutil ~/Library/LaunchAgents/local.brew.update.plist /code/pre  Equivalent to:  precodeplutil -lint ~/Library/LaunchAgents/local.brew.update.plist /code/pre  Turning to your first question (emhow do I know my agent is being loaded (and how do I confirm that)?/em), here's a few things to help check that.  First, I'd recommend adding logging to aid debugging. I log to code~/Library/Logs/code, so add something like this to my codeplist/code:  precode&lt;key&gt;StandardOutPath&lt;/key&gt; &lt;string&gt;/Users/userx/Library/Logs/local.brew.update.stdout&lt;/string&gt; &lt;key&gt;StandardErrorPath&lt;/key&gt; &lt;string&gt;/Users/userx/Library/Logs/local.brew.update.stderr&lt;/string&gt; /code/pre  Try re-loading your codeplist/code and then check your logs:  precodeless ~/Library/Logs/local.brew.update.stdout less ~/Library/Logs/local.brew.update.stderr /code/pre  A few additional observations:  My understanding of your codeinetdCompatibility/code is that the agent should start when it's loaded. However, you say that codelaunchctl list/code doesn't show the agent. Does that change if you try codelaunchctl start com.my.ssh_tunnel/code after loading the codeplist/code? Do the logs show anything new?  I don't entirely understand the relationship between codeProgram/code and codeProgramArguments/code - could just be me, but I find codeman launchd.plist/code's explanation of codeProgramArguments/code hard-going. I'd be inclined to try adding code/usr/bin/ssh/code as a first codestring/code in codeProgramArguments/code, and removing the entry for codeProgram/code. (Then re-load and check the logs. Re-start and check the logs if needed).  Finally, I'm pretty certain that @daniel-Azuelos is correct, and you need to specify your codeProgramArguments/code like this (I've added codeusr/bin/ssh/code as mentioned above):  precode&lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt;     &lt;string&gt;/usr/bin/ssh&lt;/string&gt;     &lt;string&gt;-F&lt;/string&gt;     &lt;string&gt;/Users/userx/.ssh/config&lt;/string&gt;     &lt;string&gt;dname&lt;/string&gt;     &lt;string&gt;/usr/sbin/imapd&lt;/string&gt; &lt;/array&gt; /code/pre  My reasoning for this is, the few codeplist/codes I can find on my system that use (more than one) codeProgramArguments/code use this idiom:  precode&lt;key&gt;Label&lt;/key&gt; &lt;string&gt;com.divx.uninstall.preferences&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt;     &lt;string&gt;/bin/bash&lt;/string&gt;     &lt;string&gt;-c&lt;/string&gt;     &lt;string&gt;if [[ ! -e "/Applications/DivX/DivX Preferences.app" ]] ; then open "/Library/Application Support/DivX/Uninstall DivX for Mac.app"; fi&lt;/string&gt; &lt;/array&gt; /code/pre  Note how codebash/code's code-c/code option and the corresponding codecommand_string/code are in separate arguments.  <comment265827> I think your array `ProgramArguments` should be splitted in 4 `string…/string`, one for each `argv[i]`, as `string-F/string…`. <comment265968> The existing, working plists don't seem to have an issue with more than one string inside a string tag.