Now that El Capitan is "rootless", is there any way to get dtrace working? <body> I've found dtrace to be an invaluable tool for debugging and troubleshooting all sorts of issues, not to mention the two dozen dtrace toolkit scripts shipped emby Apple/em as part of El Capitan.  On El Cap though, running dtrace usually results in an endless spew of errors making dtrace all but useless.  <answer208763> System Integrity Protection in 10.11 can be disabled, though it's not something you should do lightly.  You can disable SIP entirely by doing the following:  ol liReboot your mac/li liHold âŒ˜R during reboot/li liFrom the strongUtilities/strong menu, run strongTerminal/strong/li liEnter the following command/li /ol    precodecsrutil disable /code/pre  Alternatively you can re-enable SIP while still allowing codedtrace/code to work by also running the following:  precodecsrutil enable --without dtrace /code/pre  Note, that when doing so you'll get the following warning:     This is an unsupported configuration, likely to break in the future and leave your machine in an unknown state.   Once you reboot, codedtrace/code will work as it did in Yosemite.  <answer224731> Copy the binary to a directory that is not "restricted", for example, code/tmp/code  codecsrutil disable/code does not work for dtruss to some degree. But as @J.J said codechroot/code works, this inspired me.  Still I don't know why this works. It may have something to do with the "protected directories", I guess.  Here is the test:  precodeCC@~ $ csrutil status System Integrity Protection status: disabled. CC@~ $ sudo dtruss /bin/echo dtrace: failed to execute /bin/echo: dtrace cannot control executables signed with restricted entitlements CC@~ $ cp /bin/echo /tmp CC@~ $ sudo dtruss /tmp/echo  SYSCALL(args)        = return thread_selfid(0x0, 0x0, 0x0)         = 46811 0 csops(0x0, 0x0, 0x7FFF51B6CA20)      = 0 0 issetugid(0x0, 0x0, 0x7FFF51B6CA20)      = 0 0 shared_region_check_np(0x7FFF51B6A918, 0x0, 0x7FFF51B6CA20)      = 0 0 stat64("/usr/lib/dtrace/libdtrace_dyld.dylib\0", 0x7FFF51B6BEA8, 0x7FFF51B6CA20      = 0 0 /code/pre  <comment264439> Well done - I missed this post when answering the other thread :-) I am going to [re-plug Rich's session video](http://www.jamfsoftware.com/resources/os-x-security-defense-in-depth/) and blog: https://derflounder.wordpress.com/2015/10/01/system-integrity-protection-adding-another-layer-to-apples-security-model/ <comment265063> This isn't quite true. With DTrace enabled via csrutil you can invoke the kernel's DTrace - but only on binaries that do not have the restricted entitlements flag. You cannot remove the restricted entitlements flag, even as root, with all of SIP turned off. This means that with DTrace enabled you can DTrace non-system binaries only. However, if a non-system binary uses a shared-lib installed in the system folders (which a lot of programs do), you can't DTrace that either. So the only way to get dtrace to work 'like it did in Yosemite' is to make a copy of all your system folders, and chroot it