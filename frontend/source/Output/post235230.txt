How to mount disk by UUID or LABEL in OS X El Capitan? <body> I get the UUID and label of a disk from codediskutil info disk0s4/code  precodediskutil info disk0s4    Device Identifier:        disk0s4    Device Node:              /dev/disk0s4    Whole:                    No    Part of Whole:            disk0    Device / Media Name:      Untitled     Volume Name:              Data     Mounted:                  No     File System Personality:  HFS+    Type (Bundle):            hfs    Name (User Visible):      Mac OS Extended    Journal:                  Unknown (not mounted)    Owners:                   Disabled     Partition Type:           Apple_HFS    OS Can Be Installed:      No    Media Type:               Generic    Protocol:                 PCI    SMART Status:             Verified    Volume UUID:              F8C88B2D-5412-343B-8969-254F3AC559B8    Disk / Partition UUID:    1738336E-68DD-46B1-997E-57469CF0472D     Total Size:               338.0 GB (337984569344 Bytes) (exactly 660126112 512-Byte-Units)    Volume Free Space:        0 B (0 Bytes) (exactly 0 512-Byte-Units)    Device Block Size:        512 Bytes     Read-Only Media:          No    Read-Only Volume:         Not applicable (not mounted)     Device Location:          Internal    Removable Media:          No     Solid State:              Yes /code/pre  codemount/code using the volume label does not work:  precode$ sudo mount -t hfs LABEL=Data /Users/user/test GetMasterBlock: Error 2 opening LABEL=Data GetMasterBlock: Error 2 opening LABEL=Data mount_hfs: error on mount(): error = -1. mount_hfs: No such file or directory /code/pre  codemount/code using the volume UUID does not work with or without quotes:  precode$ sudo mount -t hfs uuid=F8C88B2D-5412-343B-8969-254F3AC559B8 /Users/user/test GetMasterBlock: Error 2 opening uuid=F8C88B2D-5412-343B-8969-254F3AC559B8 GetMasterBlock: Error 2 opening uuid=F8C88B2D-5412-343B-8969-254F3AC559B8 mount_hfs: error on mount(): error = -1. mount_hfs: No such file or directory $ sudo mount -t hfs UUID="F8C88B2D-5412-343B-8969-254F3AC559B8" /Users/user/test GetMasterBlock: Error 2 opening UUID=F8C88B2D-5412-343B-8969-254F3AC559B8 GetMasterBlock: Error 2 opening UUID=F8C88B2D-5412-343B-8969-254F3AC559B8 mount_hfs: error on mount(): error = -1. mount_hfs: No such file or directory /code/pre  codemount/code using the volume identifier works  precodemymac:~ user$ sudo mount -t hfs /dev/disk0s4 /Users/user/test /code/pre  h2Update:/h2  My goal is to put the codemount/code line in code/etc/fstab/code as I want to mount a volume to a custom mountpoint.  <answer236877> When using OS X, it's usually more advisable to use codediskutil/code for disk-related activities.  h2TL;DR:/h2  To mount a volume/disk by identifier:  precodediskutil mount /dev/diskXsY          # mounts just that volume diskutil mountDisk /dev/diskX        # mounts the whole disk /code/pre  To mount a volume by UUID:  precodediskutil mount [Volume/Partition UUID] /code/pre  To mount a volume by label:  precodediskutil mount [label] /code/pre  hr  h2Explanation/h2  With codediskutil/code, node identifiers (code/dev/diskXsY/code) are interchangeable with UUIDs: in any codediskutil/code operation (such as codeeject/code), a UUID can be specified instead of a node identifier. From the man page:     strongDEVICES/strong      A device parameter to any of the above commands (except where   explicitly required otherwise) can usually be any of the following:      o   The disk identifier (see below).  Any entry of the form of disk*, e.g.  disk1s9.      o   The device node entry containing the disk identifier.  Any entry of the form of /dev/disk*, e.g.  /dev/disk2.      o   The volume mount point.  Any entry of the form of /Volumes/*, e.g.  /Volumes/Untitled.  In most cases, a "custom" mount   point e.g.                  /your/custom/mountpoint/here is also accepted.      o   The URL form of any of the volume mount point forms described above.  E.g.  file:///Volumes/Untitled or file:///.      o   A UUID.  Any entry of the form of e.g.  11111111-2222-3333-4444-555555555555.  The UUID can be a "media" UUID   which IOKit places in an IOMedia node                  as derived from e.g. a GPT map's partition UUID, or it can be an AppleRAID (or CoreStorage) set (LV) or member (PV) UUID.      From codeman diskutil/code, section 'Devices'.   hr  Obtaining these identifiers/UUIDs/labels are simple, with either of the following commands:  precodediskutil list                               # lists all connected volumes and their identifiers diskutil info /dev/diskXsY | grep UUID      # gets the UUID of a connected volume /code/pre  The returned values from these commands should look something like the following:  precode$ diskutil list /dev/disk0 (internal, physical):    #:                       TYPE NAME                    SIZE       IDENTIFIER    0:      GUID_partition_scheme                        *500.3 GB   disk0    1:                        EFI EFI                     209.7 MB   disk0s1    2:                  Apple_HFS Macintosh SSD           499.4 GB   disk0s2    3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3  $ diskutil info /dev/diskXsY | grep UUID Volume UUID:              1F340CD7-G071-4218-98DG-2D08G89CC57C Disk / Partition UUID:    76E7G531-G6C3-5E37-C11B-BCEEC67D12G4 /code/pre  As shown above, the identifier can be found from the codeIDENTIFIER/code column, the label from the codeNAME/code column, and the UUID from either codeUUID/code field (either UUID will mount the volume).  By label:  precode$ diskutil mount Recovery\ HD Volume Recovery HD on Recovery HD mounted /code/pre  By UUID:  precode$ diskutil mount 67EG87EB-CB01-4ED9-082D-303F63CF6394 Volume Recovery HD on 67EG87EB-CB01-4ED9-082D-303F63CF6394 mounted /code/pre  By disk identifier:  precode$ diskutil mount /dev/disk0s3 Volume Recovery HD on /dev/disk0s3 mounted /code/pre  emaddition for edit to OP's question: strongmounting to a custom path/em/strong  You can do this with codediskutil mount/code and the code-mountPoint/code option. From the man page:     strongmount [readOnly] [-mountPoint path] device/strong      Mount a single volume.  If readOnly is specified, then the file system is mounted read-only, even if the volume's underlying file system and/or device and/or media supports writing; even the super-user may not write to it; this is the same as the rdonly option to mount (8).  If a -mountPoint is specified, then that path, rather than the standard path of /Volumes/VolumeName, will be used as the view into the volume file con- tent; a directory at that path must already exist.      From codeman diskutil/code, section 'Verbs'.   The syntax to mount to a custom mountpoint is as follows:  precodediskutil mount -mountPoint /path/to/custom/mountpoint [volume (identifier/UUID/label)] /code/pre  Bear in mind that code/path/to/custom/mountpoint/code strongmust be a directory/strong, just like with codemount/code, and that your identifier/UUID/label are specific to the volume (i.e. code/dev/diskXsY/code not code/dev/diskX/code). Mounting to a custom mountpoint cannot be done with codediskutil mountDisk/code, and only works with a single volume at a time.  <answer236912> I'm combining some of my comment into an answer as I believe it address the codefstab/code issue.  As you've already found out, the codemount/code command cannot use codeUUID/code or codeLABEL/code and must use the Disk Identifier, e.g. code/dev/disk0s4/code.  Additionally as perhapsmaybeharry pointed out that the OS X method is to use codediskutil/code.  To address your update... However codefstab/code can use the codeUUID/code or codeLABEL/code, just look at the examples in the man page for codefstab/code.  In a Terminal type codefstab/code and then right-click on codefstab/code and select Open man Page. Read it in its entirety! :)  I have no problems using codefstab/code, however I always use at least the first four fields.  I see you'er missing the third field, (fs_vfstype), in your comment.  Are you omitting it in codefstab/code?  You should edit your question and show exactly what you've tried in codefstab/code and which editor you've used.  strongTry:/strong codeUUID=1738336E-68DD-46B1-997E-57469CF0472D /mount/point hfs rw,auto/code where code/mount/point/code is a preexisting directory.  I've tested this on my system using my codeUUID/code, it's your codeUUID/code in the line I'm suggesting you try above.  strongNote:/strong It would only mount to the defined mount point if I included the third field, (fs_vfstype), otherwise it mounted in code/Volumes/code even though the second field, (fs_file), existed.  <answer240317> Here is what I've been using to mount an external SSD into my Music folder that contains my iTunes media files automatically whenever I log in.  You didn't say exactly what the purpose of the external mount is so some of these bits might not be what you need but then again, it might be exactly what you are trying to do.  As mentioned in your question and in @perhapsmaybeharry's answer, the codemount/code command doesn't support UUIDs so codediskutil/code is the recommended utility.  However, the codefstab/code file does support UUIDs so you can store the mount parameters in codefstab/code then codediskutil/code will read the parameters from codefstab/code to mount your drive.  ul liIn code~/Music/iTunes//code, create a folder to be used for the mountpoint.  I used codeSSD_Music/code./li liUse codesudo vifs/code to edit the codefstab/code file, add the following as a single line (editing for the UUID and USERNAME as appropriate) then save/exit. codeUUID=F8C88B2D-5412-343B-8969-254F3AC559B8 /Users/USERNAME/Music/iTunes/SSD_Music hfs rw,noauto,noowners,nobrowse 0 0/code  ul linoauto = don't mount the drive during boot. I've encountered times where the drive was mounted as root instead of as me so it is better to wait until you log in./li linoowners = Ignore ownership on the volume.  Permissions will be inherited from the mountpoint.  If I didn't use this, the mounted volume was owned by root but subdirectories were owned by me./li linobrowse = Don't show the disk in the Finder sidebar or Desktop./li /ul/li liPerform the mount with codediskutil mount F8C88B2D-5412-343B-8969-254F3AC559B8/code (strongNote:/strong Do not include the codeUUID=/code prefix in this command./li liHopefully it mounted without errors.  Check it with codemount/code which should show something like code/dev/disk2s2 on /Users/USERNAME/Music/iTunes/SSD_Music (hfs, local, nodev, nosuid, journaled, noowners, nobrowse)/code/li liIf you are doing this for iTunes, you need to create an alias for the codeiTunes Media/code folder to point to the folder on the mounted disk.   ul liQuit iTunes if it is running/li licodecd ~/Music/iTunes//code/li licodemv 'iTunes Media' 'iTunes Media-bak'/code/li licodeln -s 'SSD_Music/iTunes Media' 'iTunes Media'/code/li licodeditto 'iTunes Media-bak' 'iTunes Media'/code to copy your media to the new drive.  Skip this if you have already copied it over./li /ul/li liUnmount the disk with codediskutil unmount ~/Music/iTunes/SSD_Music/code/li /ul  hr  Now that you can mount the drive by UUID, let's automate it when you log in.  ul liIn code~/Library/LaunchAgents//code, create a new file called codelocal.mount_SSD_Music.plist/code/li liCopy/Paste the following XML into the new file then save/exit.  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Disabled&lt;/key&gt;     &lt;false/&gt;     &lt;key&gt;KeepAlive&lt;/key&gt;     &lt;false/&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;local.mount_SSD_Music&lt;/string&gt;     &lt;key&gt;ProcessType&lt;/key&gt;     &lt;string&gt;Background&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/usr/sbin/diskutil&lt;/string&gt;         &lt;string&gt;mount&lt;/string&gt;         &lt;string&gt;F8C88B2D-5412-343B-8969-254F3AC559B8&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre/li liMake sure the drive is unmounted/li liTest the mounting using the new LaunchAgent plist with codelaunchctl load ~/Library/LaunchAgents/local.mount_SSD_Music.plist/code.  Hopefully it mounted without errors again./li /ul  So now if you reboot, the external drive will be automatically mounted when you log in.  Hope this helps!   <comment290021> Thanks for the answer, could you check the update section in my question and address it? <comment290022> @biocyberman updated my answer. If it does not address your addition appropriately, please let me know <comment290027> As you've already found out, the `mount` command cannot use `UUID` or `LABEL` and must use the Disk Identifier, e.g. `/dev/disk0s4`.  Additionally as perhapsmaybeharry pointed out that the OS X method is to use `diskutil`.  To address your update... However `fstab` can use the `UUID` or `LABEL`, just look at the examples in the man page for `fstab`.  In a Terminal type `fstab` and then right-click on `fstab` and select Open man Page, then read it in its entirety! :) <comment290032> @user3439894 I tried a line in `fstab` like this: `UUID=volume_uuid /mount/point auto`, and ran `sudo mount -a`. The same error happened: `... mount_hfs: No such file or directory` <comment290033> The second field, (fs_file), the mount point, has to already exist, does it? <comment290035> Yes, it does exist. <comment290038> I have no problems using `fstab`, however I always use at least the first four fields.  I see your missing the third field, (fs_vfstype), in your comment.  Are you omitting it in `fstab`?  You should edit your question and show exactly what you've tried in `fstab` and which editor you've used.  That said, none of my mount points are other then the default /`Volumes` for which `none` is set.  I'll test once I see your edit and the mount point you're attempting. <comment290043> Try: `UUID=1738336E-68DD-46B1-997E-57469CF0472D /mount/point hfs auto` where `/mount/point` is a preexisting directory.  I've tested this on my system using my `UUID`, yours is in the the one I'm suggesting you try, and it would only mount to the defined mount point if I included the third field, (fs_vfstype), otherwise it mounted in `/Volumes` even though the second field, (fs_file) existed. <comment290045> I've tested this previously and I got two identical volumes mounted with `UUID=... /mount/point hfs rw,auto` in El Capitan: 1. /mount/point and 2. /Volumes. <comment290046> @klanomath, Not sure what you're trying to say, other then maybe it works as I've said in my answer?  Or are you saying it mounts twice no matter what? BTW I'm running OS  X 10.8.5. <comment290048> @klanomath, I've edited it, hopefully it's clearer.  Now back to your first comment, are you saying that under OS X 10.11 it will mount to a custom mount point but it also mounts a second mount point at the default `/Volumes` too, with just one line added to `fstab`? <comment290049> Yes that was my experience. I wrote a similar answer but then I realized that the volume was shown twice: on the Desktop (which is /Volumes) and at the mount point defined in fstab (which was /Users/user/test) <comment290050> @klanomath, I never saw your answer, I guess you deleted it before I saw this question. Since I'm running OS X 10.8.5 and do not have an OS X 10.11.x machine to test, there's not much more I can do other then to delete my answer too. <comment290051> I didn't publish my answer after writing it! Your answer isn't wrong but the result is probably not wanted by the OP. I'm just looking for a solution to improve your answer. <comment290055> @klanomath, I'll leave my answer for a little while and if you do figure out how to not have two mount points from one `fstab` entry under OS X 10.11.x, as it doesn't exhibit that behavior under OS X 10.8.5, and want to add it to my answer, feel free to with my gratitude. :)