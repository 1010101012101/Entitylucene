speed up launchctl execution <body> I've set up a bunch of scripts that need to happen when I connect my thunderbolt dock at home (disable wifi, enable bluetooth, ...).  To detect the thunderbolt dock I make use of the following codelaunchctl/code service:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt;                                                                    &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;romeovs.dock.agent&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/Users/romeovs/.bin/dock/run.sh&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;LaunchEvents&lt;/key&gt;     &lt;dict&gt;         &lt;key&gt;com.apple.notifyd.matching&lt;/key&gt;         &lt;dict&gt;             &lt;key&gt;com.apple.system.config.network_change&lt;/key&gt;             &lt;dict&gt;                 &lt;key&gt;Notification&lt;/key&gt;                 &lt;string&gt;com.apple.system.config.network_change&lt;/string&gt;             &lt;/dict&gt;         &lt;/dict&gt;     &lt;/dict&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  This service listens to codelaunchd/code for a network change to happen (detecting the wired network that is connected to the dock). This setup seems to work but it is really slow to detect and act when the dock is connected.  It already takes a long time for the dock network to be set up, but after that it also takes another 5 seconds before the script actually gets called.  Is there a way to make the service detect the network changes any faster (without setting up a polling service)?  <answer140438> The delay is most likely to be within the notification centre; the codenotifyd/code service is not time critical.  Consider using a process observing IOKit level notifications. At the IOKit layer notifications are immediately dispatched and designed for processes reacting to hardware changes.  Trying using Growl and the HardwareGrowler addition to trigger your script.  <comment165540> I'm not fond of installing Growl again so I'm investigation the IOKit suggestion you gave. Is it possible to listen to hardware actions using `launchd`? <comment165566> The `launchd.plist` manual page suggests it is not possible without an external process or tool; https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man5/launchd.plist.5.html <comment165628> [This answer](http://stackoverflow.com/a/12259762/600545) seems to indicate that it is possible to detect usb events from within `luanchd`. It would seem plausible that it could also detect thunderbolt events, but I can't seem to find the right syntax. <comment165675> Consider asking a second question specifically for this functionality. You will be more likely to attract others who know the answer. <comment165693> Yes I found the solution already. You can see how I did it in [this follow up question I had](http://apple.stackexchange.com/q/140601/5050).