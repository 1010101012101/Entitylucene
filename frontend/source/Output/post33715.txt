Which command controls the open file limits? <body> Which command / configuration file controls the open file limits on OS X?  Is there a different command for OS X 10.5 / 10.6 / 10.7?  The options I explore below are codeulimit/code, codesysctl/code, and codelaunchctl/code  "Too many open files" is apparently a common error on Leopard, perhaps other versions of OS X:  ul li420 Too Many Open Files/li liHow to properly increase ulimit -n on Lion?/li liWhere are the default ulimits specified on OS X (10.5)?/li /ul  There are many (related?) ways to view the open file limits:  precode$ ulimit -a core file size          (blocks, -c) 0 data seg size           (kbytes, -d) unlimited file size               (blocks, -f) unlimited max locked memory       (kbytes, -l) unlimited max memory size         (kbytes, -m) unlimited open files                      (-n) 2048 pipe size            (512 bytes, -p) 1 stack size              (kbytes, -s) 8192 cpu time               (seconds, -t) unlimited max user processes              (-u) 512 virtual memory          (kbytes, -v) unlimited   $ launchctl limit cpu         unlimited      unlimited       filesize    unlimited      unlimited       data        unlimited      unlimited       stack       8388608        67104768        core        0              unlimited       rss         unlimited      unlimited       memlock     unlimited      unlimited       maxproc     1024           2048            maxfiles    2048           4096         $ sysctl -a | grep files kern.maxfiles = 32768 kern.maxfilesperproc = 16384 kern.maxfiles: 32768 kern.maxfilesperproc: 16384 kern.num_files: 2049 /code/pre  It has been claimed in some of the above posts that these can be modified with the following commands:  precodesudo launchctl limit maxfiles 16384 32768 sudo ulimit -n 32768 sudo sysctl -w kern.maxfilesperproc=16384 sudo sysctl -w kern.maxfiles=32768 /code/pre  However, out of the above commands, only the codesysctl/code commands have any apparently effect (i.e. codeulimit -n/code and codelaunchctl limit/code show no change after the above commands have been entered, while codesysctl -a/code does show the requested changes).  The corresponding locations to change these parameters for the OS are:  precode/etc/sysctl.conf /etc/launchd.conf /code/pre  I also discovered one answer which reads that codeulimit/code only controls the current shell.  How can I adjust upwards the emmax files/em / emmax open files/em limits on macOS?  <answer48627> The simple answer used to be that there were multiple limits and the lowest limit that you reach in a specific instance will generate your error. Now on 10.12 codelaunchctl limit maxfiles/code is also in the mix. For details on implementation, this great answer is getting bounty and deserves more votes than the one I can give it.  other relevant threads are:  ul li`ulimit -n` for non-root/li liWhy won&#39;t kern.maxfiles setting in /etc/sysctl.conf stick?/li /ul  The codeulimit/code level is set low to prevent one poor shell script from flooding the kernel with open files.  The codekern.maxfilesperproc/code is there to leave a little room in the max files count so that one process can use most but not all of the open file handler space from the kernel.  For normal situations, the codekern.maxfiles/code is the final limiting factor.  On Sierra - the limits are 256 open files and unlimited max, so I'm finding that having 3 to 4 thousand files set for the soft limit works for just about all our hardware and still keeps the system responsive when a runaway process opens too many files. We do like to keep our development servers at the 256 limit so that we catch leaky and problematic software in development / staging and test rather than finding out about it in production.  ul lihttp://krypted.com/mac-os-x/maximum-files-in-mac-os-x//li /ul  I'm not a fan of 10k files - maybe with APFS and NVMe storage we will see the day when that's not unthinkable, but try to stick with hundreds or low thousands for your file limits.  <answer73686> The following should resolve most common problems (and are listed in order of their hierarchy):  precodeecho 'kern.maxfiles=20480' | sudo tee -a /etc/sysctl.conf echo -e 'limit maxfiles 8192 20480\nlimit maxproc 1000 2000' | sudo tee -a /etc/launchd.conf echo 'ulimit -n 4096' | sudo tee -a /etc/profile /code/pre  Notes:  ol liYou will need to restart for these changes to take effect./li liAFAIK you can no longer set limits to 'unlimited' under OS X/li lilaunchctl maxfiles are bounded by sysctl maxfiles, and therefore cannot exceed them/li lisysctl seems to inherit kern.maxfilesperproc from launchctl maxfiles/li liulimit seems to inherit it's 'open files' value from launchctl by default/li liyou can set a custom ulimit within /etc/profile, or ~/.profile ; while this isn't required I've provided an example/li liBe cautious when setting any of these values to a very high number when compared with their default - the features exist stability/security.  I've taken these example numbers that I believe to be reasonable, written on other websites. /li /ol  <answer270147> It seems like there is an entirely different method for changing the open files limit for each version of OS X.  strongFor OS X Sierra/strong (10.12.X) you need to:  strong1./strong In codeLibrary/LaunchDaemons/code create a file named codelimit.maxfiles.plist/code and paste the following in (feel free to change the two numbers (which are the soft and hard limits, respectively):  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt;   &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"           "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt;     &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;limit.maxfiles&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;       &lt;string&gt;launchctl&lt;/string&gt;       &lt;string&gt;limit&lt;/string&gt;       &lt;string&gt;maxfiles&lt;/string&gt;       &lt;string&gt;64000&lt;/string&gt;       &lt;string&gt;524288&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;ServiceIPC&lt;/key&gt;     &lt;false/&gt;   &lt;/dict&gt; &lt;/plist&gt;  /code/pre  strong2./strong Change the owner of your new file:  precodesudo chown root:wheel /Library/LaunchDaemons/limit.maxfiles.plist /code/pre  strong3./strong  Load these new settings:  precodesudo launchctl load -w /Library/LaunchDaemons/limit.maxfiles.plist /code/pre  strong4./strong Finally, check that the limits are correct:  precodelaunchctl limit maxfiles /code/pre  <comment38468> Is there a question here? <comment38472> Yeah... at the bottom.  I had hoped that showing my research would be helpful to some, as it summarizes some very long threads elsewhere.  I'm also not convinced any of the "solutions" I've posted actually work; they've behaved inconsistently (and unfortunately un-reproducibly) on my machine <comment38473> May I suggest moving your question to the top, to make it more clear? You're welcome to leave in your research. <comment38479> I'd like to suggest you also explain how often you are seeing this problem, and how it is affecting you. <comment38495> re: bneely - infrequently, but when it happens, nearly everything on the machine stops functioning.  I've noted problems in particular with Quicksilver and Google Chrome, and the problems are correlated with failures of mDNSResponder.  However, I tried to keep this general, as others who have experienced this problem in the linked posts had different causes. <comment69995> Had this problem running emacs on Lion. I've been using it only a couple days, so that counts as "frequent" to me.  Emacs apparently uses `pbcopy` on emacs in order to manage the OSX clipboard. If using emacs makes the OS stop functioning because of a file limit, then I'd say it's a pretty important problem. (side note - it's surprising to me that the default would be just 256 files) <comment357688> I seem to have trouble setting the maxfiles to unlimited in this way by setting the second value to 'unlimited'. Any thoughts?