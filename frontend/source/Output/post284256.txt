Conflicting libpng.16.16.dylib <body> On my mac book (OS X 10.12.4) I have two codelibpng.16.16.dylib/code: one in code/opt/X11/bin/code, for which codeotool/code reports  precode/opt/X11/lib/libpng16.16.dylib:     /opt/X11/lib/libpng16.16.dylib (compatibility version 43.0.0, current version 43.0.0)     /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.5)     /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1) /code/pre  and another in codeUsers/me/anaconda/lib/code with anaconda's python installation, for which codeotool/code reports  precode/Users/me/anaconda/lib/libpng16.16.dylib:     @rpath/libpng16.16.dylib (compatibility version 44.0.0, current version 44.0.0)     /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.5)     /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1197.1.1) /code/pre  In my start-up script, I set codeDYLD_LIBRARY_PATH/code to include code/opt/X11/lib/code.   Now, when I want to codeimport matplotlib/code from codeipython3/code (of the anaconda distribution), I get an error   precodeImportError: dlopen(/Users/walter1/anaconda/lib/python3.6/site-packages/matplotlib/_png.cpython-36m-darwin.so, 2): Library not loaded: @rpath/libpng16.16.dylib   Referenced from: /Users/walter1/anaconda/lib/python3.6/site-packages/matplotlib/_png.cpython-36m-darwin.so   Reason: Incompatible library version: _png.cpython-36m-darwin.so requires version 44.0.0 or later, but libpng16.16.dylib provides version 43.0.0 /code/pre  So it appears that codedlopen/code tries code/opt/X11/lib/libpng.16.16.dylib/code rather than the one under codeanaconda/code.   Is there a way to avoid this w/o changing codeDYLD_LIBRARY_PATH/code? I cannot remember why I set codeDYLD_LIBRARY_PATH/code like this, but what would the effect be of omitting code/opt/X11/lib/code from it?  <answer284394> I can think of some ways.  ul liBackup your code/opt/X11/lib/libpng.16.16.dylib/code. And replace the file with either symlink to the file under anaconda or directly paste the file. /li liI think the environment variables can have multiple paths, like $PATH variable. I found that the path you have in front has the precedence over the ones that are written behind it. For example, if your path is code/usr1/:/usr2//code then it should check the codeusr1/code directory first and see if the required file exists, before moving to the second one. So you could possibly put your anaconda path in front of the code/opt/X11/lib/libpng.16.16.dylib/code. /li liI believe symlinking the file is the best way. I have experienced that kind of things before, I just had to add a symlink and it's fixed. /li /ul  This answer might explain your last question.  