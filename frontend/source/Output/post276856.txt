Why might some files not have resource forks? Does this affect the `tar` utility at all? <body> I tarred, and re-tarred, the same directory. 2,560 bytes of metadata is somehow lost in that simple process:     /tmp$ tar xf workArea.tarbr   /tmp$ tar cf workArea_copy.tar WorkAreabr   /tmp$ ls -l *tarbr   -rw-r--r--  1 jdoe  wheel  strong2068480/strong Mar 19 22:54 workArea.tarbr   -rw-r--r--  1 jdoe  wheel  strong2065920/strong Mar 19 23:27 workArea_copy.tarbr   /tmp$      How can there be data loss???  But then, I un-tarred / re-tarred codeworkArea_copy.tar/code, and there was emno data loss/em:     /tmp$ tar xf workArea_copy.tarbr   /tmp$ tar cf copy_copy.tar WorkAreabr   /tmp$ ls -l *tarbr   -rw-r--r--  1 jdoe  wheel  strong2065920/strong Mar 19 23:38 copy_copy.tarbr   -rw-r--r--  1 jdoe  wheel  strong2065920/strong Mar 19 23:27 workArea_copy.tarbr   /tmp$    I noticed in the codetar/code verbose output of when I untarred the original codeworkArea.tar/code that some files did not have resource forks:       /tmp$ tar xfv workArea.tarbr   x WorkArea/br   x WorkArea/kjDesc.txt  // &lt;-- where is resource fork?br   x WorkArea/em._engGrammar.doc/embr   x WorkArea/engGrammar.docbr   x WorkArea/em._gingers.txt/embr   x WorkArea/gingers.txtbr   x WorkArea/em._intro.docx/embr   x WorkArea/intro.docxbr   x WorkArea/em._myAntenna.doc/embr   x WorkArea/myAntenna.docbr   x WorkArea/notes.txt  // &lt;-- where is resource fork?br   x WorkArea/em._notesKj.txt/embr   x WorkArea/notesKj.txtbr   x WorkArea/em._queen.xlsx/embr   x WorkArea/queen.xlsxbr   x WorkArea/trans.txt  // &lt;-- where is resource fork?br   x WorkArea/em._url.txt/embr   x WorkArea/url.txtbr   /tmp$    However, in the verbose codetar/code output I can see that the missing resource fork issue exists in strongboth/strong untarring codeworkArea.tar/code and codeworkArea_copy.tar/code. The verbose output is exactly the same.  All files in this tar file were created on my MacBook. Nothing was imported from other file systems.  ol liI am sure that 2,560 bytes is metadata. But what metadata? codeworkArea.tar/code and codeworkArea_copy.tar/code both have the same missing meta-data, strongyet/strong they have difference sizes. I don't get it./li liFor that matter, how might some files even end-up with missing resource forks in the first place?/li /ol  thanks.  <answer277282> strongResource Forks/strong are a part of Mac OS files that were mostly used on Mac OS "Classic" (Pre Mac OS X, E.G. Mac OS 6 - Mac OS 9) In earlier Mac OS, and on the HFS File System (and HFS+) files had two "forks", the "data" fork and the "resource" fork. The data fork is what all files today have; the resource fork was a proprietary data structure from Apple designed for storing images, icons, dialog boxes, code and more in a structured file format.  They're not "metadata", they contained actual program code. Here's a screenshot from the old ResEdit program which was how resource forks were edited  img src="https://i.stack.imgur.com/tFVBW.gif" alt="ResEdit Screenshot" title="Ahh Nostalgia!"   Unix, Linux, and Windows lack a clear analogous data structure like the Mac Resource Fork. In part due to this compatibility issue, Resource Forks are not really used anymore (they're largely replaced with "Bundles")  Because of this, BSD/*nix tools like codetar/code do not (by default) handle the resource fork. Therefore, when you run codetar cf/code, emyou only archive the data fork/em   Note that in some versions of OS X, the built-in code/usr/bin/tar/code utility will preserve resource forks, bu I can't confirm this for all versions of Mac OS X. If you want to preserve resource forks, look into codeditto/code or make an HFS+ disk image (codedmg/code) file  Helpful, but out-of-date information: http://xahlee.info/UnixResource_dir/macosx.html  <comment349055> Thank you for this information. I also found this http://apple.stackexchange.com/questions/75989/why-does-osx-add-extra-filename-when-i-tar-a-directory