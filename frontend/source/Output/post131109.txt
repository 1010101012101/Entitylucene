Block an application's read/write access to a specific file in OS X? <body> The premise is this:  I have an app which has been set in its code to only run on OS X versions 10.4 to 10.9.2. (When I try to install it, it gives a message "This version of strong____/strong is for Mac OS X 10.4 to 10.9.2."). I have updated to 10.9.3, and the developer just needs to update the app to fix this restriction in his tool.  I'm actually in contact with the developer, who says he is 'too busy' to work on the app or issue an update right now.  I worked out that the app is just reading code/System/Library/CoreServices/SystemVersion.plist/code to determine OS version, and I managed to bypass its installer restriction by temporarily editing the file using this guide. But after reverting the plist values to 10.9.3 and restarting the system to start (hopefully) using the app, I saw that it even checks codeSystemVersion.plist/code to even emrun/em as well - not just during installation.  I'm worried that if I keep codeSystemVersion.plist/code at 10.9.2 indefinitely it would ruin other parts of the system such as App Store updates and the like.  So my idea now, is to try and find some method or tool, to block the app from being able to even emread/em codeSystemVersion.plist/code entirely - think of it as a 'file system' version of Little Snitch if you will - just some way to create custom rules, for specific processes, that disallow read and/or write access, to specific files/folders in the system.  Maybe it would just cause the app to throw an error and not run at all (I could probably test this by temporarily moving the plist file to Trash for just 30 seconds while trying to install/run it) - but in either case, I think it's a emreally/em useful thing to be able to have, for powerful security purposes - just like the custom-blocking network access for apps in Little Snitch.  So is there some awesome third party tool, or even native OS X / Xcode tool, that can do this? Any insights as to what would even need to happen anyway, system/programming-wise? Tweaking with 'Sharing &amp; Persimmons' for a file in Finder lets me control emuser/em access, but not process.  <answer131124> You could just use the built-in sandboxing features of Mac OS X.  Create a custom profile that limits access to the SystemVersion.plist file, using syntax like this:  precode(version 1) (deny file* (literal "/System/Library/CoreServices/SystemVersion.plist")) (allow default) /code/pre  Save that as for example ~/myprofile.sb and then run your program like this:  precodesandbox-exec -f ~/myprofile.sb "/Application/My Program.app/Contents/MacOS/My Program" /code/pre  <comment153898> What's the value in /Applications/APPNAME/Contents/info.plist of keyLSMinimumSystemVersion/key? Does one exist? <comment153925> Gah - actually, it's a prefpane 'app' (didn't realise it was as it sits in the os x menu bar anyway) - will try to work out now the location of its files and/or if it's even got such a plist file inside it. <comment153926> that sounds brilliant, but I just realised, it's actually a prefpane 'app' - wonder if it can still be sandboxed? <comment153931> Update - within the .prefpane file, both its main `Info.plist` and the `Info.plist` within the nested .app file inside, don't have such a string. Originally checked for it in the installer file anyway, in the installer the code for checking OS version appeared to be within the compiled Mac executable file itself. <comment153934> attempt to add the following to the info.plist:       keyLSMinimumSystemVersion/keystring10.6/string  #see if that helps. I'm not providing an answer because I'm not sure if it would work. <comment153936> The problem is, the app is enforcing a *maximum* OS version too. Does the LSMinimumSystemVersion deal with that, or only minimum? In fact, the app actually states a specific *range* (and I'm guessing it enforces both ends, since it certainly does the upper) - ah and actually I think I remember trying adding this string with value 10.9.3 to the installer .app file (some days ago) and it didn't work, so I'll conclude for now, that that wouldn't work on the .prefPane either! :/ <comment153941> I guess you could just start "open -a system\ preferences" using sandbox-exec to achieve that goal. <comment153953> Thanks for that, I'll start off with trying it on the installer .app as a simple first test - I'm getting an error, 'unbound variable: deny', though :/. <comment153956> Check the documentation for the correct syntax for the whole policy file - or start from one of the examples. I was just describing the specifics for limiting access to that file. <comment153957> Yeah I'll google around and I'm sure I'll solve it, thanks for your guidance and once/if I get it working, will +1 and mark your answer as the accepted one, thank you!! <comment153991> So I got the code working in the end, but the installer for my app gives an 'Abort trap: 6' message. I reckon it's a measure to not run unless it verifiably can check `SystemVersion.plist`, as I suspected it might. But at least we now outline the basic procedure for this really cool general security feature; this worked with other apps just fine! Still, it'd be good to try out your idea of sandboxing System Preferences itself. But, when I tried it (`sandbox-exec -f ~/myprofile.sb "/Applications/System Preferences.app/Contents/MacOS/System Preferences"`), it also threw Abort trap 6 - any ideas? <comment154001> Have you tried running System Preferences with just a allow default profile? (i.e. without denying access to the SystemVersion.plist file) - If that doesn't crash, we know it has to do specifically with SystemVersion.plist. An idea to try would be to let SystemVersion.plist be a named pipe instead of a file. The other end of that pipe would send the original contents of SystemVersion.plist the first time it is read, and the changed version number the second time around. I haven't tested it, so I don't know if it would work, but sounds plausible. <comment154051> Good thinking - yes, running it with just `(allow default)` works fine!! Which is good (I guess) - boy you're spot on all the way so far! You're a guru!!! I'm learning so much too, thanks. So on to the named pipes idea (and again I should test this on the app's installer .app first) - what few commands would I do to set that up? Have googled around a bit and need guidance as to quite how to do it :). Thanks. I'll keep googling for now, but feel a bit in the deep end (this is really advanced, obscure stuff) and certainly don't want to muck things up...it'll be good to document this all anyway. <comment154084> You run the command "mkfifo /Library/Preferences/SystemVersion.plist" to create the fifo in the file system. Then you run a command like "cat originalversion  /Library/Preferences/SystemVersion.plist" to send the original version of the file, and similarly again with the modified file. <comment154099> let us [continue this discussion in chat](http://chat.stackexchange.com/rooms/14594/discussion-between-foregon-and-jksoegaard)