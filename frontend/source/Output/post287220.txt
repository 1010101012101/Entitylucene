How to resume a "paused" application after an out of memory situation? <body> Occasionally - even with abundant care - my 16GB MBPro runs out of application memory and the dreaded "No more application memory available" dialog appears.  Fortunately we are still able to access codeActivity Monitor/code:  and the first thing I do is kill the web browsers that tend to accumulate large amounts of memory over time.  Less fortunate is that - even after verifying that the codeMemory Used/code + codeSwap Memory/code are less than 10GB combined, it is emstill/em not possible to resurrect the strongemPaused/em/strong applications.    img src="https://i.stack.imgur.com/wUhAu.png" alt="enter image description here"  If it were not possible to resuscitate the paused apps - then what good is this notification?  Are we compelled to simply kill the apps ourselves?  Given there is emnow/em sufficient memory for any of the remaining open apps to continue then why are they emstill/em unable to do so?  <answer287221> Not in front of my mac right now, but basic steps would be:  ol liOpen the Terminal application: just type codeTerminal/code into Spotlight/li liList the running processes : codeps -ax/code/li liFind the process you want to unpause. You need its PID *Process Id/li liTo unpause, strangely enough you use the "Kill" command on the process with the CONT flag: codekill -CONT [app_pid]/code strongdont forget the -CONT/strong as otherwise you will kill it instead of unpausing. In your example that'd becodekill -Cont 69971/code/li /ol  You can get the pid from the Activity Monitor as you have that column showing  <comment362565> You missed the point. There are many ways to **kill** the application. That is precisely the unwanted action.  The OP asks for how to **recover** the paused app. <comment362566> you totally missed the CONT flag in the kill command didnt you ... <comment362567> Yes I did: apologies. A  suggestion would be to put that in bold at the top of the post: I will not be the only one to miss that detail. <comment362568> yeah, this might be better now. Thanks. <comment362569> trying it out now.  Seems to have worked. That's neat. <comment362595> Important note: The `kill` command doesn't kill, its purpose is to send a signal to a process The thing is that the default signal if none is specified does kill the process.