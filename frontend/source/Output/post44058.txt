Mac OS X - How to Symlink /home to /Users <body> For those of us who dabble in penguins and apples, it seems very worth while to be able to use /home paths either out of habbit or for those odd cases where the value may have been sync'd somewhere along the line in some file you use on both machines.  <answer44060> codesudo ln -s /Users /home/code will work with additional configuration, but I don't think that is a good idea as you should access home via code~/code in shell or code$HOME/code. Also code/home/code might be a Linux standard and often used in Unix but not always so better to rely on information that is guaranteed to work not something that works only most of the time if everyone has kept to a convention.  To make codesudo ln -s /Users /home/code work, follow these steps (from the comments):  precodeEDITOR=nano sudo -e /etc/auto_master # add a "#" at the start of the line beginning with /home # save changes sudo automount -cv sudo ln -s /Users /home /code/pre  <answer86415> There's no use for code/home/code. OS X, like various other Unix versions, has a unique location for the user. In Linux it's at code/home/user/code, and in OS X it's at code/Users/code. This is why it is good practice to use the shorthand "code~/code" or the environment variable code$HOME/code.  While you can create a symlink to the user's base/home directory code/Users/[username]/code using the following command:  precodeln -s ~ /foo /code/pre  It will not work to create a link named code/home/code as there is already a(n unused) directory with that name at the root of the system.  <answer86507> I don't see any reason at all not to rename the directory /home (in case I'm wrong) and creating a symbolic link from /home to /Users (or, as in my machine, /Volumes/Users since my system disk is for system, dammit!)   I used to work as a sysadmin, in a university department with 11 flavours of unix.  We had all sorts of symlinks in the global directory tree so that the file system would do the right thing, and scripts came as close as possible to working everywhere.  You do run into a few gotchas, but if your fingers are used to typing /home/foo and a symlink postpones job retraining for your fingers, go haead.  Similarly some linuxen will have Home directories as /usr/home already.   One place I worked had home directories of /Users/{group}/{username} as a partial protection against students groveling around professors files if the prof was careless with his permissions.  The Users directory had execute but no read bits set, and the group directories were readable only to the group members.  (All this in illustration there being many ways to deprive this particular feline of his pelt.  One possible gotcha -- check that time machine doesn't end up making two copies of everything.  I don't know how TM treats symlinks.  If it does, then add /home to the exclude list of TM.  <answer87052> I regret this answer is not exactly authoritative, since I've never actually done this myself--though I have used a similar automounter on other Unix systems--but here's my understanding as to what code/home/code is used for on OS X.  So, let's follow the trail:  If you first type codemount/code in Terminal to show active mounts, you'll see this line:  precodemap auto_home on /home (autofs, automounted, nobrowse) /code/pre  codeautofs/code maps are defined in code/etc/auto_master/code, and code/home/code is in turn defined specifically in code/etc/auto_home/code.  If you take a look at code/etc/auto_home/code, you'll see this line:  precode+/usr/libexec/od_user_homes /code/pre  Follow the trail one more step to the codeod_user_homes/code man page, and you'll find a program whose purpose is to take a username, look it up in Open Directory, and return a URL to that user's home directory.  If you read up on codeauto_master/code at its man page, you'll find that using an executable program for a map results in that program being called to look up a URL to mount, which is in turn mounted in-place.  The intended application appears to be that, if your Mac is connected to a directory service, going to code/home/jdoe/code will cause the automounter to mount codejdoe/code's home directory there.  Based on this, it seems logical to conclude that if you don't intend to connect your Mac to a directory service, you're probably okay removing the code/home/code auto-mount as detailed in this comment.  I don't know how future OS updates will deal with this, though.  <answer176369> I tried this before and got it working for about a week until I rebooted...  You can't just symlink code/home/code to code/Users/code. In fact, you can't even remove code/home/code.  If you manage to remove code/home/code, it will reappear after you reboot.  If you move code/home/code to code/home.old/code, and symlink code/home/code, it will remove the symlink code/home/code.  You can have this working for as long as your mac does not crash or reboot.  When you reboot, it all vanishes!  When you reboot, Mac OS X seems to think that you are creating a new user, so it will overwrite all of your user preferences in your old code/Users/username/code directory.  Since you copied everything to code/home/username/code, you expect to see your new home directory when doing codels /home/code after you reboot. Instead, you get NOTHING!!! It is as if it never existed.  In my case, I was freaking out for about 30 minutes, then I booted into single user mode to see if something could be done. I was thinking that I might be able to grab a log file or try to start a repair utility.  In single user mode, my home directory was there. Apple intentionally emhides/em any newly created directories under code/home/code from the user when in multiuser mode. This is an intentionally evil design feature.  Apple is emlame/em and discourages any and all kinds of hacking their OS. What kind of a design feature is that? Apple hides the contents of the newly created code/home/code directory. There is absolutely no legitimate reason for Apple to auto-remove the code/home/code directory...or any user-created directories at all!  In this case, they are mounting a directory over your /home directory...effectively hiding it.  If you are really determined to use code/home/code instead of code/Users/code, you might be able to get around it by writing a script to set everything up upon every boot.  Also, I should mention that you should be able to use some other directory that is not code/home/code as a replacement for code/Users/code because only code/home/code is banned.  If you use bash, then you will have to set some of the environment variables... namely: codeCD_HOME/code and codeHOME/code.  I wish to add that...although you cannot unmount or force unmount code/home/code, you emcan/em mount a disk on top of code/home/code. All of this mounted on top of "auto_home".  I was able to mount the recovery disk on top of code/home/code successfully...perhaps this is how it can be done.  <comment50065> `~username` expands to your home directory irregardless of Mac OSX or Linux. <comment50348> First edit `/etc/auto_master` and comment out the home line. Then reboot to free the existing /home resource.  Then you can symlink the directory using the following. `ln -s /Users /home`. Until you do this, you simply won't be allowed to create the symlink as the resource is busy. <comment57340> I'm aware of this, but some cross-platform applications save absolute paths. An example being Sublime Text 2. <comment99724> @AR. are there any potential negative consequences of doing so (or why is it there in the first place?). And I am not allowed to edit it even as root or after chmod a+w /etc/auto_master is there another way? <comment99832> In fact just `~` expands to your home directory. Can you please clarify in your question whether you want to symlink to your **user** home directory (ie. `/Users/[username]`) or in fact the User directory itself (`/Users/`) which contains separate directories for all the users on the machine? <comment99843> Exactly.  I've been on other Unix-like systems that used other conventions for home directories for various reasons, e.g. `/export/home/username` on Solaris.   It's bad practice to assume `/home/username` will work.  Programs looking for home directories should be using `getpwnam` or `getpwuid`. <comment99870> I fully agree that it's bad practice for programs to assume it's existence, but that doesn't address that sometimes software isn't developed in a competent way. <comment100306> Amongst the mounts in my case and others: `map auto_home on /home (autofs, automounted, nobrowse)` … whilst I don't know the origin of that mount, I should disagree with "no use for `/home`". <comment100307> If something or someone sets an inappropriate mode or ACL for your alternative to `/Users` then the familiar routines for repairing permissions will probably fail to make the required corrections. So I recommend that `/Users` should be as installed by Apple: a directory, not a symbolic link. <comment100497> Sorry should have been clearer: just meant `/home` is apparently reserved, but unused in OSX, not that there is no point using it ;) <comment100678> I like using the automounter, rather than disabling it. So I would let the automounter mount /Users/$USER onto /home/$USER. I wonder if it is as simple as replacing that line in /etc/auto_home with something like "+/bin/echo /home/$1", or if you want proper error handling, create a script that replicates what od_user_homes does <comment100688> -1. This results in an `operation not supported` message <comment100695> @richarddas I get the same `operation not supported` error from `sudo ln -s /Users/username /home/username` as I do from  `sudo ln -s /Users /home`. The solution [provided by @AR](http://apple.stackexchange.com/questions/44058/mac-os-x-how-to-symlink-home-to-users/87052#comment50348_44060) works (comment out the `/home` line in `/etc/auto_master` and reboot). <comment100719> @TimB Interesting thought.  Having played with it a little, I'm not entirely sure you can specify a local path that `automountd` will deal with, though.  It seems possible to do NFS, SMB, and AFS. <comment100721> @Abe It doesn't if you follow @AR.'s direction.  Note that you don't have to reboot; you can run `sudo automount -cv` instead. <comment100738> I don't know if that works on Linux, but it was what I always did on Solaris. The real directory was /export/home/$USER, and there was a standard configuration to automount that onto /home/$USER. In fact, it looks like that is now the standard configuration in Solaris 11.x according to https://blogs.oracle.com/observatory/entry/automounted_home_directory <comment101945> @zigg thanks. But that still doesn't make the answer complete. I'll propose an edit - I couldn't downvote anyway! <comment101951> I just looked quickly. You don't even need to mimic the executable map od_user_homes. That's just there to support OD. Ordinary automounting of /Users/$USER onto /home/$USER is possible. It's shown in the auto_master man page, though the example there shows remote NFS mounts rather than local directories, it should work locally as well. <comment101977> I might have been doing something wrong, but I tried configuring a local path where I could use an NFS mount and received an `Input/output error` when trying to `cd`.  From my reading, it looked like I could only use NFS, SMB, or AFS, like I said.  But maybe we should take this line of experimentation elsewhere… <comment145400> I don't know that I would recommend linking the entire directory, but only specific users, as needed. <comment244968> TL/DR; re-boot-proof customization is possible using the top-rated answer