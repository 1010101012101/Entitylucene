Emacsify OSX throughout: word-forward (⌥ + F) and word-backward (⌥ + B) instead of 'special characters'? <body> Yes, the OSX already supports kbd⌥/kbd+kbd←/kbd and kbd⌥/kbd+kbd→/kbd for moving the cursor word-backward and word-forward, but reaching for arrow keys is annoying. So, why not rather have kbd⌥/kbd+kbdB/kbd and kbd⌥/kbd+kbdF/kbd do this? I mean, not once have I (intentionally) wrote the integral sign ∫ with kbd⌥/kbd+kbdB/kbd (apart from now).   In short, I'd rather have Emacs-like behavior (not just, say, kbd^/kbd+kbdF/kbd for character-forward) throughout the OSX.  hr  Related question: Stop using Mac keyboard Option as a modifier to character  <answer71087> h2DefaultKeyBinding.dict/h2  Create code~/Library/KeyBindings//code and save a property list like this as code~/Library/KeyBindings/DefaultKeyBinding.dict/code:  precode{   "^ " = setMark:;   "^/" = undo:;   "^l" = selectParagraph:;   "^u" = deleteToBeginningOfParagraph:;   "^w" = deleteToMark:;   "^x" = {     "^x" = swapWithMark:;     "^m" = selectToMark:;   };   "^V" = pageDownAndModifySelection:;   "~@" = selectWord:;   "~b" = moveWordBackward:;   "~c" = (capitalizeWord:, moveForward:, moveForward:);   "~d" = deleteWordForward:;   "~f" = moveWordForward:;   "~l" = (lowercaseWord:, moveForward:, moveForward:);   "~r" = centerSelectionInVisibleArea:;   "~u" = (uppercaseWord:, moveForward:, moveForward:);   "~v" = pageUp:;   "~w" = (deleteToMark:, setMark:, yank:, swapWithMark:);   "~B" = moveWordForwardAndModifySelection:;   "~F" = moveWordForwardAndModifySelection:;   "~V" = pageUpAndModifySelection:; } /code/pre  codeDefaultKeyBinding.dict/code doesn't work in some applications like Xcode or Firefox. Methods that use the kill ring remove formatting from rich text. Key combinations that enter dead key states (like option-u in the U.S. keyboard layout) cannot be reassigned.  See also http://www.hcs.harvard.edu/~jrus/site/KeyBindings/Emacs%20Opt%20Bindings.dict. codetransposeWords:/code doesn't work in most applications. codeopenDocument:/code and codesaveDocument:/code don't work in applications that use auto-save, and codeperformClose:/code doesn't work everywhere either.  See http://www.hcs.harvard.edu/~jrus/site/cocoa-text.html or http://osxnotes.net/keybindings.html for more information.  h2KeyRemap4MacBook/h2  One option is to enable settings in the predefined Emacs mode group:  img src="https://i.stack.imgur.com/GazZF.png" alt=""  Another option is to save a file like this as code~/Library/Application Support/KeyRemap4MacBook/private.xml/code:  precode&lt;?xml version="1.0"?&gt; &lt;root&gt;   &lt;appdef&gt;     &lt;appname&gt;EMACSMODEIGNORE&lt;/appname&gt;     &lt;equal&gt;com.gnu.Emacs&lt;/equal&gt;     &lt;equal&gt;com.apple.Terminal&lt;/equal&gt;     &lt;equal&gt;com.googlecode.iterm2&lt;/equal&gt;     &lt;equal&gt;com.vmware.fusion&lt;/equal&gt;     &lt;prefix&gt;com.vmware.proxyApp.&lt;/prefix&gt;   &lt;/appdef&gt;   &lt;item&gt;     &lt;name&gt;emacs&lt;/name&gt;     &lt;identifier&gt;private.emacs&lt;/identifier&gt;     &lt;not&gt;EMACSMODEIGNORE&lt;/not&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::P, VK_CONTROL | ModifierFlag::NONE, KeyCode::CURSOR_UP&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::N, VK_CONTROL | ModifierFlag::NONE, KeyCode::CURSOR_DOWN&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::B, VK_CONTROL | ModifierFlag::NONE, KeyCode::CURSOR_LEFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::F, VK_CONTROL | ModifierFlag::NONE, KeyCode::CURSOR_RIGHT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::P, VK_CONTROL | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_UP, VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::N, VK_CONTROL | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_DOWN, VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::B, VK_CONTROL | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_LEFT, VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::F, VK_CONTROL | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_RIGHT, VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::B, VK_OPTION | ModifierFlag::NONE, KeyCode::CURSOR_LEFT, VK_OPTION&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::F, VK_OPTION | ModifierFlag::NONE, KeyCode::CURSOR_RIGHT, VK_OPTION&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::B, VK_OPTION | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_LEFT, VK_OPTION | VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::F, VK_OPTION | VK_SHIFT | ModifierFlag::NONE, KeyCode::CURSOR_RIGHT, VK_OPTION | VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::D, VK_OPTION | ModifierFlag::NONE, KeyCode::FORWARD_DELETE, VK_OPTION&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::V, VK_OPTION | ModifierFlag::NONE, KeyCode::PAGEUP&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::V, VK_OPTION | VK_SHIFT | ModifierFlag::NONE, KeyCode::PAGEUP, VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::V, VK_CONTROL | VK_SHIFT | ModifierFlag::NONE, KeyCode::PAGEDOWN, VK_SHIFT&lt;/autogen&gt;     &lt;autogen&gt;__KeyToKey__ KeyCode::U, VK_CONTROL | ModifierFlag::NONE, KeyCode::DELETE, VK_COMMAND&lt;/autogen&gt;   &lt;/item&gt; &lt;/root&gt; /code/pre  Then open the KeyRemap4MacBook application, press the ReloadXML button, and enable the setting.  Change the key codes if you use a keyboard layout like Dvorak or Colemak.  See https://pqrs.org/macosx/keyremap4macbook/xml.html.en or http://osxnotes.net/keyremap4macbook.html for more information.  <comment82724> Amazing. Changing relatively low-level behavior and yet so easy. A leap closer to a OS paradise. Hopefully there is even better, 100 % working solution, otherwise this is the answer. <comment82737> As you say, it doesn't work in all apps. Xcode, for one, won't budge to this `.dict` (but that can be "solved" with a custom keybinding, say, ⌘+B and ⌘+F). Still, very powerful to have Emacs-like behavior (almost) throughout the OS. <comment82891> KeyRemap4MacBook has an [emacs mode group](https://github.com/tekezo/KeyRemap4MacBook/blob/master/src/core/server/Resources/include/checkbox/emacs_mode.xml) that changes for example ⌥F to ⌥→, but not when Terminal or Emacs is frontmost. You can customize it by creating a [private.xml](http://pqrs.org/macosx/keyremap4macbook/xml.html.en) based on it. I think the real solution is to just get a keyboard with the arrow keys and modifier keys at better positions. <comment83506> Lauri, how would you **override ^ + N** (which is now mapped to `moveDown:`, if I'm not mistaken) **to behave as a down-arrow** (`\UF701`)? This would then allow you to navigate through Google's autocompletion, as well as search results, without having to use the down-arrow. <comment83514> @courteous The emacs mode in KeyRemap4MacBook does that. It's not possible in a keylayout file or with DefaultKeyBinding.dict. <comment83519> Perfect! I apologize for not heeding the advice earlier. :) Well, almost perfect: **how would you select a word?** ⇧+⌥+B prints out some character (while one would want it to select the previous word). <comment83570> Got the ⇧+⌥+B to also select the previous word; (I think) enabling `Option + BF to Option Left/Right` did the trick. Thank you again for pointing me in the right direction. <comment83571> @courteous I added that to the answer as well. I have `"~w" = selectWord:;` in [my DefaultKeyBinding.dict](http://lri.me/keybindings.html). <comment83706> If by any chance you might also know [how to use AltGr (right-Alt key) as an ⌥ key?](http://apple.stackexchange.com/questions/72106/the-ms-natural-keyboard-4000-use-right-alt-altgr-as)