Remap curved quotation marks in OS X? <body> So, the default key combinations to manually insert curved quotation marks (“” and ‘’) in OS X are:  ul licodeoption + [/code for “/li licodeoption + ]/code for ‘/li licodeoption + shift + [/code for ”/li licodeoption + shift + ]/code for ’/li /ul  Possibly due to muscle memory and the mental association with the keys (code[/code being an "opening" symbol and code]/code being a "closing" one) I find this specific setup emvery/em confusing, so I'll always get it wrong when inserting curved quotation marks manually. And have to try all combinations until I get the right quote.  What I would like to achieve is the (IMO) more intuitive setup:  ul licodeoption + [/code for “/li licodeoption + ]/code for ”/li licodeoption + shift + [/code for ‘/li licodeoption + shift + ]/code for ’/li /ul  What setting/file/app I need to fiddle with to remap these characters? Is there a special keyboard layout I can download that will do this for me? Thanks in advance.  PS: I'm aware of the "smart quotes" feature, but I'd like to have more fine grained control, that's why I want the manual insertion to be intuitive for me.  <answer119747> You can use strongKeyRemap4MacBook/strong with a private.xml such as this:  precode&lt;?xml version="1.0"?&gt; &lt;root&gt;   &lt;item&gt;     &lt;name&gt;Manual Smart Quotes&lt;/name&gt;     &lt;identifier&gt;ManualSmartQuotes&lt;/identifier&gt;     &lt;autogen&gt;       __KeyToKey__       KeyCode::BRACKET_RIGHT, VK_OPTION | ModifierFlag::NONE,       KeyCode::BRACKET_LEFT, ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L     &lt;/autogen&gt;     &lt;autogen&gt;       __KeyToKey__       KeyCode::BRACKET_LEFT, VK_OPTION, | ModifierFlag::SHIFT_L,       KeyCode::BRACKET_RIGHT, ModifierFlag::OPTION_L     &lt;/autogen&gt;   &lt;/item&gt; &lt;/root&gt; /code/pre  <comment297078> Does this work on non-MacBook keyboards? <comment297079> @Peanut Yes, it works on any keyboard. The software was renamed Karabiner to avoid this kind of confusion, but the software has always had this functionality despite the name.