What does "Effective UID is not root" mean for VirtualBox? <body> I'm looking to test VirtualBox 5.0 release or 5.0.x latest development stable build and get this error:  img src="https://i.stack.imgur.com/8AieQ.png" alt="Effective UID is not root (euid=501 egid=20 uid=501 gid=20) (rc=-10)"  The strongPlease try reinstalling VirtualBox./strong advice doesn't help.  I am guessing this is what happens when software designed to write files to the new protected system area on El Capitan (SIP/System Integrity Protection) is run, but I don't see any Apple Documentation explaining how to interact with apps or disable that new feature.  precodeMac OS X ProductVersion: 10.11 BuildVersion:   15A244d /code/pre  VirtualBox - both production 5.0 and stable test build 5.0.x/5.0.x revision 101955 crash as follows:  precodeProcess:               VirtualBox [3459] Path:                  /Applications/VirtualBox.app/Contents/MacOS/VirtualBox Identifier:            org.virtualbox.app.VirtualBox Version:               5.0.1 (5.0.1) Code Type:             X86-64 (Native) Parent Process:        ??? [1] Responsible:           VirtualBox [3459] User ID:               501  Date/Time:             2015-08-10 09:09:41.134 -0400 OS Version:            Mac OS X 10.11 (15A244d) Report Version:        11 Anonymous UUID:        EE01F573-7E91-04EB-9C15-BC7F65B04F93  Sleep/Wake UUID:       99D3F30E-0E72-4E05-9E59-8D29819BB8D8  Time Awake Since Boot: 19000 seconds Time Since Wake:       1100 seconds  Crashed Thread:        0  Dispatch queue: com.apple.main-thread  Exception Type:        EXC_CRASH (SIGABRT) Exception Codes:       0x0000000000000000, 0x0000000000000000 Exception Note:        EXC_CORPSE_NOTIFY  Application Specific Information: crashed on child side of fork pre-exec  Thread 0 Crashed:: Dispatch queue: com.apple.main-thread 0   libsystem_kernel.dylib          0x00007fff8a8dc0ae __pthread_kill + 10 1   libsystem_pthread.dylib         0x00007fff89031665 pthread_kill + 90 2   libsystem_c.dylib               0x00007fff943273fb abort + 129 3   QtCoreVBox                      0x000000010dcaddf5 qt_message_output(QtMsgType, char const*) + 117 4   QtCoreVBox                      0x000000010dcadfd7 qt_message_output(QtMsgType, char const*) + 599 5   QtCoreVBox                      0x000000010dcae19a qFatal(char const*, ...) + 170 6   VirtualBox.dylib                0x000000010d323daf TrustedError + 831 7   org.virtualbox.app.VirtualBox   0x000000010d2de643 0x10d2db000 + 13891 8   org.virtualbox.app.VirtualBox   0x000000010d2de6df 0x10d2db000 + 14047 9   org.virtualbox.app.VirtualBox   0x000000010d2ded08 0x10d2db000 + 15624 10  org.virtualbox.app.VirtualBox   0x000000010d2dcfa4 start + 52 /code/pre  <answer199567>    To resolve this on El Capitan when using Virtualbox versions lower than 6.x run the following from terminal:  precodefor bin in VirtualBox VirtualBoxVM VBoxNetAdpCtl VBoxNetDHCP VBoxNetNAT VBoxHeadless; do     sudo chmod u+s "/Applications/VirtualBox.app/Contents/MacOS/${bin}" done /code/pre   supSource: VirtualBox does not start on Mac OS X - Super User/sup  <comment240305> You rock! I just found that answer and was testing before answering. I'll probably self answer some other of the options - but this is the superior and correct answer. <comment240729> This might work -- but it is a good idea?  Usually setting the setuid bit randomly on binaries that weren't designed to be setuid is not a good idea -- for one thing, it can open up security holes.  I would prefer to see some justification of why this answer is safe and reasonable.  Unfortunately, the original source provides no such information. <comment347619> @D.W. Well said. Virtual box is probably neither. It pokes holes everywhere you might want to compromise security. Kind of like many AV products.