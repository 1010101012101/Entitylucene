Remove all files that match name in a list <body> I have a folder with a lot of images.  My client sent me a list of rejected images I need to delete from that folder.  The list is like this: code_001,_002,_003,_004,_006,_007,RAM08953,RAM08995,RAM08996,RAM09039,RAM09060,RAM09087,RAM09101,RAM09104,RAM09115,RAM09126,RAM09170,RAM09171,RAM09172,RAM09176,RAM09188/code.  How can I easily run something that delete those files, or move those files inside a new folder or something without doing by hand? It can be an app, shell script or any tip.  <answer286228> To delete a list of comma separated filenames from a folder, you can use the following:  precodetr , '\n' &lt;&lt;&lt; "file.jpg,second.jpg,…" | xargs -I{} rm /path/to/folder/{} /code/pre  Replace codefile.jpg,second.jpg,…/code with your comma separated list of files.br Replace code/path/to/folder/code with the path to the containing folder of the images.  codetr , '\n'/code replaces commas in the input with new lines. codexargs/code takes the lines and runs the given command for each line, replacing code{}/code with each line input (as instructed by code-I{}/code). codetr/code is used since codexargs/code in macOS does not support code-d/code for a custom delimiter.  However, I notice that your list does not include file extensions. You can add the extension to the end of the command instead.  precodetr , '\n' &lt;&lt;&lt; "file,second,…" | xargs -I{} rm /path/to/folder/{}.jpg /code/pre  <answer286233> You can delete a list of comma separated filenames using a CSV by using the following command:  precodefor file in $( cat foo.csv | awk '{gsub(",","\n"); print $0}' ); do rm $file; done /code/pre  You can make it safer by moving the file to the Trash instead of deleting it:  precodefor file in $( cat foo.csv | awk '{gsub(",","\n"); print $0}' ); do mv $file ~/.Trash; done /code/pre  strongHow this works/strong  This is a FOR/DO loop that first takes the contents of codefoo.csv/code and   ul licodecat foo.csv |/code  This outputs the entire contents of the CSV file and pipes it to the next command/li licodeawk '{gsub(",","\n"); print $0}/code  This line takes the output of the previous command and using the codeawk/code text processing utility then substitutes the comma (code,/code) for the newline character (code\n/code).  It then outputs each item (codeprint $0/code) on a separate line/li lieach line becomes an "item" for the FOR loop to iterate. /li lifor every item it will issue the command  coderm $file/code/li liYou can delete/move/rename/whatever each file by modifying the command after codedo/code.  (Eg. codedo mv $file ~/Foo/Bar/$file/code to move it to another folder.)/li /ul  <comment361099> Needless use of `cat` and `|` as `awk` will read the _file_ as an _argument_, that is to say,`"$(awk '{gsub(/,/, "\n")}1' foo.csv)"`, is all that's required. <comment361101> @user3439894 - Ok...your's is shorter and more efficient, but I like my method since I don't use `awk` but once in a blue moon and it flows with my coding style.  There's nothing "needless" about any of it. <comment361105> You said "_There's nothing "needless" about any of it._", well the use of an unnecessary external command and pipe, when it is not at all needed, is indeed needless! I certainly do not mean anything derogatory by what I've said and while you may not use `awk` that often and while my `awk` _command_ is more compact, nonetheless, that was not the main point being made. I'm only pointing out what's generally considered to be a very poor programing paradigm. FWIW I too use to code in that same poor manner but learned to do it better as a result of comments like these. <comment361110> Point taken.   Allow me to share one with you... Beginning your "critique" with the word "needless" is pejorative.