AppleScript: How to get time without seconds? Alternatively, how to remove text in middle of string? <body> If you use the following code:  precodeset CurrentTime to (time string of (current date)) /code/pre  The emCurrentTime/em will be set in the following format:  precode12:02:38 PM /code/pre  However, I want emCurrentTime/em to be:  precode12:02 PM /code/pre  So, I want to remove the characters in the 6, 7, and 8 positions in the string.  How can this be accomplished in AppleScript? Thank you.  <answer260387> Here is an AppleScript subroutine I found doing a Google search that does what you asked.  pre class="lang-none prettyprint-override"codeon getTimeInHoursAndMinutes()     -- Get the "hour"     set timeStr to time string of (current date)     set Pos to offset of ":" in timeStr     set theHour to characters 1 thru (Pos - 1) of timeStr as string     set timeStr to characters (Pos + 1) through end of timeStr as string      -- Get the "minute"     set Pos to offset of ":" in timeStr     set theMin to characters 1 thru (Pos - 1) of timeStr as string     set timeStr to characters (Pos + 1) through end of timeStr as string      --Get "AM or PM"     set Pos to offset of " " in timeStr     set theSfx to characters (Pos + 1) through end of timeStr as string      return (theHour &amp; ":" &amp; theMin &amp; " " &amp; theSfx) as string end getTimeInHoursAndMinutes  set CurrentTime to getTimeInHoursAndMinutes() /code/pre  <answer260389> You can use something like this:  precodeset CurrentTime to (do shell script "date +\"%l:%M %p\" | awk '{$1=$1;print}'") /code/pre  There's more info about codedate/code and its modifiers at cyberciti.  precode%l - hour (1..12) %M - minute (00..59) %p - localeâ€™s equivalent of either AM or PM; blank if not known /code/pre  <answer260965> One AppleScript-only option is:  precode# your line set CurrentTime to (time string of (current date)) # place all the words of the time string into a list set EveryWord to every word of CurrentTime # do a very basic test on what we got and assemble the string using the parts plus separators if length of EveryWord = 4 then     # if we have 4 words, there must be a form of AM/PM     set CurrentTime to item 1 of EveryWord &amp; ":" &amp; item 2 of EveryWord &amp; " " &amp; item 4 of EveryWord else     # 24-hour clock     set CurrentTime to item 1 of EveryWord &amp; ":" &amp; item 2 of EveryWord end if /code/pre  <answer276097> This is simplistic, but I used it to solve a similar problem and it works for your example. It just takes off the AM or PM, deletes the characters you don't want, then adds the AM or PM on again. The last line uses display dialog to show the result.  precodeset CurrentTime to (time string of (current date)) set revisedTime to CurrentTime as string set myAMPM to text -1 thru -3 of revisedTime set revisedTime to text 1 thru -7 of revisedTime set revisedTime to revisedTime &amp; myAMPM display dialog revisedTime /code/pre  <comment326001> Thanks for the solution. Your command changes the format of the hour figure slightly. Instead of "3:16:47 PM" I get "03:16 PM". Is it possible to have single-digit-hours without a zero in front (i.e., in the same format as  _time string of (current date)_)? <comment326002> @rubik'ssphere updated the answer. Use %l (lowercase L) for hour format. <comment326011> The zero is gone, except now an additional space is added in front of the string. E.g., " 3:16 PM". Is it possible to have no space? <comment326016> @rubik'ssphere added `awk` to trim leading space. <comment326726> That's an interesting way however the `else` _branch_ will probably never trigger as I believe the _time element_ of `current date` is not presented in _24 hour time_ and there will always be an `AM` or `PM`. Although I guess one might be able to change the defaults from where `current date` get its information. <comment326741> `current date` will return the date and time in the currently set localization. I got to know that painfully when I relied on it to respond in the US-way and my script stopped working on a colleague's computer.  During tests, I found that when setting the system clock to a 24-hour time it changed the output. On the contrary `hours of (current date)` will always return the hours passed since midnight (= 24-hour way).  So, I recommend using the date & time parts when verifying the current date & time. You additionally have the benefit of outputting it the way you like with that. <comment326813> I'm using US English with default settings and `current date` outputs e.g. "Monday, November 14, 2016 9:44:45 AM" whether or not I have the **[] Use 24-hour clock** _checkbox_  checked or not and is why I made the first comment. On my system the `else` _branch_ never triggers. <comment326829> First of all, if you use the same system setup on each computer you work on, you will possibly not come across it.  Also, changing the time display of the clock menu extra is not changing anything else other than that.  You would need to go to "Language & Region" to enable the option "Time Format [x] 24-Hour Time".  My example snippet will run on every computer with the OP's desired output and not only those having the display of "AM" and "PM" (or their regional counterparts).  If this will never happen to you, feel free to just use the condition working for you, stripping the rest. <comment326831> You said, "You would need to go to "Language & Region" to enable the option "Time Format [x] 24-Hour Time". ", I do not have that check box at that location. Anyway as I already said your answer provides an interesting method and another method for rubies' sphere to use. <comment326835> Currently using OS X 10.11 El Capitan.  It is definitely there.  If you use a different OS, the naming and positioning of this item may be different.  It will be in the area of were you can adjust your region (and their appropriate format of date, time and currency display).  Again: If all you will ever come across are US systems, you can just use the one valid for the 12-hour format and remove the "if ... then ... else ...end if"-statements around it.  It will then not work on most of the rest of the world where 24-hour time display is the default. <comment326838> Let us [continue this discussion in chat](http://chat.stackexchange.com/rooms/48490/discussion-between-phoenix-and-user3439894). <comment327582> This code works perfectly on my computer.