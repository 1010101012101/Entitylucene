chown /opt/local <body> Is it safe (no security implications) to codechown -R user /opt/local//code, so that I don't codesudo port install/code with MacPorts?   hr  I don't like the idea of sudoing with MacPorts as it can write things in /Library, for example, without my permission. I know I could use homebrew instead of MacPorts but I had problems with third-party software writing in code/usr/local/code. I could also compile MacPorts with a custom prefix in my home directory but I guess that is the same with code/opt/local//code, as code/opt/local//code is not a system directory.  <answer100823> This is safe up to the point where you choose to install anything inside /opt  At that point, it's more up to what programs you install there and what permissions and sticky bits you have set. In general, this is a fair tradeoff as long as you otherwise restrict access to the computer, but any time you let a user write directly to a place where programs will be stored, you risk privilege escalation and security issues if the programs can be exploited or have back doors or are just plain destructive due to their design.  <answer106942> If you want to use a non-root MacPorts installation you will have to configure your installation to do that by installing from source and specifying code--with-no-root-privileges/code as argument to code./configure/code. Not that you might have to set code--prefix/code, too, if you want to do that.  I would encourage you not to do that, for a couple of reasons, though:  ul liDirectories listed in multiple users' $PATH that are writable without superuser privileges can be used for attacks (e.g., by placing a sudo binary that will log the password there). The same can be done by malicious software running as your user in order to get your password â€“ although one might argue it's already too late when this happens./li liMacPorts can not use privilege separation without root privileges. Normally, MacPorts will drop privileges to an unprivileged "macports" user while building software to avoid rogue Makefiles to wreak havoc (or even read files) in your $HOME./li liMacPorts as of version 2.2 uses OS X sandboxing capabilities to prevent ports from installing files outside of the locations MacPorts encourages. These default locations are: ul licode/opt/local/code/li licode/Applications/MacPorts/code/li licode/Library/LaunchDaemons//code/li lisome locations necessary for some special ports to work, e.g., code/usr/lib/pam/code for PAM modules./li /ul/li /ul  So, in conclusion, I think a MacPorts installing using root privileges is actually safer and more secure than one not using them.  emDisclaimer: Since I'm a MacPorts Developer, I might be biased./em  <comment118674> `brew` `chown`s `/usr/local` and uses it like this. <comment118681> So another program could easily write in `/opt/local/` since access is not restricted. What if I use another prefix only for macports, say `~/opt/local`? Again a third party program could write in there but it is unlikely that there are third party programs that would write in a user-defined directory. <comment118685> I used homebrew like this but `brew doctor` would always complain about some third party program's configs, libraries etc. I wish all third party programs would install in `/opt/` as this problem would be solved for good (plus `/opt/` is designed to be used for this kind of thing, `/usr/local/` is not). <comment127420> Thank you for your thorough answer. I was not aware of MacPorts usage of sandboxing capabilities.