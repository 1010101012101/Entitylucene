Homebrew installed PostgreSQL for use by multiple accounts <body> I'm using Homebrew to install PostgreSQL (PG) on a MacBook Air.   codeadmin/code user codebrew install/codeed PostgreSQL.  I'd like another (mobile account) user to be able to use the database for Rails development. codeadmin/code is owner of code/usr/local//code but codemobile/code user is member of a group that has rwx permission. codebrew doctor/code is happy and mobile user can successfully codebrew install/code  How best to set up permissions for this to work?  for instance, running codeinitdb /usr/local/var/postgres -E utf8/code from the codeadmin/code account created a database for the admin user. And, now it would seem, it wants PG to be launched by that admin user.  I'd really like either a neutral account to launch PG process emor/em ideally the mobile account to be able to launch and quit an instance of PG as needed.  Point being PG doesn't need to be running ALL the time (LaunchDaemon). Ideally, it's a LaunchAgent in mobile user's account.   Thoughts?  <answer89770> According to the postgres output, you need to run the postgres server as the same user that creates the database with initdb.   precodemr-clean:~ smurf$ initdb /usr/local/var/postgres -E utf8 The files belonging to this database system will be owned by user "smurf". This user must also own the server process. /code/pre  That means the same user will need to launch the postgres server process. Other users will still be able to launch the client and connect to it, though. So you just need to do the "admin" tasks - setup and daemon control - with that owner account.  If you want to do everything with the one codemobile/code account, then just run codeinitdb/code as codemobile/code instead of as codeadmin/code after doing the codebrew install postgresql/code as normal. (It's not who you codebrew install/code as that matters, it's who you codeinitdb/code as.) This'll create the database, and coderwx/code permissions on code/usr/local/var/code (not code/usr/local/code) will be enough to allow this. Then do all your PG work as codemobile/code. The LaunchAgent should work with this approach, though I haven't tested it.  To allow multiple users to effectively manage the postgres server (launch and stop the daemon), set it up basically the same way, with a dedicated codepostgres/code (or codemobile/code) account that both does the initial codeinitdb/code and brings the server up or down. Then create a little script to codessh/code in to codelocalhost/code as codepostgres/code and run the command to bring the server up or down with the same command you'd use in the single-user case. And set up ssh keys so that all the accounts you want to manage PG can ssh in as codepostgres/code (that is, cat their public keys to postgres' ~/.ssh/authorized_keys file). Now you can effectively have multiple users manage Postgres without deviating from the dedicated-daemon-user model that Postgres expects and fiddling with file permissions and so on.  This ssh technique works for any service that needs to be controlled by a dedicated account, and will generalize to the case where you're running your things on different machines. 