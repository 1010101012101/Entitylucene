get first characters of expansion parameter of find command <body> I have a huge collection of images and I would like to put them in folders matching their first 3 charachers+.jpg extension.  So i would like to grab code4_1_0002.png/code file (all the files starting with 4_1) and put it in the code4_1_.jpg/code folder. Similarly I would like to grab code4_2_0002.png/code file (all the files starting with 4_2) and put it in the code4_2_.jpg/code folder.  All those files that I would like to sort are now in one huge folder. I expected to use a find command, but I don't know how to extract the first three characters from {} expansion parameter.  precodefind . -type f -ok echo mv {} "path/first3char.jpg" \; /code/pre  img src="https://i.stack.imgur.com/Va5pI.png" alt="enter image description here"  img src="https://i.stack.imgur.com/BsmNi.png" alt="enter image description here"  <answer278311> Assuming that all your files are in the same directory and the filenames are reasonable sane, something like  precode find . -maxdepth 1 -type f -name '*png' |      while read line; do          echo mv "$line" "path/${line:2:3}.jpg/"      done /code/pre  Run the command first as written (including the codeecho/code) to check whether the result makes sense. Then remove the codeecho/code and rerun.  <comment350208> Just curious, why do you want to put .png files in a folder with a .jpg extension, why not a folder with a .png extension? <comment350217> At first I was working with jpg's, but than switched to pngs. Didnt bother to change the name <comment350232> While I did up-vote the answer, nonetheless I'd add a condition in the form of testing the directory exists, e.g., `[[ -d path/${line:2:3}.jpg ]]`, and use it like, e.g., `find . -maxdepth 1 -type f -name '*png' | while read line; do [[ -d path/${line:2:3}.jpg ]] && echo mv "$line" "path/${line:2:3}.jpg/"; done`. That said, obviously if the directory doesn't exist it won't move the file. The reason for the suggestion is any time I use a wildcard, as in, e.g., `'*png'` in the `find` command, I like to make subsequent code that will act upon the results of a wildcard `find` conditional. <comment350233> I mention this because as an example, if one accidentally (or intensional) left the trailing slash off of `"path/${line:2:3}.jpg/"` so as to be `"path/${line:2:3}.jpg`", it would rename a file by moving it to `${line:2:3}.jpg` as a file not into a directory because the directory didn't exist.