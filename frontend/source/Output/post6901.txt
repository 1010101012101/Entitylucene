How can I change a file or folder icon using the Terminal <body> How can I change or set the icon for a file or folder, in the terminal, do I need to use a scripting language?  <answer6905> You'll need the Developer Tools installed, and then the following might work. This takes the graphic in codeicon.png/code and applies it to codefile.ext/code.  precode# Take an image and make the image its own icon: sips -i icon.png  # Extract the icon to its own resource file: /Developer/Tools/DeRez -only icns icon.png &gt; tmpicns.rsrc  # append this resource to the file you want to icon-ize. /Developer/Tools/Rez -append tmpicns.rsrc -o file.ext  # Use the resource to set the icon. /Developer/Tools/SetFile -a C file.ext  # clean up. rm tmpicns.rsrc # rm icon.png # probably want to keep this for re-use. /code/pre  <answer10020> I emalmost/em started a bounty on this, because I didn't manage to change the icon of a strongfolder/strong using @mankoff's answer. But I found a solution.  hr  To change folder's icon you don't point codeRez -append tmp.rsrc/code to the folder but a special codeIcon\r/code file inside the folder. If you haven't set a custom icon to the folder before, the file probably will not exist, but codeRez/code creates it on–the–fly. Deleting the codeIcon\r/code file will remove the custom icon, so to prevent accidents it is good to be hidden.  These are the modifications to the mankoff's answer:  precode# Append a resource to the folder you want to icon-ize. Rez -append tmpicns.rsrc -o $'myfolder/Icon\r'  # Use the resource to set the icon. SetFile -a C myfolder/  # Hide the Icon\r file from Finder. SetFile -a V $'myfolder/Icon\r' /code/pre  <answer45558> Check out codesetfileicon/code (source code), an utility created by Damien Bobillot.  Download the binary here: http://maxao.free.fr/telechargements/setfileicon.gz  After unpacking the file, make it executable:  precodechmod +x setfileicon /code/pre  Then you can use it as follows:  precode./setfileicon "my-icon.icns" "my-file-or-directory" /code/pre  <answer86724> I have a github project where I create AppleScript "droplets" from [shell/bash, python, perl, ruby, etc.] scripts that take file paths as arguments. I wrote this bash function for changing the icon of an folder (because AppleScript bundles are Folders with a .app extension).  precodereplace_icon(){     droplet="$1"     icon="$2"     if [[ "$icon" =~ ^https?:// ]]; then         curl -sLo /tmp/icon "$icon"         icon=/tmp/icon     fi     rm -rf "$droplet"$'/Icon\r'     sips -i "$icon" &gt;/dev/null     DeRez -only icns "$icon" &gt; /tmp/icns.rsrc     Rez -append /tmp/icns.rsrc -o "$droplet"$'/Icon\r'     SetFile -a C "$droplet"     SetFile -a V "$droplet"$'/Icon\r' } /code/pre  Once defined, you call the function with 2 arguments:  precodereplace_icon /path/to/AppleScript.app /path/to/icon.png /code/pre  or  precodereplace_icon /path/to/AppleScript.app http://i.imgur.com/LmUvWqB.png /code/pre  As you can see the second argument can be an image on your system, or a URL.  strongNOTE:/strong That crazy looking code$'/Icon\r'/code thing that I do is because the name of the Icon file ends with a emliteral/em carriage return code\r/code. See for yourself with:  precodefind my-applescript.app -maxdepth 1 | less -U /code/pre  <answer122276> Another option is to use MacRuby:  code/usr/local/bin/macruby -e 'framework "Cocoa";NSWorkspace.sharedWorkspace.setIcon(NSImage.alloc.initWithContentsOfFile("/tmp/a.png"),forFile:"/tmp/file",options:0)'/code  You can download an installer for MacRuby from http://macruby.org.  <answer161984> In addition to Ruby, here's a Python version:  precode#!/usr/bin/env python import Cocoa import sys  Cocoa.NSWorkspace.sharedWorkspace().setIcon_forFile_options_(Cocoa.NSImage.alloc().initWithContentsOfFile_(sys.argv[1].decode('utf-8')), sys.argv[2].decode('utf-8'), 0) or sys.exit("Unable to set file icon") /code/pre  code./set-image.py image.png myfile/code  Python that pre-installed in Mac OS already has PyObjC so you don't have to install any packages.  <answer198714> With the benefit of several years of hindsight:  user588's answer and koiyu's answer work well, but they rely on utilities (codeRez/code, codeDeRez/code, and codeSetFile/code) that:  ul liaren't installed by default (they come with either Xcode or the developer command-line utilities)/li liare now deprecated (codeRez/code and codeDeRez/code, because they relate to Carbon)/li /ul  osxiconutils look interesting, but strongwon't compile any longer (as of OSX 10.10.4)/strong.  hr  Therefore I've created strongCLI codefileicon/code/strong, which strongshould work on a pristine OSX machine (no prerequisites)/strong; it is a Bash script based primarily on codexattr/code and codesips/code.  It allows strongsetting/removing/extracting custom icons for/from files or folders/strong.  You can install it as follows:  ul liIf you have Node.js installed, from the npm registry, withbr code[sudo] npm install -g fileicon/code/li liOtherwise:  ul liDownload the CLI as codefileicon/code (this link will stay current)./li liMake it executable with codechmod +x fileicon/code./li liMove it or symlink it to a folder in your code$PATH/code, such as code/usr/local/bin/code (requires codesudo/code)./li /ul/li /ul  Here's the usage information; for complete information, refer to the manual:  pre class="lang-none prettyprint-override"code$ fileicon -h  Set a custom icon for a file or folder:      fileicon set      &lt;fileOrFolder&gt; &lt;imageFile&gt;   Remove a custom icon from a file or folder:      fileicon rm       &lt;fileOrFolder&gt;   Get a file or folder's custom icon:      fileicon get [-f] &lt;fileOrFolder&gt; [&lt;iconOutputFile&gt;]   Test if a file or folder has a custom icon:      fileicon test     &lt;fileOrFolder&gt;   -q ...  silence status output   Standard options: --help, --man, --version, --home /code/pre  <answer238926> Strangely enough the best solution seems to be not to use Apple's own tools but the Python code because it has various advantages not being limited by:  ul lioutput file resolutionbr (it works till 1024x1024)/li liinput file formatbr (tried with ICNS and PNG)/li lipermissions to installbr (define it as a function)/li /ul  strongUpdate/strong  Now (on macOS Sierra) @koiyu’s answer seems to work, so you could use this two-liner to copy the icon from a source folder to your destination folder:  precode#!/bin/sh  DeRez -only icns $1/Icon$'\r' &gt; icon.rsrc; Rez -a icon.rsrc -o $2/Icon$'\r' SetFile -a C $2; SetFile -a V $2/Icon$'\r'; rm icon.rsrc /code/pre  <comment7266> Awesome, that's just what I wanted. <comment7397> I'm having trouble with `Rez -append` when working with `.avi` files. `### Rez - Fatal error trying to open the resource file "Video.avi" for writing.` ` any ideas? <comment7442> Interestingly, it also made the file unable to accept a new icon via the Get Info copy/paste method. <comment10487> And for a file? Note my comment re: avi files <comment10549> is there a restriction on the icon size? If I use a large jpg (1024x768) it would be resized to something really small.. Can I somehow retain its original size? <comment10689> @slomojo sorry, but I can't replicate the error you get—just tested the mankoff's solution with an .avi file. Re-check the file permissions and commands you entered? <comment10690> @nuc OS X supports an icon size maximum of 512x512, so I see no point (well, maybe other than future-proofing perhaps) saving it bigger. And while you're at the command line, you could resize the image's longest length to 512 e.g. with sips: `sips -Z 512 image.png --out smaller-image.png` (though if you'd like to have control over the resampling algorithms, maybe an image processing software is a better idea). <comment10696> I'll give it another go, perhaps I made a mistake before. <comment51964> Thanks for that, very helpful indeed. BTW, I'm editing out the GUI method, to reduce noise. <comment58494> See also http://sveinbjorn.org/osxiconutils <comment189277> Very nice, thank you <comment189373> I added decoding of UTF-8 to unicode, otherwise script not worked with non-ASCII filenames. Also added check of return value, failure to set icon will result in return code of 1. <comment217814> Is there anyway we can specify the icon not have aspect ratio modified? It works great, but image files get reshaped to a square. Thanks! <comment217828> Didn't exactly find the answer, but squaring the images with transparent padding before hand worked just fine: http://stackoverflow.com/questions/12179342/imagemagick-extend-canvas-with-transparent-background <comment217924> Note that it does not scale well. Tried to apply icons to lots of directories in one directory — Finder worked very slow. <comment237129> The link - and MacRuby - are apparently now dead; MacRuby was apparently succeeded by the commercial, subscription-based [RubyMotion](http://www.rubymotion.com/). <comment237394> Note that in recent OSX versions the developer tools are in the `$PATH` (stubs in `/usr/bin` that know where to find the actual tools), and not in `/Developer/Tools` anymore, so you should invoke them just by their filenames; i.e., in the case at hand, as just `Rez` and `DeRez`. <comment237901> @Slomojo: [In response to a since-deleted comment] I get that not everybody has or wants to install Node.js, that's why the direct download link is there as well (see the 'Otherwise:` list item in my answer) - it's a self-contained Bash script (the only thing you forgo by installing this way is installation of the man page, but you can get a plain-text rendering of the manual page with `fileicon --man`). <comment237903> @Slomojo: [In response to a since-deleted comment] As for why installing via npm is offered: I've found the npm ecosystem to be my favorite package manager overall, and I've published a number of cross-platform, script-based CLIs there that aren't Node.js-related. I've also create a [single-command, user-level installer for npm (via n and Node.js)](https://github.com/mklement0/n-install) that makes it easy to use npm even for people who otherwise have no interest in Node.js: `curl -L http://git.io/n-install | bash`. <comment238790> I am desperately trying to do this for a USB thumb drive. All of the commands "work" in that they don't return errors, but I am still left with a thumb drive with an unchanged icon. Any thoughts and I'd be eternally grateful! <comment257073> Unfortunately most code is now deprecated. <comment279415> This is a nice out of the box working solution. +1 <comment279987> This no longer works in 10.10.  The project has moved to github:  https://github.com/sveinbjornt/osxiconutils if you want to check for an update. <comment279989> @PatNiemeyer: Thanks, I've updated the osxiconutils link, but note that _this answer is about utility **`fileicon`**_, which still works (and, in fact, was created, because `osxiconutils` no longer works) - I've updated the answer to make that clearer. <comment293084> Welcome to Ask Different! This seems like it would be better as a comment. I know you don't have the points required yet, but I've asked someone who has the power to come take a look. In addition, I've written an Applescript that does all this for you in a neat bundle, see [my answer to a similar question on this SE.](http://apple.stackexchange.com/questions/230697/create-icns-ad-hoc/230796#230796) <comment293377> Yes, I tried but could not do it. Furthermore I think that the 2nd part of your comment would be better as an answer, not being related to the 1st one.