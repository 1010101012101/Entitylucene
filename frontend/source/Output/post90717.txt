How do I specify what is used as the real C compiler? <body> I have a configure on Mountain Lion that's running into trouble:  precode[snip] checking for gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc checking whether the C compiler works... no configure: error: in `/Users/jonathan/Downloads/httpd-2.4.4': configure: error: C compiler cannot create executables See `config.log' for more details /code/pre  Meanwhile, I have just opened Xcode and installed command-like tools, including /usr/bin/gcc.  Is there a way I can invoke the configure script so it will take /usr/bin/gcc as the C compiler?  And when I specified:  precodeCC=/usr/bin/gcc /code/pre  It gives:  precodechecking how to run the C preprocessor... /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc -E configure: error: in `/Users/jonathan/Downloads/httpd-2.4.4': configure: error: C preprocessor "/Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain/usr/bin/cc -E" fails sanity check See `config.log' for more details /code/pre  For now I'll ask: how do I tell it what to use as the C preprocessor?  (Long-term what I'd like is to know why it's not aware of standard command line tools and pulls C-related functionality from an esoteric place.  <answer90718> Apple's gcc binary is really llvm.  precodeMac:~ bmike$ which gcc /usr/bin/gcc Mac:~ bmike$ gcc --version i686-apple-darwin11-llvm-gcc-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00) Copyright (C) 2007 Free Software Foundation, Inc. This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. /code/pre  You'll want to obtain gcc from homebrew or from source if you need gcc and not llvm standing in for gcc.  Good reading abounds on various blogs:  ul lihttp://kennethreitz.org/experiments/xcode-gcc-and-homebrew/li lihttp://jfire.io/blog/2012/03/02/xcode-4-dot-3-homebrew-and-ruby//li lihttp://www.andrewsavory.com/blog/2012/2458/li lihttps://github.com/mxcl/homebrew/wiki/Custom-GCC-and-cross-compilers/li /ul  Once you've gotten a real version of codegcc/code installed, you can codeexport CC=/usr/local/bin/gcc/code or whatever else you prefer for setting the environment variable to match were you choose to store your now non-llvm-based compiler.  <comment106523> Perhaps I misunderstood your question. Did you check the config.log to make sure you are not writing to a directory where the current user has no write permission? This might be more of a configure issue and not a compiler issue at all. <comment106524> I didn't check config.log, but I was installing as root, which maybe doesn't work for mode 000 without changing permission, but should be enough privilege for what I was attempting. <comment106525> Yes - sudo or root should be more than enough to avoid any installation issues. If the installer is dropping things where there's an ACL or other explicit write lock, I'd be highly surprised. <comment106530> However yoiu probably do not need a real gcc. llvm should be suffficient and in many cases is better. <comment106531> What is in config.log <comment106532> Mark's right that in the long run, having your package build under LLVM is ideal, but often if you are downloading something that expects gcc and tests for gcc and fails when gcc isn't detected, just getting gcc is the expedient workaround.