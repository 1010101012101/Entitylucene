2015 MBP does not boot with disk image from 2012 MBP <body> I have (using dd with an external SATA interface from Internet Recovery) copied my old 2012 MBP disk to the internal SSD of my new Mid 2015 MBP ("MacbookPro11,4", the 2.5 GHz variant with the Iris Pro GPU). However, the system will only boot to Recovery and Safe Mode - when booting "normally", the system eventually gets stuck at the progress bar and pressing any key only yields that "error" sound as if one would press a not allowed keyboard combo.  I guess this is because the system believes that the GPU is still the dual-GPU setup from the old MacBook (Intel on-chip + Radeon), and now fails to recognize the new GPU. However, both AppleIntelHD5000Graphics.kext and AppleIntelFramebufferAzul.kext are present so in theory it should be able to bring up the display server.  There is nothing indicating any problem when launching the Console app - except for two things:  1) a sandbox policy violation:  precodesandboxd[308]: com.apple.message.domain: com.apple.sandbox.system-policy-violation com.apple.message.signature2: nmnetmgrd com.apple.message.signature3: nmnetmgrd ||| ??? (???) com.apple.message.summarize: YES com.apple.message.signature: nmnetmgrd System Policy: deny file-write-data /System/Library/UserEventPlugins/SCMonitor.plugin/Contents/Info.plist com.apple.message.violation_body: nmnetmgrd System Policy: deny file-write-data /System/Library/UserEventPlugins/SCMonitor.plugin/Contents/Info.plist /code/pre  2) a load of watchdog_daemon crash logs in the system.log:  precodeJan  5 01:49:41 xxx watchdogd[875]:  [watchdog_daemon] @(    wd_watchdog_open) - IOIteratorNext failed (kr=0) Jan  5 01:49:41 xxx watchdogd[875]:  [watchdog_daemon] @(      wd_daemon_init) - could not open connection with the kernel watchdog Jan  5 01:49:41 xxx watchdogd[875]:  [watchdog_daemon] @(                main) - cannot initialize the watchdog service Jan  5 01:49:41 xxx com.apple.xpc.launchd[1] (com.apple.watchdogd): Service only ran for 0 seconds. Pushing respawn out by 10 seconds. /code/pre  What could be the cause for the failure, and can I fix it without having to re-install OS X? I don't want to spend days to get everything installed and configured again, and I don't really want to use the 2012 MBP much longer, if possible.  <answer267477> You've already figured out the cause of your crashes.  What you need to do is either one of two things:  ul liCreate a Time Machine Back Up of your old system and do a fresh install of macOS on your new machine and transfer everything using Migration Assistant/li liDo a fresh install of macOS on your new machine and using a network connection migrate all of your apps and settings over the network using Migration Assistant./li /ul  Keep in mind that if you are attempting to copy over an OS that is earlier that 10.10 it will strongNOT/strong work on your Mid-2015 MBP.  <comment335625> Which OS are you attempting to install? <comment335628> @Allan is 100% correct. Basically, a 2015 MBP can not run with any version of OS earlier than OS X 10.10.2 for early 2015 models and OS X 10.10.3 for mid-2015 models. <comment335643> Caveat: Do the migrate as part of the initial install, not *after* you've set up an account... otherwise you'll end up with 2 accounts to merge by hand. [I learned that one the hard way] <comment335665> I have a TM backup. The problem is I have a sh*tload of stuff that I need to have copied over which is not configured "the Apple way" - macports, Oracle SQL stuff, a custom-compiled PHP... will all this be restored by Time Machine? Oh, and the OS is a 10.11.6.  What I wonder: Why could I put in the SSD into a 2010 Mac Pro (had to wait for a replacement motherboard) and it booted flawlessly, but it cannot boot on a modern MBP? <comment335666> @Allan: I am attempting to copy over a 10.11.6. <comment335699> You should be able to specify what you want to b/u in Time Machine.  However, I had a similar issue (AMP stack).  Instead of installing directly on my machine, I opted to run headless VM's that can be easily backed up using a script that calls `tar`  My dev environment is on those VMs and even in the event of a catastrophic failure (broken screen) I was up and running on a PC in less than an hour.  It may be a PITA now, but it's well worth the time invested - this might be a good opportunity to tweak your "infrastructure."