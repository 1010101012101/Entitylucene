How do I run Homebrew as root? <body> Years ago, you could get away with running codebrew/code as root just by chowning codebrew/code to root, but they removed that feature. So in Homebrew 1.1.6, I used to edit code/usr/local/Homebrew/Library/Homebrew/brew.sh/code to remove the root check (the one that said it's "extremely dangerous") so I could run codebrew/code as root.  The newer version of Homebrew still works with that but keeps reverting the codebrew.sh/code file back every time after I run codebrew/code, even if I codechmod 500/code it. I could write a script to change it then run codebrew/code automatically, but I'm not sure if this will always work and don't want to take chances. Has anyone found a different method to run Homebrew as root?  <comment356046> Out of curiosity, why do you want to run `brew` as root?  Also, is `sudo` not sufficient for your purposes? <comment356047> @Allan `sudo` does run it as root, and it gives me the same "extremely dangerous" error. I want to run as root because it otherwise has problems installing certain packages, especially if anything was installed not through Homebrew (e.g. through `pip`). I've gone down that route many times. Plus it doesn't work properly for multiple users without weird workarounds unless I install everything as root. <comment356076> $ su - $ brew whateveryouwant ? <comment356106> Building a software package as `root` is risky. Even building a package without a package manager, you would build the package as a non-privilege user (yourself) then install the package as `root` with `sudo`. Package managers such as Fink and MacPorts both build with their own non-privilege users then install as `root`. Homebrew does not have such a mechanism. <comment356138> @fd0 Understandable, but I'm willing to take the risk; they can do pretty much the same amount of damage without root on my personal computer anyway. But why doesn't Homebrew just install with root like the others do? Their current approach of installing system files as a specific user has ruined my permissions many times. <comment356139> @StrawHara If I do that, it detects that it's being run as root and stops. <comment359944> Hmm, I don't see the issue on my end wherein the `brew.sh` file is getting reverted after modifying it and then running a `brew` command. So I can run `sudo brew whatever` and `brew whatever` in tandem just fine. My `brew --version` output is thus: `Homebrew 1.2.1-98-g803f9cbf7b-dirty  Homebrew/homebrew-core (git revision d3d6; last commit 2017-05-28)`  FYI, I modified my `brew.sh` file to comment out all lines in the `check-run-command-as-root` function and placed a single `return` statement at the top of the function instead. <comment359945> @GDP2 I updated to Homebrew 1.2.1 (though mine isn't "dirty" for some reason) and did what you suggested, and I can run `sudo brew ...` multiple times, but it "updates" homebrew if I `sudo brew install ...` and overwrites the hack, so it goes back to the old problem. <comment359946> Also tried git committing my change in /usr/local/Homebrew, no luck. Maybe I can make SIP lock the brew.sh file for writing, even for root? :D <comment359963> @sudo Hmm, that's very odd. I tried doing a `brew install` and it went on without a hitch, i.e., it left `brew.sh` unmodified and installed fine (possibly unrelated sidenote: I had to first `export HOMEBREW_NO_SANDBOX=true` to get the install to complete correctly). Before protecting the file with SIP you might try `sudo chflags schg /usr/local/Homebrew/Library/Homebrew/brew.sh` along with the `chmod 500` that you did. That will, according to `man chflags`, "set the system immutable flag (super‚Äêuser only)". <comment359969> To clarify my last comment: I did a `brew install` under `sudo -s` and it went on without a hitch.