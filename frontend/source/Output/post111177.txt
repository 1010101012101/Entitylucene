How to format external drive into ZFS? <body> I've installed MacZFS, I've read the FAQ and Getting Started section, but I've still troubles to understand how to simply format the external drive into ZFS on OSX. I'm confused with zpools, can anybody explains what are the zpools and how to format the drive?  I've tried also to use Disk Utility ZFS-Dumodule, but without success.  Is there any simple command to format the hard drive or to use Disk Utility for that?   My drive is: /dev/disk5.  Related:  ul liSolaris tip of the week: file-based ZFS for development and test environments/li /ul  <answer111186> The getting started page you posted a link to explains how to create a simple one disk pool.  This is the only thing you need to do. Creating a pool will automatically create a file system with the same name as the pool, which is what you call formatting a drive.  In your case, you can run from the command line:  precodediskutil partitiondisk /dev/disk5 GPTFormat ZFS %noformat% 100% zpool create extdrive /dev/disk5s2 /code/pre  and you'll have a new volume named codeextdrive/code available.  If you happen to run software with inconsistent file naming, like Adobe products and possibly Nikon capture, you might want to create a dedicated file system with case insensitivity set using something like:  precodezfs create -o casesensitivity=insensitive -o normalization=formD  extdrive/data /code/pre  <answer111190> I'm not so familiar with ZFS on Mac, so I'll try and speak on ZFS in general.  ZFS is a software-based volume manager that you can use to 'virtually' RAID a number of disks together.   The resultant storage volume that is created, is referred to as a zpool.  ul liFor example, you can take 2x raw disks [2x 3TB disks for example] and create a zpool (mirrored) via: strongzpool create MyPool mirror /dev/sda /dev/sdb/strong/li liIt's possible you might not have raw disks; in this case you can force ZFS to use preformatted disks by using the -f flag: strongzpool create -f MyPool mirror /dev/sda /dev/sdb/strong/li liIn your case, with a single preformatted disk, you can try forcing the creation of a zpool via: strongzpool create -f MyPool /dev/sda/strong/li liSome disks use a 4k sector size. You might choose to create your zpool using a 4k sector size to maintain proper alignment: strongzpool create -f -o ashift=12 MyPool /dev/sda/strong/li /ul  Now let's assume you have a zpool called MyPool with total pool capacity of 3TB (mirrored 2x 3TB drives).  Creating A Filesystem:  ul liFrom that raw 'pool' of storage, you can now create a filesystem. Your OS will be able to use/read/write the filesystem... NOT the pool./li licreate a ZFS filesystem on your pool via: strongzfs create MyPool/Videos/strong/li liNow you should have a zfs filesystem called 'Videos' residing in strong/MyPool/Videos/strong/li liYou can freely read and write to strong/MyPool/Videos/strong, share it over the network, set permissions, etc./li /ul  Creating a Virtual Block Device:  ul liIf you want, you can also create a virtual block device from your zpool via: strongzfs create -V 100GB MyPool/TestDevice/strong/li liTestDevice will be a virtual device with 100GB capacity, and it generally resides in: strong/dev/zvol/MyPool/TestDevice/strong/li liYou can create any filesystem you want on TestDevice (HFS, EXT4, NTFS, etc), mount it, then use it!/li /ul  You can create a bunch of Filesystems/Virtual-block-devices on your pool, and use them all very differently.  ul liFor example, you can have a zpool with multiple filesystems/virtual-devs tuned accordingly to Videos, TimeMachine-backups, Databases, etc respectively./li liAll these filesystems/virtual-devs would share from the same pool of storage. All data on the pool is redundant and dynamically protected against bit-rot./li /ul  <answer114097> First, find your device node:  precode$ diskutil list /dev/disk1    #:                       TYPE NAME                    SIZE       IDENTIFIER    0:     FDisk_partition_scheme                        *4.0 TB     disk1    1:               Windows_NTFS My Book                 4.0 TB     disk1s1 /code/pre  Then format your HDD (where code/dev/disk1/code is your device node from above command):  precode$ zpool create -f -O casesensitivity=insensitive -O normalization=formD WD_4TB /dev/disk1 checking path '/dev/disk1' /code/pre  hr  You may be able to improve performance for some workloads by setting ashift=12. This tuning can only be set when the pool is first created and it will result in a decrease of capacity. For additional detail on why you should set this option when using Advanced Format drives see section 1.15 How does ZFS on Linux handles Advanced Format disks?  <comment134047> `-O casesensitivity=insensitive -O normalization=formD` … you should treat those as essential when creating a pool for use with OS X. Without those properties, the resulting file system will be [incompatible with some apps](http://zevo.getgreenbytes.com/forum/viewtopic.php?p=981#p981) and [troublesome with some characters](http://forum.macbidouille.com/index.php?s=7e4041d9bf31dfebc20bc9eb24ca1ef3&showtopic=374137&view=findpost&p=3797751). <comment134048> For pools to be used with OS X in particular (not ZFS in general) please see my [comment about file system properties that should be treated as essential](http://apple.stackexchange.com/questions/111177/how-to-format-external-drive-into-zfs#comment134047_111186). <comment134050> For a modern 4 TB drive, we might assume that *Advanced Format* is used, in which case it will be appropriate to also specify an `ashift` property value at time of creation of the pool. <comment134051> Reading this alongside [your other recent question](http://apple.stackexchange.com/q/113592/8546): is the MacZFS in this topic stable MacZFS, or ZFS-OSX? <comment134054> @GrahamPerrin Thanks for the tip, answer updated.