Can a Terminal window be resized with a Terminal command? <body> So that I could resize the window to a certain size from within Terminal.  <answer33738> You could always use AppleScript:  precodesetwidth() { osascript -e "tell app \"Terminal\" to tell window 1 set b to bounds set item 3 of b to (item 1 of b) + $1 set bounds to b end"; } /code/pre  <answer33741> Actually you know, moving an resizing windows with a mouse is horribly slow.   I've been using this app SizeUp for a very long time now. It basically resizes any application window by using your keyboard command.   You can do the following (my custom keyboard commands below):  ul limake the window full screen (kbdcontrol/kbd + kbdoption/kbd + kbdcommand/kbd + kbdm/kbd)/li limove a window 1/2 screen size to the left or right (kbdcontrol/kbd + kbdoption/kbd + kbdcommand/kbd + kbd&larr;/kbd/kbd&rarr;/kbd )/li limove a window 1/4 screen size to any corner (kbdcontrol/kbd + kbdoption/kbd + kbdshift/kbd + kbd&larr;/kbd/kbd&rarr;/kbd/kbd&uarr;/kbd/kbd&darr;/kbd)/li limove windows between screens/li limove windows between spaces/li /ul  I think this might do the trick and also help with other window management.  <answer47841> Yes. Terminal supports escape sequences for manipulating windows, including the size and position, layering, and minimizing. Dimensions can be expressed in pixels or characters. See Xterm Control Sequences for details (search for “Window manipulation”; if you’re not familiar with the notation, “CSI” stands for “Control Sequence Introducer”, which is codeESC [/code).  For example, this shell command will set the window to 100x50 characters:  precodeprintf '\e[8;50;100t' /code/pre  Minimize the window for a few seconds, then restore it:  precodeprintf '\e[2t' &amp;&amp; sleep 3 &amp;&amp; printf '\e[1t' /code/pre  Move the window to the top/left corner of the display:  precodeprintf '\e[3;0;0t' /code/pre  Zoom the window:  precodeprintf '\e[9;1t' /code/pre  Bring the window to the front (without changing keyboard focus):  precodeprintf '\e[5t' /code/pre  <answer52054> Use code/usr/X11/bin/resize/code.  coderesize -s 30 80/code will give you 30 rows and 80 columns.  coderesize -s 30 0/code will give you 30 rows and full columns.  coderesize -s 0 80/code will give you full rows and 80 columns.  <comment54864> This is just perfect! <comment80864> Although useful, this doesn't address the question the questioner asked. <comment190907> This solution is not limited to MacOS. It is terminal-based, so it should work on all terminals. I use this to resize PuTTY windows on Windows running bash shells with TERM=xterm. <comment193403> From now on you are my god! <comment220475> This doesn't seem to work on Yosemite in iterm2. <comment220476> This doesn't seem to work on Yosemite with iterm2 <comment251807> This works great but it seems Terminal does not accept resizings that would make the window only partially visible on the screen. I just tried printf '\e[8;100;100t' and this truncated to 79x100, just what could be fit. My problem is that I need to bypass the mouse just for this case of enlarging Terminal beyond the screen limits ... <comment251815> @phs Why do you need the window to be larger than the screen? <comment251913> There are many reasons. E.g. to not fold long lines. Or not have ncurses-based legacy code complain that the window is too small. Or you want to increase font size with 'Cmd +' and not change number of lines. Or .. Now, can Terminal be told to resize beyond screen limits? <comment350695> @phs Not via the escape sequences or by increasing the font size. Only the user resizing the window can do that. If you need to do that, consider filing a bug report: https://developer.apple.com/bug-reporting/ <comment350696> @phs I should have asked a more specific question: why do you need to resize the window larger than the screen via escape sequences? Note that you should be able to use application scripting (e.g., using AppleScript) to layout windows, especially if you don't need to do it via escape sequences sent to the terminal through the tty device. <comment350727> I already explained why the question is legit. I am happy with an answer like 'sorry Terminal.app can't do that' <comment353041> @phs I'm not questioning the legitimacy of the question, nor am I saying that Terminal can't do that. I'm asking for more detail to understand the requirements for your use-case. <comment360085> This also works with iTerm2. <comment360086> This works for me with Apple Terminal but not iTerm2. However, sending the escape sequence \e[8;24;80t works with both.