What is the modern equivalent of "ps aux" on macOS Sierra? <body> The BSD backend of MacOS has codeps/code built in. The BSD General Commands Manual says that      The biggest change is in the interpretation of the -u option, which now displays processes belonging to the specified username(s).  Thus, "ps -aux" will fail (unless you want to know about user "x"). As a convenience, however, "ps aux" still works as it did in Tiger.   I am wondering what the current standard is for this—dare I write—emobsolete/em command+parameter sequence.  <answer272859> To replicate codeps aux/code (BSD style) in the AT&amp;T version of ps, you have to use  precodeps -Ao user,pid,%cpu,%mem,vsz,rss,tt,stat,start,time,command /code/pre  This command is compatible with scripts that expect the same output as codeps aux/code.  The only difference is the sort order; codeps aux/code sorts all processes by their emstart time/em whereas codeps -Ao/code sorts them by emPID/em.  hr  codeps -jef/code is a shorter command, but it will output different headers.:  ul liUSER/li liPID/li liPPID/li liPGID/li liSESS/li liJOBC/li liSTAT/li liTT/li liTIME/li liCOMMAND/li liUID/li liC/li liSTIME/li liTTY/li /ul  <comment342938> What's wrong with `ps aux` without minus? <comment342939> @MateuszSzlosek Nothing except that it is deprecated. Read the quote carefully. I assume the reason for its retirement is that it does not follow the standard parameter scheme of `-p` where p is a parameter character. (or `--parameter` where p is spelled out) <comment342941> ps aux is BSD syntax. Portable syntax would be ps -ef. <comment342942> @fd0 Your comment should probably be an answer.