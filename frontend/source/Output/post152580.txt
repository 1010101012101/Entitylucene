Auto-Update Script <body> I'm trying to get the Macs at my workplace all updating at a specific time. To do so, I'm running a bash script from a spare Macbook running OS X Server. I have one minor and one big issue with my current script, and could use your help.  The script is very simple, and I don't need it to be too robust for my purposes:   precode#!/bin/bash for host in 192.blah.blah.blah 192.blah.blah.blah 192.blah.blah.blah do ssh -t $host sudo softwareupdate -ia ssh -t $host sudo shutdown -r now done /code/pre  The minor issue: for whatever reason, if I try to put both of those commands on the same line using code;/code or code&amp;&amp;/code like so:  precodessh -t $host sudo softwareupdate -ia;sudo shutdown -r now /code/pre  or  precodessh -t $host sudo softwareupdate -ia &amp;&amp; sudo shutdown -r now /code/pre  it reboots the actual server instead. Not sure where I'm going wrong with the syntax.   The big issue: Despite setting up ssh with a public ssh key (using the instructions I found here), I'm still asked to input a password twice per machine when the script runs. I'm positive it's due to our friend codesudo/code, but the commands don't run at all without it. Ideally, I'll set up a cron job at an early point in the morning and have it run this script automatically so that by the time I'm at work, the Macs will have updated and rebooted. I'm sure there is a way to do it, but my Google-Fu is failing me.  strongEDIT/PARTIAL ANSWER/strong Turns out, even if you put TextEdit into Plain Text mode, it's still using 'smart quotes'. Typing out and saving the script through the Terminal and THEN running it worked like a charm.   0942v8653 was kind enough to help me out in chat, and also provided a command to disable this 'feature': codedefaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false/code  Still looking for a solution to the password issue.  <answer152583> I am not sure about the reboot issue, but setting up a script to run codesudo/code commands without inputting the password is fairly easy. Take a look at Step 4 of this answer I previously wrote (it was for something else entirely, but the steps to enable running codesudo/code without a password are universal).  Note that actual command to run your script will change to  precodesudo ./myscript.sh /code/pre     strongStep 4: Setting Up sudo to Run Without a Password/strong      Letting the Terminal command codesudo/code run without a password can be very dangerous. That's why the steps above created the shell scripts in their own directory, so what can actually be run is limited.      Enter the following command in Terminal:  precodesudo pico /etc/sudoers /code/pre      Then enter your administrator password when prompted.      This may bring you to a (mostly) blank screen, or it may have some text in it. If it's blank - that's fine. You'll just paste the below line at the top. If text already exists, that's also fine; use your down arrow to go right below the lines already in the code# User privilege specification/code section, as seen in the below screenshot.      Here, add the following line:  precode&lt;yourusername&gt; ALL = NOPASSWD: /Users/&lt;yourusername&gt;/PathToScript/* /code/pre      In both places where code&lt;yourusername&gt;/code appears, replace it with your Mac username. Press control + x, type y and press return to save and exit.   <answer152609> The code;/code and code&amp;&amp;/code are interpreted by codebash/code on the local machine. You can see this by running codessh 127.0.0.1 -t env &amp;&amp; env/code: the second time, there will be no codeSSH_CONNECTION/code variable.  You can quote the entire command to get it to work properly:  precodessh -t $host 'sudo softwareupdate -ia &amp;&amp; sudo shutdown -r now' /code/pre  In my opinion, code-t/code should only allow one, quoted, argument to avoid problems like this…also beware of variable expansion—make sure to put everything in single quotes or escape it with backslashes to keep it from being expanded or interpreted on the local machine.  <comment179573> Nice. I'm assuming this is to be done on the server, yes? Not the clients. <comment179575> That is correct. <comment179578> Hm. It doesn't recognize the command unless I use `sudo bash UpdateScript.sh`. Moreover, when I do call it like that, it ends up asking me for a password over and over and over until it says "Permission denied (publickey,keyboard-interactive)". Thoughts? <comment179620> Oddly enough, when I do that I get the error `'sudo: command not found`. It baffles me. Although, maybe I should note: I'm running the server.app on Yosemite. I doubt that's the root of the issue, but figured I'd mention it. <comment179622> When I open the /etc/sudoers file it tells me "This file MUST be edited with the 'visudo' command".  You still think pico is safe to use? <comment179627> @Fyrefly: Set the `VISUAL` environment variable to `pico`. <comment179635> Are you sure you have that exact line? <comment179636> I do indeed. I've eliminated the for loop temporarily just to work out this script, so my current code reads `ssh -t [username]@[ClientMacIP] 'sudo softwareupdate -ia && sudo shutdown -r now'` <comment179638> Can you try it with a dummy command like echo? This is really weird… <comment179639> It's definitely weird. Echo returns the same type of error `'echo command not found`. I have to think that it's the way I'm calling the script... I've cd'd into the directory it's in, and am calling it with `sudo ./UpdateScript.sh` <comment179640> You shouldn't need to use sudo to run the script. Does anything happen differently if you just run the line from the prompt? <comment179641> Right, should've mention I had tested that a little bit ago, and yeah the original command `ssh -t [username]@[ClientMacIP] 'sudo softwareupdate -ia && sudo shutdown -r now'` works like a charm if I type it all out into the prompt. <comment179643> Let us [continue this discussion in chat](http://chat.stackexchange.com/rooms/18107/discussion-between-0942v8653-and-zomgdavidbowie). <comment180661> Thanks, not to start a war, but I try and avoid vi whenever possible!