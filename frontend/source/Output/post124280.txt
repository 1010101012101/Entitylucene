How to use an application name to kill it from a script <body> I'm trying to create a cron job to prevent children at a school from running the Minecraft server. (We actually need them to run the Minecraft client because we use it to teach programming.) The name of the PROCESS is always "java". That's not useful for me.  I found a way using codejps/code and codelsof/code of getting the filesize of all running .jar files. I could kill processes based on that, but it seems messy.  The name of the Application (not the process) that runs the Minecraft server (as show by the Apple logo on the top left corner of the screen) AND its Java class name are both strongnet.minecraft.server.MinecraftServer/strong but I can't ever get that string from the command line, no matter how many variations of codeps/code I try. codeps/code and codetop/code always call the process "java". It's easy to find the file name being used, but that's useless because it's easily modified.  Is there a good, clean way to find if the Application or Java class net.minecraft.server.MinecraftServer is running and what its process is?  <answer124290> Minecraft Server should be detectable through the arguments passed to its codejava/code process.  Over at Unix &amp; Linux, the question kill process based on arguments tackles this problem: how to kill a specific java process based on its command line arguments.  The top answer recommends using codepkill/code with the code-f/code flag to kill based on the arguments associated with a specific process. The final command may be as simple as:  precodepkill -f 'MinecraftServer' /code/pre  With regard to using codecron/code, this is fine but Apple recommend migrating to codelaunchd/code as codecron/code is less efficient.  <comment145316> I think launchd is the apple way of handling cron jobs: https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html <comment145320> Good tip regarding `pkill`. But doesn't this rely on the students not renaming `minecraft_server.jar` to something a bit less obvious? <comment145321> Don't recent Minecraft clients have server mode kind of builtin anyway? <comment145322> In which case, it may be worth considering boosting the script to `pkill` any `java` process launched with a path outside of a specific, administrator controlled, directory. Effectively whitelisting certain `java` processes. <comment145378> That makes sense, but I'm not comfortable whitelisting some Java processes. What if another legitimate Java Application is used in the future? I think that killing the process by filesize is safer than that. Looking into the arguments is not useful because the students will quickly figure out they can rename the JAR file. <comment145425> @patrix, that's what I thought too, but no, it's still a separate JAR file. <comment145426> And, @GrahamMiln, the process is called "java", not "MinecraftServer". If the process were called "MinecraftServer", I'd have had the whole thing done in a minute. <comment145428> The `-f` matches the arguments to the `java` process, thus matching `MinecraftServer` if it is in the launch command. Without `-f`, the command would only search against the process name. <comment145441> @GrahamMiln The only thing that is reliably in the launch command is "java -jar" and the memory usage options. The actual jar file can be named anything. None of the information in the launch command is necessarily specific to that program. That's my problem.