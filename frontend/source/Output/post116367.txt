Find all executable files within a folder in terminal <body> I have a folder codemyfolder/code that contains a huge hierarchy of files/folders.br How to find all executable files within this folder?  On Ubuntu this works: codefind . -executable -type f/code  But Mac OS X Mavericks (which also uses codebash/code) fails to get it:  precodefind: -executable: unknown primary or operator /code/pre  <answer116369> From the man page for find in OS X:  precode -perm [-|+]mode          The mode may be either symbolic (see chmod(1)) or an octal number.  If the mode is symbolic, a          starting value of zero is assumed and the mode sets or clears permissions without regard to the          process' file mode creation mask.  If the mode is octal, only bits 07777 (S_ISUID | S_ISGID |          S_ISTXT | S_IRWXU | S_IRWXG | S_IRWXO) of the file's mode bits participate in the comparison.          If the mode is preceded by a dash (``-''), this primary evaluates to true if at least all of          the bits in the mode are set in the file's mode bits.  If the mode is preceded by a plus          (``+''), this primary evaluates to true if any of the bits in the mode are set in the file's          mode bits.  Otherwise, this primary evaluates to true if the bits in the mode exactly match the          file's mode bits.  Note, the first character of a symbolic mode may not be a dash (``-''). /code/pre  So you need:  precodefind . -type f -perm +0111 -print /code/pre  Remember that OS X is BSD-based, not Linux based, so the Gnu commands you're used to in Linux distributions (of which codefind/code is one of them) aren't necessarily the same as they are in OS X. This isn't a shell difference, it's an operating system/operating system utility tools difference.  <answer116370> I couldn't make Ian's answer work (10.6.8), but, the following gave the expected results:  precodefind . -type f -perm +0111 -print /code/pre  emedit update/em  This seems to work as well!  precodefind . -type f -perm +ugo+x -print /code/pre  I guess the "x" is meaningless without the user/group/other specifiers.  <answer116371> This will find all files (not symlinks) with the executable bit set:  precodefind . -perm +111 -type f /code/pre  This will strongalso/strong find symlinks (which are often equally important)  precodefind . -perm +111 -type f -or -type l /code/pre  Here's how the command works if its not obvious:  ul licodefind/code is obviously the find program (:/li licode./code refers to the directory to start finding in (code./code = current directory)/li licode-perm +111/code = with any of the executable bits set (code+/code means "any of these bits", code111/code is the octal for the executable bit on owner, group and anybody)/li licode-type f/code means the type is a strongfile/strong/li licode-or/code boolean OR/li licode-type l/code means the type is a strongsymbolic link/strong/li /ul  <comment136132> Symbolic syntax must be new -- thanks for pointing that out. I updated my answer so it uses octals and is backwards compatible with older OS X versions. <comment136133> You can use `-L` instead of `-or -type l` to cause any `stat` calls made by `find` to return the stats of the file linked to, not the link itself. <comment136137> Oddly enough, that section of the 10.6 manpage is exactly the same as what you quoted....  which was enough to make me dig a little deeper and see what the heck was going on.  Amended my response above. <comment136138> Conclusion: BDS command syntax is weird. <comment177569> The problem I found with this approach is that any file can have the run permission. For example, after you download some text file from Windows, the permission is messed up.