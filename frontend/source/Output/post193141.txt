To use STDBUF from Homebrew's coreutils <body> I run codebrew search stdbuf/code and get   precodeNo formula found for "stdbuf". Searching pull requests... Closed pull requests: coreutils: upstream fix for stdbuf (https://github.com/Homebrew/homebrew/pull/32955) /code/pre  I run codebrew install coreutils/code but get codeWarning: coreutils-8.23_1 already installed/code.   I do but see no stdbuf in my system.  precode$ std [tab] stdethers  stdhosts    /code/pre  My PATH is   precode/usr/local/bin:/usr/bin:/opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin: /sbin:/opt/X11/bin:/usr/local/git/bin:/usr/texbin:/Users/masi/.cabal/bin /code/pre  h2Uninstall Macports/h2  Using Macports and Homebrew together cause conflicts.  Final solution is to uninstall Macports which is immature.  Regardless of what your PATH is, Macports causes conflicts with programs in the PATH.  I realised the core of the problem here at the end of the body about emHow to Enlarge Disk Image in VirtualBox?/em  hr  How can you use stdbuf in OSX Yosemite?  <answer193156> You have to alter your path adding codecoreutils/code dir before code/usr/bin/code. You can do something like this:  precodeexport PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH /code/pre  And should looks like the following after the changes:  precode/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:/usr/bin: /opt/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin: /sbin:/opt/X11/bin:/usr/local/git/bin:/usr/texbin: /Users/masi/.cabal/bin /code/pre  After that, you must be able to use codestdbuf/code.  <answer220621> If you don't want to mess with your PATH and all you need is stdbuf:  precodecd /usr/local/bin sudo ln -s ../opt/coreutils/libexec/gnubin/stdbuf stdbuf /code/pre  For whatever reason I also already had codecoreutils/code brewed, but only certain binaries linked - not remembering why, this seemed like the safest option  <answer222730> codecoreutils/code on OS X adds the prefix codeg/code to all the commands so as to not mess up with default programs on OS X.  It prints this when you run codebrew install coreutils/code  precode==&gt; Caveats All commands have been installed with the prefix 'g'.  If you really need to use these commands with their normal names, you can add a "gnubin" directory to your PATH from your bashrc like:      PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH" /code/pre  So unless you really need to use it as codestdbuf/code, there is no real reason to update your path, you can simply run codegstdbuf/code instead:  precode$ gstdbuf --help                                                          Usage: gstdbuf OPTION... COMMAND  /code/pre  <comment230075> My PATH is now `/usr/local/bin:/usr/bin:/opt/local/sbin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/git/bin:/usr/texbin:/Users/masi/.cabal/bin` after the change. I put the export to my `.bashrc`. There must be something else which is inserting the beginning to my PATH. <comment230076> Did you source your `.bashrc` file from your `.bash_profile`? Check your PATH on `.bash_profile` too. <comment230080> I had this `export PATH=/usr/local/bin:/usr/bin:/opt/local/sbin:$PATH:$HOME/.cabal/bin` in `.bash_profile`. So I removed it in `.bash_profile` and added simply to `.bashrc` simply `export PATH=/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:/usr/bin:/opt/local/sbin:$PATH:$HOME/.cabal/bin`. <comment230084> Why do you have `/usr/local/bin` and `/usr/bin` in your `$PATH` twice? <comment230088> Not anymore when I combined export in `.bash_profile` and `.bashrc`. <comment267257> It would be great to understand why this linking is not done. I do not like putting too much in PATH and messing it up. <comment268620> Can someone report this issue to homebrew? The stdbuf util should be in the standard path, while the libstdbuf.so shared lib should be in the libexec location.