Test a list of passwords on Sparse Image <body> I have a sparse image file with some important data in it I would like to retrieve. The only problem is I've forgotten the password.  I have a good idea of the parts of the password and managed to generate a 3000 line file with a list of possible passwords.  I would like to know how I can test these against my image. A few years ago, I had found a handy open source app with a simple GUI which did this, but I can't seem to find it. Maybe someone knows what app I'm talking about. Otherwise, if anyone knows an other method to do this (perhaps with automator), it would be great.   Thanks  <answer67278> The hdiutil command combined with a bit of bash scripting can accomplish what you're looking for. You'll need a plain text file with strongeach password on a separate line, emending with a blank line/em/strong.  ol liCopy and paste this into a text file:  precode#!/bin/bash  while read line do     echo -n "$line" | hdiutil attach -quiet -stdinpass "$1"     if [ $? -eq 0 ]; then         echo "Password is $line"         break     fi done &lt; "$2" /code/pre/li liSave it and make it executable by running codechmod +x /path/to/scriptfile/code in Terminal./li liIn Terminal, run code/path/to/scriptfile /path/to/image.dmg /path/to/passwords.txt/code. ul liIt will run until it successfully mounts the disk image, and will output the password that worked. In my tests, it took 1.3-1.6 seconds per password, so 3000 passwords may take around an hour, depending on your system (although it could be sooner depending on where the password is in the file)./li /ul/li /ol  That should do the trick. If you're curious how and why it works, read on.  h1Explanation/h1  h3While loop/h3  precode    while read line     do     [â€¦]     done &lt; "$2" /code/pre  This loops over each line in the password file (which is fed in via the code&lt; "$2"/code part) and executes  the stuff between codedo/code and codedone/code each time it loops. code$2/code is a special variable in Bash that represents the second argument passed to the script (i.e. if you ran code./foo bar blah/code, code$2/code would be codeblah/code). It's enclosed in quotes in case there are any spaces or other characters in the name that could cause problems for Bash.  h3Mounting the image/h3  precodehdiutil attach -quiet -stdinpass "$1"` /code/pre  This is the command to actually mount the disk image (which we get from the command line arguments via the code$1/code variable, just like the password file). The code-quiet/code flag means don't print any output (just to keep things tidy), and code-stdinpass/code means get the password from the command line, not the usual OS X password dialog.  precodeecho -n "$line" /code/pre  The codeecho/code command simply repeats the input it's given, which in this case is an individual line from the password file, from the code$line/code variable (which is again quoted in case the passwords contain special characters). The code-n/code flag is the final piece of this puzzle, it prevents echo from repeating the newline character, which would be included in the password (and thus prevent even the correct password from working).  We use codeecho/code with a "pipe" (code|/code) to send codehdiutil/code the password. A pipe sends the output of the preceding command (codeecho/code) to the command after the pipe (codehdiutil/code). This way rather than asking us for the password, codehdiutil/code simply takes the text we read from the file.   h3Checking if the password was successful/h3  precodeif [ $? -eq 0 ] /code/pre  This checks if the previous command was successful, by checking its exit code. The code$?/code is another special variable that stores the exit code of the previous operation.  If the exit code is 0 (no errors), then we know that the password worked, and the if statement runs these lines:  precode    echo "Password is $line"     break /code/pre  This displays a simple message telling the user what the successful password is, then the codebreak/code command exits the codewhile/code loop and ends the program. We do this because the script would otherwise continue until it's checked every password in the file.  Combining all these pieces together gives you a convenient way of automating an otherwise long and painful task.  <answer68350> After trying dozens of Google searches, I found the app I had used many years ago.   crowbarDMG - https://www.georgestarcher.com/?p=228  Here is the Python script I used to generate the password list:  precodeimport itertools permutations = list(itertools.permutations(['part', 'PART', 'other', 'OTHER', '9', '@', '4', '%', '9', '#'], 4)) for (i, permutation) in enumerate(permutations):     print ''.join(permutation) /code/pre  I then used crowbarDMG to discover the password.  <comment79258> Why without Automator? <comment79259> I wasn't ruling out automator but perhaps there are other ways like with a bash script <comment79645> Just a note to the question asker; I added one important bit of information to my answer that I overlooked. Make sure that your password file ends with a blank line, otherwise my script won't test the final password, due to some arcane Unix stuff.