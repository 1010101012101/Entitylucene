How can I mount an ext4 file system on OS X? <body> Is there a safe, stable application for reading from and writing to ext4 file systems on Mac&nbsp;OS&nbsp;X?  If not, what's the best way to access the contents of an ext4 file system on Mac&nbsp;OS&nbsp;X?  <answer29914> The answer depends on you willingness to invest in commercial software:  strongIf you don’t mind spending some money on a commercial product/strong, Paragon’s ExtFS driver will give you read and write access to ext2 / ext3 / ext4 file systems. Version 10 supports all versions of OS X / macOS from 10.8 to 10.12.  strongIf you are looking for a free solution/strong, you can setup a Linux virtual machine, mount your volume(s) there and share it / them via Samba or (S)FTP. This post has some details on how to achieve this using VirtualBox, a free virtual machine application. Note this is not exactly a lightweight solution, even if using a prebuilt VirtualBox VM will spare you installing and configuring a Linux distro from scratch.  <answer29964> With recent changes to homebrew, this should be as simple as:  code brew cask install osxfuse brew install ext4fuse /code  You may have to reboot.  ext4fuse is read-only, unfortunately. And you may need to use a flag to get it to work as a normal user.  Others viewing this question may be interested in libguestfs. I'm not aware of an OS X port, but considering that VirtualBox has an API, it's not out of the question.  I wonder why no one has written a compatibility layer to allow Linux kernel filesystem code to run in userspace/fuse. Or has someone?  <answer49242> Building on Ken's answer: I used fuse4x and fuse-ext2 successfully, and I recommend fuse-ext2 over ext4fuse.  ext4fuse was a hassle for me, because it requires manual compilation and has no support for fuse4x options that would allow me to set access control. fuse-ext2 provides downloadable packages, and the 0.0.7 version worked just fine. I copied a few large ISOs over without any problem.  <answer73353> There is also e2fsprogs available in MacPorts. I haven't tested it yet myself but looks promising.  <answer76145> I had an ext4 formatted USB drive that I was able to mount after I installed osxfuse. Reading from it works great, but I am not sure if writing is safe.  Also, for moving files from OS X's filesystem (HFS+) to ext4, you may first want to remove those hidden .DS_Store files the OS X filesystem sneaks in as they occasionally cause bad inodes.  precodefind /my/data/to/move -name '*.DS_Store' -type f -delete /code/pre  It is better than having to fix them after with an fsck command.  <answer110414> Just for the record, I have tested Paragon ExtFS driver (trial version) on my MacBook Pro to write to ext4 partition in Linux. I found that the driver was very unstable, and it created corruptions to the filesystem that codefsck/code was not able to repair neither in Linux nor in Disk Utility.  My idea was to have access to my code/home/code partition from Mac OS X using this Paragon driver, but I don't suggest to do this setup. So far, I have my code/home/code partition in Linux formatted to codehfsplus/code with no journaling, and then I can access my files from Mac OS X. Of course, from time to time I get some problems in my FS but is not very frequent. However, I don't suggest this setup either (at least that you have an up to date backup for your daily work).  Finally, I believe that Paragon is more suitable maybe to use for external hard disks but anyways it is not very reliable for being software which license is expensive.  strongUpdate:/strong As of May 2015, I have formatted my /home to ext4, and I mount the filesystem using fuse-ext2 in combination with FUSE for OS X. I can access the ext4 partition to read and write. It is more solid setup than the one I previously described above.   <answer128151> One can also install OSXFUSE completely via the brew command line package manager:  precodebrew install homebrew/fuse/ext4fuse /code/pre  Note that the installation tells certain commands need to be run as 'sudo' in addition to this.   hr  With Yosemite better have a look at this. And then make sure the directory is readable by your user by doing this. For it to work I had to use the wheel group like this:  precodesudo dscl . append /Groups/wheel GroupMembership &lt;your-user&gt; /code/pre  <answer132365> You can boot Linux VM quickly on your OS X using Vagrant. You require to install VM provider such as VirtualBox and Vagrant either via .dmg file from the site or using brew cask.  Once you have codevagrant/code command installed, run this in any selected folder:  precodevagrant init ubuntu/trusty64; vagrant up --provider virtualbox /code/pre  supThis will generate codeVagrantfile/code config file and code.vagrant/code folder./sup  and you'll have Linux box booted within few minutes (downloaded from Atlas Hashicorp repository).  Then strongconnect to the box/strong via command: codevagrant ssh/code and strongtry to mount your device/strong inside Linux.  By default your current folder will be synched with code/vagrant/code folder in VM. For more advanced options, you can modify codeVagrantfile/code with required configuration.  So if you mount your filesystem within code/vagrant/code folder, it will be automatically synched back to your macOS.  hr  Alternatively you just need to install a VirtualBox, run the GUI app, install and boot a minimal version of Linux e.g. Ubuntu in order to achieve the same as explained above.  hr  Above non-native solution are not ideal, but at least your macOS would be more stable rather than installing unstable kernel extensions which may cause a lot of system crashes.  <answer162076> If you're wondering what the command line is to mount an ext4 partition using fuse and ext2fuse (e.g. when installed using MacPorts codeport install ext2fuse/code) - then firstly you need to work out where the Linux partition is:  precodediskutil list /code/pre  This will list all partitions for all disks and amongst them you should see the relevant ones listed under the TYPE column as Linux. Combine the diskX and partition number Y like this /dev/diskXsY - e.g:  precodemount -t fuse-ext2 /dev/disk1s2 ~/my_mount_point /code/pre  It may complain about not being able to write to the log file but it should still mount the partition into your home mount point. But if you want to mount the partition into a system directory then you need to run it as root e.g:  precodesudo mount -t fuse-ext2 /dev/disk1s2 /sys_mount_point /code/pre  If that doesn't work try:  precodesudo ext2fuse /dev/disk1s2 /sys_mount_point /code/pre  Update: More recently I've found that fuse-ext2 has problems with certain newer ext4 features, so instead it is better to use ext4fuse (codeport install ext4fuse/code). Use the ext4fuse command directly:  precodesudo ext4fuse /dev/disk1s2 /sys_mount_point /code/pre  It should be noted that you can only access the mounted filesystem as root/sudo. e.g.  precodesudo ls /sys_mount_point /code/pre  <answer222416> Two packages are needed in order to enable EXT2/3/4 support on OSX: OSXFUSE and FUSE-EXT2.  The stronghomebrew/strong formulas for OSXFUSE and FUSE-EXT2 strongdid not work/strong for me on either mavericks or yosemite.   What did work was the following:  ol liManually download and install the OSXFUSE DMG from http://osxfuse.github.io/. strongIMPORTANT/strong: Once you launch the PKG installer, make sure you selected emMacFUSE Compatibility Layer/em in the wizard (it is not enabled by default) - without it I was getting an error while trying to mount./li liManually download FUSE-EXT2 from http://sourceforge.net/projects/fuse-ext2/ or for Sierra/El Capitan from https://github.com/gpz500/fuse-ext2/releases and run the PKG installer./li /ol  Once you have both OSXFUSE and FUSE-EXT2 installed you can mount the ext2/ext3/ext4 partitions as mentioned in other answers:  ol liFind the device name for the EXT partition you want to mount (e.g. codedisk0s2/code in the example below, (UPDATE) in later MacOS versions ext3/ext4 partitions might be labelled emMicrosoft Basic Data/em and not emLinux/em):  code# diskutil list | grep Linux 1:     Linux_Swap    8.2 GB     disk0s1 2:     Linux         119.9 GB   disk0s2 /code/li liMount the partition to an existing mount point:  codesudo mkdir -p /Volumes/ext4  sudo mount -t fuse-ext2 /dev/disk0s2 /Volumes/ext4 /code/li /ol  Mounting as a regular user did not work for me. Probably this can be fixed by fiddling with permissions, but I didn't look into it.  Note: My suspicion is that the homebrew formulas did not work because homebrew installs codeosxfuse/code without the emMacFUSE Compatibility Layer/em.  There are two codeosxfuse/code packages in homebrew:  precode# brew search osxfuse &gt;&gt;&gt; osxfuse &gt;&gt;&gt; Caskroom/cask/osxfuse /code/pre  Both versions fail to mount EXT partitions. Most likely, the DMG version (codeCaskroom/cask/osxfuse/code) fails because homebrew installs the package with default settings, which means that emMacFUSE Compatibility Layer/em is not included. The main codeosxfuse/code version probably needs some special installation parameter to enable MacFUSE compatibility, so until this is fixed in homebrew the manual DMG method should be used.   This method worked for me on mavericks, yosemite, elcapitan and sierra.  h2EXT2/3/4 mount script/h2  To save some extra typing I use a tiny script which takes the partition name such as codedisk0s2/code and mounts it under code/Volumes/disk0s2/code, creating the folder if necessary:  precode### mount_ext4.sh sudo mkdir -p "/Volumes/$1" sudo mount -t fuse-ext2 "/dev/$1" "/Volumes/$1" open "/Volumes/$1" /code/pre  The script is called with the partition name that you look up via codediskutil list/code, e.g. codemount_ext4.sh disk2s3/code.  <comment34271> It would be more than helpful if you specified what version of OS X you are running. There are compatibility issues with the solutions available depending on OS revision. <comment161609> I can confirm the last entry here where the Paragon ExtFS driver can make some bad trouble on your linux drives. For me, who is dualbooting OSX and Linux, paragon created corruptions on my / device. This was easy to resolve but however thats not a stable solution... <comment161610> Further bad experience with Paragon ExtFS driver. Consistent kernel panics leading to system rebooting, corruption of the files system (luckily fsck on Linux box did work). Tried on two different external drives with same results. <comment324366> Ran with `vagrant init ubuntu/xenial64; vagrant up --provider virtualbox` as `ubuntu/vivid64` is not available anymore. <comment324415> Try use `ubuntu/trusty64` instead. <comment341016> You only need to access the drive as root if you mount it outside your home directory. You can `cd ~`, `mkdir mnt`, `ext4fuse /dev/diskXsY mnt`, `ls -la mnt` without sudo/root. <comment346745> mount: exec /Library/Filesystems/fuse-ext2.fs/Contents/Resources/mount_fuse-ext2 for ...: No such file or directory <comment370017> Tried this but unfortunately get the error `FUSE-EXT2 could not mount /dev/disk2s2 at /Volumes/ext4 because the following problem occurred:` (but there is no problem description or reference). I have installed the Compability Layer addon. I'm on macOS Sierra so tried the Github gzp500 version.