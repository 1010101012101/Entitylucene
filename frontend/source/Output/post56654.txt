Applescript app to shut down Mathematica at a specific time of day <body> I have the following workflow that I need to execute on a daily basis for a period of days:  img src="https://i.stack.imgur.com/awUUO.png" alt="automation workflow"  The computers start at a specified time, Mathematica and a specific Mathematica notebook launch and evaluate. Then I need to quit Mathematica programmatically and let the relevant schedules shut down the computers. I've worked out everything here except the highlighted step to quit Mathematica with an Applescript application.  To start with I created a simple application using the  strongApplescript Editor/strong:  precodetell application "Mathematica" to quit /code/pre  This will shut down Mathematica if the open notebook has been saved which the notebook does itself. Now I need to add a timer to the Applescript application.  An earlier question Automator workflow or AppleScript to close Safari after a period of time does something similar that I hoped to adapt to my needs.  It shows the following code:  precodeglobal quit_after, check_every  set quit_after to 2700 set check_every to 10 set minute to quit_after / 60  display dialog "Check is performed every " &amp; check_every &amp; " seconds. Things will be quit after " &amp; minute &amp; " minutesof system inactivity."  on reopen     display dialog "Check is performed every " &amp; check_every &amp; " seconds. Things will be quit after " &amp; minute &amp; " minutes of system inactivity." end reopen  on idle     set idletime to do shell script "echo $((`ioreg -c IOHIDSystem | sed -e '/HIDIdleTime/ !{ d' -e 't' -e '}' -e 's/.* = //g' -e 'q'` / 1000000000))"     if (idletime as integer) &gt; quit_after then         tell application "System Events"             if ((name of processes) contains "Safari") then                 tell application "Safari" to quit             end if         end tell     end if     return check_every end idle /code/pre  I don't need the dialog boxes and I want it to close Mathematica after say 15 minutes, so I tried this as a next step towards a solution.  precodeglobal quit_after, check_every  set quit_after to 900 set check_every to 10 set minute to quit_after / 60  on idle     set idletime to do shell script "echo $((`ioreg -c IOHIDSystem | sed -e '/HIDIdleTime/ !{ d' -e 't' -e '}' -e 's/.* = //g' -e 'q'` / 1000000000))"     if (idletime as integer) &gt; quit_after then         tell application "System Events"             if ((name of processes) contains "Mathematica") then                 tell application "Mathematica" to quit             end if         end tell     end if     return check_every end idle /code/pre  It doesn't work.  So I have two questions, can anyone suggest:  ul liHow to get my modified code to work?/li liHow to alter it so it will shut down Mathematica at a specified time on weekdays only?/li /ul  The latter would work better for me as I think I'd have fewer conflicts if I shut down Mathematica at a specific time rather than after a certain amount of time has passed.  <answer56661> h1The tl;dr Version/h1  ol liExecute codecrontab -e/code in Terminal./li liPaste in 5 14 * * 1-5 osascript -e 'tell application "Mathematica" to quit' on a new line./li liSave./li /ol  hr  h1The Detailed Version/h1  I'm far from an Applescript expert, so I can't offer much feedback on why your script isn't working, but I can offer an alternate (and simpler) option.  Pretty much any UNIX-like system, including OS X has the cron daemon, which can run commands on a set schedule. OS X also has launchd, but that's a bit trickier to use, so we'll stick with cron.  h2The crontab format/h2  Cron is just a plain text file that executes commands based on a simple structure.  ul liEach line in the crontab is a separate job, in the form codeminute hour day-of-the-month month day-of-the-week command/code, with each field separated by a space. ul licode*/code means any time, and you can put comma-separate multiple entries (code1,3,5/code) or use a hyphen for a range (code1-5/code)./li liHours are on a 24-hour clock./li liNote the distinction between day of the month and day of the week. Be careful setting both of these, you probably only want to use one or the other; emi.e./em if emday of the month/em is 13 and day of the week is 5, your job will emonly/em run on Friday the 13th, not every Friday emand/em every 13th of the month)./li liDays of the week go 0-7, with both 0 and 7 meaning Sunday./li /ul/li /ul  h3Examples/h3  code0 15 * * 1-5 /usr/bin/blah/code would execute code/usr/bin/blah/code at 3 PM every Monday to Friday on any calendar date of any month.  code15 * 1 1-6 * /usr/bin/blah/code runs the same command at 15 minutes of every hour on the first day of January through June, regardless of what day of the week it is.  h3Your specific cron entry/h3  Based on the schedule in your question, to quit Mathematica at 2:05 PM every weekday, the applicable line would be code5 14 * * 1-5 osascript -e 'tell application "Mathematica" to quit'/code  ul licodeosascript/code runs Applescript from the command line, either from a file, or a one-liner you specify (as we're doing here)./li /ul  h2Adding a cron job/h2  ol liOpen Terminal ul liemOptional:/em if you're not comfortable with the codevim/code editor, change the shell editor to one you're comfortable with (I suggest codenano/code if you don't have a preference) by running the following command: codeexport EDITOR=nano/code (change codenano/code to your preferred editor). Note that you should probably stick to shell-based editors, GUI editors may not work with cron's peculiarities in saving the files./li /ul/li liType codecrontab -e/code and hit enter to open the crontab in the editor. ul liEach user has their own crontab, and the commands are executed with their permissions, so you should do this as whatever user is running Mathematica in the first place./li /ul/li liOn a new line (or the first line if there are no other entries), enter the command we determined earlier: code5 14 * * 1-5 osascript -e 'tell application "Mathematica" to quit'/code./li liSave the file (control-O in nano) and quit your editor./li /ol  That should do it. Obviously you'll want to test it out to be sure there aren't any formatting errors in your crontab, but that should be all you'll need to quit on a schedule.  <answer56682> Ok, well, here's how you would make launchd run at 2:05 p.m.  Copy this using a text editor and save it as strong~/Library/LaunchAgents/com.tjluoma.quit-at-time.plist/strong  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;com.tjluoma.quit-at-time&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/usr/local/bin/killMathematica.sh&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;StartCalendarInterval&lt;/key&gt;     &lt;dict&gt;         &lt;key&gt;Hour&lt;/key&gt;         &lt;integer&gt;14&lt;/integer&gt;         &lt;key&gt;Minute&lt;/key&gt;         &lt;integer&gt;5&lt;/integer&gt;     &lt;/dict&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  Note that you'll need to logout/login or use codelaunchctl load ~/Library/LaunchAgents/com.tjluoma.quit-at-time.plist/code  Now, the code/usr/local/bin/killMathematica.sh/code line could point to whatever it is you want to run: an app, an AppleScript, or a shell script.  The easiest solution is a shell script:  precode#!/bin/zsh  APP='Mathematica'  PID=$(ps cx | fgrep "$APP" | awk '{print $1}')      # if $APP isn't running, then just exit already [[ "$PID" == "" ]] &amp;&amp; exit 0      # if we get here, then $APP is running     # tell it to quit using AppleScript     # if this exits properly, the script will exit too osascript -e "tell application \"$APP\" to quit" &amp;&amp; exit 0      # if we get here, AppleScript didn't work, so let's try     # sending the app a 'kill' message kill -QUIT "$PID" &amp;&amp; exit 0  exit 1  # EOF /code/pre  save that as '/usr/local/bin/killMathematica.sh' (or wherever) and make it codechmod 755/code  Test it out and see if it works.  h3Now that I've given you the answer to the question you emasked/emâ€¦/h3  emHere's a better solution:/em use Keyboard Maestro. It's much easier.  How easy?  http://images.luo.ma/Keyboard_Maestro_Quit_at_Specific_Time-20120717-195546.jpg  Boom. Done.  No launchd. No cron. No AppleScript.  em(I had to use VLC instead of Mathematica because I don't have Mathematica installed.)/em  <answer56694> Here's why it doesn't work.  strongHIDIdleTime/strong is the number of seconds of inactivity, so unless the user do absolutely nothing during fifteen minutes, your script doesn't work.  Here's how to do this in AppleScript.  precodeset timeToQuit to 50700 -- time in seconds =14h05 set currDate to current date  -- do nothing on Saturday and Sunday or this script is launched after 14h05 if weekday of currDate is in {Saturday, Sunday} or (time of currDate) &gt; timeToQuit then return  delay (timeToQuit - (time of currDate)) -- wait  tell application "System Events" to exists process "Mathematica" if the result then quit application "Mathematica" /code/pre  <comment65098> You'll need to edit the launchd plist so it only executes on weekdays. I think this needs to be done via an array of dictionaries in the StartCalendarInterval key. <comment65135> Looks like a robust alternative. Very likely a better long term solution. I do want to get the Applesrcipt going to become more familiar with it if nothing else.  Still you make a intriguing suggestion. Thx <comment65140> I did find a work around the bares mention. Use my first Applescript (the shortest one), save it as a script rather than an app, then schedule it to run at specific times from iCal.  Works great. No muss no fuss.  Still I do want an Applescript solution so I can learn it better. <comment65142> I appreciate the solution. But why not do the whole thing in AppleScript?  Does it have some problem with reliability or robustness I should know about? <comment65143> Nice and a specific answer to the question. Thx for the help.  Also I very much appreciate the explanation for why my script didn't work. Thx.