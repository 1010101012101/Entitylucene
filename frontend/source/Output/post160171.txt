Install and import site-packages for Python 2 and 3 on Mac <body> I installed codebrew/code and then  precodebrew install python brew install python3 /code/pre  Install codeflask/code with codepip/code  precodepip install flask /code/pre  Try  precodepython -c 'import flask' /code/pre  But I got exception  precodeImportError: No module named flask /code/pre  Set and export codePYTHONPATH/code  precodeexport PYTHONPATH=$PYTHONPATH:/usr/local/lib/python2.7/site-packages /code/pre  So far so good. But when I tried to install a package with codepip3/code for Python 3, I got error message  precodeYour PYTHONPATH points to a site-packages dir for Python 2.x but you are running Python 3.x!      PYTHONPATH is currently: ":/usr/local/lib/python2.7/site-packages"      You should `unset PYTHONPATH` to fix this. /code/pre  How to use site-packages without the codePYTHONPATH/code trick to make both codepip/code and codepip3/code usable and both Python 2 and Python 3 able to import site-packages?  <answer160214> You should consider install pyenv for this.     strongpyenv/strong lets you easily switch between multiple versions of Python. It's simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well.   To install, just type:  precode$ brew install pyenv /code/pre  Add this to your code.bash_profile/code:  precodeecho 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt; ~/.bash_profile echo 'export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt; ~/.bash_profile echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.bash_profile /code/pre  Once installed use codepyenv/code to install python versions you need:  precode$ pyenv install -l/--list --&gt; List all available versions $ pyenv install 2.7.6 $ pyenv install 3.3.3 /code/pre  Run this command after you install a python version:  precode$ pyenv rehash /code/pre  You can specify multiple versions via codePYENV_VERSION/code at once. Let's say if you have two versions of 2.7.6 and 3.3.3. If you prefer 2.7.6 over 3.3.3,  precode$ pyenv shell 2.7.6 3.3.3 $ pyenv versions   system * 2.7.6 (set by PYENV_VERSION environment variable) * 3.3.3 (set by PYENV_VERSION environment variable) $ python --version Python 2.7.6 $ python2.7 --version Python 2.7.6 $ python3.3 --version Python 3.3.3 /code/pre  <answer206546> To use both emPython 2/em and emPython 3/em on OS X, one should avoid using the Mac pre-installed empython/em.   ol liInstall empython/em with emhomebrew/em:  precodebrew install python brew install python3 /code/pre/li liEdit code/etc/paths/code:  precode/usr/local/bin /usr/bin /bin /usr/local/sbin /usr/sbin /sbin /code/pre/li /ol  Make sure code/usr/local/bin/code comes before code/usr/bin/code. The former is use by emhomebrew/em and the latter is where the Mac pre-installed empython/em executable lives. Show your codePATH/code for a double check:  precode    $ echo $PATH     /usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/X11/bin /code/pre  Now I can install packages with empip2/em and empip3/em for 2 versions of Python separately.   <comment188321> I'm not really familiar with brew but if you type `python (anything)` at the system prompt I would expect that to run the built-in system Python - is that the same Python installation into which you've installed the flask module? <comment188687> I installed `pyenv`. Could you please give some examples of how to use it to solve my problem? <comment188729> Update my answer. <comment233396> Better use virtualenv which is now part of python <comment249410> My `/etc/paths` looks like you describe. Your answer did not work for me. <comment249421> @n1000 `echo $PATH; echo $PYTHONPATH`. What do you get? <comment336602> @Mark virtualenv only creates isolated virtual environments based on existing Python interpreter installations.  pyenv installs (and manages) new Python interpreters and environments, and can additionally wrap virtualenv or venv to manage virtual environments in a consistent manner.  pyenv has no dependency on Python itself, and can be used to bootstrap a Python environment on a “clean” machine.