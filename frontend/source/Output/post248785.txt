Mac DHCP Server <body> I often have the need to connect to devices directly through the ethernet port on my MacBook.   ul liWhen I am connected to a wireless network, I can share my connection to ethernet. However, the second, I loose the wireless connection, I loose connectivity to the devices. /li liI can set up a static IP on both the MacBook and the Device, but this is not very easy because I still have to make an initial connection to setup the static IP. /li /ul  Is there any way to setup a DHCP server on the ethernet port that works even if I am not connected to a network?   <answer248904> Based on my answer here: Using Server 5.0.15 to share internet WITHOUT internet sharing I provide a possibility to share internet with PF and dnsmasq (i.e. without Apple's OS X Server):  To get NAT working without using Internet Sharing you have to use a pf rule and create a plist to enable forwarding and load the pf rule. Additionally you have to set up a DNS/DHCP server: emdnsmasq/em.  Below I assume en0: the interface connected to the internet or a router and en1: the interface connected to the LAN. The router has the IP 192.168.0.1 and the netmask 255.255.255.0.  Use codeifconfig/code to get the device names.  strongPrepare the Mac gateway:/strong  ul liSet up the two interfaces en0 and en1 with fixed IPs and netmasks  Example:  en0: IP: 192.168.0.2 Netmask: 255.255.255.0 Gateway: 192.168.0.1 DNS: 8.8.8.8 and 127.0.0.1 Search Domains: home.orgbr en1: IP: 192.168.1.1 Netmask: 255.255.255.0/li liDisable emSystem Integrity Protection/em if El Capitan is installed/li liInstall Xcode Command Line tools/Xcode/li liInstall, set up and doctor brew/li liInstall dnsmasq:  precodebrew install dnsmasq /code/pre/li liSet up and configure dnsmasq  precodecp /usr/local/opt/dnsmasq/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf sudo mkdir -p /usr/local/var/lib/misc sudo touch /usr/local/var/lib/misc/dnsmasq.leases /code/pre  open /usr/local/etc/dnsmasq.conf with an editor and modify at least the following lines:  precode~ line 144 # 3) Provides the domain part for "expand-hosts" domain=home.org  ~ line 163 # don't need to worry about this. dhcp-range=192.168.1.50,192.168.1.100,255.255.255.0,12h  ~ line 243 # Always give the host with Ethernet address 11:22:33:44:55:66 # the name fred and IP address 192.168.0.60 and lease time 45 minutes dhcp-host=11:22:33:44:55:66,raspberry,192.168.1.70,12h **use the proper MAC of your raspberry here**  ~ line 536 # This defaults to a sane location, but if you want to change it, use # the line below. dhcp-leasefile=/usr/local/var/lib/misc/dnsmasq.leases /code/pre  You may configure much more - just check the config file and its descriptions.  precodesudo brew services start dnsmasq sudo chmod 644 /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist sudo chown root:wheel /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist /code/pre/li liCreate a file named emnat-rules/em in /private/etc/ with the following content  precodenat on en0 from en1 to any -&gt; (en0) /code/pre/li liCreate a shell script named emnat-pf.sh/em enabling forwarding and loading the pf rule. I saved it in /usr/local/bin:  precode#!/bin/sh  sysctl -w net.inet.ip.forwarding=1 sysctl -w net.inet.ip.fw.enable=1  #disables pfctl pfctl -d  sleep 1  #flushes all pfctl rules pfctl -F all  sleep 1  #starts pfctl and loads the rules from the nat-rules file pfctl -f /private/etc/nat-rules -e /code/pre/li liCreate a plist named emorg.user.natpf.plist/em with the following content and save it in /Library/LaunchDaemons/ to execute the above shell script at start-up:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Disabled&lt;/key&gt;     &lt;false/&gt;     &lt;key&gt;KeepAlive&lt;/key&gt;     &lt;dict&gt;         &lt;key&gt;SuccessfulExit&lt;/key&gt;         &lt;false/&gt;     &lt;/dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;org.user.natpf&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/usr/local/bin/nat-pf.sh&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;StandardErrorPath&lt;/key&gt;     &lt;string&gt;/tmp/org.user.natpf.stderr&lt;/string&gt;     &lt;key&gt;StandardOutPath&lt;/key&gt;     &lt;string&gt;/tmp/org.user.natpf.stdout&lt;/string&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  strongAll three files need a trailing empty line so don't simply copy the above code/lines./strong/li liModify ownership and file modes:  precodesudo chown root:wheel /private/etc/nat-rules sudo chown root:wheel /usr/local/bin/nat-pf.sh sudo chmod 755 /usr/local/bin/nat-pf.sh sudo chown root:wheel /Library/LaunchDaemons/org.user.natpf.plist /code/pre/li liLoad the launch daemon:  precodesudo launchctl load /Library/LaunchDaemons/org.user.natpf.plist /code/pre/li liReboot your gateway Mac. If everything works fine enable SIP again.  The file /tmp/org.user.natpf.stderr contains error messages. You may add a similar key to the file /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist to get potential error messages:  precode    ...     &lt;key&gt;StandardErrorPath&lt;/key&gt;     &lt;string&gt;/tmp/homebrew.mxcl.dnsmasq&lt;/string&gt;     &lt;key&gt;StandardOutPath&lt;/key&gt;     &lt;string&gt;/tmp/homebrew.mxcl.dnsmasq&lt;/string&gt;     ... /code/pre/li /ul  strongPrepare your Internet Router (if you have one)/strong  ul liAdd a static route: Network: 192.168.1.0 Netmask: 255.255.255.0 Gateway: 192.168.0.2/li /ul  strongPrepare your Raspberry/strong  ul liYou may have to reboot it./li /ul  hr  After setting all things up successfully you should have a reliable LAN with NAT, DHCP and DNS. You may even enter codeping raspberry/code with a proper result.  If you run into problems leave acomment.  <comment308393> I marked this question as unclear. It looks like three questions in one. Please specify exactly what you want and how the question is related to your Rasberry Pi question from July, 23! <comment308404> Related: [Using Server 5.0.15 to share internet WITHOUT internet sharing](http://apple.stackexchange.com/questions/228936/using-server-5-0-15-to-share-internet-without-internet-sharing). Instead of buying Apple OS X Server set up dnsmasq. <comment308416> This is so convoluted.  A DHCP server works without a network - it's useless, but it will work.  I don't see how losing WiFi means losing connectivity to Ethernet.  Finally, if you set up a DHCP server on either of your interfaces, how are you resolving the inevitable conflict with your *existing* DHCP server? <comment308580> @Allan It seems to be true that loosing the en0 (sharing Internet to the internal en1 via bridge100) dumps the connection between host1 and 2 via en1.  No DHCP is provided afterwards. <comment308671> @klanomath  I see what you are saying, but the difficulty I am having with this question is that it starts off with *wired devices* and then goes to wireless.  Even if DHCP (internet sharing) is turned off, how do those devices suddenly lose their lease?  That doesn't seem right.  Finally, his question then switches to setting up a DHCP server without a connection (is internet sharing involved or no?) <comment308818> I removed the wireless portion. That was off topic. I don't see where the other topic switch is. I simply wanted a DHCP server that works weather I have an internet connection or not.