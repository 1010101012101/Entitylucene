How to pass a file set as a variable from AppleScript to a Bash shell script <body> I've got a two part problem.   ol liI am trying to pass a variable from AppleScript to be used as a variable inside a bash shell script. I cannot figure out how to this work. I have read about concatenating the variable and the codedo shell script/code command with code&amp;/code inside AppleScript. But that doesn't really work with a longer script./li /ol  Here is the short AppleScript to select a file and (hopefully) pass it along to the shell as a variable.  precodetell application "Finder"     activate     choose file     set myFile to result as text end tell do shell script "/path/to/script.sh" /code/pre  And then the shell script itself:  precode#!/bin/bash while read lines do     echo ${lines##*:}     grep "string"  done &lt;$myFile | awk '!x[$0]++' |\ trans -b :en # this is where the second problem occurs /code/pre  This is a shortened version of the actual script but I think the intent is clear. I am unsure how to pass the codemyFile/code variable FROM Applescript to the shell.  ol start="2" liThe second problem is that the codetrans/code command (emwhich is a rather handy command line translator/em) uses the codegawk/code command which of course is installed along with the codetrans/code program itself. But when run from Applescript I get the error message: /li /ol     strongerror "/usr/local/bin/trans: line 4990: gawk: command not found" number 127/strong   I know that AppleScript needs the fullpath in order for this to work. But how do I provide the full path for a command embedded deep within nearly 5000 lines of code? Do I alter the code of the codetrans/code program itself to provide the full path to codegawk/code?  Also I realize that I could do the whole thing from within the shell and that a lot of this is adding complexity where none is needed. But I think it is still worthwhile to know how to do this.   Thanks for reading.  <answer243388> The first problem with the first script is you aren't using the strongset myFile/strong variable.  Here's a general guide to getting help:  Open Script editor - use the help menu to launch the AppleScript Language Guide and search for the command you have. In this case "do shell script"  That takes you to: https://developer.apple.com/library/prerelease/content/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/CallCommandLineUtilities.html  The example there shows how to set a variable for a host name and then call ping:  precodeset theHostName to "www.apple.com" do shell script "ping -c1 " &amp; theHostName /code/pre  So, in your case you'll need:  precodedo shell script "/path/to/script.sh"  &amp; myFile /code/pre  At that point, you'll likely run into path issues so running small snippets of code in the editor, looking at the result and iterating should get you to solutions as inevitable errors in path, parsing, logic crop up. I left a typo in the second "do shell script" example above - pay attention to spaces and quotes :-)  <answer243393> The first problem can be solved by exporting the path inside the emdo shell script/em part:  precodetell application "Finder"     activate     choose file     set myFile to result as text end tell do shell script "export MYFILE=" &amp; quoted form of myFile &amp; " ; /Users/user_name/bin/sh/echo_var_myfile.sh" /code/pre  In my example "echo_var_myfile.sh" is  precode#!/bin/bash echo $MYFILE &gt;&gt; /Users/user_name/echo_var_myfile.txt /code/pre  The executable bit has to be set:  precodechmod +x /Users/user_name/bin/sh/echo_var_myfile.sh /code/pre  The result is the path to the chosen file.  You mustn't add a second emdo shell script/em for the shell script because as soon as the first one runs it dies and no values are exported.  <comment299720> I'll take a stab at calling a script with arguments from AppleScript to bash. You'll probably want to chop this down into at least three different questions and possibly think about looking on Stack Overflow for more coding support. By doing the work to isolate each issue - you are more likely to get someone to explain and less likely to have a question closed as too broad. <comment299721> The reason I left the typo is you will have to think about file names and paths containing spaces to program this in general. Apple historically has Macintosh HD with a space whereas bash uses spaces to indicate a new variable - if your code doesn't expect, test and handle spaces - sticking to AppleScript to handle file might be easier. <comment300201> I'm getting this error `error "/bin/sh: /Users/username/echo_myfile.sh: Permission denied" number 126` from the applescript console. I tried adding `with administrator privileges password "my_password"`but I still get the same error message either way. I've enabled applescript editor in the privacy / security settings. I'm confused as to what is causing the issue. SIP protection maybe? <comment300206> Ah never mind. I forgot to make the script executable before running it. Oops..  _