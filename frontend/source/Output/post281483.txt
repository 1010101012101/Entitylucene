How to pause YouTube video via keyboard shortcut or from menu bar? <body> Is there a piece of software that allows one to pause (&amp; un-pause) a currently playing YouTube video (or, ideally, any online video/audio media), with a keyboard shortcut or a conveniently accessible button (e.g., a button that sits in the menu bar, located at the top-right of the screen)? The fewer necessary clicks, the better.  The key here is that I want the ability to pause the video in any application, that is, when Google Chrome is emnot/em the foremost application (e.g., TextEdit or Microsoft Word is the foremost application).   iOS has this shortcut built-in. If one swipes from the bottom of the screen to the top, media controls appear. These controls can manipulate any and all audio that originates in a Safari tab.  My web browser is Google Chrome.  subOS X El Capitan, version 10.11.6. /sub  hr  I would also be open to accomplishing this with an AppleScript (that can then be assigned to a key combination in FastScripts.app). But, I cannot imagine that such a complex task is possible via AppleScript.  <answer281567> This script will click on the Play/Pause button on a video playing in YouTube in Google Chrome, whether or not Google Chrome is visible.   precodeto clickClassName(theClassName, elementnum)     tell application "Google Chrome" to (tabs of window 1 whose URL contains "youtube")     set youtubeTabs to item 1 of the result     tell application "Google Chrome"         execute youtubeTabs javascript "document.getElementsByClassName('" &amp; theClassName &amp; "')[" &amp; elementnum &amp; "].click();"     end tell end clickClassName      clickClassName("ytp-play-button ytp-button", 0) /code/pre  This is the script version to work with Safari  precodeto clickClassName2(theClassName, elementnum)     tell application "Safari"         tell window 1 to set current tab to tab 1 whose URL contains "youtube"         do JavaScript "document.getElementsByClassName('" &amp; theClassName &amp; "')[" &amp; elementnum &amp; "].click();" in document 1     end tell end clickClassName2  clickClassName2("ytp-play-button ytp-button", 0) /code/pre  In an effort to give the OP A complete AppleScript solution, I have taken my original answer one step further..  strongUPDATE/strong  I finally figured it out.  I created an AppleScript application in Xcode.  Originally, my project only started with a one button window to control YouTube videos currently active in Chrome or Safari.  This project has grown a little bit into an application that contains several utilities.  This GIF shows the YouTube Pause button controlling YouTube in Chrome and Safari.  I linked the button actions to the AppleScript I originally wrote in script editor.  img src="https://i.stack.imgur.com/DS455.gif" alt="enter image description here"  This is a snapshot of the Xcode application Working in the AppDelegate.applescript file.  img src="https://i.stack.imgur.com/fCOc7.png" alt="enter image description here"  Here is the code in that file I created to make the program work.  precodescript AppDelegate      property parent : class "NSObject"       -- IBOutlets     property theWindow : missing value      to clickClassName(theClassName, elementnum) -- Handler for pausing YouTube in Chrome         if application "Google Chrome" is running then             try                 tell application "Google Chrome" to (tabs of window 1 whose URL contains "youtube")                 set youtubeTabs to item 1 of the result                 tell application "Google Chrome"                     execute youtubeTabs javascript "document.getElementsByClassName('" &amp; theClassName &amp; "')[" &amp; elementnum &amp; "].click();"                 end tell             end try         end if     end clickClassName      to clickClassName2(theClassName, elementnum) -- Handler for pausing YouTube in Safari         if application "Safari" is running then             try                 tell application "Safari"                     tell window 1 to set current tab to tab 1 whose URL contains "youtube"                     do JavaScript "document.getElementsByClassName('" &amp; theClassName &amp; "')[" &amp; elementnum &amp; "].click();" in document 1                 end tell             end try         end if     end clickClassName2      on doSomething:sender -- Calls the Chrome YouTube Handler         clickClassName("ytp-play-button ytp-button", 0)     end doSomething:      on doSomething14:sender -- Calls the Safari YouTube Handler         clickClassName2("ytp-play-button ytp-button", 0)     end doSomething14:      on doSomething2:sender -- Hide and or show the Menu Bar         tell application "System Preferences"             reveal pane id "com.apple.preference.general"         end tell         tell application "System Events" to tell process "System Preferences" to tell window "General"             click checkbox "Automatically hide and show the menu bar"         end tell         delay 1         quit application "System Preferences"     end doSomething2:      on doSomething3:sender -- Sets Display resolution to the second lowest setting (15 inch Built In Retina Display - MBP)         tell application "System Preferences"             reveal anchor "displaysDisplayTab" of pane "com.apple.preference.displays"         end tell         tell application "System Events" to tell process "System Preferences" to tell window "Built-in Retina Display"             click radio button "Scaled" of radio group 1 of tab group 1             click radio button 2 of radio group 1 of group 1 of tab group 1         end tell         quit application "System Preferences"     end doSomething3:      on doSomething4:sender -- Sets Display resolution to the second highest setting (15 inch Built In Retina Display - MBP)         tell application "System Preferences"             reveal anchor "displaysDisplayTab" of pane "com.apple.preference.displays"         end tell         tell application "System Events" to tell process "System Preferences" to tell window "Built-in Retina Display"             click radio button "Scaled" of radio group 1 of tab group 1             click radio button 4 of radio group 1 of group 1 of tab group 1         end tell         quit application "System Preferences"     end doSomething4:      on doSomething5:sender -- Sets Display resolution to the highest setting (15 inch Built In Retina Display - MBP)         tell application "System Preferences"             reveal anchor "displaysDisplayTab" of pane "com.apple.preference.displays"         end tell         tell application "System Events" to tell process "System Preferences" to tell window "Built-in Retina Display"             click radio button "Scaled" of radio group 1 of tab group 1             click radio button 5 of radio group 1 of group 1 of tab group 1         end tell         quit application "System Preferences"     end doSomething5:      on doSomething6:sender -- Sets Display resolution to the lowest setting (15 inch Built In Retina Display - MBP)         tell application "System Preferences"             reveal anchor "displaysDisplayTab" of pane "com.apple.preference.displays"         end tell         tell application "System Events" to tell process "System Preferences" to tell window "Built-in Retina Display"             click radio button "Scaled" of radio group 1 of tab group 1             click radio button 1 of radio group 1 of group 1 of tab group 1             delay 0.1             click button "OK" of sheet 1             quit application "System Preferences"         end tell     end doSomething6:      on doSomething7:sender -- Displays a dialog with your current IP         tell current application to display dialog (do shell script "curl ifconfig.io") with icon 2 buttons "OK" default button 1 with title "Your Current IP Address Is.." giving up after 5     end doSomething7:      on doSomething8:sender -- Shows hidden files in Finder         do shell script "defaults write com.apple.finder AppleShowAllFiles TRUE\nkillall Finder"     end doSomething8:      on doSomething9:sender -- Hides hidden files in Finder if they are showing         do shell script "defaults write com.apple.finder AppleShowAllFiles FALSE\nkillall Finder"     end doSomething9:      on doSomething10:sender  -- Brightness Highest         tell application "System Preferences"             reveal anchor "displaysDisplayTab" of pane "com.apple.preference.displays"         end tell         tell application "System Events" to tell process "System Preferences" to tell window "Built-in Retina Display"         set value of value indicator 1 of slider 1 of group 2 of tab group 1 to 12         end tell         quit application "System Preferences"     end doSomething10:      on doSomething11:sender -- Brightness Lowest         tell application "System Preferences"             reveal anchor "displaysDisplayTab" of pane "com.apple.preference.displays"         end tell         tell application "System Events" to tell process "System Preferences" to tell window "Built-in Retina Display"         set value of value indicator 1 of slider 1 of group 2 of tab group 1 to 0.1         end tell         quit application "System Preferences"     end doSomething11:      on doSomething12:sender -- Zoom         tell application "System Events"             key code 28 using {command down, option down}         end tell     end doSomething12:      on doSomething13:sender -- Dictation On/Off         tell application "System Events"             keystroke "x" using {option down}         end tell     end doSomething13:      on doSomething15:sender -- Enables Screensaver as Desktop background         tell application "System Events"             do shell script "/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine -background"         end tell     end doSomething15:      on doSomething16:sender -- Kills Screensaver Desktop background         try             tell application id "com.apple.ScreenSaver.Engine" to quit         end try     end doSomething16:       on applicationWillFinishLaunching:aNotification         -- Insert code here to initialize your application before any files are opened      end applicationWillFinishLaunching:      on applicationShouldTerminate:sender         -- Insert code here to do any housekeeping before your application quits           return current application's NSTerminateNow     end applicationShouldTerminate:      on applicationShouldTerminateAfterLastWindowClosed:sender -- Quits app when clicking red x          return TRUE      end applicationShouldTerminateAfterLastWindowClosed:  end script /code/pre  I updated the code so that the YouTube tab in Chrome doesn't need to be the visible or active tab when clicking the YouTube Pause Button created in Xcode  Here is a link to download the entire Xcode project  img src="https://i.stack.imgur.com/no9eB.png" alt="enter image description here"  strongWARNING: The desktop screen saver function will freeze the App.  After force quit and re-open, The desktop screensaver function to exit active screen saver will work./strong  strongAfterthoughts:/strong  I probably should have wrapped each of the AppleScript codes in "try" statements to avoid all sorts of error messages for those playing with this project,who don't have the same system and computer type that I do. (MacBook Pro 15" OS Sierra 10.12.6)  For the zoom function To work, it must be enabled in system preferences.  img src="https://i.stack.imgur.com/MEKji.png" alt="enter image description here"  For the toggling of “Dictation on/off” to function correctly, the short cut to enable dictation commands in system preferences must match the shortcut used in the script  img src="https://i.stack.imgur.com/YLJVc.png" alt="enter image description here"  precodeon doSomething13:sender -- Dictation On/Off     tell application "System Events"         keystroke "x" using {option down}     end tell end doSomething13: /code/pre  strongCurrently I am working on the ability to toggle between the application running windowed or menu bar only/strong  <comment354179> So, you're looking for a menu bar solution rather than just tapping the Space Bar? Or mouse-clicking on the Play/Pause button? <comment354181> @Monomeeth Please see my edit. I forgot to mention that Chrome is not the active application; the video plays in the background. So, to pause the video, I have to click on the Chrome window, click on the tab that contains the video, and only then can I use the space bar or a left-click to pause the video. <comment354249> you're looking for something like if i understood the question :  http://beardedspice.github.io/ <comment354273> @enzo I've downloaded BeardedSpice and it is _exactly_ what I am looking for. BeardedSpice is perfect for my needs. If you want to post this as an answer, I will happily accept it. Thanks! <comment354301> I actually wonder why Google hasn't made the keyboard Play/Pause button (F8) work for YouTube, given that it does work as expected when you visit Google Play Music in Chrome. <comment354309> Setting aside the `display dialing ...` you only need this one line of code `tell application "Google Chrome" to execute front window's active tab javascript "document.getElementsByClassName('ytp-play-button ytp-button')['0'].click();"`. Since the OP wants to "pause (& un-pause) a currently playing YouTube video", Google is already open and it could be minimized with the active tab playing and the aforementioned one line of code will act upon it. Therefore no need to activate the window or as in your code, use `launch` as this is what's stated in the documentation, continued in next comment... <comment354310> **"If an application is already running, sending it a launch command has no effect."**! Which bring us to the `clickClassName` _handler_, why is it even there, it's not at all necessary since `theClassName` and `elementnum` can be directly set as in the line quoted in the first comment. Having that handler is fine if you have more then one use of `getElementsByClassName`, however, in this case and as I see it you don't, unless you're going to build a program to do what BeardedSpice is already doing. Which of course would require considerable coding. Here's to superfluous coding! :) <comment354311> The handler is there and set up in the event that anybody wants to add to the code they can call it anywhere in the script now.  If I recall correctly I tried running the script without the launch command and it wound up bringing Chrome to the front window, whereas the launch command performed the action with Chrome hidden.. wait...  I think I tried it with an activate command first, Then used launch Instead.  I will go and try the code without either line now brb <comment354312> You were correct. The launch command was not necessary.  Once again thanks for pointing out my scripting flaws.  I have come to depend on you pointing them out LOL <comment354314> Forgot to say +1 anyway. :) <comment354316> This whole damn post has made me roll up my sleeves and fire up Xcode to see if I can figure out how the hell to make a button LOL <comment354833> This is a very clever solution! I decided to go with the third-party program, BeardedSpice, as previously suggested in a comment by enzo, because BeardedSpice works even if the Chrome window that contains the video is minimized, and this Chrome window will remain minimized. BeardedSpice also works with a litany of online media players (not only YouTube). But, I'm amazed that you figured out how to do this in AppleScript. <comment369997> It would be very nice if you would zip archive the Xcode Project Files and provide a download link for the archive. :) <comment369998> I'm just cleaning up the code a bit and I will do what you ask shortly  :) <comment370056> Thanks for sharing the project files. If I could up vote your answer again I would. :) <comment370065> It's all good. My pleasure bro.  Please keep in mind, I have only been scripting and coding for just over six months so this project I'm sure has tons of bugs.  More work definitely needs to go into the button elements, But there's definitely enough there to play around with and get a feel for what I did.