Issue with Homebrew when trying to parallelly install Python 3.x <body> I am trying to install Python v.3.x in parallel with the already installed Python v.2.7.10. I'm following the procedure explained in this tutorial which I found on YouTube. Despite it seems not an hard procedure, in my case, when I launch the codebrew doctor/code command, it returns:  precodeMacBook-Pro-di-Rodolfo:~ Rodolfo$ brew doctor Please note that these warnings are just used to help the Homebrew maintainers with debugging if you file an issue. If everything you use Homebrew for is working fine: please don't worry and just ignore them. Thanks!  Warning: "config" scripts exist outside your system or Homebrew directories. `./configure` scripts often look for *-config scripts to determine if software packages are installed, and what additional flags to use when compiling and linking.  Having additional scripts in your path can confuse software installed via Homebrew if the config script overrides a system or Homebrew provided script of the same name. We found the following "config" scripts:     /Library/Frameworks/Python.framework/Versions/2.7/bin/python-config     /Library/Frameworks/Python.framework/Versions/2.7/bin/python2-config     /Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7-config  Warning: Python is installed at /Library/Frameworks/Python.framework  Homebrew only supports building against the System-provided Python or a brewed Python. In particular, Pythons installed to /Library can interfere with other software installs.  Warning: Unbrewed header files were found in /usr/local/include. If you didn't put them there on purpose they could cause problems when building Homebrew formulae, and may need to be deleted.  Unexpected header files:     /usr/local/include/jack/control.h     /usr/local/include/jack/intclient.h     /usr/local/include/jack/jack.h     /usr/local/include/jack/jslist.h     /usr/local/include/jack/metadata.h     /usr/local/include/jack/midiport.h     /usr/local/include/jack/net.h     /usr/local/include/jack/ringbuffer.h     /usr/local/include/jack/session.h     /usr/local/include/jack/statistics.h     /usr/local/include/jack/systemdeps.h     /usr/local/include/jack/thread.h     /usr/local/include/jack/transport.h     /usr/local/include/jack/types.h     /usr/local/include/jack/uuid.h     /usr/local/include/jack/weakjack.h     /usr/local/include/jack/weakmacros.h  Warning: Unbrewed .pc files were found in /usr/local/lib/pkgconfig. If you didn't put them there on purpose they could cause problems when building Homebrew formulae, and may need to be deleted.  Unexpected .pc files:     /usr/local/lib/pkgconfig/jack.pc /code/pre  These warnings refer to two packages that I installed before Homebrew which are Python v.2.7.10, plus relative applications, and JACK, an API for audio routing between applications. Their installation has been made through two ordinary .pkg downloaded files. So, in order to avoid possible future incompatibilities, how could I solve the warnings above reported? Are there alternative solutions to a brief uninstalling and reinstalling procedure? If it could be useful, I am using all these applications on OS X 10.9 Mavericks.  <answer228221> codebrew doctor/code spits out empossible/em sources of error in your setup (see a description of some errors and reasons for which they are triggered on the Homebrew Github page, like this). If you aren't running into issues with your setup, you can usually ignore the messages (they're there to help Homebrew maintainers to solve issues, should you have them).   With this in mind, I think you can ignore the messages related to header files and code.pc/code files from Jack. If you want to clear these ones, you can remove your current installation and codebrew install jack/code, which will house all of those files in "Homebrew-approved" locations.   As far as the Python issues, it looks like you installed Python from a package downloaded from python.org. This resulted in your PATH being modified (either by you via their instruction, or as part of the install script) with a line in your code.bash_profile/code. When you type codepython/code at the command line, the system will execute whatever version of Python it finds first in the codePATH/code. In your case, it's the 2.7 version in code/Library/Frameworks//code. You can uninstall that version using the instructions here, replacing instances of code3.x/code with code2.7/code. Regardless of whether or not you keep that installation, you can ensure that codepython/code directs to the "Homebrew-ed" version by making sure that code/usr/local/bin/code occurs before code/Library/Frameworks/.../code in your codePATH/code.   In other words, remove the statement:  precodePATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"  export PATH /code/pre  from your code.bash_profile/code, or change the first line to:  precodePATH="${PATH}:/Library/Frameworks/Python.framework/Versions/2.7/bin" export PATH /code/pre  This second version is somewhat useless, as there are two versions of Python that will be encountered before the Frameworks version (the Homebrew one in code/usr/local/bin/code and the system version in code/usr/bin/code). If you're curious where all of your Python versions live, you can check with codewhich -a python/code, which lists all binaries named codepython/code in your codePATH/code.   <comment278041> What does your PATH variable look like? Generally, Homebrew installs to `/usr/local/bin`, and this has to appear before `/Library/Frameworks/...` in your PATH. `brew doctor` pulls up numerous warnings based on your system configuration, but just because there's a warning doesn't (always) mean there's a problem… or even that the warnings generated are related to your particular problem. <comment278208> @DustinWheeler, `echo $PATH` returns `/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin` Maybe, could it be better to uninstall the current Pyhton version, which is located in `/Library/Frameworks`, and reinstall it through Homebrew? <comment278211> DO NOT try removing the system Python (OS X requires it for various things, little good comes from removing it…). <comment278212> I don't think the Frameworks entry is a default inclusion in OS X, so that's being added somewhere. Check your `.bashrc` (or `.zshrc`, `.profile`, or whatever `rc` files your shell is sourcing at startup) for an entry like `export PATH='/Library/Frameworks/Python.framework/Versions/2.7/bin:$PATH'`. Change that line by either removing the Frameworks entry, or appending it (rather than prepending), like so: `export PATH='$PATH:/Library/Frameworks/Python.framework/Versions/2.7/bin'`. Hopefully, that takes care of your issue (now the brewed Python will be found before the system Python). <comment278215> I suppose the same, because during the past November I remember that I installed a new version of Python 2.x using a package downloaded from the official site. Anyway, I'm going to check the content of the files that you suggested! <comment278224> @DustinWheeler, I just have found `PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}" export PATH` inside `.bash_profile`. Should I remove those statements? <comment278231> If you don't plan on using the Python 2.6 install (and I don't think you want to), you can remove that whole line from your `.bash_profile` (safest to comment out and make sure everything works before deleting it completely). I'll write up an answer to your full question in a bit. <comment278242> This is the reason not to put Homebrew in /usr/local that directory is for things you install manually I would install Homebrew into another directory or use a package manager that uses its own prefix so does not interfere