How to remove unused MacPorts packages? <body> Whenever I install a program via MacPorts, it gets and installs lots of dependencies. When I uninstall said program, how do I make MacPorts recursively remove all unused dependencies with it?  <answer10155> The command to remove a port and its dependents is:  precodesudo port uninstall foo --follow-dependents /code/pre  However, if the port you are uninstalling has dependents it will not uninstall without the code-f/code (force) flag.  Of course you should start by reading over the MacPorts Guide specifically looking into the Uninstall guide section.  <answer10156> From the docs:     The uninstall action will uninstall an   installed port.      code%% sudo port uninstall vile Note/code      To also recursively uninstall the   ports that the given port depends on,   use the code‑‑follow‑dependencies/code flag.   This will not uninstall dependencies   that are marked as requested or that   have other dependents.      To recursively uninstall all ports   that depend on the given port before   uninstalling the port itself, use the   code‑‑follow‑dependents flag/code.      If a port is a dependency of another   installed port, uninstall will not   remove it unless you remove the   dependent port(s) first. To override   this behavior, use the -f (force)   switch. This will obviously break the   dependents. Don't force uninstall   ports unless you know what you are   doing.      code%% sudo port -f uninstall vile/code   Note the major caveat in the last paragraph. Dependencies are exactly that—dependencies—and different apps can (will) require the same dependencies.  <answer10158> I think the other answers, and the code--follow-dependents/code flag, do not do what you want. If you install codeA/code, and codeA/code requires codeB/code, then thanks to the wonderful package management systems, codeB/code will be installed for you. You can uninstall codeB/code and the code--follow-dependents/code flag will be aware of and remove codeA/code. But what if you uninstall codeA/code, which is more likely, because codeA/code is what you manually installed in the first place? In this case, codeB/code is left behind.  If you use fink, the debfoster package is designed to clean out your system and remove unused dependencies.     Debfoster will help you get rid of   packages (libraries for example) get   left behind on your system when the   program that required it was removed   or upgraded to a version that doesn't   have the dependency.   While codedebfoster/code will not work for MacPorts, there appears to be ports of codedebfoster/code, for example, codeportsfoster/code, although it seems to be discontinued...  Perhaps no solution currently exists for MacPorts.  <answer10190> MacPorts 1.9.0 added the codesqlite/code codeportdbformat/code and MacPorts 2.0.0 dropped the old codeflat/code format. The codesqlite/code port DB format is the default for new installations; old installations that were upgraded to 1.9.x will continue to use the codeflat/code formatsup1/sup. You can convert a 1.9.x codeflat/code system to the codesqlite/code format by upgrading to MacPorts 2.0 or by changing the codeportdbformat/code value in  code/opt/local/etc/macports/macports.conf/code and then issuing a emport/em command as root (e.g. codesudo port installed/code).  One of the features of the new format is that it keeps track of “requested” versus “unrequested” port installations. An unrequested port is one that was only installed because some other port depends on it. The codeleaves/code pseudo-portname expands to all the unrequested ports upon which no other installed port depends. You can use this to “clean up” unneeded ports even if you did not originally uninstall them with codesudo port uninstall --follow-dependencies portname/code (which will do what you want, but only if you remember to use it every time you uninstall something).  hr  You should examine your existing leaves before uninstalling any of them.  precodeport echo leaves /code/pre  Some common leaves (codeautomake/code, codegperf/code, codelibtool/code, codepkgconfig/code) are build-time dependencies of common ports, so you may want to “request” them (codesudo port setrequested port1 port2 port3 …/code) to avoid uninstalling them just to have to reinstall them later.  You can uninstall any remaining leaves quite easily:  precodesudo port uninstall leaves /code/pre  hr  Note: Before pruning your leaves, you may also want to uninstall old versions of ports that are no longer “active”. This may reveal a few more leaves (i.e. ports that are dependencies of ports that are installed, but inactive):  precodesudo port uninstall inactive /code/pre  hr  There are several sections in the MacPorts Guide that also describe the process of using codeleaves/code to uninstall unneeded ports.  <answer51045> I have written some scripts to automate port cleanup: https://github.com/vasi/macports-tools  The 'macportsfoster' script will output a list of all ports not required by anything in the requested-list, ordered such that 'port deactivate $(macportsfoster)' will remove all of them in one shot.  <answer58414> There's also a script in MacPorts' contrib directory called port_cutleaves you can run to remove unneeded dependencies: http://trac.macports.org/browser/contrib/. It'll ask you for each to-be-uninstalled port and allows keeping some, should you want to.  <comment10545> I don't think this answers the question. The OP wants to remove a program and the things that it requires, not remove a program and the things that require it. <comment10546> But isn't debfoster for deb files on Debian based system? How do I use it for MacPorts ports on Mac OS X? <comment10548> It has been ported to OS X and MacPorts and fink are based on the `apt` system which is used by Debian. I don't use MacPorts, but I did a `fink install debfoster` and it worked just fine for me. <comment10564> MacPorts is not related to the `apt` system and does not use `deb` files. The idea of MacPorts is related to FreeBSD ports or NetBSD pkgsrc, but the implementation is very different. <comment10566> OK. Thanks for the correction. Regardless, debfoster has been ported to work fine through `fink`. Further searching shows that it **does not** work with MacPorts, but there are clones, for ex, see `portsfoster` <comment10575> @mankoff: `‑‑follow‑dependencies` vs. `‑‑follow‑dependents`; the quoted passage describes both, but only the first applies to the question <comment57037> Thanks. This is quite helpful. It seems that you may have to run echo leaves and uninstall leaves back to back multiple times to make sure that all leaves are cleaned. I ran both commands at least 4 times before echo leaves return empty result <comment57041> Personally, I think ti is great that Philip explains both parameters, so we are fully aware of the parameters and their implications upon issuing such command <comment78224> You could say something like `while sudo port uninstall leaves; do :; done` to automate that. <comment125535> @ChrisJohnsen `sudo port uninstall --follow-dependents portname` is incorrect, because `--follow-dependents` will "recursively uninstall all ports that depend on the specified port". The correct option here is `--follow-dependencies`, which will "recursively uninstall all ports that the specified port depended on. This will not uninstall dependencies that are marked as requested or that have other dependents."