When MouseKeys are on, how do I click or move the mouse using AppleScript? <body> This post suggests that the command codetell application “System Events” to key code 37/code in AppleScript should move the mouse pointer one pixel down and to the left if run when MouseKeys are enabled. In OS X 10.7.2, however, it has the effect of generating a lowercase codel/code, and not moving the mouse at all.  Similarly, I had hoped codetell application “System Events” to key code 34 using control down/code would sent a control click at the current point of the mouse cursor, but that does not seem to be the effect.  Does anyone know a way that works in Lion on a mid-2011 MacBook Air to generate a click or control-click emat the current mouse location/em using AppleScript? It is okay if it relies on MouseKeys and/or UI scripting.  I would prefer if it did not involve installing compiled command line utilities, but if such utilities exist and are Lion compatible, that is far better than nothing.  <answer40349> Here is the script that I use to generate mouse clicks  precodetell application "System Events" to key code 88 tell application "System Events" to key code 87 /code/pre  By way of explanation I found I had to create a small mouse movement(88) before the mouse clicking(87) would work consistently. This relies on MouseKeys.  <answer40859> There are strongtons/strong of command line utilities to do this... and I'd reckon that going this route's your best bet... One benefit? is that these solutions emshould/em work, irrespective of whether or not "mouse keys" are on, right?  One of my emparticular faves/em is emcliclick/em     Cliclick” is short for "Command-Line Interface Click".  It is a a tiny shell / Terminal application that will emulate mouse clicks or series of mouse clicks (including doubleclicks and control-clicks) at arbitrary screen coordinates.      Hence, it is a tool for automating / scripting things that cannot otherwise be scripted (for instance, using AppleScript). Other than GUI Scripting, it does not require "Access for assistive devices" to be activated in the System Preferences.   Usage:   precode$ cliclick c m /code/pre  will "control-click" the current mouse location, but you can also specify the coordinates, shift-click, double-click, etc.  It can also return the coordinates of the mouse with a code-q/code argument, and return the mouse to the original location (when specifying coordinates) with the code-r/code argument.  In your case.. I guess you'd just...  codedo shell script "cliclick c m"/code  from inside your AppleScript / Workflow / whatever...  There's a GREAT post on this subject on MacWorld's site (emnée Mac OS X Hints/em) - that I've gleaned stronglots/strong of good info from, over the years.  If you don't care for my answer you will emsurely/em find a solution you DO like, there... there's hacks to make everyone smile - from an Automator freak = to a grumpy C diehard.  strongUpdate:/strong  There emdo seem/em to be some ways - to "do it" in AppleScript.. but they all seem to require knowing emwhere your mouse is/em... which i assume you don't.  So in an embarrassingly nerdy play for some rep... I wrote this..  precodedo shell script "python -c 'import sys, time; from Quartz.CoreGraphics import *;  def mouseEvent(type, posx, posy):   theEvent = CGEventCreateMouseEvent(None, type, (posx,posy), kCGMouseButtonLeft);   CGEventPost(kCGHIDEventTap, theEvent);  def mouseclickdn(posx,posy):   mouseEvent(kCGEventLeftMouseDown, posx,posy);  def mouseclickup(posx,posy):   mouseEvent(kCGEventLeftMouseUp, posx,posy);   ourEvent = CGEventCreate(None);   currentpos = CGEventGetLocation(ourEvent);   print currentpos[0];   print currentpos[1];   mouseclickdn(currentpos.x, currentpos.y);   mouseclickup(currentpos.x, currentpos.y)' " /code/pre  What the hell is it?  ol liAppleScript calls 'do shell script'./li liWhich then calls Python - with a command line argument (code-c/code) = that's been emescaped and cajoled/em = to cooperate with A/S./li liPython then "imports" CoreGraphics/Quartz, etc./li liAnd defines some Cocoa-API/PyObjC methods for "dealing with" the mouse./li liPython "figures out" where the mouse is./li liAnd clicks! (down, then up)/li liAs a bonus, it returns the coordinates of the mouse, 'if you were interested_. /li /ol  Works 100% and isn't even THAT slow. Hope you like it!  Edit:    Here is the BASH one-liner, for purists / A/S haters.  codeecho -e "import sys, time; from Quartz.CoreGraphics import *\ndef mouseEvent(type, posx, posy): theEvent = CGEventCreateMouseEvent(None, type, (posx,posy), kCGMouseButtonLeft); CGEventPost(kCGHIDEventTap, theEvent);\ndef mouseclickdn(posx,posy): mouseEvent(kCGEventLeftMouseDown, posx,posy);\ndef mouseclickup(posx,posy): mouseEvent(kCGEventLeftMouseUp, posx,posy);\nourEvent = CGEventCreate(None); currentpos = CGEventGetLocation(ourEvent); print currentpos[0]; print currentpos[1]; mouseclickdn(currentpos.x, currentpos.y);\nmouseclickup(currentpos.x, currentpos.y);" | python/code  <comment45670> What sort of keyboard do you have attached to your machine? What OS version? This doesn't work for me on a MacBook Air running Lion. <comment46308> Python! Wow, I hadn't thought of that. I'm eager to try this out. If I s/Left/Right/g, will it right click? <comment46309> Yes, you just need to swap `left` with `right` in the TWO kCGEvents.  You can also move it with something akin to `def mousemove(posx,posy): mouseEvent(kCGEventMouseMoved, posx,posy);` <comment46310> This is the best spending of 100 rep I've ever done. Wonderful, wonderful answer. +125 (10 for the upvote, 15 for the accept, and 100 for the bounty). <comment46312> @alexgray I made some formatting / whitespacing fixes for this post, mostly for sanity. To the best of my knowledge it is still syntactically correct for python. If this is not the case, please hit rollback on the [edit history page](http://apple.stackexchange.com/posts/40859/revisions). <comment46342> @Jason Salaz You're probably right..  The reason it was so crazy is that prior to "translating that to Applescript... I had tested it as a BASH one-liner..  I will edit the post to also show that implementation for people that prefer to script via traditional UNIX tools vs. AppleScript. <comment221982> tell application "System Events" to key code 88 tell application "System Events" to key code 87 Doesnt work when in Filemaker Pro on a field. I need to be able to generate a click on current field/highlighted field.