Running a bunch of commands in Terminal <body> I run the following commands for logkext a lot in my terminal and would like a know a way to automate the whole process.  ol liOpen terminal/li litype "sudo logKextClient"/li liType in administrator password/li lilogKextClient has its own password which I need to type now/li lilogKextClient is running now. prompt is codelogKextClient &gt;/code/li liI have to type a command here. "open"/li liThen I need to close a window that opens. Window is titled out_logFile.txt. Usually it opens in TextEdit. I don't mind force quitting it. As a copy of the file is saved on the desktop./li /ol  I'd like to be able to double click something and execute the above list of commands/actions flawlessly.  Many thanks for your suggestions.  <answer116984> You can use Automator to do this. The instructions are for Mavericks, but the main part is the same in all OSs.  ol liOpen Automator/li liClick "New Document"/li liSelect "Workflow"/li liClick "Record" (it may ask you to grant permission, click "Open System Preferences")/li liPerform all of the actions you want it to do/li liClick the stop button/li liSave the workflow/li /ol  Now, when you want it to perform those actions, simply open the workflow.  <answer117009> I suggests using AppleScript. I am not able to provide the actual code, only some idea.  a) Launch Terminal: http://smallbusiness.chron.com/use-applescript-launch-programs-48829.html  b) Telling Terminal to execute command: https://stackoverflow.com/questions/1870270/sending-commands-and-strings-to-terminal-app-with-applescript  c) Giving Terminal super user privilege: https://discussions.apple.com/message/23354237#23354237  I'm not sure if (b) and (c) can blend perfectly.  d) Close Text Edit window/document: https://stackoverflow.com/questions/10933711/how-to-open-close-and-close-the-dialogs-of-another-application-using-cocoa-or-a  <answer129039> I went through the exact same process back when I was playing around with logKext. The unix command you may want to explore is /usr/bin/expect.  It can get complex quickly, but basically what it does is act as a mediator between you and the programs you're running so it can provide answers that you would normally have to type. As an example, I built this script so I could automate the process of printing the logKext output. You should recognize all of the commands you'd normally type to logkextClient yourself...  precode#!/usr/bin/expect -f spawn logkextClient expect "logKext Password:" send "mylogkextpassword\r" expect "logKextClient &gt; " send "print\r" expect "logKextClient &gt; " send "quit\r" close /code/pre  Back in 10.5 and 10.6 this worked well for me for outputting the logKext print so I could pipe it into an email and send it. However, I was running this logged in as root to terminal, so it was simple.  strongTheoretically/strong, if you weren't logged in as root, you could instead say  precode#!/usr/bin/expect -f spawn sudo -k logkextClient expect "Password:" send “myrootpassword\r” expect "logKext Password:" send "mylogkextpassword\r" expect "logKextClient &gt; " send "print\r" expect "logKextClient &gt; " send "quit\r" close /code/pre  (note that I used codesudo -k/code intentionally to be consistent and require a password every time)  So you could use your favorite command line editor to create this script, do a codechmod +x/code to it and drag it to the dock for launching... strongTheoretically./strong  But I have been having problems in Mavericks getting /usr/bin/expect to behave properly with sudo, so this isn't working for me in other scripts like it should. And I don't have logKext installed at all anymore for testing anyway.  But I think this is the direction you may want to head.  Good luck!  <comment136723> Cool. I'll try it and get back to you in a minute. Meanwhile, will the saved automator file work on another computer? I sometimes work on my macbook on the road and the passwords can be different. <comment136724> @Freckles if your user password to authenticate for sudo privileges is different, you will need to re-record the workflow, as Automator is performing _exactly_ what you tell it to do. For example, if you type hghghghhg as your password and run the workflow on another computer, Terminal will say "password incorrect" because Automator typed in hghghghhg. <comment136726> @CompuKid.. Automator doesn't do what I desire or rather is not the suitable solution. The position of my desktop can be different at any given time of the day and "watch me do" fails. I'll explore automator and see what I can do. Otherwise, maybe a shell script should work? <comment136759> In addition to the answer above - if you want to automate anything with passwords (*what you usually should not!*) you might want to use [expect](http://www.linuxcommand.org/man_pages/expect1.html). You can get it with [homebrew](http://brew.sh/) or the other package managers. <comment136853> @Freckles yes, I think a shell script would work better. I didn't see that option.