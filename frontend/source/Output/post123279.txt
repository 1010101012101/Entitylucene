Add Static ARP Entry at Boot <body> I'm new to Mac OS X. On Linux I'd:  precodeappend to /etc/rc.local arp -i eth0 -s 192.168.1.1 00:00:00:00:00:00 /code/pre  I've figured out how to do it in Terminal:  precodesudo arp -s 192.168.1.1 00:00:00:00:00:00 /code/pre  But I'd like this to happen automatically preferably at boot. Also do I need to specify an interface when using codearp/code?  I read some other SE answers that mentioned launchd, but I have no idea what that is.  <answer123291> codeLaunchd/code is a daemon  that starts, stops and manages daemons, applications, processes, and scripts on OSX. It's intended to replace unix' cron.   Create a new code.plist/code file :   precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd &gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;local.arpentry&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/usr/sbin/arp&lt;/string&gt;         &lt;string&gt;-s&lt;/string&gt;         &lt;string&gt;192.168.1.1&lt;/string&gt;         &lt;string&gt;00:00:00:00:00:00&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;Nice&lt;/key&gt;     &lt;integer&gt;10&lt;/integer&gt;     &lt;key&gt;KeepAlive&lt;/key&gt;     &lt;false/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  Then move your new code.plist/code to code~/Library/LaunchAgents/code so it will loaded every time you log into your session and therefore run you command everytime you log in.   <answer127678> I struggled a lot with Matthieu's solution since it caused two problems on my Mac OS X 10.9.2:  ol liJobs in the codeLaunchAgents/code folder are executed using the current user. However codearp/code needs to be executed using coderoot/code./li liThe codearp/code-command is executed too early, when the network is not up. But the network is needed by the codearp/code-command./li /ol  The first problem can be solved by storing the code.plist/code file in codeLaunchDaemons/code instead of codeLaunchAgents/code. This will ensure that the command is executed as root.  The second problem is a bit tricky. Since codelaunchd/code does not handle dependencies, we have to write our own shell script which first waits until the network is up an then execute the codearp/code command. (See here)  strongSo here is my solution:/strongbr First create/open the plist file using a text-editor:  precodesudo nano /Library/LaunchDaemons/local.arpentries.plist /code/pre  Then paste the following content:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;local.arpentries&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/usr/local/bin/arpentries&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;KeepAlive&lt;/key&gt;     &lt;false/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  Set owner etc.:  precodesudo chown root:wheel /Library/LaunchDaemons/local.arpentries.plist sudo chmod 0644 /Library/LaunchDaemons/local.arpentries.plist /code/pre  Now create/open the shell script using a text editor  precodesudo nano /usr/local/bin/arpentries /code/pre  Paste the following:  precode#!/bin/bash  # max number of retries retries=10  # include Startup commons . /etc/rc.common  # wait for network to become available CheckForNetwork  while [ "$NETWORKUP" != "-YES-" ] do         retries=$((retries - 1))         if [ $retries -le 0 ] ; then                 exit 1         fi         sleep 2         NETWORKUP=         CheckForNetwork done  # set the static arp entries arp -s 192.168.1.111 xx:xx:xx:xx:xx:xx  exit 0 /code/pre  And the rights:  precodesudo chmod 0744 /usr/local/bin/arpentries  /code/pre  <comment143978> Thanks! Is there a GUI for plists or something to help me make them next time? <comment143980> ~/Library/LaunchAgents doesn't exist but /Library/LaunchAgents does <comment143986> Jobs in `~/Library/LaunchAgents` will be run whenever *you* log in. This directory does not exist on a fresh installation of OSX and has to be created manually. Jobs in `/Library/LaunchAgents` will be run whenever *any*  user logs in. [LaunchControl](http://www.soma-zone.com/LaunchControl) is a GUI for launchd/launchctl. <comment143987> For those reading this in the future I found this: http://ptone.com/cron2launchd/ <comment143994> Xcode has an integrated GUI to edit/create `.plist` files. <comment144310> I've put it in /Library/LaunchAgents as I want to to happen on boot, but it doesn't seem to work. arp -a doesn't show the entry. Do I need to chown it as root? <comment144313> arp -s requires root/sudo so I'm thinking you can't run on login? <comment144327> If you want to run it as root, you might want to add it as a LaunchDaemon in `/Library/LaunchDaemons`. Daemons as run as Root whereas Agents are run as the user. <comment144340> hmm, the arp entry isn't present on boot. Are there logs I can check that might tell me what is going on? <comment144341> So I used the console and found "dubious ownership on file". Googling now will report back on a solution. <comment144343> sudo chown root:wheel filename <comment144344> I'll report back when I restart if that fixed it. <comment144711> damn, didn't fix it <comment144713> com.apple.launchd[1]: (local.arpentry[81]) Exited with code: 1 <comment144715> I've found this http://books.google.com.au/books?id=A54wEFXr5KUC&lpg=PA237&ots=K6adg7d-md&dq=static%20arp%20entry%20boot%20mac%20os%20x&pg=PA237#v=onepage&q=static%20arp%20entry%20boot%20mac%20os%20x&f=false does anyone know if `/Library/StartupItems` still exists in Mavericks? <comment145126> I've worked this down to: arp: writing to routing socket: File exists <comment145488> changed to `arp -S ip mac` now getting arp: writing to routing socket: No such process <comment149879> You can also use crankd to set the arp entries each time the network changes. One thing to note is that the PyMacAdmin-download from googlecode throws an exception (at least on my Mac OS). Using the source code and the install-script from Github works fine however. <comment150047> Oh wow, I've been struggling with this still. I was going to try with LaunchAgents and sudo NOPASSWD. I'll give this a go.