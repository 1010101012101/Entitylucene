How do I execute a bash script that requires root privileges? <body> I have this script lines from my ISP:  precodesudo bash echo "plugin L2TP.ppp"&gt;&gt;/etc/ppp/options  echo "l2tpnoipsec"&gt;&gt;/etc/ppp/options /code/pre  It works if I paste line by line into Terminal. I want to create a *.command file and run it by double-clicking. But all I get is password prompting and then empty bash window. The resulting "options" file is empty.  I tried this:  precode#!/bin/bash  echo "plugin L2TP.ppp"&gt;&gt;/etc/ppp/options  echo "l2tpnoipsec"&gt;&gt;/etc/ppp/options /code/pre  I get:      /etc/ppp/options: Permission denied   I think I need to use some command to get root privileges from inside bash.   <answer49758> Take the script that you created:  precode#!/bin/bash  echo "plugin L2TP.ppp"&gt;&gt;/etc/ppp/options  echo "l2tpnoipsec"&gt;&gt;/etc/ppp/options /code/pre  Save it in your home directory, or a 'scripts' directory inside your home directory, as l2tp.sh. Allow it to be executed(write this command in Terminal):  precodechmod 700 ~/path/to/l2tp.sh /code/pre  To execute the file using sudo (root privileges):  strongMethod #1./strong In Terminal type:  precode$ sudo ~/path/to/l2tp.sh /code/pre  strongMethod #2./strong Create a file run_l2tp.command with this contents:  precodesudo ~/path/to/l2tp.sh /code/pre  Allow it to be executed:  precodechmod u+x run_l2tp.command /code/pre  When you double-click run_l2tp.command and enter the password the l2tp.sh file will be executed with root privileges.  strongMethod #3/strong If for security purposes, you don't want any user of your system to be able to run the script, but rather you want to be prompted for an administrative password, an alternate solution would be to save the shell script and then use the program strongAppleScript Editor/strong to create an AppleScript.  The AppleScript would be a one-liner, saying codedo shell script «your script's name here» with administrator privileges/code. Save that script as an Application. Then, when you click it, it will ask you for an administrator password, then run the shell script with administrator privileges.  Obviously, replace code«your script's name here»/code with the path to your script.  Some notes:  ul liOn UNIX like systems, ~ is short for "my home directory"./li liChmod 700 will make the file executable only by you. For more information: see this Wikipedia page./li lityping 'sudo' before a command will execute the program using root privileges. Be careful when doing this, bad things can happen if you're not sure what you're doing./li liObviously you can omit the /path/to if you saved this script directly in your home directory./li /ul  <answer49760> Save this:  precode#!/bin/bash  echo "plugin L2TP.ppp"&gt;&gt;/etc/ppp/options  echo "l2tpnoipsec"&gt;&gt;/etc/ppp/options /code/pre  to your Desktop in a file named codescript.sh/code.  Open a Terminal window and type:  precodesudo bash ~/Desktop/script.sh /code/pre  Enter your password when prompted and all the commands in the file will run with super user privledges.  <answer49768> If for security purposes, you don't want any user of your system to be able to run the script, but rather you want to be prompted for an administrative password, an alternate solution would be to save the shell script and then use the program strongAppleScript Editor/strong to create an AppleScript.  The AppleScript would be a one-liner, saying codedo shell script «your script's name here» with administrator privileges/code. Save that script as an Application. Then, when you click it, it will ask you for an administrator password, then run the shell script with administrator privileges.  Obviously, replace code«your script's name here»/code with the path to your script.  <answer49850> The problem's that when you do it from the command line, what you're doing is starting codebash/code under codesudo/code, and then sending those next two commands to codebash/code, not the original shell.  (the sign being that you need to codeexit/code twice)  When you do it in a script, the codebash/code command never exits, so the next two commands never run.  It's not as elegant as the AppleScript solution, but if you're going to do this as a script from the command line, the equivalent would be:  precode#!/bin/sh -- sudo bash -c 'echo "plugin L2TP.ppp"&gt;&gt;/etc/ppp/options'  sudo bash -c 'echo "l2tpnoipsec"&gt;&gt;/etc/ppp/options' /code/pre  If we didn't need the io redirection (the code&gt;&gt;/code bit), we could just call the command directly via codesudo/code without needing the codesudo sh -c/code trick. (and note that I had to quote the argument to codesh -c/code to keep it from running the echo as root, but the file appending as the original user.)  It emwill/em work as a code.command/code file from the Finder, but it'll bring up a terminal window, asking for your password, and if entered correctly, will run the commands.  (assuming you haven't recently authenticated for codesudo/code ... if you have, it'll run through without prompting)  <comment56959> When you created your script did you execute it by typing sudo ./ispscript.command? Also, bash scripts usually have a .sh suffix: ipscript.sh. <comment56971> passing the script (with whatever permissions it may have) to an executable with the correct permissions is elegant. <comment56987> FYI This script should only need to be run once. Also, if you keep running the script as is, it's APPENDING  to the file. The options file is going to continue to grow in size the more you run it(the script). This may or may not cause issues with what ever is reading the options file. <comment56992> This is identical to the sudo method. With sudo you're required to have an Admin level account. What you're suggesting takes a script and wraps it in a script. <comment56994> Why did you revert my edits? In my question I was asking about double-clicking without running terminal and manually typing. And edited your answer appropriately. <comment56995> Reapplied your changes. <comment56997> No, it's not identical. This takes a Terminal script and wraps it in a GUI script -- so the user never has to wade into terminal, and is prompted for a password in the familiar Mac GUI and not in a Terminal window. For a technical user, this may appear to be the same thing; for most end users, not having to use Terminal makes a world of difference. <comment57000> You referenced "for security purposes", if it was for usability you should have mentioned that. Regardless, more solutions are better then none. <comment57010> The most usable solution for the end user would be to create a binary that can call setuid and run as superuser and invoke the script file so the end user just double-clicks something and the desired result happens. There are security holes the size of Oklahoma in that solution, however, so this is a security enhancement on that one. <comment57027> Thanks for your efforts, upvoted <comment57029> @geotavros I missed that you wanted it click-able only. Opps. Appreciate the vote though. <comment57030> @DanielLawson, I've created a text file with contents: do shell script "~/vpn_enable.sh" with administrator privileges. Then renamed it to .app file. When I double-click it I get: You can't open the application AppleScritpTest.app because the Classic environment is no longer supported. <comment57033> Sorry, edited my answer. An AppleScript isn't a text file with a `.app` extension; it's compiled using **AppleScript Editor** found in `/Applications/Utilities` <comment57035> @dennis.hempler, thanks I know this. Actually I will run this script often. Because USB-modem device needs this file to be blank to operate properly. So before inserting USB-modem I erase the file and before connecting to wired internet I write those options in the file. <comment57039> @DanielLawson, thanks. This is probably the most elegant solution. Upvoted your answer and merged it into Aaron's answer as method #3.