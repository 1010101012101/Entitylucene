Export keychains <body> in order to migrate to an Ubutun, I would like to export all my password, to for example a CSV file.  In Keychain Access, I found export menu, but it's alway disabled, even when the access is unlocked.  What should I do?  <answer137251> The codesecurity/code binary will retrieve items from the keychain from the command line, so you could script that in python to dump the contents systematically. It really depends upon what format you want the data and how you will use it going forward.  Copy / paste is also a decent option if you know how long you care to implement a new solution and whether you need to learn / search for an existing program or library that will dump the contents to your chosen format.  The export items menu is for public and/or private key export for which there are industry standard file formats to both encode and protect the data as appropriate when stored to the filesystem for exchange and transport. That function is documented briefly in the help for Keychain Assistant.  <answer137253> Keychain Export function is for ITEMS, not for the entire keychain. It also wont let you export most of the Items- that is when you will see the grayed out Export function.  To copy keychain from one mac to another use  ul limigration assistant/li lior do it manually by copying key chain file located in the ~/Library/Keychains//li /ul  Open the Key Chain Access on new computer and use the Add key chain  <answer137336> This is just about how I did it a many years ago, this is that script update for Yosemite 10.11.5 - but I've not tested it.   ol liA script that saves each item in the Keychain to text:   precodesecurity dump-keychain -d login.keychain &gt; keychain.txt /code/pre/li liA second AppleScript item that clicks on the "Allow" button that the 1st script triggers when reading the item out of the KeyChain.  [Edit: July 2016] This has been updated to 10.11.5 note as some have reported locking up their Mac with the 0.2 delay, I've limited the script to only process 200 results at a time, thus if you have 1050 keychain items, you'll need to run this script 6 time in the ScriptEditor, you'll also have to allow the ScriptEditor to be enabled in the Accessibility section in the security preferences in :  precodetell application "System Events"     set maxAttemptsToClick to 200     repeat while exists (processes where name is "SecurityAgent")         if maxAttemptsToClick = 0 then exit repeat         set maxAttemptsToClick to maxAttemptsToClick - 1         tell process "SecurityAgent"             try                 click button 2 of window 1             on error                 keystroke " "         end try     end tell     delay 0.2   end repeat end tell /code/pre/li /ol  Then the link/yosemite update above also has a ruby conversion step from the text file to CSV, Good luck!   ShreevatsaR points out in the comments that this ruby conversion only covers "internet passwords" and not "application passwords".  This is due to the aim of the script is to export the "internet passwords" into the application code1Password/code.  And here's a stack overflow question and answer along the same lines  The System.keychain is here:   precodesecurity dump-keychain -d /Library/Keychains/System.keychain &gt; systemkeychain.txt /code/pre  To enable AppleScript to interact with dialogue box the System Preferences - Security &amp; Privacy Preferences - Privacy Tab, Accessibility Option must have "Script Editor.app" enabled img src="https://i.stack.imgur.com/CGUzc.png" alt="System Preferences -&gt; Security &amp; Privacy Preferences -&gt; Privacy Tab, Accessibility Option highlighted"  <answer189268> @MichaelStoner's answer is a good start, but it fails on OS X 10.10.3 Yosemite, with his AppleScript code reporting codeSystem Events got an error: Canâ€™t get group 1 of window 1 of process "SecurityAgent". Invalid index/code.  After playing around a little bit, the following solution worked for me:  precodetell application "System Events"     repeat while exists (processes where name is "SecurityAgent")         tell process "SecurityAgent"             keystroke " "         end tell         delay 1     end repeat end tell /code/pre  You will have to click on the "Allow" dialog after starting this. This code will take a while, but I advise against lowering the delay ("delay 0.2" made me force-poweroff my Mac). Just get a cup of coffee.  <answer200894> As of OSX 10.10.3 there is a new way do auto-accept (I ran into issues during an upgrade path)  Bash functions (added to either code.profile/code or code.bash_rc/code files)  precode## At the terminal when you start getting the prompts, type `Accepts` and press enter function Accepts () { osascript &lt;&lt;EOF   tell application "System Events"     repeat while exists (processes where name is "SecurityAgent")       tell process "SecurityAgent" to click button "Allow" of window 1       delay 0.2     end repeat   end tell EOF }  ## At the terminal when you start getting the prompts, type `Accepts YourUsername YourPassword` and press enter function AcceptWithCreds () { username="$1" password="$2"  [ -z "${password}" ] &amp;&amp; return 1  osascript 2&gt;/dev/null &lt;&lt;EOF     set appName to "${username}"     set appPass to "${password}"     tell application "System Events"         repeat while exists (processes where name is "SecurityAgent")             tell process "SecurityAgent"                 if exists (text field 1 of window 1) then                     set value of text field 1 of window 1 to appName                     set value of text field 2 of window 1 to appPass                 end if             end tell       tell process "SecurityAgent" to click button "Allow" of window 1             delay 0.2         end repeat     end tell EOF echo 'Finished...' }` /code/pre  And use this script to dump your keyring (codesudo ./dump.sh/code)  precode#!/bin/bash # Run above script in another window  security dump-keychain -d login.keychain &gt; keychain-login.txt security dump-keychain -d /Library/Keychains/System.keychain &gt; keychain-system.txt /code/pre  <answer214034> I wrote a python script that converts the keychain dump to an Excel file and thought I share it with you. I choose Excel over CSV or TSV because a lot of people have it installed and it just works by double clicking on the file. You may of course modify the script to print any other format. I did this on OS X 10.11 El Capitan, but should work on older OS' as well.  ol liSince I do not like storing my passwords plaintext on my hard drive, I created an encrypted container using the Disk Utility app. Simply open Disk Utility (press kbdcmd/kbd+kbdSpace/kbd, type "disk"). In the app, press kbdcmd/kbd+kbdN/kbd for new image, change the name to SEC, change encryption to 256-Bit AES and save it under SEC in a directory of you choice. Then mount the volume by doubleclicking on the file (or using Disk Utility)./li liCreate a new file named keychain.py in the secure container and paste the code below./li liNow open Terminal.app and change directory to the mounted encrypted volume: codecd /Volumes/SEC/code/li liWe need the python package manager for installing the Excel module (you will be prompted for your password): codesudo easy_install pip/code/li liWe need to install the Python Excel module: codesudo pip install xlwt/code/li liNow export the passwords using one of the other answers to this question. I just did codesecurity dump-keychain -d &gt; keychain.txt/code and spam clicked on the Allow button while holding the mouse with my other hand./li liThe last step is to convert the txt file to a readable Excel sheet using the python script: codepython keychain.py keychain.txt keychain.xls/code/li /ol  .  precode#!/usr/bin/env python  import sys import os import re import xlwt  # Regex to match both generic and internet passwords from a keychain dump regex = re.compile(     r"""     keychain:\s"(?P&lt;kchn&gt;[^"]+)"\n                  # absolute path and file of keychain     version:\s(\d\d\d)\n                            # version     class:\s"(?P&lt;clss&gt;(genp|inet))"\n               # generic password or internet password     attributes:\n     (\s*?0x00000007\s&lt;blob&gt;=(?P&lt;name&gt;[^\n]+)\n)?    # name     (\s*?0x00000008\s&lt;blob&gt;=(?P&lt;hex8&gt;[^\n]+)\n)?    # ? only used at certificates     (\s*?"acct"&lt;blob&gt;=(?P&lt;acct&gt;[^\n]+)\n)?          # account     (\s*?"atyp"&lt;blob&gt;=(?P&lt;atyp&gt;[^\n]+)\n)?          # account type ("form"), sometimes int     (\s*?"cdat"&lt;timedate&gt;=[^"]*(?P&lt;cdat&gt;[^\n]+)\n)? # datetime created     (\s*?"crtr"&lt;uint32&gt;=(?P&lt;crtr&gt;[^\n]+)\n)?        # vendor key with four chars like "aapl"     (\s*?"cusi"&lt;sint32&gt;=(?P&lt;cusi&gt;[^\n]+)\n)?        # ? always null     (\s*?"desc"&lt;blob&gt;=(?P&lt;desc&gt;[^\n]+)\n)?          # description     (\s*?"gena"&lt;blob&gt;=(?P&lt;gena&gt;[^\n]+)\n)?          # ? always null except one rare cases     (\s*?"icmt"&lt;blob&gt;=(?P&lt;icmt&gt;[^\n]+)\n)?          # ? some sort of description     (\s*?"invi"&lt;sint32&gt;=(?P&lt;invi&gt;[^\n]+)\n)?        # ? always null     (\s*?"mdat"&lt;timedate&gt;=[^"]*(?P&lt;mdat&gt;[^\n]+)\n)? # datetime last modified     (\s*?"nega"&lt;sint32&gt;=(?P&lt;nega&gt;[^\n]+)\n)?        # ? always null     (\s*?"path"&lt;blob&gt;=(?P&lt;path&gt;[^\n]+)\n)?          # path     (\s*?"port"&lt;uint32&gt;=(?P&lt;port&gt;[^\n]+)\n)?        # port number in hex     (\s*?"prot"&lt;blob&gt;=(?P&lt;prot&gt;[^\n]+)\n)?          # ? always null     (\s*?"ptcl"&lt;uint32&gt;=(?P&lt;ptcl&gt;[^\n]+)\n)?        # protocol but is blob ("http", "https")     (\s*?"scrp"&lt;sint32&gt;=(?P&lt;scrp&gt;[^\n]+)\n)?        # ? always null except one rare cases     (\s*?"sdmn"&lt;blob&gt;=(?P&lt;sdmn&gt;[^\n]+)\n)?          # used for htaccess AuthName     (\s*?"srvr"&lt;blob&gt;=(?P&lt;srvr&gt;[^\n]+)\n)?          # server     (\s*?"svce"&lt;blob&gt;=(?P&lt;svce&gt;[^\n]+)\n)?          # ? some sort of description     (\s*?"type"&lt;uint32&gt;=(?P&lt;type&gt;[^\n]+)\n)?        # some blob: "iprf", "note"     data:\n     "(?P&lt;data&gt;[^"]*)"                               # password     """, re.MULTILINE | re.VERBOSE)  # Dictionary used by the clean function (Apple is not always right about the # types of the field) field2type = {      "name": "blob",     "hex8": "blob",     "acct": "blob",     "atyp": "simple",     "cdat": "timedate",     "crtr": "uint32",     "cusi": "sint32",     "desc": "blob",      "gena": "blob",     "icmt": "blob",     "invi": "sint32",     "mdat": "timedate",     "nega": "sint32",     "path": "blob",     "port": "uint32",     "prot": "blob",     "ptcl": "blob",     "scrp": "sint32",     "sdmn": "blob",     "srvr": "blob",      "svce": "blob",     "type": "blob",     "data": "simple",     "kchn": "simple",     "clss": "simple" }  def clean(field, match):     value = match.group(field)     if not value or value == "&lt;NULL&gt;":         # print null values as empty strings         return ""     if field2type[field] == "blob":         # strip " at beginning and end         return value[1:-1]     elif field2type[field] == "timedate":         # convert timedate to the iso standard         value = value[1:-1]         return value[0:4] + "-" + value[4:6] + "-" + value[6:8] + "T" + \             value[8:10] + ":" + value[10:12] + ":" + value[12:14] + "Z" + value[16:19]     elif field2type[field] == "uint32":         # if it really is a hex int, convert it to decimal         value = value.strip()         if re.match("^0x[0-9a-fA-F]+$", value):             return int(value, 16)         else:             return value     else:         # do nothing, just print it as it is         return value  def print_help():     print "Usage: python keychain.py INPUTFILE OUTPUTFILE"     print "Example: python keychain.py keychain.txt keychain.xls"     print "  where keychain.txt was created by `security dump-keychain -d &gt; keychain.txt`"     print "  When dumping the keychain, you have to click 'Allow' for each entry in your"     print "  keychain. Position you mouse over the button and go clicking like crazy."     print "Keychain 0.1: convert an Apple Keychain dump to an Excel (XLS) spreadsheet."  # Check for correct parameters if len(sys.argv) != 3:     print_help()     sys.exit(1) elif len(sys.argv) == 3:     if not os.path.isfile(sys.argv[1]):         print "Error: no such file '{0}'".format(sys.argv[1])         print_help()         exit(1)  # Read keychain file buffer = open(sys.argv[1], "r").read() print "Read {0} bytes from '{1}'".format(len(buffer), sys.argv[1])  # Create excel workbook and header wb = xlwt.Workbook() ws = wb.add_sheet("Keychain") ws.write(0, 0, "Name") ws.write(0, 1, "Account") ws.write(0, 2, "Password") ws.write(0, 3, "Protocol") ws.write(0, 4, "Server") ws.write(0, 5, "Port") ws.write(0, 6, "Path") ws.write(0, 7, "Description") ws.write(0, 8, "Created") ws.write(0, 9, "Modified") ws.write(0, 10, "AuthName") ws.write(0, 11, "AccountType") ws.write(0, 12, "Type") ws.write(0, 13, "Keychain")  # Find passwords and add them to the excel spreadsheet i = 1 for match in regex.finditer(buffer):     ws.write(i, 0, clean("name", match))     ws.write(i, 1, clean("acct", match))     ws.write(i, 2, clean("data", match))     ws.write(i, 3, clean("ptcl", match))     ws.write(i, 4, clean("srvr", match))     ws.write(i, 5, clean("port", match))     ws.write(i, 6, clean("path", match))     ws.write(i, 7, clean("desc", match))     ws.write(i, 8, clean("cdat", match))     ws.write(i, 9, clean("mdat", match))     ws.write(i, 10, clean("sdmn", match))     ws.write(i, 11, clean("atyp", match))     ws.write(i, 12, clean("clss", match))     ws.write(i, 13, clean("kchn", match))     i += 1 wb.save(sys.argv[2])  print "Saved {0} passwords to '{1}'".format(i-1, sys.argv[2]) /code/pre  <comment163071> There is no other way than script it ? Ok, I will look to this binary, but... a so many basic need, just to have something like a CSV ... <comment163078> If you can edit your post to specify what new OS and that cvs is a format you like, I would possibly have some more ideas for you. As asked, it is very vague... <comment163111> thanks, But I said "to an other OS"... I want to leave OS X... <comment163113> Thanks for edit and clarity. The other os was misleading. So you want it as a text file then (CSV)? <comment163114> yes, a csv while be ok... <comment163187> thanks you very much! It's work fine. I just don't know why I can't export my System.keychain. But most keychain there are also on login.keychain. <comment163192> See update for that keychain item path, but it might ask for username and password for each item, which may be the Allow script can be modified to provide. <comment163195> Thinks. I have no competence in AppleScript. I have juste few password in this keychain, so I will type my main password many time. <comment174497> If you get no output, try running the command within the same directory as the keychain. <comment217177> @ShreevatsaR there are 20 forks of that ruby script, if you find one that addresses your issue would you either comment here or edit my answer to add the new link? Good luck. <comment217847> @MichaelStoner: Actually, I later realized the main issue is that the Ruby script got only things of type "internet password", not the "application password"s... I had only a few of them, and copied them manually from the keychain.txt (which did have them). So I didn't investigate variants of the Ruby script. <comment224394> The AppleScript did not work for me on OS X 10.10.3 Yosemite, claiming "System Events got an error: Canâ€™t get group 1 of window 1 of process \"SecurityAgent\". Invalid index". <comment251655> Could someone update the script to work on Yosemite and also for the system keychain which requires you to type in user name and password for every item? <comment251660> @oarfish https://gist.github.com/TaergLee/50934395f0dafbb7f7cb TaergLess looks to have done this, but I have not run, nor read all of the code. <comment301280> Wow, this looks really thorough. I'm going to give it a shot, though I still need a solution for the secure notes and app passwords... :(  This should get me a long way though. <comment301291> Found this excellent break-down of secure notes: http://stackoverflow.com/questions/22370552/keychain-services-secure-notes <comment301293> Now I just need to figure out how to create an export of an rtfd that includes an embedded image. I have a few notes with passwords in screen-caps. <comment301323> This is great! When I ran it I got `execution error: System Events got an error: osascript is not allowed assistive access.` at the command line. The easiest way I found to deal with this was to paste the AppleScript code into the Script Editor app and run it from there. <comment302261> AppleScripts not working on 10.10.5 <comment302800> @MarcelWaldvogel updated script fixed "System Events got an error..." should now work, do both your way and the update to the index <comment302803> The space - keystroke " "  only works if you have System Preferences - Keyboard Preferences - Shortcuts tab, bottom option "Full Keyboard Access" and then selected "All controls" <comment315020> This worked for me under OS X El Capitan 10.11.6. Make sure not to copy the last character (backtick) from the script. The `osascript is not allowed assistive access` error can be avoided by allowing your Terminal app in System Preferences = Security & Privacy = Accessibility. <comment346968> Does anyone know where to find the `Local Items`? They don't seem to have an associated `.keychain` file. <comment367741> Awesome addition to this, plus one and thx