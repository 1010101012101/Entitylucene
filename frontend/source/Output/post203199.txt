Find executables associated with Homebrew Formula <body> Some Homebrew formulas have names that do not correspond with any of the installed commands (e.g., codecoreutils/code, codespeech-tools/code), other formulas provide an command that matches up with the name, but also provide others alongside it (e.g., codelua/code).  Is there a simple way to determine what commands are associated with a given formula? Ideally as a codebrew &lt;arg&gt;/code command embefore/em installing, but even a shell script I could use post-install would help.   I thought I might be able to figure this info out with a codebrew link --dry-run &lt;formula&gt;/code, but that typically just gives me a warning that the formula is already linked (even with code--overwrite/code or code--force/code added to the command). I don't want to have to unlink each time I want to see the commands, so this route doesn't seem helpful.   <answer203206> In general - no.  Homebrew doesn't install package receipts which is the manner in which current tools decide what is installed where in an exhaustive and correct fashion.  Sometimes you can use codebrew list/code to check things, but I've found the best way to check on homebrew is via github - which publishes the source code for all the tools and all the packages.  My favorite search engine even has ! commands to make it easy to search github:  precode!gh homebrew lua /code/pre  Google does a decent job as well ranking homebrew fairly high as well as github  precode!g homebrew lua /code/pre  Also, codebrew info/code and codebrew home/code often give you a direct link to the project source to check if your suspicions are correct. As you surmise, the real check is to uninstall / reinstall and watch. Not fun, but effective.  <answer203253> As bmike's answer points out, aside from digging through the projects source to determine what executables they install, there's no good way to determine what commands come with a given formula before installing it.  After a formula is installed, running  precodebrew unlink --dry-run formula | grep "$(brew --prefix)/bin" /code/pre  is a workable option now that code--dry-run/code is available for codebrew unlink/code.   Before that was added I wrote an external command called codebrew executables/code that still has some benefits over the above (mainly in formatting and handling some links a bit differently). I'll include a simplified (and probably non-working, due to missing some variable assignments) version of it here:  precodeversion_in_use=$(echo "$brew_info" | grep "$HOMEBREW_PREFIX.*\*$" | sed -e "s|.*$formula/\([^ ]*\).*|\1|i")  cd "$HOMEBREW_CELLAR/$formula/$version_in_use"  for dir in `find . -type d -mindepth 1 -maxdepth 1 -name "bin"`; do     for file in `find "$dir" -type f -o -type l -perm +111`     do             filename=$(basename $file)             echo $filename     done         done /code/pre  In short, it pulls the list of executables out of code$(brew --prefix)/$formula/$version_in_use/bin/code. The version on my GitHub is a bit more fleshed out, including some added ability to identify/indicate when there are commands that link to each other in this bin directory.  <answer213058> I wrote Homebrew-command-not-found to do the reverse thing: get a formula from an executable. There isn’t any easy way to get a formula’s executables as other answers pointed out; so I installed emall/em Homebrew formulae and recorded all executables in one file.  You can find it here. Each formula has its own line with the following format:  precode&lt;name&gt;: &lt;executable-1&gt; &lt;executable-2&gt; &lt;...&gt; /code/pre  It’s thus as easy as codegrep ^git: executables.txt/code to get the executables installed by the codegit/code formula.  The file is updated every day and covers 20k+ commands for 5k+ formulae from the core and the official taps. Note however that some formulae install different executables when you use specific options; I don’t support them here.  <comment251578> Check out https://github.com/Homebrew/homebrew-command-not-found/blob/master/executables.txt <comment333961> Could you point me out to a documentation about those `!` commands?