Auto Generating and Printing PDF Files From Markdown? <body> I'm looking for a way to automatically have my computer generate and print PDF files from a folder full of markdown files.    So, every morning at 5AM I'd want my computer look at my /markdown-files folder, create a bunch of PDFs to go into a /PDF-folder and also run the printer so the pages are waiting for me.    There are a couple of requirements that might make this a bit tricky:  ol liThe PDFs should have the file title at the top of each page/li liThe page needs to be A4/li liThe lines should be double spaced at least./li /ol  I used to use WKPDF to generate PDFs, but it no longer works on Yosemite.    <answer169263> I have not used WKPDF, but its author suggests a method by which it can be made to work in Yosemite:  https://github.com/plessl/wkpdf/wiki/How-to-install-on-MacOS-10.10-Yosemite  <answer169266> You can do this with Markdown.pl and htmldoc(1), both of which can be installed with Homebrew.  The basic flow for making a PDF is:  precodemarkdown foo.markdown | htmldoc --no-toc --no-title -f foo.pdf - /code/pre  As for your filename-per-page, you coul incorporate echo to add it as an HTML element:  precodeecho $(markdown foo.markdown) "&lt;p&gt;foo&lt;/p&gt;" | htmldoc --no-toc --no-title -f foo.pdf - /code/pre  And for printing, the lpr(1) command will send a file to your default printer.  Tying this altogether:  precodefor filename in `ls *.markdown`; do     echo $(markdown "$filename") "&lt;p&gt;$filename&lt;/p&gt;" |          htmldoc --no-toc --no-title -f "${filename}.pdf" -     lpr "${filename}.pdf" done /code/pre  <answer169267> You could use PhantomJS. It's not as straight forward as WKPDF for PDF generation since it has a wider range of features, but works fine.  <answer169373> Here's a solution that uses LaTeX to generate the PDF. If you have long-form text in the Markdown files and would like to optimize for typographic readability (and I suspect you do), LaTeX tends to do a much better job compared to HTML engines.  It uses codepandoc/code as an intermediary between Markdown and LaTeX, and also produces the PDF for you.  h3Main script/h3  precode#!/bin/bash  md-dir="MARKDOWN_DIRECTORY_HERE" pdf-dir="PDF_DIRECTORY_HERE"  cd "${md-dir}" for filename in *.md; do     target-pdf="${pdf-dir}/${filename}.pdf"     pandoc "${filename}" -t latex --latex-engine=xelatex -V geometry=a4paper -V fontsize=11pt -V listings -V header-includes="\usepackage{fancyhdr}\pagestyle{fancyplain}\cfoot{}\rhead{\thepage}\lhead{\texttt{\lstinline/${filename}/}}" -V header-includes="\linespread{2.0}" -o "${target-pdf}"     echo "produced ${filename}.pdf"     lpr "${target-pdf}" done /code/pre  h3Required setup/h3  ol liGet codepandoc/code from Homebrew: codebrew install pandoc/code/li liInstall the minimal version of LaTeX called BasicTeX/li /ol  h3Testing if you got the setup correct/h3  You should be able to run in a new Terminal window (with bash)  precodeecho "test" | pandoc -t latex --latex-engine=xelatex -o test.pdf /code/pre  and get a valid codetest.pdf/code document with just the word "test"  h3Customizations/h3  There's a lot you can tweak with the LaTeX settings from the command line  ol litweak the line spacing by changing the code\linespread{2.0}/code multiplier/li liadjust markings by replacing codegeometry=a4paper/code with codegeometry=a4paper,left=XXmm,right=XXmm,top=XXmm,bottom=XXmm/code/li lichange font size by chaining code11pt/code to either 10pt or 12pt, and everything should scale accordingly/li lichange the main font by adding another argument to codepandoc/code: code-V mainfont="NAME OF FONT"/code. You can also set codemonofont/code this way./li /ol  <comment198776> RVM: command not found. <comment198783> Thanks for your help.  I've played with htmldoc and can see how to get it to do what I want, but you'll have to forgive me, because I'm not sure where to *put* that piece of code to actually have it run at a particular time. <comment198784> Edit: Hazel to the rescue! <comment198787> Great! I would have suggested a cronjob, but [Hazel](http://www.noodlesoft.com/hazel.php) is much friendlier. <comment198789> There is still one problem: this loop just prints the first file over and over, not all the files once.        for filename in `ls *.md`;         do         echo $(markdown $filename) "$filename" | htmldoc --no-toc --no-title --fontspacing 3 --size a4 -f ${filename}.pdf -lpr ${filename}.pdf  done <comment198799> I think I just realized that this is my own dumb fault for having pipes in my file names. <comment198801> That assessment of your filename character choices is correct. <comment198866> I can see there is still a problem: instead of creating and printing 'my filename.pdf' it's trying to do 'my.pdf' and 'filename.pdf' <comment198927> Put double quotes around `$filename` wherever it is used as an argument to a command to overcome this. It should then also work with pipes in the name. <comment199356> Isn't this answer an example of ["you should never parse `ls` output"](http://mywiki.wooledge.org/ParsingLs)?  So instead of `\`ls *.markdown\`` should be just `*.markdown` (with a [glob](https://en.wikipedia.org/wiki/Glob_(programming)) *).  PS Also, it's a better practice to use `$(command)` instead of backticks `\`command\``. <comment199528> It would be more maintainable to just `\input{my-template-file}` from the command line. <comment204955> Very interesting.  I'll play around with the option.  Thank you. <comment260267> Running the test yields: "pandoc: xelatex not found. xelatex is needed for pdf output." <comment260268> Attempting to install html doc on el capitan yields: htmldoc: This formula either does not compile or function as expected on OS X versions newer than Yosemite due to an upstream incompatibility. Error: An unsatisfied requirement failed this build. <comment260318> @CGPGrey Yeah, building it from [source (left sidebar)](https://www.msweet.org/projects.php?Z1) failsâ€¦but changing a single line makes it work.  On line 1385, cast that 0 to a boolean: `cinfo.quantize_colors = (boolean)0;`.  Then with a `./configure && make`, it builds & runs for me (the output program is htmldoc/htmldoc) <comment287637> Just want to make sure: this is *after* installing the BasicTeX package as described above, right? Are you able to run "xelatex" or "pdflatex" normally from the terminal?