get name of file from file path using AppleScript <body> I am trying to get the name of file using AppleScript with the following code:  precodetell application "Finder"     set filename to name of "/Users/mainuser/Desktop/Test/shot.png" // should return  shot.png     display dialog filename end tell /code/pre  I am getting an error saying:  precodeerror "Canâ€™t get name of \"/Users/mainuser/Desktop/Test/shot.png\"." number -1728 from name of "/Users/mainuser/Desktop/Test/shot.png" /code/pre  What I am doing wrong?  <answer236600> Using the emfile pathname/em from your question, here is the AppleScript emcode/em that should work.  precodetell application "Finder"     set fileName to name of (POSIX file "/Users/mainuser/Desktop/Test/shot.png" as alias)     display dialog fileName end tell /code/pre  A more direct way of the above scenario is:  Syntax:  precodeset fileName to name of (info for "/path/to/file") display dialog fileName /code/pre  Example (using the pathname in your question):  precodeset fileName to name of (info for "/Users/mainuser/Desktop/Test/shot.png") display dialog fileName /code/pre  The shortest way to display the emname/em of a emfile/em from its empathname/em in a emdialog box/em is:  Syntax:  precodedisplay dialog name of (info for "/path/to/file") /code/pre  Example (using the pathname in your question):  precodedisplay dialog name of (info for "/Users/mainuser/Desktop/Test/shot.png") /code/pre  <comment289569> Really awesome answer! Just a little subquestion. I am struggling with the reasoning behind using (POSIX file "url" as alias). What exactly does POSIX do and why use alias at the end? <comment289576> You do not necessarily need to use the first form I presented. The second form. `set fileName to name of (info for "/path/to/file")` works without the need of `POSIX file` and `as alias`. Because the comments have a 600 character limit it is difficult to explain the differences and reasons why one might use one way over the other and this is better left to the User educating themselves via reading the [AppleScript Language Guide PDF](https://applescriptlibrary.files.wordpress.com/2013/11/applescriptlanguageguide-2013.pdf) and other books on AppleScript. The short answer is because it works. :)