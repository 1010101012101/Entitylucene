How do Skim's bookmarks work? <body> I'm using Skim to add bookmarks my pdfs and have some questions:  ul liSkim seems to have it's own bookmark manager with folders and bookmarks that allow you to open bookmarks inside pdfs that aren't currently opened. Where are these bookmarks and folders stored on my machine? If it's in a codeplist/code is it possible to get xml/plain text format?/li liI'm able to access the bookmarks by going to the main menu and clicking codeBookmarks/code and then manually searching through a drop-down menu. Is it possible to search this? Is there a hotkey to access search?/li liI want to be able to search Skim's bookmarks via a ruby/bash/applescript without Skim being open. Is this possible? Can you point me to an example?/li /ul  <comment344038> According to [another answer](http://apple.stackexchange.com/a/202548/180817) `cmd + shift + /` searches bookmarks. <comment344039> They're stored in: `$HOME/Library/Preferences/net.sourceforge.skim-app.skim.bookmarks.plist` <comment344040> How would I read the `plist` in a `bash` or `ruby` script? <comment344102> The `net.sourceforge.skim-app.skim.bookmarks.plist` file is a binary Property List file of which much of the information is hex encapsulated as shown by the output of `defaults read net.sourceforge.skim-app.skim.bookmarks`. However, if you pipe it to `grep`, e.g. `defaults read net.sourceforge.skim-app.skim.bookmarks | grep 'label\|type'` you'll see what could be considered useful information for formulating search queries upon. To get relevant fully qualified pathnames, you'd have to parse the `"_BDAlias" = hex_formatted_data` output to get that. <comment344106> Do you know of a reliable way to parse it? I used `xxd -r -p` and got `Untitled:Users:max:Dropbox:work:tmp:pdfminer_testing:agile.pdf` but it also with some very messy output <comment344112> Haven't really looked into how I'd parse it other then having just manually seen what the hex data contained. However, if you choose to parse it with `xxd` and want the output to be printable characters you could use the `tr` command, but would have to _pipe_ from `xxd` to e.g. `textutil` first as `tr` couldn't handle the output directly from `xxd`. E.g. `xxd -r -p'hex_data' | textutil -convert txt -stdin -stdout | tr -cd '\10\11\40-\176'` You can modify the octal values, e.g. `'\10\11\40-\176'` to what you feel is appropriate after doing some sampling to see what works for you.