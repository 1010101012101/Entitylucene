Custom shell script can't be found <body> I am running MacOSX Sierra and have codehomebrew/code installed. So I'm trying to create codecompress-slide.sh/code script under code~/bin/code. In order for me to get rid of doing symlinks I added the code~/bin/code in my path so my path looks like this now: code/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:~/bin/code  I've set the path under code/etc/paths/code and here is how it looks like:  precode/usr/local/bin /usr/bin /bin /usr/local/sbin /usr/sbin /sbin ~/bin /code/pre  But when I try codewhich compress-slide.sh/code nothing is found, it doesn't give me the path I'm expecting which is code~/bin/compress-slide.sh/code I just wish to use this script when I'm on different directories. Also I made sure that I'm the owner of the script and that it has executable permission.  precode-rwxr-xr-x  1 dummyuser  dummyuser   135B Dec 28 18:13 compress-slide.sh /code/pre  Here's the content of my script, just a simple command to test it works;  precode#!/usr/bin/env bash  echo 'test' /code/pre  Here is my codehomebrew/code config:  precodeHOMEBREW_VERSION: 1.1.5 ORIGIN: https://github.com/Homebrew/brew HEAD: 9cd5a21b473f0271b162bbe7f77f7d1468c0cfa1 Last commit: 2 weeks ago Core tap ORIGIN: https://github.com/Homebrew/homebrew-core Core tap HEAD: 797542c1bf61c4cfc58c7a52a2534d154cc584d1 Core tap last commit: 8 days ago HOMEBREW_PREFIX: /usr/local HOMEBREW_REPOSITORY: /usr/local/Homebrew HOMEBREW_CELLAR: /usr/local/Cellar HOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com CPU: octa-core 64-bit ivybridge Homebrew Ruby: 2.0.0-p648 Clang: 8.0 build 800 Git: 2.10.1 =&gt; /Applications/Xcode.app/Contents/Developer/usr/bin/git Perl: /usr/bin/perl Python: /usr/bin/python Ruby: /usr/bin/ruby =&gt; /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby Java: 1.8.0_60, 1.7.0_79 macOS: 10.12.2-x86_64 Xcode: 8.2.1 CLT: N/A X11: N/A /code/pre  Is this because of codeHomebrew/code conflicting with my setup? Has anyone encountered this as well?  <answer266526> I would sym link the scripts you place out of the path to /usr/local/bin so you don't need to reason with ~ expansion in .dot files for your shell.  It's possible to have a durable way to ensure your enviroment is set up to handle ~ - but I'm a fan of having absolute paths there to avoid problems when you codesu/code to other users and have environment cross contamination as well as issues like you face.  This isn't anything about codehomebrew/code - purely about codebash/code or whatever shell you are using.  <answer266675> Your issue has nothing to do with being lazy. The path_helper application prevents tilde and variable expansion. Here's a modified code/private/etc/paths/code file.  precode/usr/local/bin /usr/bin /bin /usr/sbin /sbin ~/bin $HOME/local/bin /code/pre  The codepath_helper/codeapplication constructs a string to be evaluated in code/private/etc/profile/code using the current PATH variable along with those directories listed code/private/etc/paths/code and files within code/private/etc/paths.d/code.  precode/usr/libexec/path_helper -s PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:~/bin:\$HOME/local/bin"; export PATH; /code/pre  The double quotes around the PATH variable prevent tilde expansion and the backslash before the dollar sign prevent variable expansion of $HOME.   <comment334165> No, it's because you have a `~` in your PATH. Please use `/Users/YOURUSERNAME/bin` instead. <comment334166> also - apologies for basically saying "do the thing you said at the top you didn't want to do" by adding sym links - but they're really useful for the case you mention above. My suspicion is Patrix or another will get you a proper answer rather than my advice to punt on this one. : - ) <comment334263> @patrix Thank you very much! I just spelled it out and it works! <comment334266> Thank you very much! I think should be stop being lazy and spell out the path if I can. <comment334272> Just a follow up question, how would you sym link an entire folder for example the `/Users/username/bin` to `/usr/local/bin` as you were proposing? I know I can do `ln -s /Users/username/bin/* /usr/local/bin` but the problem with this approach is I'd have to do it every single time whenever I have new script? <comment334277> No way to do that, you'd have to make a script to iterate over the folder and link / clean up as needed. In that case, fixing the path is probably worth the pain for that case. <comment334324> hmm if that's the case then I'd probably stick with including my home `bin` in the path. I can deal with `.dot` files in it assuming they are just bunch of `.DS_Store` ones. Thank you again for your help. <comment334374> Please don't add the answer to the question. <comment334555> Awesome I think this answers the question directly. Thanks! <comment334689> Well done and excellent answer cutting to the direct cause of the path pain. +lots of votes I hope.