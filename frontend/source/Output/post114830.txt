What options does Terminal pass to bash on startup? <body> In the Terminal preferences, I'm able to configure the Terminal to "Open shells with:" - "Command (complete path):" code/opt/local/bin/bash/code.  What options is the terminal passing when invoking this command?  Terminal appears to run each shell as a login shell, so I'm assuming code--login/code is being passed?    Is there any Apple documentation that gives an overview of exactly what is being run when you open a terminal window?  <answer114840> The command:  precode/opt/local/bin/bash /code/pre  essentially instructs Terminal.app to load an interactive bash shell (the path for your example is likely the macports version). Initially when you open Terminal it starts a login shell session (in bash). Login shells can read files such as code~/.profile/code, code~/.bash_profile/code that setup environment variables for your session, so what is being run is mostly indicative of what is configured within those files.   In general, by default when opening a bash shell from Terminal these things would be run:  Processes  precodebash login /code/pre  Open Files and Ports  precode/bin/bash /usr/lib/dyld /private/var/db/dyld/dyld_shared_cache_x86_64 /dev/ttys000  /code/pre  More Information:     Official Bash Website      Apple Man Page: bash(1)   <answer114854> No arguments are passed. The terminal runs codelogin -pfq $USER $PROGRAM/code, which in turn runs the specified program. codelogin/code signals to the program that it is a login shell by prepending a code-/code to codeargv[0]/code (the program name).  For the default shell, Terminal actually does something different. It invokes codelogin -pfl $USER /bin/bash -c exec -la bash /bin/bash/code, where the code-l/code option to login tells it emnot/em to run the command as login shell, while the code-l/code option to codeexec/code tells it to run its argument as a login shell (by adding the dash). The reason while this is done is that codelogin/code also sets the current directory to the user's home directory when it runs a program as a login shell, while codeexec/code doesn't. This allows the Terminal to open shells in the same current directory as the current tab, without codelogin/code setting it back to the home directory.  <comment135589> When I change the terminal preferences to `/opt/local/bin/bash`, how does `login -pfq $USER $PROGRAM` change?  Just so I understand your first paragraph, do you mean Terminal runs `login -pfq cwilson /opt/local/bin/-bash`? <comment137080> No, the terminal runs `login -pfq cwilson /opt/local/bin/bash`. Then login executes bash, but passes `-bash` in `argv[0]`.