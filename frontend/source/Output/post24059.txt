I can't get gcc to compile DevIL library <body> I'm writing an OpenGL application in C++ using Xcode 4 on Lion. To load textures, and keep the application platform independent, I plan on using DevIL.  To install DevIL on my mac I ran ./configure and noticed gcc was no longer on the $PATH. I created a symlink from /Developer/usr/bin/gcc-4.2 to /usr/bin. Then I re-ran ./configure, it now finds gcc but fails with this:  precodechecking for gcc... gcc checking for C compiler default output file name...  configure: error: C compiler cannot create executables /code/pre  I'm not sure what this means:  ul liShouldn't I have symlinked gcc? /li liDo I need another gcc?/li liIs the problem DevIL related?/li /ul  Thanks in advance  <answer24076> As for your first question: The cleaner alternative to symlinking would be to add /Developer/usr/bin to your $PATH, so the other utilities needed for compilation can be found. That's easy to do:  precodeexport PATH=$PATH:/Developer/usr/bin /code/pre  You could put that into ~/.profile so the path get set each time you open a terminal window.  And I'm certainly not a GCC/LLVM expert, but to me it seems like DevIL's configure script does expect a different version of gcc, one which doesn't expect an argument to the -V switch. My best bet would be to ask around on the DevIL developer's mailing list, as there probably are people who have been confronted with the same problem.  <comment26934> On my Mac Xcode did link gcc-4.2 into /usr/bin (I did upgrade from Xcode 3.x and SL) <comment26998> Thank you for answering @Kiezpro. I added '/Developer/usr/bin' to the PATH, that does indeed seem like a better alternative. I did however find another problem: trying  to compile a simple Hello World in C, the compiles fails to find stdio.h ... How can I fix this? Maybe the original problem has nothing to do with DevIL but with a badly configured compiler?! <comment27118> Actually, there's a similar thread on Stack Overflow: http://stackoverflow.com/questions/558803/how-to-add-a-default-include-path-for-gcc-in-linux  So setting  C_INCLUDE_PATH=/Developer/usr/include seems to solve that problem. Maybe instead of trying to set up your compilation environment on the command line, it would be easier to import the project into XCode and compile it from there?