What is "secd"? <body> I wonder what codesecd/code process does under OSX Yosemite. I am pretty sure I have seen this process running in earlier MacOS versions, but I don't remember it gobbling up all the available memory so boldly...  I have three computers running Yosemite, each with a different config. All three have been up for a duration of three days to one week. Here is a run down of what codesecd/code has achieved:  ul liOn MacBookAir 2011 with 4GB of memory, 700MB allocated to codesecd/code/li liOn iMac 2008 with 6GB of memory, 2GB allocated to codesecd/code /li liOn iMac 2011 with 12GB of memory, 4GB allocated to codesecd/code/li /ul  On all three computers codesecd/code is the largest process in memory (larger than codekernel task/code) and I suspect it plays a role in the slowdown I have recently experienced with the arrival of Yosemite. I know for sure that the process expands in memory to inordinate sizes and frees up memory when I need it somewhere else. The only issue is that it is not as quick in freeing up memory and most of the time performance suffers before the process realizes it has to retreat.   My search around the web didn't come to a solid conclusion as for what the process is, and why it should be so huge. I guess I am not the only one experiencing this. Any tip is appreciated.    As suggested below codesecd/code has to do with Apple Keychain. Here are the files and ports that the process keeps open when active (on MacBookAir):  precode/ /usr/libexec/secd /Users/.../Library/Keychains/7285EFCF-9AF6-53DD-BE44-DA1F59F96620/keychain-2.db-shm /usr/share/icu/icudt53l.dat /usr/lib/dyld /private/var/run/diagnosticd/dyld_shared_cache_x86_64 /dev/null /dev/null /dev/null count=2, state=0x2 /Users/.../Library/Keychains/7285EFCF-9AF6-53DD-BE44-DA1F59F96620/keychain-2.db /Users/.../Library/Keychains/7285EFCF-9AF6-53DD-BE44-DA1F59F96620/keychain-2.db-wal /Users/.../Library/Keychains/7285EFCF-9AF6-53DD-BE44-DA1F59F96620/keychain-2.db-shm /Users/.../Library/Keychains/7285EFCF-9AF6-53DD-BE44-DA1F59F96620/keychain-2.db /Users/.../Library/Keychains/7285EFCF-9AF6-53DD-BE44-DA1F59F96620/keychain-2.db-wal /dev/random /dev/random /private/var/folders/z_/806bzc396cxgp4s0q17tpfwc0000gn/T/etilqs_y5BDgkbGkBV9ybF /private/var/folders/z_/806bzc396cxgp4s0q17tpfwc0000gn/T/etilqs_Aw6Q7JhPlil3QNX /Users/.../Library/Keychains/7285EFCF-9AF6-53DD-BE44-DA1F59F96620/keychain-2.db /Users/.../Library/Keychains/7285EFCF-9AF6-53DD-BE44-DA1F59F96620/keychain-2.db-wal /code/pre  What is not clear is what the process does to all the memory it occupies, and why it inflates so much.  <answer159813> From what I know about that process (which really isn't a ton) is that it has something to do with the Mac's Keychain. What you can do is find in in the Activity Monitor and click Cmd+I to get the info about it.  One tip you can try to do is run the Keychain First Aid by going to Keychain Access in Spotlight, opening the "Keychain Access" menu, and selecting the "Keychain First Aid" option from there and follow the directions.   Hope that tip works!  <answer159823> If it's not apparent, this is just a guess. But hopefully it gives you some leads.  First, here's what you can figure out just from the program name. If you run the command code/bin/ls /usr/libexec | sort -f | egrep '.*d$'/code (this print all files in code/usr/libexec/code ending in coded/code), you'll find codeftpd/code, codehidd/code, codenetworkd/code, codesystemstatsd/code, and a lot of programs ending in coded/code. The "d" stands for "daemon", which basically means a helper process that always runs in the background. The codesec/code very likely stands for "security". So codesecd/code is the "security daemon". Which makes sense because you said it looks like it works with keychain stuff.  What's the point of daemons? Some daemons stay running to either do some ongoing task. codehidd/code ("human interface device daemon"), for example, is the process responsible for handling mouse/keyboard/trackpad input. Some other daemons do some common tasks that many other programs need. Apps can simply tell the daemon to do something instead of having code to do it themselves. So codesecd/code probably does something like this, but related to the keychain.  But what exactly? It looks like it doesn't actually handle normal use of the keychain, since I was still able to use the keychain after I disabled the codesecd/code LaunchAgent.  Inspecting the LaunchAgent gives us a clue: img src="https://i.stack.imgur.com/CmQc8.png" alt=""  It looks like secd is responsible for syncing the keychain with iCloud?  So what should you do? Try one or more of these:  ol liIf you don't need iCloud keychain syncing, turn it off in iCloud preferences./li liUse codelaunchctl/code to disable secd if it doesn't seem to adversely affect anything./li liIf you need iCloud keychain syncing, see if you have a ton of keychain items, and remove the ones you don't need./li liPerhaps rebuild your keychain (make a new keychain, move items you need into it, and move it over the older one), in case there are unnecessary artifacts left over in the old keychain./li /ol  <answer161435> The program /usr/libexec/secd is shipped as part of OS X and is a normal security process. The documentation says it relates to "runtime security policies for processes". You can inspect the associated processes with this command: codeps -ef|grep sec[iud]/code  On my Mac, I'm user 501 so you have this output for one user logged in:  precodeMac:~ bmike$ ps -ef|grep sec[iud]     0    58     1   0 Sat12PM ??         0:56.51 /usr/sbin/securityd -i     0   117     1   0 Sat12PM ??         0:00.15 /usr/libexec/secinitd     0   171     1   0 Sat12PM ??         0:02.24 /usr/libexec/securityd_service   501   205     1   0 Sat12PM ??         0:11.74 /usr/libexec/secinitd   501  2634     1   0 Tue08PM ??         0:08.26 /usr/libexec/secd /code/pre  You can see that codesecurityd/code is started as root em(PID 58)/em and then as a user em(PID 205)/em process when you log in. The actual codesecd/code carries out the "work" and can get respawned even when you do not log out and in. As to deciphering why yours is using extra resources, it will be quite hard without digging into codefsusage/code and some other commands to peek at running processes as well as looking over your log files. Your best bet would be to file a bug with Apple and then document how you can get it to misbehave - especially if you can reproduce it after a reboot.  There isn't currently a "man page" for codesecd/code and the one for codesecinitd/code is meager at best. Filing documentation bugs against Apple is one way to ask that the lack of documentation be remedied.  <answer273871> Start turning on the Keychain iCloud sync but cancel on another dialog window.  source: https://www.reddit.com/r/hackintosh/comments/54gpmo/process_secd_always_at_95100_cpu_usage_sierra/d88v542/  <comment187829> Your memory is right. `secd` runs on Mavericks. On fast analysis, this daemon isn't documented, this is bad, this might be a piece of crapware. This daemon is in `/usr/libexec/secd`. <comment187845> Keychain First Aid says my keychain is fine! On all three computers. <comment187846> @danielAzuelos Does it show the same cancerous behavior on Mavericks? <comment187851> @danielAzuelos Mac OS usually don't have a lot of "crapware", and I would advise against jumping to that conclusion. Btw, everything in `/System` part of the originally installed OS, not added on by any programs. <comment187852> @interestinglythere You are definitely right, but the question remains how one should deal with a rogue 'secd'! <comment187853> @Mah A typical reason daemons take a lot of memory is because they store the data they work (in this case, the keychain) in memory to improve speed. The assumption here is that the OS will be able to quickly swap the memory to disk if memory is needed for more urgent things, but it looks like that assumption is not valid here. Do you a lot of keychain items? <comment187854> Definitely less than 1000 items (all certificates, system certificates, logins and private and public keys combined). <comment187865> just for reference, my secd is about 1 Meg in size. <comment187870> According to the Plist secd is used to manage the cloud keychain not the local one. <comment188037> Just discovered: Without `secd` running, Messages asks me for a password every time. <comment188038> →  interestinglythere: I'm working on different OSes, and it isn't common practice to find a system daemon which isn't documented. From a security standpoint, anything which isn't documented is *bad*. You might be right on this case: Mah `secd` might be a healthy behaving daemon. But without the documentation anyone can judge anyway. <comment188039> → Mah: on Maveriskc, `secd` has a VSZ = 2.4 GB, and a RSS = 3 MB. `secd` ran for 84 s on a system which is up and running since 5 days. <comment190804> Just found this little guy taking 5.35GB memory on a 1st gen rMBP! <comment309165> There is an option in El Capitan (at least, may be there in previous versions as well) under Keychain Access - Preferences to Reset My Default Kechain "Reverts to factory defaults and creates a new empty "login" keychain. Your current default keychain will be moved aside, but not deleted". As soon as I did this the securityd_service went from 51-53% CPU to 0-1.5%.  As soon as you do you're required to re-sign in to iCloud - I haven't yet discovered other ramifications. <comment316653> MacBook Air OS Sierra 1.7GHz 4GB 128GB Same problem nonstop fans and secd running in the background. I reverted to factory defaults my Keychain. I ENABLED iCloud Keychain and the process immediately stopped. If anyone can explain, I would appreciate a reply. <comment323806> I just upgraded from Mavericks to Sierra and found that the secd CPU went from near 100% after resetting the keychain as you suggested. Lost all my saved website passwords, had to re-login to my calendar sync, etc., but at least I can use the computer again. Thanks. <comment344279> This is what I have on mine. iMac with 32 GB of memory, OS X Yosemite 10.10.2 ![enter image description here](http://i.stack.imgur.com/QCLQb.png)