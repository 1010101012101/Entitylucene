Blocking incoming hostile traffic dynamically with PF and fail2ban on OS X <body> The bigger picture is that I am trying to dynamically block/unblock IPs using fail2ban 0.8.14.  I have been following an old guide for OS 10.5 with doesn’t include PF.    I think I’ve configured everything correctly, but OS X’s PF is causing me some issues.  strongTalaninc/strong has the IP 192.168.1.68 and is the “local”  strongCelebgul/strong has the IP 192.168.1.50 and is the “remote”  hr  From what I emunderstand/em, I should be able to issue the following command:  precodeuser@celebgul:~$ sudo /sbin/pfctl -t fail2ban -T add 192.168.1.68/32 /code/pre  This will add the IP address code192.168.1.68/code to the table codefail2ban/code, and will block incoming traffic from strongTalantinc/strong, thus the following should fail:  precodeforquare@talantinc:~$ ssh user@192.168.1.50 Password: Last login: Mon Aug  3 12:09:05 2015 from talantinc.local user@celebgul:~$  /code/pre  But as you can see, it succeeds.  hr  From what I can emsee/em, my understanding is wrong.  I’ve added code192.168.1.68/code, and yet can still SSH from it to strongCelebgul/strong.  I can query the table and see code192.168.1.68/code in it:  precodeuser@celebgul:~$ sudo pfctl -t fail2ban -T show No ALTQ support in kernel ALTQ related functions disabled    192.168.1.68 /code/pre  hr  I haven’t changed any of Apple’s default configuration files for PF, my understanding was that I’d only need to edit/create my own if I wanted rules that were longstanding/persisted across reboots.  How can I use PF to block incoming connections on OS X Client (not Server)?   I’m specifically looking at El Capitan, stronghowever/strong I cannot get this to work on Mavericks either.  <answer198710> Installing Server.app has several benefits for traditional UNIX hands since OS X makes configuration choices on the client OS that don't work well for people that live in the command line world. (Max files per process, VM tuning, other various kernel tuning changes)  Barring an easy solution, I would recommend installing Server and then enabling OS X adaptive firewall to ensure you have the proper launchd services enabled.  ul lihttps://support.apple.com/en-us/HT200259/li /ul  In a nutshell, the above article asks for:  precodesudo pfctl -f /etc/pf.conf sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serverctl enable service=com.apple.afctl sudo /Applications/Server.app/Contents/ServerRoot/usr/libexec/afctl -c sudo /Applications/Server.app/Contents/ServerRoot/usr/libexec/afctl -f /code/pre  Followed by step 2:  precodesudo defaults write /System/Library/LaunchDaemons/com.apple.pfctl ProgramArguments '(pfctl, -f, /etc/pf.conf, -e)' sudo chmod 644 /System/Library/LaunchDaemons/com.apple.pfctl.plist sudo plutil -convert xml1 /System/Library/LaunchDaemons/com.apple.pfctl.plist /code/pre  From there, you can then use the pfctl / afctl framework to block hosts and ports as needed. You can test things by trying ssh brute force attacks and seeing that the firewall is working (or is not) before trying to customize the firewall further.  <answer198741> I was missing a piece of the puzzle that klanomath kindly filled by linking to this “Setting up Fail2ban on Mac OS X 10.7+” post, and Buscar웃 reinforced with this “Integrating PF with Fail2ban 0.9” post.  While PF was adding the IP address to the codefail2ban/code table, it didn’t know what to do with it.  There are a couple of ways to achieve this:  strongThe first/strong post linked above suggests modifying code/etc/pf.conf/code and adding the following:  precodetable &lt;fail2ban&gt; persist block drop log quick from &lt;fail2ban&gt; to any /code/pre  strongThe second/strong post suggests a more correct route, creating a new “anchor” file code/etc/fail2ban/pf-anchor.conf/code and inserting the following:  precodetable &lt;fail2ban&gt; counters block drop log quick from &lt;fail2ban&gt; to any /code/pre  It then references this anchor in code/etc/pf.conf/code by inserting:  precodeanchor fail2ban /code/pre  hr  I haven’t verified the second method, but my initial testing with the first method has solved my issue with PF.  Thank you to klanomoath and Buscar웃 for posting links to relevant guides, either my search queries were way off or it’s the first time DuckDuckGo has let me down.  <answer198756> Here is an improved walkthrough to install fail2ban on OS X 10.10 (it probably works on 10.9 also) based on the (somehow faulty) guide at forgetcomputers.zendisk.com.  The automated installer didn't work at all for me so I did it manually.  ol licd to ~/Downloads and download fail2ban-0.8.10  precodecd ~/Downloads curl -O https://forgetcomputers.zendesk.com/hc/en-us/article_attachments/200287990/fail2ban-0.8.10.tar.gz /code/pre/li liUnpack the tar package:  precodetar xzf fail2ban-0.8.10.tar.gz /code/pre/li licd to fail2ban-0.8.10 and install the software:  precodecd fail2ban-0.8.10/ sudo python setup.py install /code/pre/li liMake a file for the log:  precodesudo touch /var/log/fail2ban.log /code/pre/li licd back and download the modifications package:  precodecd ~/Downloads/ curl -O https://forgetcomputers.zendesk.com/hc/en-us/article_attachments/200287980/install_fail2ban_mods.tar.gz /code/pre/li liUnpack this package:  precodetar xzf install_fail2ban_mods.tar.gz /code/pre/li liRun the install script from the modifications package:  precodesudo ./fail2ban_mods/install_fail2ban_mod.sh /code/pre/li liMake yourself sudo and rename /etc/fail2ban/jail.local (the file jail.local is superior to jail.conf and might break everything because the installed file contains a totally useless configuration):  precodesudo bash mv /etc/fail2ban/jail.local /etc/fail2ban/jail.local.bak /code/pre/li liAdd the following two lines to /etc/pf.conf with codenano /etc/pf.conf/code:  precodetable &lt;fail2ban&gt; persist   block drop log quick from &lt;fail2ban&gt; to any /code/pre/li liIn /etc/fail2ban/jail.conf, modify the [ssh-pf] section at the end with codenano/code as follows:  precode[ssh-pf]    enabled  = true   filter   = sshd   action   = pf   logpath  = /var/log/system.log   maxretry = 3   /code/pre  You may enter another maxretry count or define an individual bantime or findtime./li liIn /etc/fail2ban/action.d/pf.conf, ensure that the following values are set and modify them if necessary with codenano /etc/fail2ban/action.d/pf.conf/code:  precodeactionban = /sbin/pfctl -t fail2ban -T add &lt;ip&gt;   actionunban = pfctl -t fail2ban -T delete `pfctl -t fail2ban -T show 2&gt;/dev/null | grep &lt;ip&gt;`   [Init]  tablename = fail2ban localhost = 127.0.0.1 /code/pre/li liShutdown pf, tell it to reload its configuration, and start it again:  precodepfctl -d pfctl -f /etc/pf.conf pfctl -e /code/pre/li liStop the fail2ban daemon if it is already running, and start it with launchctl:  precodefail2ban-client stop launchctl load -w /Library/LaunchDaemons/org.fail2ban.init.plist  launchctl load -w /Library/LaunchDaemons/org.fail2ban.redo.plist  launchctl load -w /Library/LaunchDaemons/org.fail2ban.reset.plist /code/pre/li /ol  Testing the System  ol liOpen a terminal window and watch fail2ban's log (live-update):  precodesudo tail -f /var/log/fail2ban.log /code/pre/li liWhile keeping this terminal active on the server, SSH into the server from a client and watch the server's terminal output (username is arbitrary, since we are testing what will happen when an incorrect login is attempted; replace server_ip with the IP address or hostname of the server):  precode ssh username@server_ip /code/pre/li liOn the client machine, type the wrong password several times until you see a message in fail2ban's log that indicates that the client has been banned. This message will look something like this:     2015-08-04 18:56:25,001 fail2ban.actions        [216]: NOTICE  [ssh-pf] Ban 192.168.8.15   When you see this message, the client machine's IP has been banned. At this point, any future SSH attempts from this IP (within fail2ban's bantime period) should time-out and be unsuccessful./li liTo stop tail just enter kbdctrl/kbdkbdC/kbd/li /ol  strongIf you want to install the latest fail2ban 0.9.1/strong  ol liDownload manually fail2ban to your ~/Downloads folder/li licd to ~/Downloads and unpack the tar package:  precodecd ~/Downloads tar xzf fail2ban-0.9.1.tar.gz /code/pre/li licd to fail2ban-0.9.1 and install the software:  precodecd fail2ban-0.9.1/ sudo python setup.py install /code/pre/li liMake a file for the log:  precodesudo touch /var/log/fail2ban.log /code/pre/li licd back and download the modifications package:  precodecd ~/Downloads/ curl -O https://forgetcomputers.zendesk.com/hc/en-us/article_attachments/200287980/install_fail2ban_mods.tar.gz /code/pre/li liUnpack this package:  precodetar xzf install_fail2ban_mods.tar.gz /code/pre/li liMake a backup of /etc/fail2ban/filter.d/sshd.conf and copy the file from the mod_pack to the fail2ban/filter.d directory. You may copy the other filter.conf but better make a backup of the original files. I didn't test these though.  precodesudo bash mv /etc/fail2ban/filter.d/sshd.conf /etc/fail2ban/filter.d/sshd.conf.old cp ~/Downloads/fail2ban_mods/filter.d/sshd.conf /etc/fail2ban/filter.d/ cp ~/Downloads/fail2ban_mods/fail2ban_reset.sh /private/etc/fail2ban cp ~/Downloads/fail2ban_mods/lib-launchdaemons/org.fail2ban* /Library/LaunchDaemons /code/pre/li liAdd the following two lines to /etc/pf.conf with codenano /etc/pf.conf/code:  precodetable &lt;fail2ban&gt; persist   block drop log quick from &lt;fail2ban&gt; to any /code/pre/li liIn /etc/fail2ban/jail.conf, modify the [ssh-pf] section at the end with codenano/code as follows:  precode[ssh-pf]    enabled  = true   filter   = sshd   action   = pf   logpath  = /var/log/system.log   maxretry = 3   /code/pre  You may enter another maxretry count or define an individual bantime or findtime./li liIn /etc/fail2ban/action.d/pf.conf, ensure that the following values are set and modify them if necessary with codenano /etc/fail2ban/action.d/pf.conf/code:  precodeactionban = /sbin/pfctl -t fail2ban -T add &lt;ip&gt;/32 actionunban = /sbin/pfctl -t fail2ban -T delete &lt;ip&gt;/32  [Init]  tablename = fail2ban /code/pre/li liShutdown pf, tell it to reload its configuration, and start it again:  precodepfctl -d pfctl -f /etc/pf.conf pfctl -e /code/pre/li liStop the fail2ban daemon if it is already running and start it again:  precodefail2ban-client stop launchctl load -w /Library/LaunchDaemons/org.fail2ban.init.plist  launchctl load -w /Library/LaunchDaemons/org.fail2ban.redo.plist  launchctl load -w /Library/LaunchDaemons/org.fail2ban.reset.plist /code/pre/li /ol  Now test your system again like described above.  strongImprovements/strong  Since the implementation of the fail2ban table and rule is non-standard and real fail2ban-blocking doesn't survive a reboot, I reworked the whole pf-mechanism, created a separate anchor (inspired by IceFloor) to remove any dependency on Apple's /etc/pf.conf file and modified the ban action.  ol liStarting from the fail2ban 0.9.1 install described above enter:  precodesudo bash nano /etc/fail2ban/action.d/pf.conf  /code/pre  and change in the file /etc/fail2ban/action.d/pf.conf the lines starting with   precodeactionban = ....  /code/pre  to   precodeactionban = /sbin/pfctl -a fail2ban.anchor -t fail2ban -T add &lt;ip&gt;/32 &amp;&amp; /sbin/pfctl -k &lt;ip&gt;/32 &amp;&amp; /sbin/pfctl -Ef /etc/fail2ban/pf/fail2ban.conf /code/pre  and   precodeactionunban = .... /code/pre  to  precodeactionunban = /sbin/pfctl -a fail2ban.anchor -t fail2ban -T delete &lt;ip&gt;/32 /code/pre/li liCreate a folder pf in /etc/fail2ban/  precodemkdir /etc/fail2ban/pf /code/pre/li liCreate three files fail2ban, fail2ban.conf and fail2ban.sh in the previously made folder with the following content; afterwards make fail2ban.sh executable with chmod:  fail2ban:  precodetable &lt;fail2ban&gt; persist block drop log quick from &lt;fail2ban&gt; to any /code/pre  fail2ban.conf:  precode############### LOOPBACK ############### # # skip loopback (no filtering on loopback interface) set skip on lo0  scrub-anchor "com.apple/*"  ############### INBOUND ############### # anchor "fail2ban.anchor" load anchor "fail2ban.anchor" from "/etc/fail2ban/pf/fail2ban" /code/pre  fail2ban.sh:  precode#!/bin/sh  # start # # We need to trap on TERM signals, according to Apple's launchd docs: # trap 'exit 1' 15  # # Use the "ipconfig waitall" command to wait for all the interfaces to come up: # ipconfig waitall sleep 5 # # System sysctl  # sysctl -w net.inet6.ip6.fw.verbose=0 sysctl -w net.inet.ip.fw.verbose=0 sysctl -w net.inet.ip.fw.verbose_limit=0  # # interface forwarding enabled by default # sysctl -w net.inet.ip.forwarding=1  # enable PF and load rules from default fail2ban configuration file using tokens (apple specific PF options -E and -X) # /sbin/pfctl -e /sbin/pfctl -Ef /etc/fail2ban/pf/fail2ban.conf   # Exit with a clean status exit 0  # this file is public domain and is available to everyone with no exceptions. /code/pre/li liCreate the file org.fail2ban.plist in /Library/LaunchDaemon with the following content:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Disabled&lt;/key&gt;     &lt;false/&gt;     &lt;key&gt;ExitTimeOut&lt;/key&gt;     &lt;integer&gt;1&lt;/integer&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;org.fail2ban&lt;/string&gt;     &lt;key&gt;Program&lt;/key&gt;     &lt;string&gt;/etc/fail2ban/pf/fail2ban.sh&lt;/string&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre/li liRemove the following two lines from /etc/pf.conf with codenano /etc/pf.conf/code:  precodetable &lt;fail2ban&gt; persist   block drop log quick from &lt;fail2ban&gt; to any /code/pre/li liLoad the file /Library/LaunchDaemons/org.fail2ban.plist with launchctl after stopping fail2ban and pf:  precodefail2ban-client stop pfctl -d pfctl -f /etc/pf.conf launchctl load -w /Library/LaunchDaemons/org.fail2ban.plist fail2ban-client start /code/pre  or reboot your Mac after loading org.fail2ban.plist with launchctl./li /ol  Now banning works properly even after rebooting your system. If you want to add an IP-address manually to block it, just enter:  precodesudo /sbin/pfctl -a fail2ban.anchor -t fail2ban -T add &lt;ip&gt;/32 &amp;&amp; /sbin/pfctl -k &lt;ip&gt;/32 &amp;&amp; /sbin/pfctl -Ef /etc/fail2ban/pf/fail2ban.conf /code/pre  To un-ban it (it will not automatically be un-banned after the fail2ban bantime!) enter:  precodesudo /sbin/pfctl -a fail2ban.anchor -t fail2ban -T delete &lt;ip&gt;/32 /code/pre  strongSo to answer your question:/strong  If you want to use the fail2ban table to ban an IP manually after applying the strongimprovements/strong, you have to enter the command above. The reason for the additional parts:  ul licode/sbin/pfctl -k &lt;ip&gt;/32/code is needed to kill strongall/strong of the state entries originating from the specified host./li licode/sbin/pfctl -Ef /etc/fail2ban/pf/fail2ban.conf/code to reload the fail2ban.conf gracefully and reflect the changes you made in the table fail2ban./li /ul  Without the above improvements you may use:  precodesudo /sbin/pfctl -t fail2ban -T add &lt;ip&gt;/32 &amp;&amp; /sbin/pfctl -k &lt;ip&gt;/32 &amp;&amp; /sbin/pfctl -Ef /etc/pf.conf /code/pre  hr  emstrongInstallation of fail2ban 0.9.1 on El Capitan/strong/em  I got it installed on El Capitan in rootless mode (codesudo nvram boot-args="rootless=0"/code and reboot) after removing the doc-install part to /usr/share/docs/fail2ban (= the lines 140-143) in the setup.py of fail2ban 0.9.1.  Use the improved 0.9.1 install and config method. If the command codepfctl -sA/code doesn't reveal fail2ban.anchor check for the correct double-quotes (no smart-quotes!) in the file /etc/fail2ban/pf/fail2ban.conf.  <comment237743> BTW pf is already accompanied by an adaptive firewall: check [afctl/emond](http://apple.stackexchange.com/questions/179465/emond-keeps-me-locked-out-of-my-server-via-ssh). It doesn't work very reliable though. <comment237745> Is `afctl`/`emond` part of OS X client?  From the looks of that question you linked to (and prior research) it looks as though they are part of OS X Server. <comment237777> check this out http://www.effu.se/2011/03/Integrating-PF-with-Fail2ban-0.9 <comment237872> [Please do not post the same question on multiple sites](http://meta.stackexchange.com/questions/64068/is-cross-posting-a-question-on-multiple-stack-exchange-sites-permitted-if-the-qu). Since this question already has an answer [on Unix & Linux](http://unix.stackexchange.com/questions/219901/blocking-incoming-traffic-with-pf-on-os-x), and is more of a U&L question since OSX is very close to BSD for this purpose, I recommend deleting this copy. <comment237895> Have you run `tcpdump` or inspected the ssh logs to ensure you are indeed arriving on the IPv4 address and not IPv6? <comment237896> @Gilles Let's see which gets the best answer in a week. I agree cross posting is bad in general, but OS X is enough different from BSD that I disagree U&L is the best place for this. Is there lots of launchd/bonjour experience there? Let's chat or [meta] if needed to sort out the best place to get the OP an answer. Also, this is a great question IMO. <comment237923> @Gilles sorry, I was unaware it was bad form to cross-post and make it obvious, having done a fair amount of searching over the past week I’d come across a number of questions that were cross-posted (the the OP hadn’t made it obvious). I have deleted the U&L question as contrary to your assertion, I have received more useful information on Ask Different. <comment237932> @bmike `/var/log/system.log` shows that it is IPv4 that is being used/detected: `error: PAM: authentication error for root from 192.168.1.68 via 192.168.1.68` <comment237947> Excellent work! Did you get fail2ban from homebrew or elsewhere? I'd be tempted to send a PR to fix this if you're on the brew provided version of the tool... <comment237948> I did install using homebrew.  All of this is somewhat patchy as I’m mainly experimenting on 10.11 while poking my Mavericks box for bits here and there to confirm behaviours.  I’m trying to go back now and redo everything on Mavericks to get a complete documented procedure.  I’ll look into sending a PR once I’ve done this. <comment237955> While this was massively useful to my bigger picture, my question was specifically about PF, so I’m not sure how on-topic this answer is? <comment237959> @forquare We exist for awesome answers. This will surely help - +1 in my book since it's so informative and helpful as a) a recipe and b) to troubleshoot this. Apple really doesn't do a good job documenting / supporting their adaptive firewall IMO. This sort of Question and all the answers is exactly why I participate in Ask Different / Stack Exchange. <comment237961> @bmike I agree, and my query was purely based on I thought I knew how StackExchange worked, but a couple of things recently have shaken that :) +1’d <comment238339> Best posting on pf and fail2ban I ever saw! *thumbs up* <comment238345> @forquare Updated my walkthrough by adding some improvements to bypass all mac-fail2ban flaws and finally tried to answer your question. <comment238567> @bmike: I think this question is high quality, and I would have posted also on AD & U&L. <comment238568> @klanomath: huge! <comment262063> How would one approach this process using homebrew?