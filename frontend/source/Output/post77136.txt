How to setup a ssh tunnel that works with P2P and filtered http from OS X to a linux machine over SSH? <body> I do have a linux machine (Ubuntu) which has no filters and a client machine which is behind a firewall that have even web traffic filtering.  I can properly establish SSH connections from the client to the server.  What is the correct command line for establishing a tunnel which would allow unfiltered browsing (via socks proxy) and also P2P traffic.  Currently I used something like this, but it seems not to work with P2P (uTorrent in my case):  precodessh -v -v -N -p 22 -g -C -c 3des user@server.tld -D 0.0.0.0:1080 -R 55555:localhost:55555 /code/pre  img src="https://i.stack.imgur.com/9g6Nq.png" alt="enter image description here"  The socks5 proxy part works, at least with Firefox but uTorrent is not able to download.  <answer77168> Transmission will likely try to connect to the tracker using UDP which cannot be transmitted through the SSH proxy. You may or may not be able to force uTorrent to only use TCP. Even then it's unlikely that this will work.br Also this setup doesn't really make a lot of sense. You'd be much better off by downloading/seeding your torrents directly on that Linux box. codertorrent/code or codetransmission-daemon/code comes to mind as a viable solution.br You do have a lot of redundant options in your codessh/code command. You can strip it down to codessh -NC user@server.tld -D 1080/code though I'd suggest you put all the config info into code~/.ssh/config/code anyway. You may increase the security of your connection by only binding your SOCKS proxy to the loopback by using code-D localhost:1080/code. You do not need the reverse tunnel for your question and may even be substantially violating a company policy with that.  <comment89465> You clearly have a greater mastery of man ssh than I but I'll make a few suggestions which may or may not help. For one, have you set up the proxy in your Network Preferences? This will make it system wide, and if I'm not mistaken, will override the ones you made in Firefox locally. Also, since you have access to the Ubuntu server you can always try running tinyproxy on that but it's likely you'd prefer to do it this way.