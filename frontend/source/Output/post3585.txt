Is there a good command-line ID3 tool for OS X? <body> Anyone know of a command-linesupstrong*/strong/sup ID3 tool, with support for strongID3v2/strong, that you can get working on Mac OS X with reasonable effort? It should support both reading and writing tags.  (supstrong*/strong/sup I want to be able to call it e.g. from some Python scripts, so a GUI tool won't do.)  The id3tool utility is otherwise good, but doesn't support ID3v2 (and thus doesn't play that well with iTunes). I had to compile it from source, but that was pretty straightforward on a Mac with Xcode &amp; developer tools (including, notably, a C compiler). Anyway, I'd especially like something with similar command-line options as id3tool. Here's an example of tagging one file:  precodeid3tool -t "Song Title" -r Artist -a "Album Name" -c 2 track-02.mp3 /code/pre  <answer3586> This old thread at Mac OS X Hints looks like it might be a good place for you to start. It's from 2003, so I'm not sure if the tool they're talking about is still being developed. You also may have to compile it yourself.  <answer3626> There is always AppleScript. I'm not a big fan of it, but iTunes is scriptable and you can manipulate all the mp3 tags from there. You can invoke Applescript from the command line using osascript.  <answer3899> This site: http://dougscripts.com/itunes/ has many good command line scripts and tools that layer on top of itunes to do things with your music library.  Some of them may do what you want.  Some of the tools are free and some are licensed.  <answer3976> There's an OS X compatible version of the id3lib library available here on GitHub.  It claims to support both ID3v1 and ID3v2.  <answer4052> since you're comfortable with cli and Python, I can recommend some Perl modules on CPAN.  MP3::Tag, (as well as MP3::Tag::ID3v1 and ::ID3v2 and ::Utils), MP3::Info, MP3::ID3Lib are all available for reading and manipulating ID3 tags.  If you go to search.cpan.org and search for "MP3", you'll find a world* of options!  (* Where "world" is a small, limited set of options...)  <answer10871> The python module Mutagen is shipped with the command-line ID3 tool named emmid3v2/em replacement for id3lib's.br From the usage documentation :      You can set the value for any ID3v2 frame by using '--' and then a frame ID.br   For example:br           mid3v2 --TIT3 "Monkey!" file.mp3   would set the "Subtitle/Description" frame to "Monkey!".   <answer16145> If you have Homebrew installed (highly recommended), you can just do:  precodebrew install id3lib /code/pre  This installs several id3 command-line tools, including codeid3tag/code, codeid3convert/code, codeid3cp/code and codeid3info/code.  No need for python or perl scripting; just use regular shell commands.  precodeUsage: id3tag [OPTIONS]... [FILES]...    -h         --help            Print help and exit    -V         --version         Print version and exit    -1         --v1tag           Render only the id3v1 tag (default=off)    -2         --v2tag           Render only the id3v2 tag (default=off)    -aSTRING   --artist=STRING   Set the artist information    -ASTRING   --album=STRING    Set the album title information    -sSTRING   --song=STRING     Set the title information    -cSTRING   --comment=STRING  Set the comment information    -CSTRING   --desc=STRING     Set the comment description    -ySTRING   --year=STRING     Set the year    -tSTRING   --track=STRING    Set the track number    -TSTRING   --total=STRING    Set the total number of tracks    -gSHORT    --genre=SHORT     Set the genre    -w         --warning         Turn on warnings (for debugging) (default=off)    -n         --notice          Turn on notices (for debugging) (default=off) /code/pre  <answer37605> You may want to try id3v2. It's based on the id3lib that Huyz mentioned, but seems to be a better command line tool than those with id3lib. It easily dumps the ID3V2 tags from iTunes produced MP3s, but not iTunes produced M4A files (as with Apple Lossless).  If you need M4A files, another option is ffmpeg. Its ffprobe command line tool prints out metadata in the files and I believe you can write metadata via ffmpeg. It works with both MP3 and M4A files produced by iTunes. ffprobe may not show all metadata; mp4v2 is another good option.  All three programs are easily installed via Homebrew. Right now (Jan 2012) ffmpeg requires gcc to compile, so codebrew install --use-gcc ffmpeg/code.  <answer47877> Having had various 'abort trap' type issues with id3v2 I discovered eyeD3, which is a python module also existing as a command line tool. It seems to be more recently updated than some of the other programs mentioned above.  <comment3325> i've been working on writing something like this... there are some libraries available in python and there is a tool called beets that makes use of them so i've been investigating how it's written. <comment3326> in addition... MusicBrainz Picard is written in Python and is open source so there's probably a lot to be gleaned from it's code and library usage as well. <comment3779> i agree, Picard is just brilliant <comment3781> Thanks! This fully answers my question.  There was only source package available, but installing from that (on a Mac with developer tools) was pretty smooth: the standard Unix fare of `configure`, `make` and `make install`. id3lib consists of 4 separate binaries: id3info (for reading tags), id3tag (for writing tags), id3convert, and id3cp. Everything works fine (and iTunes honours the v2 tags written with id3tag). <comment3827> @Jonik what did you use to wrap the library?  Some python you wrote? <comment3830> @calavera: Yeah, I have simple scripts that try to determine track number or name from a filename (such as "Artist - 03 - Track.mp3"), and if found, write it to ID3 tag too. <comment3845> CLI and Python yes, but Perl modules on CPAN... not so much :-) (If you can use those in Python too, I wasn't aware of that. Or did you mean writing Perl instead?) Personally I [got this solved](http://apple.stackexchange.com/questions/3585/good-command-line-id3-tool-for-os-x/3976#3976) already, but maybe this is helpful for others. <comment3852> @Jonk: would you be willing to share?  I don't have a lot of experience with python so something like that would be great to play around with and extend... <comment3860> @calavera: [Here you go](http://dl.dropbox.com/u/2896691/stack/id3/id3.zip). Usage: `add-track-names.py *mp3` or `add-track-numbers.py *mp3`. Common stuff (most code) is in a separate .py file.  I'm not really a Python coder either, so the code's probably far from "pythonic". :) But I (re)learned a lot when I wrote it, and it's probably easy to extend if your tagging needs are anything like mine. <comment3902> @Jonik: awesome, thanks!  If I add anything cool I'll share-alike :) <comment17662> Does it support ID3v2? <comment19342> id3lib also works in other distributions such as macports. Speaking of, is there any point in switching from ports to homebrew? I had so much pain switching from fink... <comment69643> Mutagen can be installed with `sudo pip install mutagen` after installing pip with `sudo easy_install pip`. <comment140920> "Error: No available formula for mid3v2". Somebody interested in contributing a formula? <comment205408> thanks for suggesting mp4v2 for m4a! works like a charm, whereas id3v2 did not :( <comment225341> @Jonik id3lib can write and manipulate both ID3v1 and ID3v2 <comment312357> It also comes with `id3v2`, which is the "do-everything" command. It will let you write any arbitrary tag to a file. <comment312361> Re: MacPorts vs Homebrew. I actually have both (they don't get in each other's way.) Homebrew is definitely the way to go if you can. Macports is massive, prefers to use its own libraries, and will download and compile whatever it needs. Homebrew is much smaller and simpler, and (AFAIK) only works with pre-built binaries. It uses the libraries already on the Mac whenever possible. Supposedly Homebrew has less available software, but it hasn't failed me yet. <comment312362> So my experience was this: I used Macports to install Imagemagick and it spent fifteen minutes downloading and compiling things and in the end the executable wouldn't run because of some missing dependency. Homebrew downloaded a ready-run binary in two minutes and I was good to go.