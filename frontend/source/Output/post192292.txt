How to do raw device access with VirtualBox? <body> So I am trying to set up raw device access w/ VirtualBox to use a ext4/linux disk as a guest OS within Mac OS X, but haven't succeeded yet.  Following the VirtualBox docs, Chapter 9.9.1.1, https://www.virtualbox.org/manual/ch09.html#rawdisk will Mac OS X allow raw disk access for VMs? How do I set this up?  Things done so far: (don't try this at home)  Created a raw vmdk file:   precode$ sudo VBoxManage internalcommands createrawvmdk -filename /Users/me/VirtualBoxVMs/Xub_raw_disk.vmdk -rawdisk /dev/disk0 RAW host disk access VMDK file /Users/me/VirtualBoxVMs/Xub_raw_disk.vmdk created successfully. /code/pre  make me the owner:  precode$ sudo chown me /Users/me/VirtualBoxVMs/Xub_raw_disk.vmdk /code/pre  see if VirtualBox can see anything on the Xub_raw_disk.vmdk file:  precode$ VBoxManage internalcommands listpartitions -rawdisk /Users/me/VirtualBoxVMs/Xub_raw_disk.vmdk Number  Type   StartCHS       EndCHS      Size (MiB)  Start (Sect) /code/pre  Since nothing shows up here for sectors or partitions, this must be a symptom of the problem...  Problem is when I try to add the .vmdk file from the GUI or with the command below, I get an error:  precode$ VBoxManage storageattach "Xub_raw_testing" --storagectl "SATA" --port 0 --type hdd --medium /Users/me/VirtualBoxVMs/Xub_raw_disk.vmdk  VBoxManage: error: Could not find file for the medium '/Users/me/VirtualBoxVMs/Xub_raw_disk.vmdk' (VERR_FILE_NOT_FOUND) VBoxManage: error: Details: code VBOX_E_FILE_ERROR (0x80bb0004), component Medium, interface IMedium, callee nsISupports VBoxManage: error: Context: "OpenMedium(Bstr(pszFilenameOrUuid).raw(), enmDevType, enmAccessMode, fForceNewUuidOnOpen, pMedium.asOutParam())" at line 178 of file VBoxManageDisk.cpp VBoxManage: error: Invalid UUID or filename "/Users/me/VirtualBoxVMs/Xub_raw_disk.vmdk" /code/pre  UPDATE: Here, disk0 is the dedicated linux drive. disk1 (not used) is for Mac OS X. Making myself the owner of the /dev/disk0 and /dev/disk0s2 with   precode$ chown $USER /dev/disk0 $ chown $USER /dev/disk0s2 /code/pre  per the Froggard howto made it so I could add the image to a VM. Also, code/dev/disk0/code is now readable from VBoxManage:  precode$ VBoxManage internalcommands listpartitions -rawdisk /dev/disk0 Number  Type   StartCHS       EndCHS      Size (MiB)  Start (Sect) 1       0x00  0   /0  /0   0   /0  /0            976         2048 2       0x00  0   /0  /0   0   /0  /0         227959      2000896 /code/pre  Now, when I start the linux guest OS, I get the codeFATAL: No bootable medium found! System halted./code message. Any ideas what's wrong?  <answer254950> I had a need to do this today and I saw your question, so here is a protocol of the steps I took.  h1Find the Device Number/h1  codediskutil list/code  e.g. 2, as in code/dev/disk2/code strongAssuming code2/code for the rest of the instructions./strong  h1Create the Virtual Machine VMDK/h1  codeVBoxManage internalcommands createrawvmdk -filename "$HOME/dev-disk2.vmdk" -rawdisk /dev/disk2/code  Eject the device before this step, otherwise you will get an error: codeVERR_RESOURCE_BUSY/code. You may want to add an entry in codefstab/code with the added parameters codenoauto/code to prevent the OS from remounting the drive.  I use coderdisk-disk2.vmdk/code for the name, because this virtual machine is just a pointer to this device. After reboot, the situation could change e.g. a device might be assigned a different number especially if you unplug things and move things around.  h1Start Virtual Box Manager with Root Privileges/h1  codesudo /Applications/VirtualBox.app/Contents/MacOS/VirtualBox/code  Because devices are all owned by root, you need to start VirtualBox with root privileges. This has consequences. Your home context (home folder and preferences) will be changed to root. Your other virtual machines will not be visible. If you open a file browser, you will see the root's home folder by default.  Another option is to change the permissions of the device (not recommended) as you have done.   To confirm permissions of devices, you can run codels -l /dev/disk*/code  ol liAdd New Machine, provide name: /dev/disk2, type: linux, version: arch linux (64-bit)/li liGive it some memory (whatever you can)/li liSelect existing drive using VMDK created above. (strongIMPORTANT/strong ensure the drive has not been remounted, otherwise you will get codeVERR_RESOURCE_BUSY/code, codeNS_ERROR_FAILURE/code)/li /ol  h1Install a Fresh System/h1  Add an optical disk file (e.g. a bootable linux ISO of your liking) and turn on the Live CD/DVD optional so that you boot from it.   h1Make System Bootable in VirtualBox/h1  This is not so obvious, especially if you use an EFI setup. If using codegrub-mkconfig/code, the name of the efi file is grubx64.efi (assuming 64 bits). VirtualBox is finicky about where it looks for a boot file. The default will not do.  Rename codegrubx64.efi/code to codebootx64.efi/code  code/boot/EFI/BOOT/bootx64.efi/code  hr  h1Notes/h1  ul litip: get yourself iterm 2/li liThis is super useful for Macbooks when installing Arch Linux, because the default ISO does not have load the wlan card drivers./li /ul  <comment228698> Did you check if the SATA port 0 is already in use in your VM? Or did you already try to select a different controller like the IDE Controller? <comment228723> If OS X is running on your internal disk0, then you can not get access to the entire disk 0. However, you can get access to the partition containing ext4 formatted file system. Follow steps 6 through 12 given at [Froggard's answer](http://apple.stackexchange.com/questions/191040/is-it-possible-to-bootcamp-windows-8-1-using-usb-on-late-2011-mbp/191053#191053).  He does this for a Windows formatted partition. Just substitute your Linux partition. <comment228760> What operating system are you running in the physical machine? What physical partition is this machine installed? What operation system will you be running in the virtual machine? Will the virtual machine be installed in a virtual or physical partition. If physical, which one?