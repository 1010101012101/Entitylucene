How do I combine these two shell commands into a Service? <body> I run the following two commands on markdown files to get a nicely formatted PDF.  precodepandoc file.md -o file.html --css=markdown.css  prince file.html file.pdf rm file.html /code/pre  How would I automate this? I'd like to right-click a markdown file, navigate to services, and choose convert markdown to PDF.  I know I should use codeAutomator/code and I tried but couldn't link the right steps together. In my example above, file is the filename that needs to be the argument. I got as far as starting a new Automator service, choosing codeFiles &amp; Folders/code, and codeGet Selected Finder Items/code and got stuck there.  strongUpdate/strong: Pandoc = http://johnmacfarlane.net/pandoc/  Prince = http://www.princexml.com/  strongUpdate #2 for clarity/strong  If I am in a folder with a markdown file named test.md,  then the complete command line syntax would be:  precodepandoc --from=markdown --to=html test.md --css=~path/to/css/markdown.css -o test.html /code/pre  (Note: I have been able to automate this as a service and have named it Markdown to HTML)  Here is that code:  precode for f in "$@"  do  /usr/local/bin/pandoc --from=markdown --to=html "$f" --css=/Users/fooo/Documents/Code/css/markdown.css -o "$f".html  done /code/pre  Now to convert that bit of html to PDF is something I am not able to link in. But the command line syntax for that would be:  precodeprince test.html -o test.pdf /code/pre  <answer39173> Go to Automator and create a new service:br img src="https://i.stack.imgur.com/NGuhN.png" alt="Create new service"br Then add a Shell Script:br img src="https://i.stack.imgur.com/lQiq9.png" alt="Shell script - automator"br Detailed information here  <answer39177> What about an Automator service like this one: img src="https://i.stack.imgur.com/lTk5v.png" alt="enter image description here"  The payload is the shell script  precode for f in "$@"  do     pandoc "$f" --css=markdown.css | prince - "$f".pdf  done /code/pre  Whatever the selected file or files, the service runs them through codepandoc/code's Markdown parser, then takes the resulting html and processes it with codeprince/code, naming the output the original file name with a .pdf extension added.  The piping removes the need for you to manage temporary files.  <comment44315> I have built the "RTF" equivalent service and, assuming nobody beats me to it, I'll post it when I get "back to my Mac". Meanwhile, let me toss an unsolicited plug for [Byword](http://bywordapp.com/) into the mix. I haven't touched that service in months. <comment44317> I saw that but it doesn't answer my question. How does it know where to insert the input? In my case, pandoc $file_name -o $file_name.html --css=markdown.css (The script has to place the file_name as is in the first location, change extension to html in the second, but leave the --css-markdown.css argument alone). <comment44321> `which pandoc`?  `which prince`? (As in what is the full path to each file) <comment44324> This "prince" command -- is there an option for it to read from stdin? If so, this can be made quite easy through the magic of piping. If not, yes, this gets a little trickier. <comment44326> path to pandoc/usr/local/bin/pandoc; path to prince: /usr/local/bin/prince <comment44331> make that `prince - "${f%.*}".pdf` to avoid files named `foo.md.pdf`. Also, you'll need a full path to `markdown.css` <comment44332> Sorry, one more: where does your markdown.css file live? <comment44333> If you are making a Service, you don't need or want "Get Selected Finder Items." Whatever file is selected or right clicked is automatically passed to the workflow. <comment44353> @Daniel: I added the actual syntax I would use if I were to do this from the command line.