Is there a default location for 'linux too applications' <body> I recently moved to OS X from Windows 7. In Windows, pretty much everything gets installed to codeC:\Program Files\[application name]/code or codeC:\[application name]/code. In OS X code/Applications/code seems to be roughly equivalent to codeC:\Program Files/code for all the consumer apps that I use.  But when it comes to a 'linux too' application (e.g. Python, Postgres, Node JS to name just a few) they seem to get installed emall over the place/em. Only after spending a few minutes guessing and using codefind/code did I discover that Postgres executables were installed to code/Library/PostgreSQL/9.1/bin//code, v8 and Node were in code/usr/local/bin/code. Often times these differ to the equivalent paths that I see Linux users refer to.  Is there a better way to discover where my apps are being installed than by having to use codefind/code each time? Shouldn't I be able to predict it with rules of thumb something like 'all database apps should go in code/Library/code' so that's where I know to look for postgres, and 'all compilers and languages go in code/usr/local/bin/code' so that's where I know to look for v8 after it's installed?  <answer51408> The short answer is, unfortunately, no there isn't a default location.  But it's not complete chaos.  For command line tools that ship with the OS or get brought in by Apple-supplied applications like Xcode, you'll find it all in code/usr/bin/code. That includes things like the OS X default Python and Perl as well as the Xcode-supplied codegcc/code, codeclang/code, codemake/code and the other command line developer tools Xcode installs.  For non-Apple command line tools, if the application is well-behaved, it should put them in code/usr/local/bin/code.  Some code.app/code packaged applications that install under code/Applications/code offer command line tools (for example codesubl/code offered by Sublime Text 2). If I want to use these from the command line I'll generally make a symlink from code/usr/local/bin/code to the tool under the code.app/code file for the application rather than put the application-specific path on my codePATH/code environment variable.  If you use a package manager like Homebrew to install and manage your command line tools then it's not too much of a hardship to make code/usr/local/bin/code the place for everything you use. Homebrew does a very nice job of keeping it neat and clean and all in one place for you. I can't speak to how well MacPorts or Fink keep things contained under one sub-tree like this.  The exception to the rules are OS X-default daemons like Postgres and such. Those can get scattered and there really isn't a very good way to track them down aside from codefind/code and maybe codemdfind/code from the command line. 