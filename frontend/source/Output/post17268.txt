Changing Terminal colors when ssh-ing into remote machine and back <body> Looking for a way automatically change terminal colors when ssh-ing into remote machine and revert back to the default colors, when exiting the ssh session. Simply, want have another colors when i'm working on the remote machine.  Any idea?  emps: don't want use iTerm2, but standard Terminal.app/em  <answer17270> I'm using the following:  have and shell command, called codemyssh/code, with content:  precodePROFILE="$1";shift; DEF="Basic" #the default profile name echo "tell app \"Terminal\" to set current settings of first window to settings set \"${PROFILE}\""|osascript ssh $@ echo "tell app \"Terminal\" to set current settings of first window to settings set \"${DEF}\""|osascript /code/pre  and using bash aliases for the connect, like:  precodealias ssweb='myssh Homebrew user@web.example.com' alias ssmail='myssh Ocean me@mail.example.com' /code/pre  so, when want ssh into web server, i'm simply write into terminal codessweb/code, and got the "Homebrew" profile. When the ssh session ends, the aplescript set back to the "Basic".  The aliases should go into your $HOME/.profile or similiar bash-startup file.  The "Homebrew", "Ocean" etc. are the setting profiles from the Terminal.app preferences. (you can set up different fonts, encondings etc) too.  Of course, you can use it directly (without aliases) like:  precodemyssh Pro user@another.machine.example.com        ^        ^        |        ssh command arguments        terminal profile name /code/pre  <answer19582> I know there's already a couple of answers, but here's an alternative:  There's no general way to change the background color, but we can use a standard way to change the window title. If you're logging in to a lot of non-"Unix server" devices (such as network devices; routers, switches, firewalls etc) then you have to use their shells and cannot install your own shell variables. So, here's another way:  precodefunction ssh() {   H=$(echo $@ | sed -e 's/.*@//g;s/ .*//g')   echo $@ | grep '@' &amp;&amp; U=$(echo $@ | sed -e 's/@.*//g;s/.* //g')   echo -ne "\033]0;${U:=$(whoami)}@${H%%.*}\007"   unset H   unset U   /usr/bin/ssh $@ } /code/pre  Add this to your code.bashrc/code.  Basically, as functions and aliases are preferred to looking in the path, this takes the ssh command and uses the text before and after the "@" to set HOST and USER variables which it then uses to echo an ASCII code which is recognised by the terminal and used to set the title.   You must use "ssh user@host.blah" for this and not "ssh -l user host.blah"  If you don't provide a username it will set it as your current username (obviously if you're using a custom .ssh/config (which I use a lot) then this won't be accurate, but I think it's good enough to be useful.  <comment18810> how would you do this for iterm2 ? thanks! <comment18838> I stopped using iTerm when in "vim" after selecting some text it is **cut out** the selection instead of copy.. ;( So, Unfortunately, I haven't any idea about iTerm2 solution. <comment52402> Thank you! I've been looking at various kludgy ways to do this for a while, but your method is simple and flexible. Bonus points for developing a tiny framework that can take profiles and commands from different aliases, rather than strewing around a bunch of individual scripts with hard-coded preference sets.