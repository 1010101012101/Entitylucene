Can timestamps be preserved when copying files on OS X? <body> I'm interested in combining the files from three Macs by copying the files from each one into a single folder hierarchy of my design on an external hard drive.  In my past experience copying files in OSX, emsometimes/em the files lose their Created and Modified timestamps; i.e. they are changed to the present moment when the file copy happens.  How can I make sure this doesn't happen?   <answer80552> Use codepax/code. The default codepax/code format, called ustar, preserves file modification and access times (among other things like user ID, group ID, file mode bits and extended attributes like Spotlight comments and ACLs). See codepax/code man page here for more details.  First, create a codepax/code archive on every Mac and copy it to the external hard drive like this:  ol liOpen ApplicationsUtilitiesTerminal./li liType in Terminal:  precode$ cd /code/pre  and drag the folder where the files to be combined reside on that Mac to Terminal:  img src="https://i.stack.imgur.com/Z4eq4.png" alt="enter image description here"  Alternatively you can type the full folder name:  precode$ cd /path/to/your\ folder /code/pre  This will change the current folder to 'your folder'./li liArchive the folder with codepax/code:  precode$ cd .. $ pax -w "your folder" &gt; yourfolder.ustar /code/pre/li liUse the Finder to copy the newly create archive codeyourfolder.ustar/code to the external hard drive./li /ol  Then extract the archives with codepax/code:  ol liOpen Terminal on the Mac that has the external USB hard drive plugged in./li liChange the current folder to the single folder hierarchy on the external hard drive with command codecd/code as explained above:  precode$ cd /Volumes/externalHDD/path/to/single \folder $ ls yourfolder.ustar yourfolder2.ustar yourfolder3.ustar /code/pre/li liExtract the archives:  precode$ pax -r -p e &lt; yourfolder.ustar $ pax -r -p e &lt; yourfolder2.ustar $ pax -r -p e &lt; yourfolder3.ustar $ ls your folder your folder 2 your folder 3 /code/pre/li liMove the files around with the Finder if you need to (the Finder preserves file modification and access times within the same volume)./li /ol  (I've tested this procedure on OS X 10.8 (Mountain Lion).)  <answer80555> Compress them with zip or select them with ctrl-click or right-click and choose Compress. Copy the compressed files to your target system and open them there.  If you can, format your external drive as a Mac OS filesystem, not FAT.  <answer80563> I use rsync to do this sort of copy. However note the version supplied by Apple is 2.6.9 and has bugs on this. So you need to get a third party built one either build yourself or via a package manager  for example   precodersync -aE source_dir target_dir /code/pre  The option code-E/code copies the ACLs and code-a/code preserves the unix permissions and times. (well it did on rsync 2 rsync 3 seems to need -AX)  codersync/code can also be setup to copy to remote machines without mounting drives.  There are some GUI front ends for rsync e.g. aRsync. For other directory synchronization tools see this question.  <answer94648> I just ran across this myself, and the built in codecp/code command actually handles it.  I discovered a bunch of old CF cards that I wanted to harvest the pictures from. My processing scripts will look at the file mtime to put it in the correct place so I needed it preserved.  From the man page:  precode -p    Cause cp to preserve the following attributes of each source file in the copy: modification time,        access time, file flags, file mode, user ID, and group ID, as allowed by permissions.  Access        Control Lists (ACLs) and Extended Attributes (EAs), including resource forks, will also be pre-        served.         If the user ID and group ID cannot be preserved, no error message is displayed and the exit value        is not altered.         If the source file has its set-user-ID bit on and the user ID cannot be preserved, the set-user-        ID bit is not preserved in the copy's permissions.  If the source file has its set-group-ID bit        on and the group ID cannot be preserved, the set-group-ID bit is not preserved in the copy's per-        missions.  If the source file has both its set-user-ID and set-group-ID bits on, and either the        user ID or group ID cannot be preserved, neither the set-user-ID nor set-group-ID bits are pre-        served in the copy's permissions. /code/pre  So, using codezsh/code I was able to run (codeNO NAME/code being my cards volume name):  precodecp -rvp /Volumes/NO\ NAME/DCIM/**/*.{JPG,jpg} ~/Desktop/tmp/pics /code/pre  I believe that the special code/**/*/code construct is specific to ZSH; however you could do something like   precodefind /Volumes/WHATEVER -type d -print0 | xargs cp -vp {}/*.JPG /my/out/path /code/pre  <comment92948> When do you lose timestamps? <comment92950> Copying them how? <comment95197> `rsync` is a good solution, but be aware that it doesn't preserve access times. `pax` (see my answer below) does. <comment138839> +1 A simple `cp -p` is straight-forward, preserves the modified time (likely the most useful of the three timestamps on a file) and doesn't require creation of an intermediate archive file. <comment169601> As far as I know, "cp -p" forgets the creation date and instead sets it to the modif date. Which is quite an absurd behaviour. <comment169602> As far as I know, "rsync" forgets the creation date and instead sets it to the modif date. Which is a big failure. <comment169603> Not Option-click. Ctrl-click. Or right-click. <comment169604> The best choice for formatting the disk is Mac OS Extended Journalled. Mac OS Extended is also called HFS+. <comment169608> @NicolasBarbulesco, fixed, thanks. <comment169609> → jaume: any command making any form of copy of "file a" toward "file b" has to read "file a" first. Hence the access time of "file a" should be modified. This isn't a feature at the command level but at the kernel level. If a command, through another system call, restores the access time to its previous state, then this is a dangerous trick, because it is a plain **lie**. <comment169610> → Nicolas: cf. `man rsync` and search for `preserve times` :) ⇒ the answer from Mark is correct. <comment169616> @daniel - This article says otherwise : [*Do You Copy?*](http://www.mactech.com/articles/mactech/Vol.22/22.08/DoYouCopy/index.html) Especially, see the table at the end. <comment169634> @NicolasBarbulesco - see bug https://bugzilla.samba.org/show_bug.cgi?id=6276 so it should in 3.06 and above and that implies it should have earlier. However I don't know when rsync was originally change to do this - my guess us after that magazine in 2006 <comment170542> → Mark, @daniel - I have just tested rsync in Mac OS X 10.6.8. A local copy of a folder with "rsync -rt" forgets the creation date of files and replaces it with their modif date. Despite the manual for "rsync" saying "preserve times" for the option `-t`. The bug is probably present in Mavericks and Yosemite too. <comment170543> @NicolasBarbulesco what version of rsync <comment170609> Looks like Snow Leopard used rsync 2.6.9 see http://opensource.apple.com/source/rsync/rsync-40/ so is old an looks like it does not have the bug fix Later versions will (when I had SL I used a third party rsync for this or a similar reason) <comment280662> `cp -p` doesn't work when copying from HFS+ to FAT32 though.