Trap closure of app when its closed in the Multi-Tasking view <body> What event/selector/method is called, if any, when the user closes the app in the multi-tasking screen?  Xcode reports codeMessage from debugger: Terminated due to signal 9/code (i.e. codeSIGKILL/code, which cannot be trapped). Is the use of codeAppDelegate.applicationWillResignActive/code,which is invoked when the user pressed the 'Home' button, the next best option?  <answer281681> It depends on the state your app is in:  If your app is suspended (i.e. it is in the background and not currently executing), there's no way of detecting the user closing the app.  If your app is backgrounded (i.e. it is in the background and executing), then your applicationWillTerminate method will be called.  <comment354478> This is a bit tricky to arrange though as the UI is event driven.  Some sort of background task (like a watchdog) could be used?  Without something constantly running, it's difficult to 'clean up' properly. <comment354527> No, you cannot use a watchdog or anything similar to stay in the backgrounded state. This is beyond the control of the app. What is it exactly you want to "clean up"? <comment354707> I want to save the data in the app before it is closed. <comment354708> @gone You cannot do that. You'll have to save periodically during program execution. <comment354856> That's unfortunate.  Swiping up is not the same thing as pressing Ctrl-C to quit a malfunctioning program. <comment354881> @gone Actually I don't see the big difference. Ctrl-C is not used only to quit malfunctioning programs. If this fact that you cannot handle SIGKILL is a problem for your app, you have designed it wrongly. <comment355856> AppDelegate provides for applicationWillTerminate, are you suggesting I need to implement a separate signal handler?  Considering the swipe up is such a common user action (as opposed to using Ctrl-C to close your app), I still think this is an unfortunate design decision. <comment356036> No, I'm explicitly stating that you CANNOT handle this signal. It is impossible. Therefore - no point in having a signal handler for SIGKILL. You can think it is an unfortunate design decision all you want, but this is a design decision made in 1970s that apparently have been good enough to stand the test of time. I have no idea why you think it is an "uncommon user action" to press Ctrl-C - from my point of view it is quite common to use Ctrl-C to cancel something.