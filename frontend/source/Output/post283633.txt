Can a shortcut be created to toggle menubar visibility (that would persist, as the dock's does)? <body> I can choose in Syst Prefs to have the menubar show always or hide with auto-show (auto-show being show on hover or show on focus-by-keyboard-shortcut).   But when I'm working, I want the menubar always visible. And when I'm recreating, I want it usually hidden.   I like that with the dock I can hit kbdcommand/kbdkbdoption/kbdkbdd/kbd to show or hide the dock, and it stays shown or hidden until I press the same shortcut again.   I wish the menubar worked this way too. Can such a shortcut be created somehow?   <answer283714> You asked, "emCan a shortcut be created to toggle menubar visibility (that would persist, as the dock's does)?/em" and the short answer is, emyes/em.  However, the longer answer is, while it's technically and natively possible to create an Automator Service workflow that gets assigned a keyboard shortcut to hide/unhide the Menu bar in OS X 10.11 and later, including the current macOS, it's not without its issues.  ul liYou'd have to assign the Automator Service a keyboard shortcut that does not interfere with an existing shortcut in every app that might have focus when you triggered the service's keyboard shortcut./li liEvery app that has focus when the service's keyboard shortcut is triggered would have to be added to System Preferences  Security &amp; Privacy  Privacy  Accessibility, in order for the service's keyboard shortcut to work./li /ul  A possible workaround to the second point above would be if there's a third-party app that can be globally set to trigger the Automator Service work flow (or the AppleScript code as an AppleScript script or app not using an Automator Service). This might include apps like Alfred, FastScripts, Karabiner, Karabiner-Elements, Keyboard Maestro, etc., and having not tested these third party apps under this particular scenario I can only offer that as something to look into.  So, how about an AppleScript app you could place in the Dock, so it's readily available to click on, that will toggle the state of the Menu bar? You'd only have to add that AppleScript app to System Preferences  Security &amp; Privacy  Privacy  Accessibility, in order for it to work.  In lieu of a third-party app or as an Automator Service and just as a plain AppleScript app, you do have a keyboard shortcut built in by way of Spotlight, in that you press kbd⌘/kbdkbdspace/kbd and the first character or two of the name you gave to the AppleScript app and then press kbdenter/kbd. As an example, name it emtmb.app/em for toggle menu bar, the you'd press kbd⌘/kbdkbdspace/kbdkbdt/kbdkbdm/kbdkbdenter/kbd to trigger the AppleScript App. After all, I double you already have an app named emtm/em installed.   However, that said, it too is not without possible issues in that it relies on UI Scripting, meaning, it has to open System Preferences to the General settings and click the "Automatically hide and show the menu bar" checkbox and close System Preferences. This means once you triggered the app, you have to let it run and not manually steal focus from System Preferences while the UI Scripting events take place. In other words, you have to stop multitasking for a couple of seconds.  In part, one of the issues using AppleScript and or UI Scripting to hide/unhide the Menu bar is it's just not as graceful as hiding the Dock with its built-in keyboard shortcut, but it's at least doable.   That all said, here's the AppleScript code, that can be used in either an AppleScript script/app, Automator Service, or possibly a third party app, that will toggle the state of the Menu bar in OS X 10.11 and later via UI Scripting.  hr  precodetell application "System Preferences"     set bounds of window 1 to {0, 0, 0, 0}     reveal pane id "com.apple.preference.general"     delay 1     tell application "System Events"         click checkbox "Automatically hide and show the menu bar" of window "General" of process "System Preferences"     end tell     quit end tell /code/pre  hr  Note there is no error checking to ensure this code in run under OS X 10.11 and later so don't try using it in versions of OS X prior to 10.11. Also note that the value of the codedelay/code emcommand/em may need to be adjusted as necessary under the working conditions of your system.  <answer283721> Making some minor adjustments to the original code from user3439894’s answer.  Running this revised code will not bring system preferences app to the front.    precodetell application "System Preferences"     reveal pane id "com.apple.preference.general" end tell tell application "System Events" to tell process "System Preferences" to tell window "General"     click checkbox "Automatically hide and show the menu bar"  end tell delay 1 quit application "System Preferences" /code/pre  In some comments to my answer, it has been pointed out where I have the delay command in my script, makes the script fail.  On my system this script works.  img src="https://i.stack.imgur.com/Efvr6.gif" alt="enter image description here"  However this script on my system will not work if I put the delay command before the system event.  img src="https://i.stack.imgur.com/xAXdJ.gif" alt="enter image description here"  <comment357736> Thank you. This seems impractical due to its non-immediacy (opening Syst Prefs app, toggling a pane and setting, then quitting said app). Was hoping for some setting to change in Terminal that would affect the behavior instead. <comment357740> @jaepage, How about if you don't see the System Preferences window? In other words, it opens off screen, checks/un-checks the checkbox and closes? Then the state of the Menu bar is toggled, but you don't have to watch the UI events take place. That is other then if System Preferences is in the Dock it will bounce once and the dot will be under its icon until is closes. <comment357741> @user3439894  you deserve the credit for the accepted answer.  Is there any way I can post my revision as just a comment to your answer? <comment357745> @jaepage, I updated the code to hide System Preferences windows while making the change to hide/show the Menu bar. I replaced `activate` for `set bounds of window 1 to {0, 0, 0, 0}` and so you do not see the System Preferences window but it makes the change.  You actually could just leave both those out and you should't see the UI. <comment357937> Initials work in Spotlight, by the way. Thus `command-space t m` finds firstly Time Machine. <comment357944> @jaepage, I named the app _tmb.app_ for testing and after searching for it once in Spotlight by `tmb` then subsequent searches for just _tm_ show _tmb_ before _Time Machine_.  That said, you could name it something else that wouldn't near match anything else. I just suggested _tmb_ as it makes it easy to remember for _Toggle Menu Bar_, which the full name like that wouldn't bring up _Time Machine_ but _to_ might catch on other things too. You'll have to figure what naming convention works best for you to only have to type one or two characters after `⌘space`. <comment357945> I'm aware, yes. <comment357950> Any reason you placed the `delay` on a different line? <comment357952> I used your script above, and the shortcut method [here](https://apple.stackexchange.com/questions/175215/how-do-i-assign-a-keyboard-shortcut-to-an-applescript-i-wrote), but it seems to succeed 50–50 in Finder (sometimes hangs) and in Chrome it always fails with "The action “Run AppleScript” encountered an error." Increasing delay doesn't help, nor does choosing different keys. Upvoted for effort. Thank you. <comment357953> @jaepage, wch1zpink's code will fail at times because of where he placed the `delay`! In this case, there has to be a `delay` before `System Events` click the _checkbox_, so as to allow the _element_ to be available to act upon, and doesn't need to be there before `quit` especially when _nested_ as how mine is written. <comment357956> @jaepage, I do not recommend using Automator and binding it to a shortcut key sequence in System Preferences for reasons I explained in my answer and also because it's not reliable. This is why I suggested third-party apps to trigger or use just the AppleScript app method in the Dock and or from Spotlight as the AppleScript app it all that has to be authorized and that method has never failed me! <comment357959> @user3439894 I deemed it necessary to put the delay before the quit command because on my system, for some reason, System preferences kept quitting before the checkbox got selected in the previous command <comment357960> Your code without the delay before the System Events call will fail if the checkbox isn't yet available to be clicked and does constantly fail on my system without the delay as in my code. This is a part of why UI Scripting is not the preferred way to go! I only use UI Scripting if I have no other choice. <comment357962> Just an FYI, I downloaded and tested [FastScripts](https://red-sweater.com/fastscripts/) under macOS 10.12.3 with my code as a .scpt and gave it a keyboard shortcut of `⌃⌘M` and it works great! Much better then as an Automator Service and System Preferences key binding. <comment357966> @user3439894 Please look at the edits I've made to my original answer.  Do you have any insight as to why my version of the script works for me and not for you? I'm using operating system Sierra. <comment357969> Let me try to clarify things... There is nothing wrong with having the `delay` where you have it, however while your code, as written, fails on my system, and not yours is why some UI Scripting isn't always reliable on each individual system. Purely from a programatic standpoint, the checkbox has to be available before it can be acted upon, for the same reason you can't close the app before it's acted upon and why a delay is actually appropriate anywhere as needed (or wanted for some reasons) and may need different values depending on the individual system and its overall usage. <comment358085> I imagine you understand (but for the sake of documenting), a single keyboard shortcut (press one combination and done) is preferable to a keyboard sequence (using Spotlight) is preferable to mousing (clicking an app in the dock) is preferable to nothing (the OS default). <comment358090> I appreciate your advice that binding a shortcut to an Automator service results in unreliable performance. However, I'm not sure installing a third-party app for such a small wish is apposite. Oh, Apple (sigh). <comment358095> @jaepage, I just don't think it's a big deal to install an app that can do the job reliably when the native solution can be and is problematic at times. Now that I have FastScrips installed I'll use it on a few other scripts and apps to start, as it can run up to 10 before having to purchase it. That is if I need the added functionality. Your other option is to programmatically set the `_HIHideMenuBar` _key_ in the user's `.GlobalPreferences.plist` and have the system updated to its change. You'd probably have to write this in Objective-C. (Maybe Coca AppleScript.)... <comment358096> @jaepage, You would then still have to employ some method of keyboard hook or bind the running of the executable to something anyway.