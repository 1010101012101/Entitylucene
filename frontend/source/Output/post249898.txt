Can Automator distribute a large number of files into counted subfolders? <body> I would like to build an Automator application that counts the files in the hostfolder, creates a numbered subfolder named " em[hostFolder name] [counter]/em ", moves at maximum 128 files from hostFolder in sequential order into this new subfolder, and loops until all files in hostFolder are sorted into subfolders (i.e. the last subfolder will have fewer than 128 files in it). Before the workflow runs, the hostfolder will always only contain files, no subfolders.  Here's the desired outcome of my ideal workflow using as an example an arbitrary folder containing an arbitrary number of files, also arbitrarily named. (Note I do not need the workflow to rename any files):     emA folder named Beans contains 1027 files, the files Legume 0001 to Legume 1027. My Automator application receives the folder Beans as input. Once the workflow has run, the folder Beans now contains 9 subfolders, named Beans 1, Beans 2, Beans 3, and so on all the way to Beans 9./em      emThe subfolder Beans 1 contains files Legume 0001, Legume 0002, Legume 0003, and so on to Legume 0128. The subfolder Beans 2 contains the files Legume 0129 to Legume 0256. In other words, each subfolder contains 128 of the files named Legume **** in sequential order. The only exception is the final subfolder, Beans 9, which contains only 3 files, the files Legume 1025, Legume 1026, and Legume 1027./em   <answer249955> This should do what you've asked for. As coded, the only thing you may need to change in the embash script/em is codefilesPerSubDir="128"/code if you want a different file count per subdirectory within the parent directory that's passed to the Run Shell Script emaction/em.    Add a Run Shell Script emaction/em to your Automator application/service/workflow and set codeShell: /bin/bash/code and codePass input: as arguments/code. Remove the default emcode/em and then copy and paste the emcode/em below into the Automator Run Shell Script emaction/em.  hr  pre class="lang-none prettyprint-override"code#!/bin/bash  filesPerSubDir="128"  for argument in "$@"; do     if [[ -d $argument ]]; then         cd "$argument" || exit 1         dirName="$(basename "$argument")"         fileCount="$(find . -maxdepth 1 -flags nohidden -type f ! -iname ".*" | awk 'END{print NR}')"         subDirCount="$(( fileCount / filesPerSubDir + 1 ))"         for (( i = 1; i &lt; subDirCount+1; i++ )); do             find . -maxdepth 1 -flags nohidden -type f ! -iname ".*" | head -$filesPerSubDir &gt; .moveList             if [[ -s  .moveList ]]; then                 mkdir "$dirName $i"                 while IFS= read -r file; do                     mv "$file" "$dirName $i"                 done &lt; .moveList             fi         done         rm .moveList     fi done /code/pre  hr  The image below shows a testing of the emcode/em and the workflow completed successfully as noted by the green circles with the check mark. This is just and example of how to implement the Run Shell Script emaction/em, it can be done numerous ways however you just have to pick what method you want to pass the Folders in Finder to it, the rest is done by the emscript/em.  img src="https://i.stack.imgur.com/1wIFZ.png" alt="Automator window"  hr  The image below shows the emcode/em with syntactical highlighting and is included as it helps in reading the emcode/em (especially when the emcode/em isn't commented, sorry don't have time at the moment).  img src="https://i.stack.imgur.com/LytUF.png" alt="syntactical highlight code"  hr  strongNote:/strong The embash script/em strongis not/strong coded to handle an embedded newline in the name of a filesystem object, which IMO doesn't belong there in the first place! Feel free to modify as needed/wanted to suite your needs, adding/modifying emcode/em and or additional error checking if/when wanted/needed. Additionally, this is by no means the only way to emcode/em  the emscript/em to handle what you want automated but it's what I threw together to get something posted for you. If you have any questions, just ask.  <comment310103> Sorry, but we're not a homework or code-writing service. We're here to help if what you have tried so far has hit a snag... <comment310115> Does the source folder only contain files or subfolders too? That is subfolders other then the ones created as a result of doing so to move the files into them? <comment310116> Great question @user3439894. The source folder will never initially contain any subfolders. That is to say, it's always going to be files only. <comment310118> @Tetsujin I'm organizing audio files for personal use, no homework involved. I've Googled to no avail though, as a newbie, I don't really know where to begin. If you insist my project requires the employment a professional code writing service, please direct me to an affordable one. Or, as an alternative, direct me to whatever online ghetto is reserved for lazy newbie hobbyists. I don't want to offend anyone. <comment310121> Are you building sample maps for virtual instruments - NI/Halion etc? It's not something I've done since the 90s, when layering/zoning was a whole lot smaller domain [& I was using in-house proprietary software], but there must be dedicated software out there that can help build this stuff, if you are. <comment310180> I'm absolutely flabbergasted. Thank you so much. It works perfectly. I've been up all night spinning my wheels trying to work with Hazel and Automator to do this but it looks like I simply need to learn shell scripting. This may seem like a menial task to you, but to me, it's a huge inspiration. I've always thought of myself as more of a liberal arts guy rather than a STEM guy, but, seeing how a basic knowledge of coding can streamline my workflow changed me. I'm going to burn through some tutorials in the morning to make sense of this script as a starting point. Thanks again! I owe you. <comment310183> @Devon Delamarter, You're welcome, glad I could help! BTW I just modified the _code_ slightly, so you might want to update it in your Automator _action_. I added `|| exit 1` to the `cd ...` command in case for some reason it fails it can exit at that point. Shouldn't fail as the existence of the directory is tested before hand, but extra error checking never hurts. I also removed the `$` from the _variables_ in the _shell arithmetic_ as it really isn't needed in that application, just a habit because it's needed to expand the _variables_ elsewhere. :)  Just C&P the whole block of code again.