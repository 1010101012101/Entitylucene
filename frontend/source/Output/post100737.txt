Find a specific file with automator <body> The basic question is:     How can I pass a filename to the Spotlight search module in Automator?   The essential problem:  I have hundreds of broken aliases scattered throughout a particular directory on my HD. The original files DO STILL EXIST, but for some reason the aliases have lost their connection.  I would like to replace them all with symlinks, so that they can be backed up by Rsync.  Here is a scaled-down example of a folder with broken aliases in it:  img src="https://i.stack.imgur.com/ywT9L.png" alt="enter image description here"  Now here is an example of a sub-directory that contains both the originals of some of the broken aliases, as well as additional copies of the SAME alias, that still point to another location for their originals:  img src="https://i.stack.imgur.com/soUWz.png" alt="enter image description here"  And lastly, here is an image of a directory that contains the master files to some of the aliases that were located in both of the previous 2 locations:  img src="https://i.stack.imgur.com/fd8VN.png" alt="enter image description here"  So what I need to do is:  ol liIdentify all aliases in a user-defined directory /li liUse the filenames of those aliases to locate their original files, in a second user-defined directory (recursively and ensuring not to identify a second alias as an original) /li liremove the alias/li licreate a symlink to the original file, in the former location of the alias/li /ol  I'm using Automator wherever I can, and Applescript wherever I must.  Prior to the response that prompted these edits, my workflow did the following:  ol liPrompt for the location to look for original files/li liPrompt for location to look for aliases/li liGet POSIX paths to all aliases/li liGet text filenames of all the aliases/li /ol  Now, it gets a bit further but with some problems:  ol liI had an alias titled "3dfx &amp; ambience.rfl" (changed already in the screenshots to "3dfx and ambience.rfl").  The applescript provided would fail on that file due to the ampersand./li liAfter fixing #1, the script ran and did indeed remove broken aliases and replace them with symlinks.  But the symlinks pointed to the parent folder that contained the originals, not the originals themselves.  So I ended up with 2 symlinks, "Luftrum 1 - Thor Ambient.rfl" and "Luftrum 2 - Thor Ambient II.rfl", that in reality pointed to the "Luftrum" folder shown in my third screenshot above./li /ol  Hopefully this will be enough detail to ultimately arrive at a working solution.  I can tell it's very close.  <answer100764> Usually "broken alias" refers to an alias where the original file no longer exists. I have used this script to find aliases like that:  precodeset l to {} tell application "Finder"     try         alias files of entire contents of (POSIX file "/Users/username" as alias)         result as list     on error         return     end try     repeat with f in result         try             original item of contents of f         on error             --move contents of f to trash             set end of l to POSIX path of (f as text)         end try     end repeat end tell set text item delimiters to linefeed l as text /code/pre  If the script finds the aliases you want to replace symlinks, save the relevant lines of the output to a text file. Then try running a shell script like this:  precodecat /tmp/aliases.txt | while IFS= read -r f; do   original=$(find ~/directory/with/original/files -name "${f##*/}" | head -n1)   echo "$f:$original"   # rm "$f"; ln -s "$original" "$f" done /code/pre  <answer101174> You could use codemdfind/code which is the command-line version of Spotlight in a shell subscript in Automator. You can pass variables to and from this script/command via stdin and stdout.   strongEDIT/strong if you don't want to try using any shell commands:  Did you try setting a value of a variable in Automator, then right-click on the Spotlight input box and choose "New Variable..." from the bottom of the pop-up list?  img src="https://i.stack.imgur.com/hSnKG.png" alt="spotlight screenshot..."  <answer101218> If you simply want to pass a file name to the Spotlight action  The pass the file name from an action to a strongset variable/strong Action  ul liset the Spotlight Action to ignore the any above action. Done by right clicking on it's title bar and using the menu./li /ul  img src="https://i.stack.imgur.com/3au3j.png" alt="enter image description here"  ul lidrag and drop the variable token into the search text field./li /ul  img src="https://i.stack.imgur.com/eETjM.png" alt="enter image description here"  hr  strongTHIS IS AN UPDATE/strong  Using Automator actions and Applescript to store properties for later retrieval:  The idea here is the first action writes out a applescript file to the documents folder.  The script will be used to store information we get along the way and then retrieve it later on in the final Applescript action.  We do this because we need to pass the final script multiple bits of information. Which we cannot do with the normal variables in Automator.  The Actions.  img src="https://i.stack.imgur.com/I24qO.png" alt="enter image description here"  ol liRun Applescript:  Write out a a storage script to the documents folder/li /ol  The script.  precodeset script_text to MakeScript() my RunMaker(script_text)  on RunMaker(script_text)     set file_path to (path to documents folder as Unicode text) &amp; "MyProperties.scpt"     set file_path to POSIX path of file_path as string     store script script_text in file_path with replacing end RunMaker   on MakeScript()      script         property theBrokenAliasFolderPath : ""         property broken_alias_file_Paths : {}          property theOriginalFolderPath : ""         property Original_file_Paths : {}           property SearchfileNames : {}      end script end MakeScript /code/pre  2, Ask for Finder Items: This is for the Broken Alias folder.  ul liSet to Ignore Input/li liset your start at: at your broken alias  folder./li liset your Type to: Folder/li /ul  3,Run Applescript:  ul liWrites out broken alias folder path to a property in the storage script file./li lipass the path on to the next action/li /ul  ( The write outs are done by the Action Applescript loading the storage file script.  This will be a version of sorts. It will then change properties in its version and re-write the file out again replacing the old one)  precode--WRITE OUT BROKEN ALIAS FOLDER PATH   on run {input, parameters}      set file_path to (path to documents folder as Unicode text) &amp; "MyProperties.scpt" as alias      set script_text to load script file_path      set theBrokenAliasFolderPath of script_text to (POSIX path of (item 1 of input))       my RunMaker(script_text)      return input end run    on RunMaker(script_text)     set file_path to (path to documents folder as Unicode text) &amp; "MyProperties.scpt"     set file_path to POSIX path of file_path as string     store script script_text in file_path with replacing end RunMaker /code/pre  4,Get Folder contents:  ul liThe action receives the "broken alias folder path" and gets all the contents of the folder./li /ul  5, Filter Finder Items:   ul liFilter the items so they only contain alias files./li /ul  All: Kind : is : other : alias  ul liPass the list to the next Action/li /ul  6, Run Applescript:  Writes out broken alias PATHS to a property in the storage script file.  precodeon run {input, parameters}      set file_path to (path to documents folder as Unicode text) &amp; "MyProperties.scpt" as alias      set script_text to load script file_path      set broken_alias_file_Paths of script_text to input       my RunMaker(script_text)      return input end run on RunMaker(script_text)     set file_path to (path to documents folder as Unicode text) &amp; "MyProperties.scpt"     set file_path to POSIX path of file_path as string     store script script_text in file_path with replacing end RunMaker /code/pre  7, Ask for Finder Items: This is for the Original files folder.  ul liSet to Ignore Input/li liset your start at: at your Original files folder./li liset your Type to: Folder /li /ul  8,Run Applescript:  Writes out the Original files folder to a property in the storage script file.  precode on run {input, parameters}          set file_path to (path to documents folder as Unicode text) &amp; "MyProperties.scpt" as alias          set script_text to load script file_path          set theOriginalFolderPath of script_text to (POSIX path of (item 1 of input))           my RunMaker(script_text)          return input     end run        on RunMaker(script_text)         set file_path to (path to documents folder as Unicode text) &amp; "MyProperties.scpt"         set file_path to POSIX path of file_path as string         store script script_text in file_path with replacing     end RunMaker /code/pre  9, Run Applescript:  This retrieves the information from the storage script. This will take the list of paths of the dead alias files.  ul liTry and Find a matching file in the Original files folder. It will look at all matches but ignore aliases./li liRemove the old Alias file (checking it is a alias file first)/li liCreate a symlink in the folder the old alias was in from the matching file found./li liOnly alias files should be deleted. If no matching file is found then the alias file will not be deleted. Nor will a symlink be created./li /ul  .  precodeset file_path to (path to documents folder as Unicode text) &amp; "MyProperties.scpt" as alias              set theScript to load script file_path               --choose a search folder             set searchPath to quoted form of theOriginalFolderPath of theScript             set folderPath to quoted form of theBrokenAliasFolderPath of theScript             set input to broken_alias_file_Paths of theScript               repeat with i from 1 to count of items of input                  set this_item to item i of input                  set aliasPath to this_item                  #Get the the file name                 set theFileName to "\\\"" &amp; (do shell script "basename " &amp; quoted form of (POSIX path of (this_item))) &amp; "\\\"" as string                 log theFileName                  #search the searchPath for a matching file with the same name.                 #NOTE: this will find all files with he same name. So We use last paragraph to get what should be the first one it finds.                 set theOrigFilePath to paragraphs of (do shell script "mdfind -onlyin " &amp; searchPath &amp; " kMDItemFSName == \"" &amp; theFileName &amp; "\"")                   if theOrigFilePath is not quoted form of "" then                      repeat with i from 1 to count of items in theOrigFilePath                          set this_item to item i of theOrigFilePath                         log this_item                         tell application "Finder"                              #make sure we are pointing to an alais that will be deleted and not another symlink file. Otherwise the original file will be deleted.                              set theKind to kind of ((POSIX file this_item) as alias)                              if theKind is not equal to "Alias" then                                 set this_item to quoted form of (item i of theOrigFilePath)                                 my symLink(aliasPath, this_item)                             end if                           end tell                       end repeat                    end if              end repeat               on symLink(aliasPath, aOrigFilePath)                  #move to trash the old alias file                  set theOldAlias to aliasPath                 tell application "Finder"                      #make sure we are pointing to an alais that will be deleted and not another symlink file. Otherwise the original file will be deleted.                      set theKind to kind of theOldAlias                     set theNewFilePath to (POSIX path of (aliasPath)) as string                     if theKind is equal to "Alias" then                         delete theOldAlias                          log "ln -s  " &amp; aOrigFilePath &amp; space &amp; (quoted form of theNewFilePath)                         #create the symlink                         do shell script "ln -s  " &amp; aOrigFilePath &amp; space &amp; (quoted form of theNewFilePath)                     end if                 end tell             end symLink /code/pre  Test first.. use at your own risk and all that..  <comment118626> Unfortunately(?), not so in my case.  The original files DO exist.  I don't know why the aliases broke. Looking at Get Info, I see they all point to THEMSELVES as the original.  Also in your code (and I'm not much of an AppleScripter so forgive me), it seems to start by creating an alias of everything in an entire directory. Why is that? I'm not clear on what that would do to help. I currently iterate through all aliases in a dir and try to get the original contents and if it fails, then I know I have a broken alias. So finding them is easy, it's finding their original file that I'm stuck on. <comment118748> `alias files of entire contents of (POSIX file "/Users/username" as alias)` just gets a list of all alias files under `/Users/username`. You could also try to extract the original paths from the resource forks with something like `cat example.txt\ alias/..namedfork/rsrc | strings`. <comment118807> I already have all the alias files, and all their paths.  Automator gave me that easily, that's not the problem.  The problem is that I can't perform a search on the filenames, in order to locate the original files elsewhere on my drive.  They do exist, and are located somewhere below a specific directory, but could be in any of hundreds of other subdirectories. <comment119101> Thanks but without a lot more detail, that's over my head.  I'm really looking to avoid having to drop outside of automator to shell scripting.  At most I'd prefer to stick with basic applescript but even that would be a last resort.  I just want to pass a variable in as the input to the spotlight module. <comment119168> I have been playing with Spotlight to edit my answer, and have some thoughts on this... If you do get Spotlight working through Automator, how will you know that the result isn't the dead alias or another file with the same simple name? It would be great to have the tool that you describe, but seems risky to implement it in this manner. May be good motivation to learn shell or python! <comment119177> I have left an answer for you. Which the script works. But It would be easier for us to show you the actual passing the list into an action if you show us how your lists are formed/formatted. And how you are actually are getting them. i.e the end result and how you got there <comment119192> Holy shiatzu!  This sounds like exactly what I need.  I will test it ASAP!  I didn't know you could drag & drop a variable like that - very cool!  Unfortunately I believe that will only work for single values, not lists.  But your applescript seems like the answer.  It still uses some shell scripting which I was hoping to avoid, but I've accepted that there's probably no other way.  Thanks, will let you know if this solves the problem for me! <comment119197> Close but no cigar. It moved 2 broken aliases to the trash, but the originals of both were located inside a folder called "Luftrum". The script made 2 symlinks of that folder, renamed each to the names of the dead aliases, and put them in the correct place. So I now have 2 differently-named but otherwise identical aliases to a folder, that contains items other than just the actual dead alias items. I'll try troubleshooting this myself but you may be able to do it more quickly and if you can edit your answer, I'd appreciate it! <comment119199> Additional observation, it dies on filenames that contain ampersands.  Looks like they need to be escaped, but I'm not sure of the syntax to accomplish that. <comment119202> Uh oh... another serious issue is that I have multiple aliases in some cases.  So the script is assuming that the first matching filename found, is the original when it may not be.  Should also check to see that it's not an alias.  I'm going to try and fix this myself but in case I fail, would be amazing if you could make this adjustment as well.  =) <comment119209> Hi. I do not get your first two issues when I run tests. The first issue if I am understanding you correctly sounds like the script is finding the original files but file names are not being passed to the symlink code. Also testing on a i.e on a folder named "a folder with & ya" works for me. Applescript can have issues with some languages and their text encoding when it comes to files and folders. I suspect this is the case. But you really need to show an example of how your alias and files are organised and how your list is structured. And save us working from your worded description.. <comment119211> I'd be happy to, these comment boxes just don't allow me to do things like attach screen captures or format text in a more readable way.  I guess I can edit my original question... but that seems weird since the additions apply strictly to your response.  How do you suggest I provide you the detail that would help? <comment119212> You can show it in your question. Showing an example of the structure of the the lists, screen shots of how your files are organised. etc expands your question with relevant information. Just make sure you explain which  parts are which. :-) This will give us an idea of what you are really trying to do. (I hope) <comment119213> @beroe - It's pretty easy in automator to filter a folder's contents first, down to only aliases.  markhunte - Very much appreciate your response!  I hope my edited question now helps you to see what I'm trying to do. <comment119235> Updated the answer. <comment119236> Hi I have Updated the answer. <comment119238> Interesting update, I will check it out. I'm curious however as to why you're using an external file to store what amounts to variables, when you can assign variables already in automator and retrieve them later. Is there some downside to using variables with automator? <comment119240> I built this workflow and it runs without any error.  However it also doesn't do anything.  The values of all properties in MyProperties.scpt, are empty. <comment119241> I want to pass more than one variable to the final script. Doing so in the normal way does not allow me to do that. AFAIK.   I did not want to make it more complex than it already is. <comment119242> If you open the MyProperties.scpt they will appear empty. But if you script ran correct then the values will be inside the properties regardless of you opening the file. I suspect there maybe an error in the construction. I can post a link to my working workflow. <comment119243> Thanks, I will await your link and compare it to my own.  I don't see anything wrong in the construction, everything runs perfectly until the final script which just returns no results.  But will find out once you post yours.  Thanks again! <comment119244> Aha!  You were right, I had missed an "ignore input".  Now it runs and appears to have worked correctly - with one exception.  There is a single alias remaining behind that got ignored, and I see no obvious reason why.  I'm going to explore this a bit further on a larger scale and see if it encounters any other problems.  Thank you again SO much!  I will award the bounty to you shortly, provided this needs no additional followup questions. <comment119247> There appears to be 1 remaining issue, which I can live with and work around if need be.  1) Somehow many of my aliases have themselves set as the original file, and when it encounters these files the workflow skips right past them.  If you can easily spot the issue that causes this problem, great.  But if not then I can work around it fairly easily. <comment119250> I only  just noticed the edit to this comment.  I can't use a variable in this way because the input is a list of items, and automator does not handle lists in the above fashion.  You have to resort to AppleScript or shell scripting.  =( <comment119251> 2 additional problems: 1) After running for 5 to 10 minutes, I decided to empty the trash that was rapidly filling up.  This caused the workflow to abort due to "Finder is busy", and when I try to run it again, it fails immediately after selecting the first folder, with "Too many files open". Quitting and re-launching automator allows it to run again.  2) The speed at which the operations are performed, slows down with every symlink generated.  The first few go very fast but after 100 or so it is obviously slowing down, and after several hundred it is taking a couple of seconds per link. <comment119259> When I get a min. I could probably set it to gather all matches, All symlinks it needs to do,all deletes first in lists. Then do each operation in one go. But doing anything like this is going to take a while when you are doing it on as many files as what you are suggesting. <comment119328> Yeah that makes sense.  Unless you just feel like the exercise, I personally say there's no need to bother.  This gets me where I needed to be, and I can't thank you enough!  Have awarded you the bounty ans marked this as the solution.  Anything you choose to do beyond this, is just pure generosity.  :) <comment120251> In case you're interested in following my progress with this... I have a new problem that I've posted as another question - http://apple.stackexchange.com/questions/101878/why-is-automator-not-working-with-spotlight-search