Force Terminal to Use Gedit for any Text Editing - not vim <body> I'm learning to program. While following this mission, I typed git commit, which opened up vim. I don't know or want to know vim (no offense to vim lovers). I'd like to have:  ol literminal open gedit ever time it try to do text editing from the terminal; and /li ligedit release the terminal for further use./li /ol  How do I do that?  UPDATE:   Ok. I'm close, but I must be missing something.   Added code/Applications/gedit.app/Contents/MacOS//code to code/etc/paths/code  Because I wasn't root, I had to save it to my desktop. Then I had to move it to /etc, so, terminal handled that.   precodesudo mv paths /etc /code/pre  Then I changed the editor.   precodegit config --global core.editor "gedit" /code/pre  after typing   precodegit commit /code/pre  I received.   precodeerror: cannot run gedit: No such file or directory error: There was a problem with the editor 'gedit'. Please supply the message using either -m or -F option. /code/pre  UPDATED 2:  Relaunching terminal fixed the problem.   Thanks everyone.   <answer42486> In order to do this, type  precodeopen -a gedit path/to/file /code/pre  to open and run the gedit application (using the code-a/code switch issues a command to look for gedit in your code/Applications/code directory).    Alternatively, add code/Applications/gedit.app/Contents/MacOS//code to your code$PATH/code, which should allow you to open gedit from the terminal as well by simply typing  precodegedit /code/pre  <answer42487> You should edit your git configuration file regarding which editor to use.   As noted here How do I make git use the editor of my choice for commits?     From man git-commit:           ENVIRONMENT AND CONFIGURATION VARIABLES          The editor used to edit the commit log message will be chosen from the GIT_EDITOR environment variable, the core.editor configuration variable, the VISUAL environment variable, or the EDITOR environment variable (in that order).      <answer69066> See this post http://eddieringle.com/how-to-properly-configure-git-to-use-gedit-as-its-default-editor/  and excerpt below  precodegit config --global core.editor "gedit -w -s"     -w: wait for Gedit to save the file and exit before continuing     -s: runs that instance of Gedit in standalone mode to let gedit return after that window is closed. /code/pre  <answer238819> If your shell is codebash/code or codezsh/code, open your code${HOME}/.profile/code (not your code.bashrc/code since you don't have to do this setting on any subshell you will run) with codegedit/code or codevim/code.  Insert the following line:  precodeEDITOR=/Applications/gedit.app/Contents/MacOS/gedit export EDITOR /code/pre  ( You don't have to change your codePATH/code for this and moreover this might cause other side effects which might waste you a lot of time to analyze. )  Save and close (codevim/code: kbdESC/kbd,kbd:/kbd,kbdw/kbd,kbdq/kbd).  Open a new shell window to check your modification is safe, and load your code${HOME}/.profile/code:  precode. ~/.profile /code/pre  and check that codegedit/code is correctly called from codegit/code. strongIf/strong it's OK, strongthen/strong you might restart your session and this is now fixed forever.  NB.:  With this modification, codegedit/code will be used in any context where a command would need to call an editor for you.  <comment48289> setting EDITOR or VISUAL will allow you to use that editor from any command line program <comment48290> Yes. Those help when I'm in control, but will it help with situations where I'm not in control - like with the git commit command? Also, where would I find the $PATH file? <comment48291> $PATH is a variable usually set in your .bashrc file <comment48292> Yes, you usually want to set EDITOR - this is used by many other VCS, such as CVS or SVN. <comment48295> This fixed it. Thanks. <comment48296> This fixed it. Thanks. <comment48297> You really should learn vim well enough for basic text editing. It's an important skill for a programmer. GUI editors are nice and all, but sometimes a command line editor is the only choice and vim is a perfectly good one. I'm not saying you should use it for git messages, but you should know how it's done. "I don't know or want to know vim" is a stupid attitude. It should be "I prefer not to use vim, but I can when it's the best option". <comment48300> I was making the statement "I don't know or want to know vim" to avoid getting answers on how to use vim. It's the perfect attitude if you want to clearly state what you don't want. I have no problem with vim or learning vim in the future, but my ineptitude with non-GUI text editors was causing more problems than help. Since everything regarding programming is new for me, I have to pick my battles and a non-GUI text editor wasn't going to be one of them today. <comment48301> In should only take you five minutes to learn enough about vim to type a git message. And learning vim is a lot easier than figuring out how to integrate a GUI text editor into the command line, and in many common situations it's impossible. Anyway, I just wanted to point out you should put vim on your to-do list as something to learn one day. Preferably soon. <comment48341> @cm2 - not just VCS but other processes. <comment48354> @Mark Ooops, I meant 'many other programs including VCS...'!  Indeed, these are used by lots of programs. <comment48756> @Dorje, if my answer solved your problem, please click "accept answer" on the left side of my answer. Glad this helped! <comment80259> Did you verify that this works on OS X? <comment89611> I do not have OS X but verifying in Linux I though it might be helpful for others to know about it to give it a try. <comment132567> If you put the line `export EDITOR=gedit` in `~/.bash_profile`, then EVERY command line program that wants you to edit something will open it in gedit. Also, you should try out `nano`, which is a *very* simple CLI text editor, and should also be present on most *nixes. (It is included by default on Mac OS X.) It is much more like a *normal* text editor, and all the commands are listed in two lines at the bottom of the window. (You will probably find it more convenient for git commits, for example, because you won't have to jump from window to window.) <comment292946> better use .bash_profile or the correct zsh ditfile rather than .profile as if something else adds to the . files .profile would not be loaded