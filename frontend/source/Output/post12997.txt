Can home and end keys be mapped when using Terminal? <body> The codehome/code and codeend/code keys on a MacBook Pro can be emulated with fn + left arrow or fn + right arrow.  Or when certain settings are changed, with the Command (Apple) key instead of fn.    None of these works in Terminal.    As I frequently need to go to the beginning or end of the line and would also like to jump forwards or backwards by word.  How can I jump around on a line in Terminal?  <answer12998> Use kbdcontrol/kbd+kbda/kbd for HOME and kbdcontrol/kbd+kbde/kbd for END in Terminal.  Also use kbdesc/kbd+kbdf/kbd to move to the beginning of the strongnext/strong word and kbdesc/kbd+kbdb/kbd to move to the beginning of the strongcurrent/strong word.  (you Must be careful about current and next)  <answer13002> It sounds like you are looking for some help using readline and bash, here is an insane list of keyboard stuff modified from: http://www.math.utah.edu/docs/info/features_7.html#SEC45  kbdCtrl/kbdkbda/kbd     Move to the start of the line.br kbdCtrl/kbdkbde/kbd     Move to the end of the line.br kbdEsc/kbdkbdf/kbd     Move forward a word.br kbdEsc/kbdkbdb/kbd     Move backward a word.br kbdCtrl/kbdkbdl/kbd    Clear the screen, reprinting the current line at the top.br br kbdCtrl/kbdkbdk/kbd    Kill the text from the current cursor position to the end of the line.br kbdEsc/kbdkbdd/kbd     Kill from the cursor to the end of the current word, or if between words, to the end of the next word. br kbdEsc/kbdkbdDel/kbd     Kill from the cursor the start of the previous word, or if between words, to the start of the previous word. br kbdCtrl/kbdkbdw/kbd     Kill from the cursor to the previous whitespace. This is different than kbdEsc/kbdkbdDel/kbdkbdCtrl/kbdkbda /kbd  because the word boundaries differ. br    kbdCtrl/kbdkbdd/kbd     Delete the character underneath the cursor. br kbdCtrl/kbdkbd_/kbd     Undo the last thing that you did. You can undo all the way back to an empty line.br br And, here is how to yank the text back into the line. Yanking means to copy the most-recently-killed text from the kill buffer.br br kbdCtrl/kbdkbdy/kbd     Yank the most recently killed text back into the buffer at the cursor. br kbdEsc/kbdkbdy/kbd     Rotate the kill-ring, and yank the new top. You can only do this if the prior command is kbdCtrl/kbdkbdy/kbd or kbdEsc/kbdkbdy/kbd.br   <answer77544> For those that prefer to use the arrow keys, hitting kbdfn/kbdkbdShift/kbd+kbdLeft Arrow/kbd will take you home on the command line. Similarly, kbdfn/kbdkbdShift/kbd+kbdRight Arrow/kbd will take you to the end.  <answer93829> The other answers are great and more portable, but here's "the OS X way" for a regular keyboard (which is opposite of many other terminals).  Try the following:  kbdShift/kbdkbdHome/kbd - Beginning of Linebr kbdShift/kbdkbdEnd/kbd - End of Linebr  From http://www.greenend.org.uk/rjk/tech/macbits.html  <answer114528> To answer the one about how to get the beginning or end of the line, it appears that by default Terminal maps these keys to it:  ul lishift+home &rarr; beginning of line, equivalent to the "home" key in normal terminals/li lishift+end &rarr; end of line, equivalent to the "end" key in normal terminals/li /ul  If you want home and end to work the "normal" way (and not require shift), go to [Terminal menu] &rarr; Preferences &rarr; Profiles tab (or settings on some versions of OS X) &rarr; Keyboard sub-tab.  Then modify/add these keys to be the following "send string to shell"  ul lihome: code\033[H/code/li liend:  code\033[F/code/li /ul  You can get the code\033/code part by hitting the escape key within the edit dialog input, if you need to add it.  Then home and end will work like normal again (phew).  Also note that "alt + &larr;" and "alt + &rarr;" by default in terminal map to word left and word right, another handy combo to remember.  In later versions of Mac OS X, if the terminal screen shifts up or down when you press the home/end key, the home key may need to be set to code\033[1~/code and the end key to code\033[4~/code to get the results you want (no shift needed).  Feel free to modify this answer to add more useful key bindings, as it is a community wiki.  <answer124835> You can move one word at a time with kbdoption/kbd+kbdleft/kbd and kbdoption/kbd+kbdright/kbd.  Regarding using kbdhome/kbd and kbdend/kbd, Terminal's default bindings are the following:  ul likbdshift/kbd+kbdhome/kbd &rarr; jump to beginning of line/li likbdshift/kbd+kbdend/kbd &rarr; jump to end of line/li likbdhome/kbd &rarr; scroll to top of scroll-back buffer/li likbdend/kbd &rarr; scroll to bottom of scroll-back buffer/li /ul  In many other terminal apps (on multiple platforms), those modified and unmodified pairs are reversed (i.e. naked kbdhome/kbd and kbdend/kbd are used to jump around the current line and the modified versions (whether by kbdshift/kbd or something else) are used to navigate the scroll-back buffer). You can reverse Terminal's bindings to work that way if you wish by doing the following:  Go to Terminal menu &rarr; Preferences &rarr; Settings/Profile tab &rarr; Keyboard sub-tab.  Then modify the key–action pairs to be the following:  ul li↖︎: Send text: \033[H/li li⇧↖︎: Scroll To Top/li li↘︎: Send text: \033[F/li li⇧↘︎: Scroll To Bottom/li /ul  Note: \033 is entered into the text-to-be-sent box in the Edit dialog by pressing the escape key.  While there, you may want to similarly swap the bindings of modified and unmodified kbdpage up/kbd and kbdpage down/kbd, to keep things consistent: pressing a navigation key with kbdshift/kbd represents a command to Terminal itself (to navigate the scroll-back buffer like a document), while pressing one without sends the key-press through to whatever's running emwithin/em it (e.g. codebash/code, codeless/code, codenano/code, codescreen/code, etc.). The key–action pairs for that are:  ul li⇞: Send text: \033[5~/li li⇧⇞: Scroll Page Up/li li⇟: Send text: \033[6~/li li⇧⇟: Scroll Page Down/li /ul  <answer136896> here's the list in printable form, as desired :)  http://pastebin.com/uCqwn7qs  I also fixed a "bug" in the description. This is what you could originally read in the instructions:  emESC-d Kill from the cursor the start of the previous word, or if between words, to the start of the previous word./em   This smells badly like a cut-and-paste mistake, since both partial sentences tell the very same thing. Telling from plain logic, first half must actually read "from the cursor to the start of the current word".  <answer155198>    ... what about jumping around by word? (ctrl-left and ctrl-right in windows)   precode# in ~/.inputrc "\033[5C": forward-word "\033[5D": backward-word /code/pre  <answer266486> This is the most effective way to make it work also with vim. Go to Terminal - Preferences - Profiles - Keyboard and add:  Key: ↖ Action: \033OH  Key: ↗ Action: \033OF  <answer267665> I'd like to provide an alternative solution to this problem. This works great if you are a vi user. Vim Key Bindings in Terminal provides a way to use your terminal in a vim style. You can do this through typing codeset -o vi/code in terminal and feel free to put it in code.bash_profile/code if you want. After this, your terminal is effectively a vim editor. You can use codeesc/code key to go into command mode and walk around in a vim way. For example, code0/code gets you to the beginning and code$/code gets you to the end. You can also use codeI/code and codeA/code to go to the beginning and the end and go into editing mode right away. codew/code and codeb/code let you move forward and backward by one word. And if you try to go into visual mode by pressing codev/code, you will be given a vim editor and the text you have when you leave this editor will be executed in the terminal.   Be advised that this vim key binding will nullify all the hotkeys you learned from other answers.   <answer271648> Mapping kbdhome/kbd and kbdend/kbd keys with your desired functionality will easily solve the problem.  Many answers have been posted, but in case you are using codezsh/code, you can set kbdhome/kbd to:  precode\001 /code/pre  and set kbdend/kbd to:  precode\005 /code/pre  by clicking empreference - profile - keyboard./em  <comment13665> perfect!  what about jumping around by word?  (ctrl-left and ctrl-right in windows) <comment13666> @at01 I updated my answer. <comment13667> Another very handy one is Ctrl+l to clear the screen. <comment13668> Who designed the keys for Terminal?!?! <comment13669> wow, thanks!  I already credited the answer, but this is great <comment13671> No problemo, I had fun just making the list work with the site. <comment13691> Wow - good effort! <comment13692> Same to you on that sharing post :) <comment17283> this is invaluable - thanks - I wish this was available as a printable file somewhere! <comment17307> I realize it's not quite "optimized", but; File - Print? <comment215413> Wow, these are super awkward compared to term on linux.. any way to remap this nonsense? <comment238191> I prefer using option+left arrow and option+right arrow for moving to beginning of words <comment247176> \033[H and \033[F for home and end didn't work for me; however \001 and \005 did. You can enter these codes in the edit dialog by pressing ctrl-A and ctrl-E. I'm using zsh, I'm not sure whether that makes any difference. <comment277568> shift + home / end did the job <comment356973> Been trying to figure this out for a while, this saved me!