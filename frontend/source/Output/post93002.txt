How to use the Homebrew installed git on Mac? <body> I have installed the newest version of git (1.8.3) using homebrew but when I type  precodegit --version /code/pre  in my terminal, it prints:  precodegit version 1.7.10.2 (Apple Git-33) /code/pre  What should I do to replace the old version of git with the new one?  <answer93003> It depends on where your git comes from.  Xcode brings a version for example, maybe that is upfront in your path.  Maybe typing  precodewhich git /code/pre  will show where the old one is.  <answer93004> When you type  precodegit --version /code/pre  in Terminal.app or console, your comment on another question indicated the version it returns is the git in /usr/bin/git  If you installed Xcode 4.5 (and newer), and type   precodexcrun git --version /code/pre  in Terminal.app or console, the version it returns is the git in the Xcode app bundle.  If you are using Homebrew to install and update git, the simplest solution is to   ol limake sure you have admin rights as you'll be asked for the password for the admin/li lirename the original location by renaming it using mv. For example   sudo mv /usr/bin/git /usr/bin/git-ORIGINAL/li licreate a soft link using 'ln -s' to the git binary you installed with Homebrew./li /ol  Note that MattDMo has a better solution in the comments.  <answer93007> You have to rename the original git by apple in code/usr/bin//code to e. g. git-org since code/usr/bin/code is normally before code/usr/local/bin/code in your path directory where the brew stuff is.  So:  precodecd /usr/bin sudo mv git git-org /code/pre  and do not forget to link the brew git  precodebrew link git /code/pre  This assumes that code/usr/local/bin/code is in your code$PATH/code environment variable. If you still have problem try to run   precodebrew doctor  /code/pre  and fix the problems mentioned there.  <answer93179> Thanks everyone for helpful answers. In my case adding  precodeexport PATH="/usr/local/bin:${PATH}" /code/pre  in code~/.bash_profile/code followed by  precodesource ~/.bash_profile /code/pre  solved the problem for my user.  <answer100796> To upgrade anything using Homebrew on OSX which involves compilation using gcc, make sure you have the updated Command Line Tools from Xcode—yeah, I know, it sucks having to hide a system-wide tool in the preferences of an app.  h1Steps/h1  ol liGo to Xcode.app — Preferences — Downloads/li liUpdate (or install) Command Line Tools/li liRun codebrew doctor/code and fix all other hinderances/li liRun codebrew upgrade/code to upgrade all packages at once/li /ol  <answer118128> Once you've installed the latest git via brew (codebrew install git/code), run this one-liner (as suggested by codebrew doctor/code) if it isn't already there:  precodeecho "export PATH=/usr/local/bin:$PATH" &gt;&gt; ~/.bash_profile /code/pre  strongThen quit Terminal an open it again/strong (restart your bash session). You need to do this even if your PATH was already correct, as ZSH and Bash cache the contents of PATH (see the documentation on the built-in command codehash/code).  That should fix things really fast.  <answer127073> Ok, I'm ready to get serious about scm.  precode$ git --version git version 1.9.5 (Apple Git-50.3) /code/pre  Nope, that's not what I wanted. I &lt;3 homebrew, so:  precode$ brew install git /code/pre  All set?  precode$ git --version git version 1.9.5 (Apple Git-50.3) /code/pre  Doh! (scratches head)  precode$ which git /usr/bin/git /code/pre  Ah, Apple's git is in /usr/bin, so it trumps the homebrew one. What to do?  (A) Just rename Apple's binary  (B) Let homebrew-managed one take precedence:  [edit PATH export e.g. in ~/.zshrc (oh-my-zsh + iTerm2 FTW! /tangent)]  [specifically: move /usr/local/bin/git: before /usr/bin:]  ... and/or (e.g. to more broadly let homebrew stuff trump system installs, and have the precedence apply to all shells and users) also edit /etc/paths file, [moving /usr/local/bin above /usr/bin]  But assuming just the simplest / least invasive approach:  precode$ sudo mv /usr/bin/git /usr/bin/git-apple /code/pre  Did it work?  precode$ which git /usr/local/bin/git /code/pre  So far so good, now the moment of truth:  precode$ git --version git version 2.2.1 /code/pre  w00t! :) Time to go read http://git-scm.com ! :)  <answer170720> If you are installing git from git-scm.com directly and would want to use the latest downloaded git instead of apple(old) version of git.  ol liInstall git from git-scm.com/li liMost probably new git will be installed in code/usr/local/bin/git/code/li liTry codegit --version/code, if it returns Apple old version of git then proceed below/li licodecd ~/code (change directory to your home directory)/li litype codevi .bashrc/code/li liUse codei/code (to insert text in vi editor)/li liIf you find a line with codeexport PATH......./code, press enter on top of the export and type the following: codeexport PATH=/usr/local/:$PATH/code (Pay extreme caution with codePATH/code variable do not mess it up else it will cause problems for your OS) (hopefully new git should be installed in code/usr/local/git/code)/li liPress esc/li liEnter code:wq/code (to save the code.bashrc/code file)/li liExit out of terminal and start new terminal/li liNow try codegit --version/code (you should see new version)/li /ol  <answer272220> h1Status 2017/h1  All the tricks mentioned here in several answers are not necessary anymore on macOS Sierra with latest Homebrew. Forget codeexport PATH="..."/codeand modifications to code~/.bash_profile/code.  You simply do   precodebrew install git /code/pre  and your done.  <answer280815> Install git with brew, the run this.  codebrew link --force git/code  Close and reopen terminal to run codewhich git/code.  <answer285131> I tried this and it works for me.  precodebrew link --overwrite git /code/pre  <comment109110> it's in `/usr/bin/git`... <comment109111> That looks like two installations.  I think the normal (downloadable) git version goes to /usr/local/git/...   It's then a question of adding that to the path or removing the other (or both) <comment109117> You have a couple good answers - so I wanted to comment on the question. Are you looking for explicit instructions to install git from source from homebrew or a GUI client or just confirmation that OS X bundles several versions of git with the core OS? http://www.opensource.apple.com/source/Git/ (FWIW - The newest git I've seen Apple bundle to date is 1.7.12.4 which comes from Git-37) <comment109129> Don;t rename or chnage things in /usr/bin as it could break Apple thigs and they will get chnaged when you do a system or XCode update. use the path which is what it is designed for, <comment109130> @Mark you have a point. But I do not believe you will get trouble if you change only git in /usr/bin. For me it is working for several month. <comment109138> Is this 100% safe? Will it break anything mac related? <comment109142> If you follow the steps outlined, the solution won't break anything pre-installed since those git executables are not deleted. This is why at step 2 you should rename your original /usr/bin/git for e.g. as /usr/bin/git.BACKUP <comment109143> I would agree that normally changing things in /usr/bin is bad news, but I can't recall OS X actually using git, so the harm there might be minuscule and only relate to a "clean" system that matches the receipts. The harm would be an update to OS X might replace the new git with an older version, hence the normal practice to locate a new binary outside the system path location. <comment109149> Please don't do this - you really shouldn't be messing around with `/usr/bin`, as it's possible that other programs you don't even know about depend on vagaries associated with a particular version. The easiest solution, without moving anything, is to add `/usr/local/bin` to your `$PATH` environment variable before `/usr/bin` - IIRC, homebrew installs to `/usr/local/bin` <comment109150> I think it would be much easier to add `/usr/local/bin` (homebrew's install directory, IIRC) to the `$PATH` ahead of `/usr/bin` instead of mucking around with renaming and backing up, etc. <comment109319> Thanks @MattDMo, that seem to be the best approach in this case. <comment129905> If you want the change persistent across users, you can move `/usr/local/bin` above `/usr/bin` in `/etc/paths`. <comment132318> This is the solution proposed by Homebrew itself when running `brew doctor` to diagnose the issue <comment132902> this answer should be updated with the KevinT proposed solution of defining `/etc/paths`. Defining only the "export" may not be enough, if `/usr/bin` has "precedence" over `/usr/local/bin` (from brew)... <comment137853> How does this differ from the accepted answer? <comment137950> In my case, I didn't know I had to restart Terminal, so that part may help some people. Is faster than the accepted because of the one liner. If it's a competition I think my answer is misplaced. Otherwise I think it contributes. (Tell me if you want me to make an edit instead of this). <comment138019> You do that one liner when you install Homebrew <comment168423> "solved the problem." What was the problem? <comment198901> I found this answer helpful. Restarting the terminal is a non-obvious issue for many people unfamiliar with the workings of .bash_profile, and a gentle reminder for the rest of us. <comment228241> PS Rel to comments about risks of editing /usr/bin: IMHO it's NBD. (Tho I do like Global nomad's sugg. to do "sudo ln -s /usr/local/bin/git /usr/bin/git" ... which ensures that anything calling "/usr/bin/git" explicitly will get your brew-managed one. But my take is, installing git implies you're taking ownership of git on your system. Worries about unknown processes using an older, alternate version of git, might be misplaced. I recommend keeping up to date w/ git versions (for security, not just features), and managing it yourself. Homebrew makes this easy. /$0.02 <comment230976> This didn't work for me, to undo it, just do: sudo mv /usr/bin/git-apple /usr/bin/git . Juan Diego Gonzales's comment worked. (basically, follow the accepted answer then restart terminal). <comment230977> Remember to restart terminal! Didn't occur to me until i saw Juan Diego Gonzales's comment below <comment252520> @Souleiman: Restarting isn't necessary. `source ~/.bash_profile` will re-read that. Restarting is just probably faster/easier. :) <comment264216> @JuanDiegoGonzales Excellent observation! I was wondering the exact same thing after I installed git and didn't know why. After the **cache** hint, I did a bit more research: http://unix.stackexchange.com/q/5609/52921 <comment266986> Even with `which git` pointing to `/usr/local/bin/git`, this didn't work for me. To solve this, I had to uninstall the GitHub Mac app. <comment334345> You solved my day @Pfitz Thanks a lot <comment348544> @BSeven "What should I do to replace the old version of git with the new one?", is the problem. <comment348545> Do we know why adding /usr/local/bin in PATH fixes the problem? How does homebrew takes priority on xcode git? <comment353216> How does that change the default path? <comment359549> @PriyaRanjanSingh: including `/usr/local/bin` in `PATH` *before* `/usr/bin` make every command find the version of `git` which is in `/usr/local/bin` *before* the one which is the standard Apple one in `/usr/bin`. And this version is the one installed by `Homebrew`. <comment362675> MacOS 10.12.5: `sudo mv /usr/bin/git /usr/bin/git-apple  mv: rename /usr/bin/git to /usr/bin/git-apple: Operation not permitted` <comment363880> I think this is right, but you need to open a new terminal or the change isn't picked up