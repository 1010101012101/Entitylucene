Best way for automated script to determine whether git is really installed on OS X <body> I can locate executables named codegit/code in several ways (basically equivalent to codewhich git/code). But all of the solutions I know about are defeated by OS X's fake code/usr/bin/git/code program, which is a hook to a dialog offering to install Xcode's codegit/code (I'll refer to it subsequently as the emOS X git installer/em.)  I want to detect that situation and treat codegit/code as not found if that is the only one. I don't want to have to execute it to determine that, because I don't want to trigger the installer dialog.  Context: I'd like to implement the following (as part of a larger software installation process):  ul liDetermine whether a "real" git is installed (i.e., an executable named codegit/code, other than the OS X git installer, is on the codePATH/code),/li liIf it is, recognize and respect it and proceed (I have this part figured out),/li liIf it is not, install the one from the git project (I have this part figured out)./li /ul  I am comfortable parsing codePATH/code if needed and searching for executables myself, if I can find a way to ignore the OS X git installer. I am comfortable with a heuristic if it gets this right almost all the time; I don't need to handle edge cases (like someone creating an executable or script called codegit/code that is not codegit/code-compatible).  What's the best (most robust, secondarily most convenient) way to determine whether a non-OS X git installer codegit/code is installed on a system emwithout/em executing code/usr/bin/git/code (and triggering the installer dialog)? 