Getting launchd to read program arguments correctly <body> I have a launchd script where the command I'm trying to run is erroring (apparently that's not a word, it is now), complaining of improper usage.  The specific error I'm getting is the command's usage text dumped to the system log. From this I infer the other info (path to the command, timing etc.) in the plist is being parsed correctly, just not the command's options.  After the command usage I have one last line:  precode18/11/2013 09:30:00.101 com.apple.launchd.peruser.501: (fake.lable.seti[33833]) Exited with code: 1 /code/pre  But that just means "I exited with an error".  I know launchd splits the command from its options and in the man page tells you about ProgramArguments: "...Please note: many people are confused by this key. Please read execvp(3) very carefully!.."  Well I read execvp(3) and I'm none the wiser, so I'm asking you lovely lot.  Normally, running the command from the terminal it'd look like this:  precode/Library/Application\ Support/BOINC\ Data/boinccmd --host localhost --passwd gobbledygook --project http://setiathome.berkeley.edu/ update /code/pre  This works a treat.  And this is how I've split it in the Program/ProgramArguments section of my LaunchAgent plist:  precode&lt;key&gt;Program&lt;/key&gt;     &lt;string&gt;/Library/Application Support/BOINC Data/boinccmd&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;--host localhost&lt;/string&gt;         &lt;string&gt;--passwd gobbledygook&lt;/string&gt;         &lt;string&gt;--project http://setiathome.berkeley.edu/ update&lt;/string&gt;     &lt;/array&gt; /code/pre  (for the record, I originally had the path to boinccmd \escaped out, but that doesn't work, launchd escapes spaces in the path for you)  I've tried splitting the arguments down further:  precode&lt;key&gt;Program&lt;/key&gt;     &lt;string&gt;/Library/Application Support/BOINC Data/boinccmd&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;--host&lt;/string&gt;         &lt;string&gt;localhost&lt;/string&gt;         &lt;string&gt;--passwd&lt;/string&gt;         &lt;string&gt;gobbledygook&lt;/string&gt;         &lt;string&gt;--project&lt;/string&gt;         &lt;string&gt;http://setiathome.berkeley.edu/&lt;/string&gt;         &lt;string&gt;update&lt;/string&gt;     &lt;/array&gt; /code/pre  But that didn't seem to work either.  As ever, I'm very sure I'm missing something so simple.  Thanks.  hr  ANSWER: The first line of ProgramArguments needs to be the path to the program. This is what was tripping me up and indeed what was probably meant by the "...Please read very carefully!.." comment :) I also found I had to split the arguments down to their component parts. When I had all that in place the whole thing works a charm. Thank you very much.  precode&lt;key&gt;Program&lt;/key&gt;     &lt;string&gt;/Library/Application Support/BOINC Data/boinccmd&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/Library/Application Support/BOINC Data/boinccmd&lt;/string&gt;         &lt;string&gt;--host&lt;/string&gt;         &lt;string&gt;localhost&lt;/string&gt;         &lt;string&gt;--passwd&lt;/string&gt;         &lt;string&gt;gobbledygook&lt;/string&gt;         &lt;string&gt;--project&lt;/string&gt;         &lt;string&gt;http://setiathome.berkeley.edu/&lt;/string&gt;         &lt;string&gt;update&lt;/string&gt;     &lt;/array&gt; /code/pre  A final edit to say for an easy to understand explanation as to WHY this should be, see SirPavlova's explanation.  ~W  <answer110720> Based on the man page for exec(3), it seems that the first program argument should be the path to the executable:  precodeThe execv(), execvp(), and execvP() functions provide an array of pointers to null-terminated strings  that represent the argument list available to the new program.  The first argument, by convention,  should point to the file name associated with the file being executed. The array of pointers must be  terminated by a NULL pointer. /code/pre  If you can specify the path to the executable as the argument at index 0, it may help...  <answer111008> The codeProgram/code key specifies the file to execute, &amp; the codeProgramArguments/code key specifies the arguments which will be passed to the executing process. Strictly speaking you can pass whatever arguments you want to a process, but the convention is that the first one should be the name by which the process was invoked, so most programs ignore their first argument.sup‡/sup The file to execute is obviously necessary information, but if the  codeProgram/code key is is missing, launchd pretends it has the same value as the first argument in codeProgramArguments/code empurely as a convenience/em.  Your first example starts boinccmd &amp; gives it arguments that would be equivalent to the terminal command  precode--host\ localhost --passwd\ gobbledygook --project\ http://setiathome.berkeley.edu/\ update /code/pre  which tells boinccmd that you invoked it as "--host localhost" &amp; only passed it two weird arguments.  Your second example separates the arguments correctly, but as Eddie Kelley suggested it needs one inserted at the front. It tells boinccmd that you invoked it as "--host", then passed another six arguments. boinccmd can recognise the last five as being two options, but has no idea what the "localhost" business is about. As far as boinccmd can tell, it was invoked from the terminal as  precode/Library/Application\ Support/BOINC\ Data/boinccmd localhost --passwd gobbledygook --project http://setiathome.berkeley.edu/ update /code/pre  (note the missing "--host").  boinccmd is probably one of the great majority of programs that don't care what their first argument is, so you could probably actually just shove code&lt;string&gt;HELLO&lt;/string&gt;/code at the head of the codeProgramArguments/code array, but it's probably cleaner to remove the codeProgram/code key altogether &amp; just use this:  precode&lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/Library/Application Support/BOINC Data/boinccmd&lt;/string&gt;         &lt;string&gt;--host&lt;/string&gt;         &lt;string&gt;localhost&lt;/string&gt;         &lt;string&gt;--passwd&lt;/string&gt;         &lt;string&gt;gobbledygook&lt;/string&gt;         &lt;string&gt;--project&lt;/string&gt;         &lt;string&gt;http://setiathome.berkeley.edu/&lt;/string&gt;         &lt;string&gt;update&lt;/string&gt;     &lt;/array&gt; /code/pre  sup‡/sup It can seem like a meaningless redundancy, but some programs use this to good effect: bash et al. act as login shells if their first argument begins with code-/code, &amp; Vim enters various emulation modes if its first argument is codeed/code or codevi/code instead of codevim/code.  <comment130313> Using launchctl list com.label.plist I can see that launchd is getting the correct parts of the command to piece together. I was thinking maybe it was a problem related to the --, but apparently not. <comment130391> I don't have an answer for your problem, but your first example with `string--host localhost/string` will definitely *not* work. Remember, when you write a command line to a shell, it has no idea what's part of an option and what's a regular argument — it just splits on spaces *before* passing the arguments to the program being run. Also, it might help if you were to show the exact error that `boinccmd` is reporting. <comment130638> Edited my post to say what I'm seeing. Not that it'll be of any help! Also, I'm getting the same error if I split the options on their whitespace. I'm guessing it's the -- that's causing the problem somehow. <comment130640> As I've edited the post to show, the boinccmd is being found and run, the options being passed to it are somehow being mangled. Unless I'm missing what you're saying. <comment130648> I would try using just Program or ProgramArguments not both <comment130649> @Woodgie Yes that was found in Program - your ProgramArguments is imcorrect it needs the path name of the executable <comment130662> Oh. OH! I think I see now. Hang on, lemme test that. <comment130663> BINGO, doing that and putting each part of each command in its own string/string container worked. Thank you. I TOLD you it was simple! <comment130664> You posted as I was editing my main post! This is a great explanation. Thank you. <comment130676> Glad to be of help :) <comment169910> @SirPavlova, great help! However, is there any tool that helps  person to convert console invocation to plist format?