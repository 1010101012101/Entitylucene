Brew Problems on Mac <body> On my mac OSX Yosemite.  when I do a  codebrew update/code  precodeerror: unable to unlink old 'bin/brew' (Permission denied) error: unable to unlink old 'share/man/man1/brew.1' (Permission denied) /code/pre  OK. So I do a codesudo brew update/code  precodeMacBook-Pro:bin$ sudo brew update Password: Error: Cowardly refusing to `sudo brew update` You can use brew with sudo, but only if the brew executable is owned by root. However, this is both not recommended and completely unsupported so do so at your own risk. /code/pre  So it doesn't let me run the update in any way.   <answer216551> Try this:  precodesudo chown -R $USER /usr/local; brew update /code/pre  <answer216553> The homebrew has a doctor command to help with documenting any internal errors. I would start there rather than guessing what is happening.  precodebrew doctor /code/pre  Next, you could re-install the latest brew over the top of what you have if you can't get a reliable output from the doctor. It won't replace anything you downloaded from brew already - it will just get you a stable install package and the ability to take the next step (perhaps). Usually what happens is some other program or package thinks it needs to change all the permissions and ownership in /usr/local and that harms the assumptions that the brew tool makes.  <comment261716> Comments for clarifying the question - not guessing the answer : ) I've [moved them to chat](http://chat.stackexchange.com/rooms/31886/discussion-on-question-by-knows-not-much-brew-problems-on-mac) so we can have that meta conversation elsewhere. <comment261781> Also do not EVER use brew with sudo again. <comment264009> Also works on El Capitan <comment314434> Reading [this issue filed on github](https://github.com/Homebrew/legacy-homebrew/issues/9953) is a good way to understand why it's designed like this and what is the recommendation by the homebrew guys. Ideally you should have permissions to your `\usr\local` <comment353796> So with homebrew, there are apparently two options: (a) `chown` the `brew` executable to root, which means that any script it runs could be dangerous, or (b) `chown` all of /usr/local to yourself, which means that *you* could be dangerous.    Like Windows: Always run as Administrator.  Or `chown` /usr/local to me, then back to root.  Except that there are some things under /usr/local that I want to own.  Urgh. (The reason that I don't have everything owned by me is so that I can't f it up by accident.  Learned the hard way years ago when I `cat`ed a text file in the hard drive's MBR as root.)