How to access macOS localhost (port 3000) from Parallels IE? <body> On my work Mac (Sierra) I'm running a NodeJS webserver on localhost, port 3000. I need to access to it from Internet Explorer running in Parallels for testing purposes.  I have searched and read and experimented extensively, and have thus far been stymied. My current situation is as follows:  I've got a Parallels "Host-Only" network with my Mac at 10.37.129.2 and my virtual Windows box at 10.37.129.3  Pointing my IE to code10.37.129.2:3000/code fails.  I've jumped through every hoop imaginable to ensure port 3000 is open between the two, but codenmap -p 3000 10.37.129.2/code from the Windows side tells me port 3000 remains closed, as does Mac's Network Utility Port Scan software.  Sadly all guides and advice on the subject are either insufficiently similar, grossly outdated, or simply unsuccessful when attempted.  Any progress you help me achieve is greatly appreciated.  hr  The relevant portions of my server.js are:  precodeconst port = process.env.PORT || 3000; const host = process.env.HOST || 'localhost'; const proxyTarget = process.env.PROXY || 'none'; /code/pre  <answer261832> The temporary solution is to edit server.js and set codehost = '10.37.129.2'/code or set the codeHOST/code system variable to code10.37.129.2/code and read it in with codehost = process.env.HOST || 'localhost'/code. It may also be possible to edit code/private/etc/hosts/code to map code10.37.129.2/code to codelocalhost/code, though my quick test of that failed.  Everything was behaving precisely as expected. The codelocalhost/code name is mapped to code127.0.0.1/code, and not to any network facing IP address. Thus code10.37.129.2/code, which was my Mac's IP on the virtual network shared with Windows running in Parallels, was never reaching codelocalhost/code. This is correct and reasonable.  All credit goes to klanomath. Thanks!  <answer261836> The "technical background" of the special behavior (at least on Macs) of using localhost as "host constant" is the specific nature of dns.js, which obviously binds the node http/https server to the interface it reverse-resolves to the emconst host/em (= localhost) with the help of mDNSResponder.  This is localhost  127.0.0.1  lo0.  Any other interface like en0/en1 as physical interfaces or vnic0/vnic1 as Parallels' virtual interfaces won't be addressed/attached.  To solve this you may either  ul liset up a DNS-server like dnsmasq in Parallels' Host-only network and use the fqdn of the node http server host as emhost const/em/li liuse the IP-address of the node http server in Parallels' Host-only network as emhost const/em/li limodify the hosts files of every host in Parallels' Host-only network and add a line like code10.37.129.2 testserver.example.com/code and use testserver.example.com as emhost const/em/li /ul  <answer286566> One of the way I could use it, I found my local IP4 address provided by the router.   From Mac codesystem preferences &gt; Network &gt; IP Address: 192.168.x.xx/code  And let say if you access it in Mac with codehttp://localhost:3000/code you can do it also with codehttp://192.168.x.xx:3000/code from Mac itself and from Parallel Windows OS with shared network configuration.  This IP address could be changed each time you restart the router or choose another router etc.  Currently, I'm using Parallels Desktop 12  <comment327874> Did you try my proposals? <comment327876> Yes, you absolutely set me straight and put me on the right path. @klanomath <comment327881> localhost is a "magical" name and you can't/mustn't set it to anything else than a 127.x.y.z IP-address. You would have to set it also in any client's *hosts* file to be able to reach the remote "localhost|10.37.129.2" which would break any related RFC standard and render the clients' *hosts* files useless in respect to their own "localhost'iness". (I don't know how to say it precisely in English...) <comment362671> Worked for me! Thanks!