Restricting remote user to a single directory in 10.11 <body> I need to confine remotely logged in users to stay in 1 directory only, so  I would thought I should attack this problem via SFTP or SSH, so I asked in  Restrict sftp user to a single directory in El Capitan.  But since codesshd_config/code requires each component in the directory path must be owned by root, this requirement is not even possible in our case. So I guess both SSH and SFTP are not the solution.  What other approach can I take to do this task?  PS: After further reading, I think code/bin/bash -r/code might be the way forward. Not sure if I can set up codessh/code to load code/sh/bash -r/code by default.  PS: Tried to specify code/bin/bash -r/code in Login Shell field within the user's Advanced Options in Users &amp; Groups. Now the user cannot even login; password prompt keeps returning. In codesystem.log/code, I get  precodePAM: authentication error for illegal user /code/pre  Removing the code-r/code option then the user can log in. I think a bit more config in codesshd_config/code or code/etc/pam.d/sshd/code will do the job....   <answer223924> Create a file code/bin/rbash/code, make it executable and and set it as a shell for this newly created user:  precode#!/bin/bash exec /bin/bash -r "$@" /code/pre  The user over codessh/code is limited as manual page for bash describes in  "RESTRICTED SHELL" section.  <comment271304> You can try to add `/bin/rbash` as a shell for a user. It might help, since the previous one might got parsed wrong. But I don't think that `sftp` would work under these settings (maybe `internal-sftp`?), but for `ssh` it might be a partial solution. And by the way, to understand the importance of requirements "root owned", you should check [CVE-2009-2904](https://access.redhat.com/security/cve/CVE-2009-2904) <comment271305> In OS X there's no rbash shell.... When I looked up man page for bash, it says to use -r for restricted. Ummm... May be I can alias "/bin/bash -r" and trigger it instead? <comment271306> Yes. It is worth trying. <comment271427> Tried it. I got:            /rbash.sh Exec format error                    Gotta give up. <comment271452> Please, post exactly what you put into the  file and to the user. <comment271457> In /rbash.sh, i put "/bin/bash -r", no quotes. Nothing to the user as he can log in normally and use bash. Once logged in, I ran /rbash.sh, and I really got a restricted bash; can't cd. <comment271458> you should not forget about Shebang: `#!/bin/bash` or so on the first line, and the second line should inherit the arguments like `exec /bin/bash -r "$@"` <comment271476> Most importantly, "exit"'ing after logging into the restricted bash won't jump to a non-restricted bash! It disconnects completely! Yeah! <comment271477> I tried it without the exit in the third line. <comment271478> The third line should never get executed, since the `bash -r` get `exec`-ed. Or what did you mean by your first comment? <comment271479> I have no knowledge of how OS X loads /rbash.... I thought, may be OSX loads the proper /bin/bash first then load /rbash. If so, even tho I have a restricted bash at the end, typing "exit" might bring me back to /bin/bash, which makes this whole exercise pointless. However I was proven wrong; OSX loads /rbash directly! <comment271480> *nix way is as you wrote, but using `exec`, the original `bash` is "replaced" by `rbash` and there is no way to "return" back to the non-restricted `bash`.