How to set (restore) the com.apple.quarantine attribute? <body> There are questions with good answers that explain how to remove the com.apple.quarantine extended attribute but I was wondering how does one restore / set it back again?  I tried this:  precodexattr -w com.apple.quarantine $VALUE /Applications/AnApp.app /code/pre  but apparently not knowing what attribute's value should be this achieves nothing.  I guess it is all about the attribute's value, which is of the following format:  precodecom.apple.quarantine: 0061;53822fd4;Google\x20Chrome;C1022EC2-E1B2-4896-AF74-B68F4BF97779 /code/pre  What I want to do is make Gatekeeper ask me again whether I want to run this app or file, or not. Restore the same behavior as if the file was just downloaded from the Internet and it is run for the first time.  <answer256646> You can copy an existing com.apple.quarantine attribute of an arbitrary file to a proxy file and then apply it to arbitrary other files. If you open certain file types (e.g. .txt files) the quarantine attribute will be ignored though.  Example:  precodexattr -p com.apple.quarantine /Users/user/dnscrypt-osxclient-1.0.12.dmg &gt; quarantine.attr xattr -w com.apple.quarantine "`cat quarantine.attr`" test.command  /code/pre  This will apply the data gathered from the .dmg to the .command file - including download date and download app of the original dmg file. The original download date/app of the .command emwon't/em be restored though.  Source: Using xattr to set the Mac OSX quarantine property  hr  Format of the quarantine attribute:  precodeflag;date;app_name;UUID; /code/pre  ol liat least 0001-0003 rises the "Do you really want to open this file..." dialog, but 0062 doesn't./li lidate (in Unix hexadecimal timestamp at least 00000000-1c000000 are unknown dates, an early date which works is 1d000000: 02 Jun 1985 05:47:44 GMT)/li liapp (any app name allowed)/li liA UUID related with a file download which can be found in /Users/user/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 (obviously facultative)/li /ol  So using code0001;55555555;Klanomathiner;/code in the proxy file mentioned above and applying it to a file (in the example test.command) will rise:  img src="https://i.stack.imgur.com/43GtJ.png" alt="enter image description here"  or code0001;66666666;A Cyborg from the future;/code  img src="https://i.stack.imgur.com/uW8jP.png" alt="enter image description here"  After opening the file the first "flag" will be set to 0041 and reopening it  won't rise anything.  hr  With some bash/SQL-magic you may even recover the original UUID and the download date/app by querying for the file name in the sqlite database - which the file com.apple.LaunchServices.QuarantineEventsV2 represents - and restore the original quarantine attribute. sBut I'm too lazy to draw this up now./s Someone else has done similar/related work already:  Read com.apple.quarantine  precode/usr/bin/xattr -p com.apple.quarantine "${file}" /code/pre  Set com.apple.quarantine  precodeapplication="cURL" date=$(printf %x $(date +%s)) uuid=$(/usr/bin/uuidgen) /usr/bin/xattr -w com.apple.quarantine "0002;${date};${application};${uuid}" "${file}" /code/pre  Insert UUID into Database  precodedownload_url="http://example.com/file.zip" date=$(($(date +%s) - 978307200)) /usr/bin/sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 "INSERT INTO \"LSQuarantineEvent\" VALUES('${uuid}',${date},NULL,'${application}','${download_url}',NULL,NULL,0,NULL,'${url}',NULL);" /code/pre  Check if UUID exists in Database  precode/usr/bin/sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 "SELECT * FROM LSQuarantineEvent WHERE LSQuarantineEventIdentifier == '${uuid}'" /code/pre  <comment320156> It's a workaround and good to know about but this answer doesn't explain what value an attribute has to have set in order to cause Gatekeeper to present that safety dialog that is meant to make users think twice before running an App. <comment320531> Thank you klanomath. This answers my question at length. I think we have a very good answer here and a lot of people will benefit from seeing it!