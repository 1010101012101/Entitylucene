Automator action not supplied with the required data <body> I'm trying to do the following in an Automator workflow:  ol liAsk for Finder items from folder A/li liIn folder A, add a emsuffix/em to the file names/li liCopy them to folder B/li liIn folder B, with an AppleScript, split the file name by a delimiter and then rename the file with the second half of the text split/li liIn folder B, add a emprefix/em to the file names/li liIn folder B, add a emsuffix/em to the file names/li /ol  Here is a sample of the file names I'm trying to rename:  ul lia new file$SG789.jpg/li lifile_2$123-456.jpg/li lifile_name$LG123.jpg/li lithis_file$558-432.jpg/li /ul  The delimiter I'm splitting by is the "$" dollar sign to create the following new files:  ul liSG789.jpg/li li123-456.jpg/li liLG123.jpg/li li558-432.jpg/li /ul  These are the file name formats I'd like for the automator to continue processing.   Thanks to another user, I was able to get this far. However, my workflow is failing at step 5. I'm getting the following warning:  emThe action "Rename Finder Items: Add Text" was not supplied with the required data./em  Here is the workflow setup in Automator:  img src="https://i.stack.imgur.com/mI5ea.jpg" alt="enter image description here"  With the AppleScript below:  precode on run {input, parameters}      try         set AppleScript's text item delimiters to "$"         set output to {}         repeat with anItem in input             set the end of output to text item 2 of (anItem as text)         end repeat         set AppleScript's text item delimiters to {}         return output     on error eStr number eNum         display dialog eStr &amp; " number " &amp; eNum buttons {"OK"} ¬             default button 1 with icon caution         set AppleScript's text item delimiters to {}         return     end try end run /code/pre  I thought by returning output, the next workflow would pick up and continue with the required changes. I'm seeing that is not the case.  How do I return my output so that the next workflow item can use it and continue with the file renaming?  <answer292702> It is still not totally clear what it is you're trying to accomplish, however, here is an example emworkflow/em that you might find useful.  h1strongFirst Automator Workflow/strong/h1  ul liBroken into two working segments:/li /ul  h1strongFirst Segment:/strong/h1  ul listrongAsk for Finder Items/strong/li listrongRename Finder Items: Add Text/strong/li listrongCopy Finder Items/strong/li listrongRun Shell Script/strong  ul liSettings: strongShell: bin/bash/strong emand/em strongPass input: as arguments/strong  ul liReplace the emdefault code/em with the emcode/em below./li liThis is what's used to remove emup to and including the/em code$/code in the embasename/em of the emfilename/em./li /ul/li /ul/li /ul  Code for strongRun Shell Script/strong emaction/em:  precodecd "$(dirname "$1")" for f in "$@" do     mv "$(basename "$f")" "$(printf "$(basename "$f")" | sed -E 's/^.*\$//')" done echo "$(ls -1)" /code/pre  ul listrongNote:/strong The codeecho "$(ls -1)"/code emcommand/em is not really necessary in this emuse case/em and was used in this example just to show the filenames had been changed and to show that in the Results empane/em./li /ul  hr  ul listrongUpdate:/strong New code for strongRun Shell Script/strong emaction/em:brbrUse this emcode/em instead of the original emcode/em, above. I've modified it to be a bit more efficient having to call codebasename/code once, instead of twice. (I have not updated the emcode/em in the strongRun Shell Script/strong emaction/em in the original image below.)  precodecd "$(dirname "$1")" for f in "$@"; do     n="$(basename "$f")"     mv "$n" "$(printf "$n" | sed -E 's/^.*\$//')" done echo "$(ls -1)" /code/pre/li listrongNote:/strong See also the second strongAutomator/strong emworkflow/em, shown after the original image below, which negates the need for the strongSecond Segment:/strong, as its strongRun Shell Script/strong emaction/em is coded to handle the renaming that takes place in the second segment, adding codeprefix-/code and swapping code-proc/code for code-suffix/code./li /ul  hr  h1strongSecond Segment:/strong/h1  ul listrongAsk for Finder Items/strong  ul liOptions: strong[√] Ignore this action's input/strong  ul liBy checking this option you'll see, in the image below, there is a wanted disconnect between the previous action and this one./li /ul/li /ul/li listrongRename Finder Items: Add Text/strong/li listrongRename Finder Items: Add Text/strong/li /ul  See the image below for other applicable settings of strongAutomator/strong emactions/em, as shown in the OP.  As you can see in the image below, all emactions/em completed successfully and did as programed, with the Results pane of each emaction/em showing the results of it's emaction/em.  hr  img src="https://i.stack.imgur.com/ukARV.png" alt="First Automator Workflow"  hr  br  h1strongSecond Automator Workflow/strong/h1  supTo be used instead of the First Automator Workflow. /sup  ul listrongAsk for Finder Items/strong/li listrongRename Finder Items: Add Text/strong/li listrongCopy Finder Items/strong/li listrongRun Shell Script/strong  ul liSettings: strongShell: bin/bash/strong emand/em strongPass input: as arguments/strong  ul liReplace the emdefault code/em with the emcode/em below the image./li /ul/li /ul/li /ul  img src="https://i.stack.imgur.com/UYBB2.png" alt="Second Automator Workflow"  ul liThe results of the first three emactions/em in this second strongAutomator/strong emworkflow/em are the exact same as shown in the first emworkflow/em above, therefore I've left the strongResults/strong empane/em hidden for these emactions/em. However, the strongResults/strong empane/em for the strongRun Shell Script/strong emaction/em shows the wanted results./li /ul  Code for strongRun Shell Script/strong emaction/em in the Second Automator Workflow:  precodep='prefix-' s='-suffix' t='-proc'  cd "$(dirname "$1")" for f in "$@"; do     n="$(basename "$f")"     if [[ $n =~ ^.*\$.*${t}\.${n##*.} ]]; then         mv "$n" "${p}$(printf "${n%.*}" | sed -E -e "s/$t/$s/" -e 's/^.*\$//').${n##*.}"     fi done echo "$(ls -1)" /code/pre  ul liUpdate Note: I've modified the emcode/em by placing the emvariable/em assignments outside of the codefor/code emloop/em, as that is the only emcode/em you should need/want to modify as necessary (and they don't need to be within the codefor/code emloop/em). I have not updated the image of the Automator emworkflow/em to reflect this update./li /ul  hr  You could, if needed/wanted, add a different second segment to this second emworkflow/em, but the emcode/em in this  strongRun Shell Script/strong emaction/em eliminates the need for the two strongRename Finder Items: Add Text/strong emactions/em that were in the second segment of the first (original), emworkflow/em.  Note: I will update this with an explanation of what the emcode/em is doing in strongRun Shell Script/strong emaction/em, as soon as I can.  <comment369236> You said, "_I thought by returning output, the next workflow would pick up and continue with the required changes. I'm seeing that is not the case._" and what's being returned by the AppleScript action is just a list of filenames, not the fully qualified pathnames, and while it could be modified to return the FQP, it still will not work with the next action because it's just a list of text strings, not filesystem objects as was passed to the AppleScript action. In the AppleScript action the FSO's were coerced to text strings in order to process as text items, i.e. `(anItem as text)`. <comment369239> You said "_How do I return my output so that the next workflow item can use it and continue with the file renaming?_", I do not know if there is a way to achieve what you are trying to do with the AppleScript action. That said, why are you modifying the original files before copying them, that just doesn't make sense. I'd swap Rename Finder Items: Add Text with Copy Finder Items. Anyway, it's not clear to me why you're going through so many different steps if all you're trying to do is rename a file e.g. `a new file$SG789.jpg` to `SG789.jpg`. <comment369240> I'd probably opt for doing this with a bash script, IMO it would be much easier and more efficient. Another option is to get the FSO's, pass them to the AppleScript action and programmatically do everything else that needs  to be done to the FSO's within the AppleScript _code_.  (Which of course will require additional coding.) <comment369249> @user3439894 Thank you for the explanation. It makes sense. <comment369251> @user3439894 The reason I'm modifying the originals is because I need to keep a record of what files were processed, since my workflow strips out the name and just leaves what looks like random characters. If you have an alternative suggestion to keeping track of the original files already proccessed, I'm open to suggestions. <comment369298> I do not know whether or not you've seen the answer I originally posted, however I've updated it, adding updated _code_ for the Run Shell Script action in the original Automator workflow, and added a second Automator workflow. Just read the section under **Update:** New _code_ for **Run Shell Script** _action:_ and also below **Second Automator Workflow** for more details. <comment369465> The second workflow automation definitely does the job. I also see why you felt I had too many steps, considering the rest of the renaming could have been done in a script. Thank you. <comment369477> @Yazmin, I haven't had time yet to update the answer with an explanation of what the _code_ in the _bash script_ is doing, but will as soon as I get a chance. Suffice it to say you should only have to modify the _value_ of the three _variables_ `p`, `s` and `t` as needed/wanted. The remaining _code_ should not need to be modified. <comment369486> @Yazmin, Update Note: I've modified the _code_, in the second Automator _workflow_, by placing the _variable_ assignments outside of the `for` _loop_, as that is the only _code_ you should need/want to modify as necessary (and they don't need to be within the `for` _loop_). I have not updated the image of the Automator _workflow_ to reflect this update. <comment369493> Makes sense. Thank you.