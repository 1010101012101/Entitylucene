Can the iCloud sync progress be observed? <body> I have my Mac running OS X 10.8 set up so that I can see the contents of its iCloud repository at code~/Library/Mobile Documents/code (see this question and this question for more information on how that works). However, I'd like to be able to see / visualize / understand the sync state of my Mac:  ul liIs my Mac in sync with iCloud?/li liIf not, what is being uploaded / downloaded / how long will it take?/li liAre there any utilities or built-in features of OS X that will allow me to see any of this?/li /ul  These are valid questions even without iCloud explicitly exposed in the filesystem, but are obviously more useful if you copy bulk numbers of files in/out of the iCloud repository explicitly.  <answer69110> There are no built-in OS X tools designed explicitly for showing you iCloud synchronise information.  As of OS X 10.8.2, Apple has not made this information public. Unless Apple publish OS X Application Programmer Interfaces (APIs) to provide the information you seek, no third party will be able to accurately provide the synchronisation details.  Given this, please give Apple's iCloud team feedback; let Apple's engineers know what you want and why.  While you wait, you can track connections to Apple's iCloud servers, measure traffic flow, and disk access. These metrics will provide some insight but they will not provide expected durations or percentage complete measures.  To explore the data flow, explore the OS X's built-in tools like lsof and netstat.  <answer69131> If you REALLY want to see what's going on, you can use tcpdump (/usr/sbin/tcpdump), which does packet capture.  It'll show you the packets as they go over the network. It's not the easiest, but it's the most comprehensive way to see this data.    <answer69424> h1Activity/h1  The following command, run whilst working with iCloud with apps (such as Smultron 4 and TextEdit) that support Mobile Documents –  precodesudo opensnoop -n ubd /code/pre  – shows local files opened by the ubiquity daemon. Files include databases, one database per peer. One directory per peer at the following path:   code~/Library/Application Support/Ubiquity/code  h1Types of data/h1  If you wish to measure progress, decide which types to measure:   ul liCore Data/li lidocuments/li likey-value./li /ul  h2Saves, progress and measurement/h2  h3Core Data/h3     … The change log files, not the store file, are uploaded to iCloud and   downloaded to each of a user’s other devices. When a change log   arrives from another device attached to the same iCloud account, Core   Data updates your app’s local copy of the SQLite database, based on   the received change log. iCloud and Core Data ensure that each local   database is updated with the same set of changes. …   Consider: without interpreting the emcontent/em of a change log, will it be worthwhile to measure progress of upload of the log file?  h3Documents/h3  In the Mac Developer Library:      … Document-based apps can adopt autosaving in place, and its documents   are automatically saved at appropriate times …   Also:      strongAutomatic Data-Saving Strategies Relieve the User/strong      … appropriate points in your code where any user-related changes   should be saved and write those changes to disk automatically. …      Some appropriate times when you can save user data automatically   include the following:      ul   liWhen the user closes the app window or quits the app (applicationWillTerminate:)/li   liWhen the app is deactivated (applicationWillResignActive:)/li   liWhen the user hides your app (applicationWillHide:)/li   liWhenever the user makes a valid change to data in your app/li   /ul      The last item means that you have the freedom to save the user’s data   at any time it makes sense to do so. For example, if the user is   editing fields of a data record, you can save each field value as it   is changed or you can wait and save all fields when the user displays   a new record. Making these types of incremental changes ensures that   the data is always up-to-date but also requires more fine-grained   management of your data model. …   Consider: those saves may be so frequent, and the amounts so small, that measurement will be not worthwhile.   h3item-info.db/h3  I toyed with SQLite Database Browser to browse the codeitem-info.db/code database for the peer that seems to be my local Mac. As I suspected, the app could browse only whilst the system was not using the database – within two seconds of using Preview to edit an codeUntitled.png/code in iCloud, I could no longer browse the database … and so on.   h1References/h1  iCloud Design Guide   strongMac App Programming Guide/strong: The Core App Design:   ul liDocument-Based Apps Are Based on an NSDocument Subclass: The Document Architecture Provides Many Capabilities for Free/li liSupport the Key Runtime Behaviors in Your Apps: Automatic Termination/li /ul  <answer181921> Running the following in Terminal seems to do the trick for me:  precodelsof | grep "Photos Library.photoslibrary/private/com.apple.cloudphotosd/CloudSync.noindex/Engine/filecache" /code/pre  The lsof command results in this:  precodecloudd    11237 carl   10r     REG                1,4   3009775 1460206 /Users/carl/Pictures/Photos Library.photoslibrary/private/com.apple.cloudphotosd/CloudSync.noindex/Engine/filecache/AYX/cplAYX8CMwjKIhIUqNRCwXobzKHe9iC.jpeg cloudd    11237 carl   21r     REG                1,4   2465075 1460208 /Users/carl/Pictures/Photos Library.photoslibrary/private/com.apple.cloudphotosd/CloudSync.noindex/Engine/filecache/ATL/cplATLqV8CAvtA70qoJqZ21PimnEIPe.jpeg /code/pre  just issue it again (up arrow and press return) and you should see it change.  <answer211470> As of OS X 10.11 (if not 10.10), if you have any subfolder of your iCloud Drive open in the Finder while changing files in iCloud, and the status bar of that window is turned on, the Finder will tell you how many files are being synced and how much data has been transferred so far.  <comment80321> Thanks for the answer. Had guessed this might be the case but I was hoping someone else had already reverse-engineered the traffic flow, built a tool, etc. <comment80716> That's pretty good, thanks. The command you give doesn't produce particularly user-friendly output (and doesn't really address insync/out-of-sync state, upload/download state, etc.), but it's closer than anything else so far. <comment80921> Thanks – in theory we might do more with DTrace-based commands such as `iosnoop` but not all things DTrace-related work perfectly on OS X. I, too, am curious about the things that are not covered by this answer. <comment216410> Where are you running this command? What does the output look like? <comment216421> From the terminal. <comment216423> You do not need to cd ~/Pictures.  not sure why patrix edited that in? <comment216428> You are right, misread your intend. OTOH, you can edit your answer to add additional content, no need to post a second one.