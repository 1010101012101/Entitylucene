How to get xargs not to eat double spaces <body> I'm trying to process some files with double spaces in the name. It seems like xargs is removing spaces. Example  precode$ echo "foo  bar" | xargs -I {} echo "{}" foo bar /code/pre  Notice there's only 1 space between codefoo/code and codebar/code but 2 were passed in. The example above works in Ubuntu 16.04 bash  Note I'm actually trying to process a list of files as in  precodecat list-of-files | xargs -I {} echo "{}" /code/pre  code-O/code doesn't work in this case as xargs sees the entire file as one filename.  Tried code-E '\n'/code but that still ate the extra space  <answer286181> Here are 3 possibilities that may work for you:  h21. BSD xargs/h2  This is built in to MacOS, but will require you to quote the filenames in your codelist-of-files/code  precode$ more list-of-files 'file1' 'file2' 'file 3' 'file  4' /code/pre  emnote: I added the code-t/code option in order to show the generated command before it executes./em  precode$ cat list-of-files | xargs -t -I {} echo "{}" echo file1 file1 echo file2 file2 echo file 3 file 3 echo file  4 file  4 /code/pre  h22. GNU xargs/h2  GNU xargs is not installed on MacOS by default, but can be installed via homebrew (in the findutils package).  codebrew install findutils/code  Using GNU xargs via homebrew would not require you to quote the filenames, and would give the same result as using BSD xargs, and quoting the filenames (option 1, above).  h23. find (instead of codelist-of-files/code)/h2  Rather than using a file for your input, use the codefind/code command. Something like the following should work:  precode$ ls -laF file* -rw-r--r--  1 sfederman  staff  0 Jun  7 22:53 file  4 -rw-r--r--  1 sfederman  staff  0 Jun  7 22:53 file 3 -rw-r--r--  1 sfederman  staff  0 Jun  7 22:53 file1 -rw-r--r--  1 sfederman  staff  0 Jun  7 22:53 file2  $ find . -name "file*" | xargs -0 -I {} echo "{}" ./file  4 ./file 3 ./file1 ./file2 /code/pre  Or, avoiding xargs completely:  precode$ find . -name "file*" -exec echo "{}" \; ./file  4 ./file1 ./file2 ./file 3 /code/pre  <answer286221> Here's a work around for your issue using codesed/code to wrap each line of the file with double quotes.  precodesed 's/\(.*\)/"\1"/' &lt; list-of-files | xargs -I {} echo {} /code/pre  This also works with GNU codexargs/code.  <comment360946> Try adding `-0` to the xargs command. This is likely a difference between GNU xargs (in Ubuntu) and BSD (on MacOS). <comment360982> Actually, `xargs` (without `-0`) gets confused by *any* spaces (or certain other characters) in filenames. In your example, it actually sees "foo" and "bar" as two separate items (and then `echo` splices them together with a single space between). See [BashFAQ #20: How can I find and safely handle file names containing newlines, spaces or both?](http://mywiki.wooledge.org/BashFAQ/020) for a good collection of techniques. <comment360990> sorry I should have been more specific. I have a list of files in a text file so `-0` isn't useful by itself. Maybe I need some other command to spit the file to insert `\0` for newlines? <comment361073> @user3439894 `{}` is a placeholder and any character(s) can be used as a placeholder. Quoting the placeholder isn't necessary. The redirection is optional. <comment361075> I know that the `xargs` _option_ `âˆ’I replstr` can be `X` as you had it, however I used what was in the OP so as to avoid any confusion in comparing what was used in the OP and the other answer. The ``, while optional, is totally unnecessary in this use case as `sed` is going to read the specified _file_, e.g. `list-of-files` after its _options_ and _command(s)_. If you're unhappy with the changes I've made, you obviously are free to revert it back to your original answer. <comment361089> @gman `tr '\n' '\0'  filenames.txt | xargs -0 ...` <comment364645> This will work as long as the input doesn't contain any double quotes.  A more general solution might be to backslash-escape any backslash, space, tab, single quote, or double quote character. `sed $'s/[ \t\\"\']/\\\\&/g'` (pardon the horrendous nested quoting!)