Can anyone recommend a good tutorial for writing (from scratch) a cron-style launchd job? <body> I've got a fairly simple job that I'd like to run every hour. I could do it using codecron/code, but I thought I'd use this to learn about codelaunchd/code, since I hear good things about it. I've got the codeman launchd.plist/code page as a reference, but I'm looking for something based more around building an example job.  <answer821> I know it's not a emgood/em tutorial, but you could have a look at the Daemons and Services Programming Guide from Apple, which has a section on Scheduling Timed Jobs.  I know it's not a full tutorial, but, with it, you can understand the basics of codelaunchd/code.  It also provides an example of a codecrond/code task :  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple. com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;       &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;com.apple.periodic-daily&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;          &lt;string&gt;/usr/sbin/periodic&lt;/string&gt;         &lt;string&gt;daily&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;LowPriorityIO&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;Nice&lt;/key&gt;     &lt;integer&gt;1&lt;/integer&gt;     &lt;key&gt;StartCalendarInterval&lt;/key&gt;     &lt;dict&gt;           &lt;key&gt;Hour&lt;/key&gt;         &lt;integer&gt;3&lt;/integer&gt;         &lt;key&gt;Minute&lt;/key&gt;         &lt;integer&gt;15&lt;/integer&gt;     &lt;/dict&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  <answer822> codelaunchd/code runs Daemons (code/Library/LaunchDaemons/code or code/System/Library/LaunchDaemons/code) as root, and will run them regardless of whether users are logged in or not. Launch Agents (code/Library/LaunchAgents//code or code~/Library/LaunchAgents//code) are run when a user is logged in as that user. You can not use setuid to change the user running the script on daemons. The code/System/code directory is reserved for Mac OS X tasks so I recommend putting your codelaunchd/code plists into either the code/Library/code or the code~/Library/code folder as it makes sense.  So the first step is determining if you're making an agent or a daemon.  The second step will to make your .plist file. You can use GUI based programs such as Lingon to help with this or just use your favourite text editor:  A sample plist for running a script every hour (StartInterval or StartIntervalCalendar is the key we want - StartInterval for an item to happen every x seconds, StartIntervalCalendar for a specific time and/or date. See 126907 on SuperUser for an example I made with StartCalendarInterval):  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;local.IDENTIFIER_HERE.SOMETHING&lt;/string&gt;     &lt;key&gt;OnDemand&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;false/&gt;     &lt;key&gt;UserName&lt;/key&gt;     &lt;string&gt;USERNAME HERE&lt;/string&gt;     &lt;key&gt;Program&lt;/key&gt;     &lt;string&gt;/PATH/TO/SCRIPT&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;Argument_1&lt;/string&gt;         &lt;string&gt;Argument_2&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;StartInterval&lt;/key&gt;     &lt;integer&gt;3600&lt;/integer&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  Modify the plist as necessary to point to your script and any arguments as necessary (arguments are on separate lines) and save the file with the same name as the Label value but with .plist at the end. (eg. local.my-mac.flickrstats would be saved as local.my-mac.flickrstats.plist). If you didn't already move that plist file to code/Library/LaunchDaemons/code if making a Daemon (runs all the time) or code~/Library/LaunchAgents/code (only you're logged in) or code/Library/LaunchAgents/code (any user is logged in).  To start the job you want to run codelaunchctl/code as necessary to load the file. For items in code/Library/code, you should use sudo: eg. codesudo launchctl load -w /PATH/TO/PLIST/code  For reference also check out the following questions on Super User: Launchd command as root, Load a system wide daemon, and How can I get a script to run every day  <answer840> I know you were looking for a tutorial, but on the off-chance someone comes here as part of looking for a tool to help them make/edit launchd entries, I've used this before: Lingon (sourceforge)   It's no longer being actively developed but what's there does work (and obviously includes source etc). I've used it on Snow Leopard to schedule backups to the Amazon cloud, etc.  <answer107581> This has helped me a lot: http://launchd.info  It covers configuration, administration and troubleshooting using Terminal or the launchd GUI LaunchControl. Examples are provided as well.  <comment683> This should be moved to Stackoverflow. <comment684> @Philip Regan I thought about it, but there's not really much programming involved, to me. If I'd been asking a `cron` question, wouldn't superuser.com be the right place? Since `launchd` is Apple's version of `cron` (and also `daemontools`, and possibly other things), I thought this was my best option. <comment688> I downvoted because you admitted that the resource isn't what I asked for and it struck me as a bit RTFM, but I've rethought it and I'd like to rescind my downvote. Unfortunately I can't unless the question is edited (it has been too long), and I don't have enough rep yet to edit. Could you tweak something? Thanks. <comment689> @Hank Gay : Thanks for your comment. I edited my answer as well. <comment18181> Lingon is now in the App Store so is still active just not free see http://www.peterborgapps.com/lingon/ <comment18182> You could also put it in an automator script and run from iCal - if it runs as you <comment37542> The appstore version has been crippled by Apple policy requirements.  The SourceForge pre-compiled version works well - although the modal dialog on save, telling me to log out or restart to enable the daemon wouldn't dismiss.  I had to quit the program from it's menu (not force quit) and check to confirm that it had saved the file properly.  Crippled in that file and directory trigger are not supported, nor is it possible to create something that runs as root with the AppStore version. <comment94306> In a funny bit of irony, three years later I need to implement a cron/launchd process myself and found myself looking at this question again in a completely different light. Stack Overflow has a mixed opinion about what to do with launchd questions, but they really don't like these questions. Just thought the whole situation was amusing. +1