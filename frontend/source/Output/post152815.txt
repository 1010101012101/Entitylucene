python version 2.7.8 can't run /usr/bin/easy_install. Try the alternative(s): <body> I'm doing a bunch of python development and also just updated OS to Mountain Lion.  I had replaced to original Python versions with Snow Leopard using the GUI from Python.org, then added links in /usr/bin:  precodelrwxr-xr-x  1 root  admin  71 Oct 22 18:12 python -&gt; ../../../Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7 /code/pre  So now I have what I think are all the python version that are part of OSX 10.8.5 (2.5, 2.6, 2.7) located in:  precode/System/Library/Frameworks/Python.framework/Versions/ /code/pre  and linked from code/usr/bin/code  And ALSO the ones I installed with the GUI located in:  precode/Library/Frameworks/Python.framework/Versions/ /code/pre  But I'm planning to use the versions I install with codefink/code, which is a port tree similar to codemacports/code which are/will be located in:  precode/sw/bin /code/pre  So I have commented out the codePATH/code exports in code~/.bash_profile/code that pointed to the non-fink executables:  precode#PATH="/usr/local/bin:/usr/local/sbin:/System/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}" #export PATH  #PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}" #export PATH /code/pre  And added:  precode#  for Fink: export PATH=$PATH:/sw/bin . /sw/bin/init.sh /code/pre  I don't totally understand shell scripting yet, but codeinit.sh/code initializes fink, I think mostly by adding elements to $PATH and other environment variables.  Previously I have installed various packages with codehomebrew/code, codemacports/code and various GUIs and am hoping to have a more comprehensible environment this time around.  At the moment I need to install codepostgreSQL/code and a bunch of codepython modules/code including codepip/code, codevirtualenv/code, codevirtualenvironmentwrapper/code, codepsycopg/code.  It looks like the codeeasy_install/code executable (binary executable?) lives (alongside easy_install-2.5, 2.6 and 2.7) in code/usr/bin//code.  So my questions are:  ol liIs there any reason to have more than one copy of each version of Python?/li liWill python-dependent applications work as long as there's a link in code/usr/bin//code to a working, executable python library, and the location of the Python executable is in the code$PATH/code?/li liIs there much reason to keep codePython2.5/code at this point?/li licodesudo easy_install-2.7 pip/code worked, so what exactly is code-rwxr-xr-x   2 root        wheel       925 Oct 23 14:48 easy_install/code for?/li /ol  <answer153077> Okay.   Answer to number 1 is yes.   The fink developers recommend NOT removing the OSX versions of Python, simply because they are not terribly large files and may be necessary for certain OSX functions and programs.  And I want to have an additional version of at least python2.7 installed by fink, because it's a port tree that's designed to create a UNIX-like directory structure, which will hopefully make PostgreSQL and python play nicely together.  As far as question number 2, I'm not sure. I emthink/em this would work, but leaving the original OSX versions installed avoids the issue.  Question 3: yes. - see answer to question 1.   Making the codefink/code version the one that runs via the terminal is a matter of:  ol limake sure the directory containing the fink python binary precedes the OSX (or GUI-installed one) in the codePATH/code, which can be done in users code.profile/code or code.bash_profile/code (located in directory code~//code, the user's root) by either invoking the fink init script, code. /sw/bin/init.sh/code, OR making sure that codeexport PATH=/sw/bin:$PATH/code is included in the file AFTER any other line that exports a codePATH/code with one of the other python paths at the beginning. For example, codeexport PATH=/usr/bin:$PATH/code or codeexport PATH=/usr/local/bin:$PATH/code./li liUnless we want to invoke the python cli like codepython2.7/code, we'll need to make a symbolic link in the code/sw/bin/code directory that points "python" to "python2.7", which is done by using codesudo ln -s *source* *link*/code, which in this case looks like:  sudo ln -s /sw/bin/python2.7 /sw/bin/python/li /ol  Not sure what the answer to question 4 is yet, but am seeing that any libraries that exist in code/sw/bin/code are being called from there, as opposed to other installations. Good.  Got a copy of Learning UNIX for OS X Mountain Lion that looks quite promising. 