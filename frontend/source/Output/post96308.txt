Python installation messed up <body> Somehow my python on my Mac OS X is messed up.   I am trying to install codevirtualenv/code  precode$ pip install virtualenv /code/pre  And it gives me:  precodeTraceback (most recent call last):   File "/usr/local/bin/pip", line 5, in &lt;module&gt;     from pkg_resources import load_entry_point   File "/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/distribute-0.6.40-py2.7.egg/pkg_resources.py", line 16, in &lt;module&gt;     import sys, os, zipimport, time, re, imp, types ImportError: No module named time /code/pre  However if I try it like this, it finds codetime/code.  precode$ python Python 2.7.3 (v2.7.3:70274d53c1dd, Apr  9 2012, 20:52:43)  [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import time &gt;&gt;&gt;  /code/pre  My path variable looks like this:  precode$ echo $PATH /Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/git/bin:/opt/opengeo/pgsql/9.1/bin /code/pre  Could it be that my path variable is set wrong? Where and how can I fix this?  <answer96313> You are using multiple versions of Python simultaneously - one from Python.org (2.7.3), located in code/Library/Frameworks/Python.framework/Versions/2.7//code, which does not have an installation of codepip/code associated with it, and another version from HomeBrew (2.7.5), located in code/usr/local/Cellar/python/2.7.5/Frameworks/Python.framework/Versions/2.7//code. Your codepip/code script is using the code/usr/local/.../code Python, which doesn't have the codetime/code module available for some reason, but when you just type codepython/code on the command line, the shell searches through your code$PATH/code and runs the version in code/Library/Frameworks/.../code. If you were to type code/usr/local/bin/python/code on the command line and enter codeimport time/code you will likely get an error. The codetime/code module is part of the Python standard library, so I'm not sure why homebrew isn't finding it - you might want to re-brew python to fix it.  To always run the homebrew version of python (if that's what you want your primary version to be), just put code/usr/local/bin/code as the first entry in your code$PATH/code variable.  <comment113083> You could look into the Anaconda distribution of Python from Continuum IO if you want. It's a pretty decent distro packed with a bunch of libraries, and it just works. No need to personally manage libraries anymore.