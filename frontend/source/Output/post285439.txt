How to exclude locked files or folders In an AppleScript that selects all files in a particular folder <body> Here's my situation. I created an AppleScript for cleaning up my desktop.  It essentially selects all files and folders on my desktop, creates a new folder with a specific name and date format, and moves all the files from my desktop to the new folder.  This script works beautifully until I realized that occasionally there were files or folders I wanted to remain on my desktop.  My solution was to open the get info window for each file or folder that I wanted to remain on my desktop, and select the “lock” option in the get info window.    My problem is now because of the locked files, the script cannot completely execute without displaying an error message.  If I click “OK” on the error message, the script will finish and move every file with the exception of the ones that are locked.    I would prefer not to have to go through this extra step by clicking the okay button.  I tried adding some system event actions to the script to automatically click the “ok” button and that did not work.  I'm starting to think that the only real solution would be to not select those locked files or folders in the first place.  This is where I am lost.  Can anyone help direct me as to how to avoid selecting the locked files in the first place?  img src="https://i.stack.imgur.com/HOHI5.gif" alt="enter image description here"  hr  Here is the script in its entirety.  hr  precodeset scriptPath to (load script file "Macintosh HD:Users:Smokestack:Library:Mobile Documents:com~apple~ScriptEditor2:Documents:Cleanup Desktop.scptd:Contents:Resources:Scripts:Current Time A.M. P.M. And Short Date.scpt")  tell scriptPath     timeandDate() -- This will get the time and date in this format "05/31/2017 @ 9:10:48 PM" called from the loaded script file above end tell  set timeandDate to the result -- This will copy the time and date results from the previous step and and set it as this new variable  tell application "Finder"     if running then         close every window         activate         make new Finder window         set target of Finder window 1 to folder "Desktop" of folder "Smokestack" of folder "Users" of startup disk     end if     open Finder window 1     activate end tell  delay 1 tell application "System Events"     key code 0 using (command down) -- This will select all files and folders on the desktop in the active finder window end tell  tell application "Finder"     set these_items to the selection     set destinationFolder to make new folder at POSIX file "/Users/Smokestack/Jimz_Important_Stuff/Desktop_Cleanups/" with properties {name:timeandDate}     move these_items to destinationFolder     reveal destinationFolder end tell /code/pre  Here is a revised version of the script without calling handlers from external files  precodeon timeandDate()     set CurrentTime to (time string of (current date))     set AppleScript's text item delimiters to ","     set theLongDate to (current date)     set theLongDate to (date string of theLongDate)     set currentMonth to (word 1 of text item 2 of theLongDate)     set currentDay to (word 2 of text item 2 of theLongDate)     set currentYear to (word 1 of text item 3 of theLongDate)     set monthList to {January, February, March, April, May, June, July, August, September, October, November, December}     repeat with x from 1 to 12         if currentMonth = ((item x of monthList) as string) then             set theRequestNumber to (text -2 thru -1 of ("0" &amp; x))             exit repeat         end if     end repeat     set currentMonth to theRequestNumber     set currentDay to (text -2 thru -1 of ("0" &amp; currentDay))     set theShortDate to (currentMonth &amp; "/" &amp; currentDay &amp; "/" &amp; currentYear) as string     set CurrentTime to (time string of (current date))     set CurrentTimeandShortDate to (theShortDate &amp; " @ " &amp; CurrentTime)     set AppleScript's text item delimiters to "" end timeandDate  timeandDate()  set timeandDate to the result  tell application "Finder"     close every window     activate     make new Finder window     set target of Finder window 1 to folder "Desktop" of folder "Smokestack" of folder "Users" of startup disk     select every file of the front Finder window      delay 1     set these_items to the selection     set destinationFolder to make new folder at POSIX file "/Users/Smokestack/Jimz_Important_Stuff/Desktop_Cleanups/" with properties {name:timeandDate}     try         move these_items to destinationFolder     end try     reveal destinationFolder end tell /code/pre  After making some revisions to the script, as long as the locked items on my desktop are only folders and not files, now this script works beautifully.  However it will still generate an error if there are any individual locked files.  <answer285486> My approach would be to put some of your code into a codetry/code block and also use codeon error/code to ignore that specific error message, but to still display a message if it encounters a different error instead.  The advantage of this approach is that you're not telling your script to ignore all errors, just in case something else occurs and you should be aware of it.  In order to achieve this, try the following:  precodeset scriptPath to (load script file "Macintosh HD:Users:Smokestack:Library:Mobile Documents:com~apple~ScriptEditor2:Documents:Cleanup Desktop.scptd:Contents:Resources:Scripts:Current Time A.M. P.M. And Short Date.scpt")  tell scriptPath     timeandDate() -- This will get the time and date in this format "05/31/2017 @ 9:10:48 PM" called from the loaded script file above end tell  set timeandDate to the result -- This will copy the time and date results from the previous step and and set it as this new variable  tell application "Finder"     if running then         close every window         activate         make new Finder window         set target of Finder window 1 to folder "Desktop" of folder "Smokestack" of folder "Users" of startup disk     end if     open Finder window 1     activate end tell  delay 1 tell application "System Events"     key code 0 using (command down) -- This will select all files and folders on the desktop in the active finder window end tell  tell application "Finder"     try         set these_items to the selection         set destinationFolder to make new folder at POSIX file "/Users/Smokestack/Jimz_Important_Stuff/Desktop_Cleanups/" with properties {name:timeandDate}         move these_items to destinationFolder         reveal destinationFolder     on error error_message number error_number         if the error_number is not -50 then             display dialog error_message buttons {"OK"} default button 1         end if     end try  end tell /code/pre  Now, you'll see that I've placed the second block of codetell application "Finder"/code code within a codetry/code block (you'll notice the use of codetry/code and codeend try/code. And, within that block I've inserted the following code:  precode    on error error_message number error_number     if the error_number is not -50 then         display dialog error_message buttons {"OK"} default button 1     end if /code/pre  Basically, this emshould/em have the effect of telling the script that in the event of a Finder error of -50 to just ignore it, but if it's not -50 then display the error. (I'm assuming that this is the error your script gets - if not you can just replace the code-50/code with the correct error number.  Obviously I can't test this at my end, so please let me know how you go.  <answer285558> strongUpdate:/strong As I mentioned somewhere in the comments that I'd build out a 10.12.5 system this past weekend and do some testing, I did.  Here is what I found out:  ul liThe code of my answer, inclusive of edit 5 on Jun 2 at 15:34, works on my system without issue./li liAfter a review of all emcode/em and comments, it dawned on me that while my emcode/em, as is, worked on my system and I gave note referencing the codedelay/code emcommand/em having to adjust emvalues/em and or add/remove as/if necessary, etc., strongthat this mainly comes down to timing issues and the pitfalls of that particular form of event coding./strong/li /ul  Therefore, and while I'll leave the original answer at the bottom of this update, I decided to look at this from a different programatic angle and offer the following emcode/em as a better way to code this emscript/em to accomplish the task at hand.  This new emcode/em, does not rely on closing opened strongFinder/strong emwindows/em and then opening a strongFinder/strong emwindow/em to the strongDesktop/strong emfolder/em of the strongUser/strong to then have strongSystem Events/strong select all emitems/em in the emtarget folder/em, or the use of the codedelay/code emcommand/em to deal with timing issues etc. All of which I personally don't like, because I don't want all strongFinder/strong emwindows/em I have opened, closed to accomplish a task such as this. Or code it to leave the existing emwindows/em opened while ensuring the strongFinder/strong emwindow/em of the strongDesktop/strong emfolder/em within the strongHome/strong emfolder/em is the emtopmost/em strongFinder/strong emwindow/em to ensure strongSystem Events/strong emselects/em the correct emitems/em and get the timings right, etc.!  The following strongAppleScript/strong emcode/em offers a more safe and faster way to accomplish the task at hand and I encourage you to use it over the previous emcode/em examples.  Note: With the previous caveats in play, (the existence of the folder the destination folder is created in, etc.), you should not not need to modify this emcode/em and should be able to use it strongas is/strong. That is to say, you're certainly free to modify the emcode/em anyway you need/want, but strongas is/strong, it should work.  strongNew AppleScript emcode/em:/strong  precodetell current application     try         tell application "Finder"             if running then                 set theseFileSystemObjects to (get every item of (path to desktop))                 set theFileSystemObjectsNotLocked to {}                 repeat with i from 1 to (count of theseFileSystemObjects)                     set thisFileSystemObject to (item i of theseFileSystemObjects)                     if not locked of (get properties of thisFileSystemObject) then                         set end of theFileSystemObjectsNotLocked to thisFileSystemObject                     end if                 end repeat                 if theFileSystemObjectsNotLocked is not equal to {} then                     tell current application to set theDateTimeNow to ¬                         (do shell script "date '+%m.%d.%Y @ %I.%M.%S %p'") as string                     set theDestinationFolder to make new folder at ¬                         ((path to home folder as string) &amp; "Jimz_Important_Stuff:Desktop_Cleanups:") with properties {name:theDateTimeNow}                     move theFileSystemObjectsNotLocked to theDestinationFolder                     open theDestinationFolder                     activate theDestinationFolder                 end if             else                 tell current application                     activate                     display dialog "Finder is not currently running!" &amp; linefeed &amp; linefeed &amp; ¬                         "Open Finder, then run Desktop Clean Up again." buttons {"OK"} ¬                         default button 1 with title "Desktop Clean Up"                 end tell             end if         end tell     on error eStr number eNum         activate         display dialog eStr &amp; " number " &amp; eNum buttons {"OK"} ¬             default button 1 with title "Desktop Clean Up" with icon caution         return     end try end tell /code/pre  hr  strongOriginal Answer:/strong  This is an example of how I'd write the entire emscript/em to be emrun/em, as is, as either a em.scpt/em file or an em.app/em file, on your system. I'm saying emyour system/em, because the emtarget destination folder/em is set for your system.  There is no need to emload/em an emoutside resource/em and no emhandler/em to emset/em the emvalue/em of the emvariable/em used for emthe destination folder name/em. I choose to use a codedo shell script/code emcommand/em for that, using the codedate/code emcommand/em to return a emcustom date time string variable/em, as it's one line of emcode/em compared to the amount of emcode/em in the codeon timeandDate()/code emhandler/em, and it returns the same empattern/em.  I will continue to use this on my system with appropriately adjusted pathnames and a different empattern/em for emthe destination folders name/em, replacing the code//code and code:/code with code./code in the emcustom date time string variable/em used in emthe destination folder name/em.  As coded, this first version of the emscript/em moves all emfile system objects/em, that are strongnot/strong locked, currently in the emDesktop folder/em to the emdestination folder/em. The emscript/em includes minimal appropriate emerror handling/em and as coded you shouldn't have the issues you were previously having. This of course assumes that the code$HOME/Jimz_Important_Stuff/Desktop_Cleanups/code folder exists. If not, you'll get the appropriate error message, however additional emerror handling/em could be added to create the hierarchical folded structure as/if necessary.  This first emscript/em should resolve all issues you are/were having with your own emcode/em and IMO is a better way to code it then just trapping and eating the error with just a codetry/code emstatement/em alone, because as coded, it can only move files that are strongnot/strong locked and doesn't even try to move a locked file.  This was tested under macOS 10.12.3 and should work for you on macOS 10.12.5, which you're presently running.  strongAppleScript emCode/em:/strong  hr  precodetell current application     try         set theDateTimeNow to (do shell script "date '+%m/%d/%Y @ %I:%M:%S %p'") as string         tell application "Finder"             if running then                 close every window                 set target of (make new Finder window) to (path to desktop)                 activate                 delay 0.5                 tell application "System Events" to key code 0 using {command down}                 delay 0.5                 set theseFileSystemObjects to the selection                 set theDestinationFolder to make new folder at ¬                     ((path to home folder as string) &amp; "Jimz_Important_Stuff:Desktop_Cleanups:") with properties {name:theDateTimeNow}                 set theListOfFileSystemObjectsNotLocked to {}                 repeat with i from 1 to (count of theseFileSystemObjects)                     set thisFileSystemObject to (item i of theseFileSystemObjects)                     if not locked of thisFileSystemObject then                         set end of theListOfFileSystemObjectsNotLocked to thisFileSystemObject                     end if                 end repeat                 move theListOfFileSystemObjectsNotLocked to theDestinationFolder                 reveal theDestinationFolder             else                 tell current application                     activate                     display dialog "Finder is not currently running!" &amp; linefeed &amp; linefeed &amp; ¬                         "Open Finder, then run Desktop Clean Up again." buttons {"OK"} ¬                         default button 1 with title "Desktop Clean Up" with icon caution                 end tell             end if         end tell     on error eStr number eNum         activate         display dialog eStr &amp; " number " &amp; eNum buttons {"OK"} ¬             default button 1 with title "Desktop Clean Up" with icon caution         return     end try end tell /code/pre  Note: As to the emvalue/em of the codedelay/code emcommands/em, they may need to be adjusted for your system and or additional ones added as/if necessary and or removed if not needed. As presently coded, this emscript/em worked without issue, dozens of times in testing on my system, with varying counts and sizes of emfile system objects/em being acted upon in the emDesktop folder/em. Make any adjustments as necessary.  The emfile system objects/em tested were, emfiles/em, emfolders/em, emaliases/em, emsymlinks/em, emapplication bundles/em and emdocument bundles/em, the latter two of which are just emfolders/em. These FSOs were of various sizes, both locked and strongnot/strong locked.  hr  This second version of the emscript/em goes beyond your expressed needs and makes a duplicate of the locked emfile system objects/em currently in the emDesktop folder/em to the emdestination folder/em, while reseting the locked flag on the duplicates so they can be deleted without raising a flag at the time you may choose to delete them. I'm including it as it may have added value and you find it useful.  strongAppleScript emCode/em:/strong  hr  precodetell current application     try         set theDateTimeNow to (do shell script "date '+%m/%d/%Y @ %I:%M:%S %p'") as string         tell application "Finder"             if running then                 close every window                 set target of (make new Finder window) to (path to desktop)                 activate                 delay 0.5                 tell application "System Events" to key code 0 using {command down}                 delay 0.5                 set theseFileSystemObjects to the selection                 set theDestinationFolder to make new folder at ¬                     ((path to home folder as string) &amp; "Jimz_Important_Stuff:Desktop_Cleanups:") with properties {name:theDateTimeNow}                 set theListOfFileSystemObjectsNotLocked to {}                 set theListOfLockedFileSystemObjects to {}                 repeat with i from 1 to (count of theseFileSystemObjects)                     set thisFileSystemObject to (item i of theseFileSystemObjects)                     if not locked of thisFileSystemObject then                         set end of theListOfFileSystemObjectsNotLocked to thisFileSystemObject                     else                         set end of theListOfLockedFileSystemObjects to thisFileSystemObject                     end if                 end repeat                 move theListOfFileSystemObjectsNotLocked to theDestinationFolder                 duplicate theListOfLockedFileSystemObjects to theDestinationFolder                 repeat with i from 1 to (count of theListOfLockedFileSystemObjects)                     set thisFileSystemObject to (item i of theListOfLockedFileSystemObjects)                     set locked of alias ((theDestinationFolder as string) &amp; name of thisFileSystemObject) to false                 end repeat                 reveal theDestinationFolder             else                 tell current application                     activate                     display dialog "Finder is not currently running!" &amp; linefeed &amp; linefeed &amp; ¬                         "Open Finder, then run Desktop Clean Up again." buttons {"OK"} ¬                         default button 1 with title "Desktop Clean Up" with icon caution                 end tell             end if         end tell     on error eStr number eNum         activate         display dialog eStr &amp; " number " &amp; eNum buttons {"OK"} ¬             default button 1 with title "Desktop Clean Up" with icon caution         return     end try end tell /code/pre  <comment360064> I couldn't replicate wch1zpink's exact error message, but I agree with your answer... using appropriate error handling. +1 <comment360068> @Monomeeth I ran your version of the code and saved it as an application and it produced the exact same error message <comment360074> Thank you for your Insights.  Very good points on your Finder Comments and I will make changes in the script. Thank you <comment360076> Is there possibly a way we can use a shorter command something like...  tell application "Finder" to set selection to every file whose properties is equal to {locked:false}  -----  I've tried about 20 different variations of that with no success <comment360080> So I should add set AppleScript's text item delimiters to "" At the end of the timeandDate()  handler, just before the end timeandDate? Or do I add it to the main body of my script itself, after i call the handler? <comment360082> Let us [continue this discussion in chat](http://chat.stackexchange.com/rooms/59709/discussion-between-user3439894-and-wch1zpink). <comment360246> Okay I ran this first version of your script several times and each time and scripteditor, It threw an error message  tell application "Script Editor"  display dialog "The folder “” can’t be moved into itself. number -122" buttons {"OK"} default button 1 with icon caution   -- {button returned:"OK"} end tell <comment360250> Running this second version of the script I got the same error message… I think it maybe because on my desktop I have mounted Macintosh HD, Boot Camp, and two separate time capsules. Once the script throws the error, I look at my desktop and every single item is selected including those mounted driveS <comment360252> In finder preferences I chose not to show those mounted drives on the desktop and then I ran the script and it ran beautifully.  If you can figure out a way to exclude the mounted drives from being selected in the script, you would be a mad genius LOL <comment360255> @wch1zpink, If the first vision is having an issue the second version isn't going to fix it. Without seeing your full logs it's going to be a bit harder to diagnose the issue. I'd say test with replacing the `/` and `:` with `.` in the `do shell script "date ..."` _command_, so as to avoid any issue in the naming convention.  Also, it would be good to see the output of `ls -al@ "$HOME/Desktop/"` with devices showing. Mounted devices, while they appear on the Desktop of the Display, they don't exist in `$HOME/Desktop` folder and that should have no bearing on the functionality of the script! <comment360260> @wch1zpink, Obviously there is something quite different between my system and yours, but what!? This weekend I'll try to make time to setup a 10.12.5 system and see if I can reproduce the issue. A workaround option might be to programmatically, if possible, toggle the flag(s) that show/hide external devices..., move the target files, and toggle the flag(s) again. (That is, if you what those devices to always show.) I'll look at that, but I'd like to be able to reproduce your issue and then code appropriately for it vs. a workaround. <comment360280> BINGO!! If you substitute the "Tell Finder" part of your code with this.. tell application "Finder" if running then close every window activate make new Finder window set target of Finder window 1 to folder "Desktop" of folder "Smokestack" of folder "Users" of startup disk delay 1 tell application "System Events" to key code 0 using {command down} delay 0.5  It solves all problems!! At least on my system <comment360288> @wch1zpink, Adjusting the _value_ of a `delay` can be critical in some cases. `0.5` works for me but having to set it to `1` or even a bit higher is no big deal, it takes the _delay_ it needs! :) If I run in Script Editor, by itself, `tell application "Finder" to set target of (make new Finder window) to (path to desktop)` it opens a new Finder window at my Desktop and shows only the _file system objects_ that are actually in my `$HOME/Desktop` folder, no mounted internal/external devices even though they show on the Desktop of the Display (as they should with the Finder preference set). <comment360289> @wch1zpink, You should not have to change `set target of (make new Finder window) to (path to desktop)` to two separate _commands_ e.g. `make new Finder window` and `set target of Finder window 1 to folder "Desktop" of folder "Smokestack" of folder "Users" of startup disk`, that's what the single line of my _code_ does on every major version I tested  on from  OS X 10.8.6, 10.9., 10.10, 10.11.6 and macOS 10.12.3. I can believe it's not working in 10.12.5, but I'm going to check it out this weekend. <comment360290> Bottom line is, if you adjust my _code_, however necessary to get the job done without issue, that's what's important! :) Glad I could help! <comment360293> I just tried running your code again, without my edits.  I adjusted your delay values several different times.  It still draws an error.  What it actually does is it actually selects all of the files directly on my desktop but it also opens  a finder window showing the desktop folder but refuses to select the items in the finder window.  So strange.  But either way, KUDOS to you with your version.  Thanks a lot +1 and accepted <comment360667> I've updated my answer and would like you to test the new _code_ and suggest you use it over the other example _code_. <comment360704> Your final version of the code is lightning fast and much more streamlined.  Excellent job Master... This grasshoppa has much to learn