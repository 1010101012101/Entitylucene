Show/Hide hidden files without restarting finder? <body> I came to understand that the following is the way to toggle the visibility of hidden files:  precodedefaults write com.apple.finder AppleShowAllFiles YES # replace YES with NO to hide hidden files killall -HUP Finder /System/Library/CoreServices/Finder.app /code/pre  strongIs there a way to show/hide hidden files without killing the Finder?/strong  <answer168544> strongEdit:/strong This no longer appears to work since El Capitan. codekillall Finder/code seems to be the only way now.  This is my current El Capitan method, which should also work for Mountain Lion &amp; older  precodeset newHiddenVisiblesState to "YES" try     set oldHiddenVisiblesState to do shell script "defaults read com.apple.finder AppleShowAllFiles"     if oldHiddenVisiblesState is in {"1", "YES"} then         set newHiddenVisiblesState to "NO"     end if end try do shell script "defaults write com.apple.finder AppleShowAllFiles " &amp; newHiddenVisiblesState &amp; "; killall Finder" /code/pre  hr  For Mavericks &amp; Yosemite…  You don't need to restart the Finder, only refresh the windows.  This Applescript will toggle the state &amp; refresh...  precodeset newHiddenVisiblesState to "YES" try     set oldHiddenVisiblesState to do shell script "defaults read com.apple.finder AppleShowAllFiles"     if oldHiddenVisiblesState is in {"1", "YES"} then         set newHiddenVisiblesState to "NO"     end if end try do shell script "defaults write com.apple.finder AppleShowAllFiles " &amp; newHiddenVisiblesState   tell application "Finder"     set theWindows to every Finder window     repeat with i from 1 to number of items in theWindows         set this_item to item i of theWindows         set theView to current view of this_item         if theView is list view then             set current view of this_item to icon view         else             set current view of this_item to list view          end if         set current view of this_item to theView     end repeat end tell /code/pre  emCredit to ganbustein for the improved hide/show routine/em  <answer292766> On macOS Sierra, version 10.12.4 and above, you can press kbd⌘/kbd+kbdShift/kbd+kbd./kbd sub(period)/sub, to toggle hidden files inside of Finder.  <comment197862> Thanks @Tetsujin. Works like a charm. <comment197918> You don't need the `tell application "System Events"` block around the two `do shell script ...` commands. In fact, I'm surprised System Events allows you to tell it to invoke `do shell script`. <comment197922> I'm no expert in it - I've always just used system events if i don't appear to have 'anybody in particular' to tell;-) <comment197932> It "always worked" because System Events is returning an error code that means "do it yourself", and the script is silently doing just that to handle the error. The problem is that you would be invoking `do shell script` with some other app's privileges without giving it a chance to vet the script. Apple made that change to close a security hole where you could ask a program running as root to do your script for you. <comment197935> @ganbustein I've pasted your version into a couple of other places on SE I've used this in an answer. Thanks for the input. Most appreciated. <comment200027> This is great, except that it doesn't change the Desktop itself. Is there was a way to do that too, other than restarting the Finder? <comment200029> You could always just open ~/Desktop as a folder. I rarely keep anything on mine & the odd bits of .DS_Store etc don't hold much interest for me, so I've never actually thought about it before. <comment251259> Do you know how to get this working in OSX 10.11? I keep getting `The action 'run shell script' encountered an error` <comment251310> I've not tried it on 10.11 yet - only spent a day on it before rolling back; too much still to fix for my liking. <comment369374> @fd0, It states, "... to toggle hidden files inside of Finder.", and the key word here is "toggle", which typically implies pressing the same shortcut key combo both hides/unhides hidden files in this use case. +1