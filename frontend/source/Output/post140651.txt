Why does `arch` output `i386`? <body> When I run code$ arch/code on my 10.9 2012 MacBook Pro, I get the output  precodei386 /code/pre  The manpage for codearch/code says that  precodethe arch command is 2-way universal, 32-bit only /code/pre  However, code$ file "$(which arch)"/code gives  precode/usr/bin/arch: Mach-O universal binary with 2 architectures /usr/bin/arch (for architecture x86_64):        Mach-O 64-bit executable x86_64 /usr/bin/arch (for architecture i386):  Mach-O executable i386 /code/pre  OTOH, codepython2.7/code is running as a 64-bit executable:  precode$ /usr/bin/python2.7 -c 'import sys; print "%x" % sys.maxint' 7fffffffffffffff /code/pre  Also, the kernel is apparently 64-bit:  precode$ file /mach_kernel  /mach_kernel: Mach-O 64-bit executable x86_64 /code/pre  codeuname/code agrees:  precode$ uname -m x86_64 /code/pre  ..or does it?  precode$ uname -p i386 /code/pre  <answer140739> Here you go:  stronguname -p/strong      print the machine processor architecture name.  stronguname -m/strong      print the machine hardware name.  The strongarch/strong command with no arguments, displays the machine's architecture type.  Ultimately I suspect this is the answer you want: https://stackoverflow.com/questions/12763296/os-x-arch-command-incorrect  For further confusion, run:  precode$arch i386 $machine   i486 $uname -m x86_64 $uname -p i386 /code/pre  <comment165833> Okay, so `arch` runs as 32- or 64-bit, but only reports whether the architecture is PPC or Intel[-derived], and reports Intel using the `i386` label rather than `intel`.  I guess that's what "2-way universal, 32-bit only" means.