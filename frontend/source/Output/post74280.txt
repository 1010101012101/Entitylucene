Why doesn't /usr/libexec/java_home recognize JDK 1.8? <body> I am trying to install a JDK 8 on OS X Mountain Lion (to experiment with the new lambda features).   h1Starting point/h1  A machine recently updated from OS X 10.6 to 10.8, with  precode$ sw_vers   ProductName:    Mac OS X   ProductVersion: 10.8.2   BuildVersion:   12C60  $ ls -l /Library/Java/JavaVirtualMachines/   Home@ -&gt; jdk1.7.0_09.jdk/Contents/Home/   jdk1.7.0_09.jdk/  $ ls -l /System/Library/Java/JavaVirtualMachines/   1.6.0.jdk/ /code/pre  and this folder from the OS X 10.6 era:  precode/System/Library/Frameworks/JavaVM.framework/Versions/ /code/pre  In ~/.bashrc I've set   precodeexport JAVA_HOME=/Library/Java/JavaVirtualMachines/Home /code/pre  So I have   precode$ java -version   java version "1.7.0_09"   Java(TM) SE Runtime Environment (build 1.7.0_09-b05)   Java HotSpot(TM) 64-Bit Server VM (build 23.5-b02, mixed mode)  $ /usr/libexec/java_home   /Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk/Contents/Home /code/pre  h1How I installed JDK 8/h1  ol liDownloaded the .tar.gz file from http://jdk8.java.net/lambda/ and unpacked it into   ul li/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home/li /ul  (I created the folders codejdk1.8.0.jdk/Contents/Home/code manually)/li liChanged the symlink code/Library/Java/JavaVirtualMachines/Home/code to point to jdk1.8/li /ol  Now I have   precode$ java -version   openjdk version "1.8.0-ea"   OpenJDK Runtime Environment (build 1.8.0-ea-lambda-nightly-h2135-20121203-b67-b00)   OpenJDK 64-Bit Server VM (build 25.0-b05, mixed mode)  $ echo $JAVA_HOME   /Library/Java/JavaVirtualMachines/Home  $ ls /Library/Java/JavaVirtualMachines   Home@ -&gt; jdk1.8.0.jdk/Contents/Home/   ... /code/pre  But the codejava_home/code utility doesn't seem to care:   precode$ /usr/libexec/java_home    /Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk/Contents/Home /code/pre  It doesn't even know that there is a JDK 8 available:  precode$ /usr/libexec/java_home -v 1.8*   Unable to find any JVMs matching version "1.8*". /code/pre  h1Question/h1  I'd like the code/usr/libexec/java_home/code utility to find my installed JDKs, so I can use something like this:  precodealias setjdk17='export JAVA_HOME=$(/usr/libexec/java_home -v 1.7*)' alias setjdk18='export JAVA_HOME=$(/usr/libexec/java_home -v 1.8*)' /code/pre  and get rid of the codeHome/code symlink. Does anyone know  ul lihow I can properly install JDK 8?/li lihow I can make code/usr/libexec/java_home/code recognize it?/li /ul  <answer82845> You need to also copy the Contents/MacOS directory and Info.plist from the 1.7 SDK and adapt them (by changing the version strings in it).  Then you can:  precode$ export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home $ java -version openjdk version "1.8.0-ea" $ /usr/libexec/java_home -v 1.8* /Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home /code/pre  Note that this is a hack and I didn't try anything else than start java... I was just building on your tip of creating the package.  <comment100151> Thanks for your reply, Anjo. I'll give it a try as soon as I fixed my OS X 10.8 system (which is now broken: [http://apple.stackexchange.com/questions/86601/login-loop-after-os-x-10-8-update-windowserver-problem]).