Got any tips or tricks for Terminal in Mac OS X? <body> One tip or trick per answer.  My favorite is   precodeopen . /code/pre  Opens the folder you're currently browsing in Finder. You can also pass URLs, images, documents or else to codeopen/code.  If you specify a program name with -a you can pass the URL, image, document or folder to that program instead, e.g. codeopen -a Preview image.png/code, overriding the default program set for the filetype.  Please don't post duplicates. Search in the question like this: codeinquestion:this ls -l/code  strongMac OS X specific/strong answers only.  <answer5436> (Assuming we're looking for Mac OS X specific tricks.)  I've got an alias to launch quicklook on a file from the command line:  precode$ type -a ql ql is aliased to `qlmanage -p 2&gt;/dev/null' $ ql photo.jpg Testing Quick Look preview with files:     photo.jpg /code/pre  kbdctrl/kbd+kbdC/kbd: Kill it and return to the prompt.  <answer5437> codepbcopy/code and codepbpaste/code:  precode# Copy output of command to clipboard grep 'search term' largeFile.txt | pbcopy  # Abuse clipboard contents pbpaste | sed 's/ /%20/g'  #  get rid of the text attributes when you copy formatted text pbpaste|pbcopy /code/pre  <answer5438> The codesay/code command invokes the system text-to-speech capabilities.  precodesay "Hello there." /code/pre  <answer5439> precode$ emacs -batch -l dunnet  Dead end You are at a dead end of a dirt road.  The road goes to the east. In the distance you can see that it will eventually fork off.  The trees here are very tall royal palms, and they are spaced equidistant from each other. There is a shovel here. &gt; /code/pre  <answer5440> codeopensnoop/code is my new favorite utility.  It uses DTrace to show you all of the files that are being accessed on your system, you need to execute it with superuser privileges   precodesudo opensnoop /code/pre  You can also watch what a particular process opens by passing in the PID:  precodesudo opensnoop -p PID  /code/pre  Or watch a particular file to see who's opening it:  precodesudo opensnoop -f /etc/passwd /code/pre  <answer5441> codehistory/code shows a list of the recent commands you've run — something like 500 or 600 commands.  I frequently use codehistory | grep something/code to find a command i've used recently.  <answer5442> codediskutil/code is a very powerful command-line tool for working with disks and disk images. It's gotten me out of some binds. It's not emtoo/em hard to use.  <answer5443> It's not built in but this is the most effective way to get my wife to stop using my laptop to read celebrity news for hours after 4–5 requests to get my Macbook back:  precodeecho 'The system is overheating and needs to go to sleep now.' | \ growlnotify -a 'Activity Monitor' 'OVERHEATED'; \ sleep 1; \ say 'Overheated system.' /code/pre  Since it's almost always around 70c it's believable.  <answer5444> Although I can get around in vi, I use TextMate as my command line editor. You can also pipe things to it. For example strongls|mate/strong opens up TextMate with the current directly listing open in a text window.  <answer5445> precodenet rpc shutdown --server=&lt;servername&gt; --username=&lt;username&gt; /code/pre  This will shut down windows boxes.  <answer5446> With codehdiutil/code you can easilly mount a disk image:  precodehdiutil mount ~/Desktop/lastest_webkit.dmg /code/pre  Dismounting (hacker way):  precodehdiutil detach `df | grep WebKit | perl -pe 's@^/dev/([a-zA-Z0-9]+).*@$1@'` /code/pre  Dismounting (easy way):  precodehdiutil detach /Volumes/&lt;mountpoint&gt; /code/pre  or take the easier approach (that strongchurnd/strong suggested below):  precodehdiutil detach /Volumes/latest_webkit /code/pre  <answer5447> Quickly check what is eating all your memory:  precodetop -o vsize /code/pre  And for your CPU  precodetop -o cpu /code/pre  kbdQ/kbd to quit  <answer5448> http://github.com/joelthelion/autojump - "cd" that learns.  <answer5449> the most interesting pschotherapist you will ever talk to:  ul liRun codeemacs/code/li liPress kbd&#x21E7;/kbd+kbdesc/kbd+kbdX/kbd/li litype codedoctor/code and press enter/li lihave fun :D/li /ul  <answer5450> precode!! /code/pre  Runs the last command again. Great for tracking changes.  <answer5451> codemdfind/code to use spotlight from the command line - really really really handy! Finds things in every directory as well, so it's more useful when looking for files that are part of the system.  codemdfind -live/code updates in real time, which again is incredibly handy.  <answer5452> codetextutil/code is a very handy tool that can cross convert text between HTML, RTF(D), Word (including XML), OpenOffice.org Writer, and the webarchive format.  I use it, notably, in a service that converts the selected text to HTML, uploads it to a server then imports it into Instapaper.  <answer5453> precodecd - /code/pre  Will restore the previous directory you were in. Very handy if you accidentally type codecd/code alone without any arguments and end up in your home directory.  <answer5455> I’m not sure; this might work in any decent terminal application, not only in OS X’s. However:   Using Terminal.app it is possible to put status information to the actual title bar and not just to the prompt.  In order to do that, you need to change the codePS1/code variable in bash to the following model:  precodePS1='\[\033]0;TITLE\007\]PROMPT' /code/pre  Where codeTITLE/code and codePROMPT/code must be substituted to the actual commands which provide the status information. For example, code\w/code lists the current full path; code\W/code the directory name. You can even execute a command by putting it in backticks. (So you could even put the output of arbitrary commands to the title – or to the prompt.)  Git users (with git’s bash completion installed) might find the following useful. Add this to your code.bashrc/code  precodeexport GIT_PS1_SHOWDIRTYSTATE=1 PS1='\[\033]0;`__git_ps1` \w\007\]\h:\W \u\$ ' /code/pre  and the title bar of Terminal.app will show the current git branch (and whether it’s clean or not) followed by the current full path. This gives useful information about where you are only when you need it and does not make the actual prompt overly long.  In case you don’t use git very much and only care about the path in the title bar:  precodePS1='\[\033]0;\w\007\]\h:\W \u\$ ' /code/pre  <answer5456> The more I use it the more addicted to it I am.  precodescreen /code/pre  Along with   precodescreen -ls screen -r [session] /code/pre  Very useful for having several screens open on an SSH connection. It saves tons of time especially when you don't have to restart your codetail/code everytime you want to check another log file.  <answer5457> Hit and hold kbdesc/kbd a few seconds to get a list of every possible terminal command on your system, including built-ins, programs on your path, and aliases.  Or, as Martijn pointed out:  Just use kbd&#x21E5;/kbd instead, you don't need to hold it for a few seconds even. kbd&#x21E5;/kbd will also complete partially typed commands for you, as well as filenames and command-specific arguments.  A prompt asking if you really want to display all command possibilities will appear. Just answer codey/code to get the command list.  <answer5458> codemdls/code will show you all metadata of the file that Spotlight knows about. You can use the resulting attributes in "mdfind" as well.  codemdutil/code allows you to switch indexing on or off on certain volumes, and allows you to reset the index etc.  codesystemsetup/code is BSD specific (not Mac only), but cool indeed, check its manpage.  codeGetFileInfo/code (I believe you have to get the developer tools in order to have this) allows you to see all associated times (modification, creation, last accessed) and all attributes of a file.   codeautomator/code allows you to run automator workflows from the command line, while  codeosascript/code lets you run Apple script code.  <answer5459> alias to open preview from command line  precodealias preview='groff -Tps &gt; /tmp/tmp.ps &amp;&amp; open -a Preview /tmp/tmp.ps' /code/pre  So you can do :  precodeecho "toto" | preview cat /tmp/test.log | preview cheat git | preview /code/pre  <answer5460> Make files invisible:  codeSetFile file -a V/code  SetFile can change a lot of other file attributes and metadata, as well.  SetFile is not a OS X native command it comes bundled with DevTools/Xcode.  If you don't have Xcode and don't want to download about 6 GB, you can use  precodesudo chflags hidden|nohidden &lt;file/folder&gt; /code/pre  chflags is a BSD command and it also has a Man Page just enter this in Terminal  precodeman chflags /code/pre  for those who don't like to enter commands self and just would like to know what there stands in the man. Here you have:  precodeCHFLAGS(1)        BSD General Commands Manual           CHFLAGS(1)  NAME      chflags -- change file flags  SYNOPSIS      chflags [-fhv] [-R [-H | -L | -P]] flags file ...  DESCRIPTION      The chflags utility modifies the file flags of the listed files as speci-      fied by the flags operand.       The options are as follows:       -f      Do not display a diagnostic message if chflags could not modify          the flags for file, nor modify the exit status to reflect such          failures.       -H      If the -R option is specified, symbolic links on the command line          are followed.  (Symbolic links encountered in the tree traversal          are not followed.)       -h      If the file is a symbolic link, change the file flags of the link          itself rather than the file to which it points.       -L      If the -R option is specified, all symbolic links are followed.       -P      If the -R option is specified, no symbolic links are followed.          This is the default.       -R      Change the file flags for the file hierarchies rooted in the          files instead of just the files themselves.       -v      Cause chflags to be verbose, showing filenames as the flags are          modified.  If the -v option is specified more than once, the old          and new flags of the file will also be printed, in octal nota-          tion.       The flags are specified as an octal number or a comma separated list of      keywords.  The following keywords are currently defined:         arch, archived            set the archived flag (super-user only)         opaque  set the opaque flag (owner or super-user only).  [Directory            is opaque when viewed through a union mount]         nodump  set the nodump flag (owner or super-user only)         sappnd, sappend            set the system append-only flag (super-user only)         schg, schange, simmutable            set the system immutable flag (super-user only)         uappnd, uappend            set the user append-only flag (owner or super-user only)         uchg, uchange, uimmutable            set the user immutable flag (owner or super-user only)         hidden  set the hidden flag [Hide item from GUI]       As discussed in chflags(2), the sappnd and schg flags may only be unset      when the system is in single-user mode.       Putting the letters ``no'' before or removing the letters ``no'' from a      keyword causes the flag to be cleared.  For example:         nouchg  clear the user immutable flag (owner or super-user only)        dump    clear the nodump flag (owner or super-user only)       Unless the -H or -L options are given, chflags on a symbolic link always      succeeds and has no effect.  The -H, -L and -P options are ignored unless      the -R option is specified.  In addition, these options override each      other and the command's actions are determined by the last one specified.       You can use "ls -lO" to see the flags of existing files.  EXIT STATUS      The chflags utility exits 0 on success, and &gt;0 if an error occurs.  SEE ALSO      ls(1), chflags(2), stat(2), fts(3), symlink(7)  HISTORY      The chflags command first appeared in 4.4BSD.  BUGS      Only a limited number of utilities are chflags aware.  Some of these      tools include ls(1), cp(1), find(1), install(1), dump(8), and restore(8).      In particular a tool which is not currently chflags aware is the pax(1)      utility.  BSD              March 3, 2006                 BSD /code/pre  <answer5461> Open a man page in Preview:  precodepman () {     man -t "${1}" | open -f -a /Applications/Preview.app } /code/pre  Open a man page in TextMate:  precodetman () {   MANWIDTH=160 MANPAGER='col -bx' man $@ | mate } /code/pre  Open a man page in SublimeText:  precodesman() {     man "${1}" | col -b | open -f -a /Applications/Sublime\ Text\ 2.app/Contents/MacOS/Sublime\ Text\ 2 } /code/pre  Quit an app cleanly from the command line  precode# Quit an OS X application from the command line quit () {     for app in $*; do         osascript -e 'quit app "'$app'"'     done } /code/pre  Relaunch an app from the command line:  precoderelaunch () {     for app in $*; do         osascript -e 'quit app "'$app'"';         sleep 2;         open -a $app     done } /code/pre  Uninstall an app with AppZapper from the command line:  precodezap () {     open -a AppZapper /Applications/"${1}".app } /code/pre  <answer5462> bcat is a convenient pipe between my always-open terminal (xterm under XQuartz) and my always-open browser.  it sets up a streaming HTTP server for just one process so things like  precodetar czvf - . | tee bcat /code/pre  will just stream until the command exits. Man pages need a bit of cleanup:  precodeman bash | col -b | bcat /code/pre  or just  precodeexport MANPAGER='col -b | bcat' man bash /code/pre  <answer5463> kbdctrl/kbd+kbdA/kbd and kbdctrl/kbd+kbdE/kbd: Go to the beginning of the line and to the end of the line.  This also works in every Cocoa text input!  <answer5464> You can set the system volume automatically too, and kill the screen process afterwards:  precodescreen (hit enter) sleep 300; osascript -e "set Volume 10"; say "I am feeling fabulous"; open "http://www.youtube.com/watch?v=dQw4w9WgXcQ"; killall SCREEN Ctrl-a-d (detaches) /code/pre  <answer5465> afconvert allows you to convert from and to all audio formats internally known to Core Audio.  e.g., converting an aiff file to 160kbps AAC:  precodeafconvert track.aiff -o track.m4a -q 127 -b 160000 -f 'm4af' -d 'aac ' /code/pre  <answer5466> Add a file named "-i" to your home directory. Now if you accidentally type:  precoderm -rf * /code/pre  it will expand to:  precoderm -rf -i your other files /code/pre  and you will be prompt to confirm or deny the removal of the entire dir. It's pretty hacky, but it's saved my butt before.  <answer5467> Simulate to type Command-F, to fullscreen a video from command line. Useful when launching a movie in mPlayer from ssh.  precodeosascript &lt;&lt;END tell application "System Events" to keystroke "f" using {command down} END /code/pre  Of course you can also use this trick to simulate any other "typing".  <answer5468> Mount iDisk from command line:  precodeosascript &lt;&lt;END tell application "Finder" mount volume "http://idisk.mac.com/john.doe/" as user name "john.doe" with password "StR0NGP455" end tell END /code/pre  <answer5469> Putting a couple of these together, we can get manual pages in a browser with proper markup:  precodebman () {     gunzip &lt; `man -w $@` | groff -Thtml -man | bcat } /code/pre  <answer5470> precodexattr -h /code/pre  allows you to view file attributes.  The most handy use for this command is to remove the internet download warning from the finder:  precodecd /the/directory/where/you/downloaded/all/your/files  xattr -rd com.apple.quarantine . /code/pre  <answer5471> When you're editing a particularly long and gnarly command line: br kbdctrl/kbd+kbdX/kbd, kbdctrl/kbd+kbdE/kbd will pop you into your editor and let you work on it there.  <answer5472> what about   precodecat somefile.txt | say /code/pre  say the contents of a text file... or...  precodecat someFile.txt | say -o someAudioFile /code/pre  take your text file, convert it to .aiff  <answer5473> I find it useful to copy text to the clipboard from Terminal.app without using the mouse to make a selection.  This seems to only works with the older Terminal.app from Tiger.  I just renamed it to Tiger Terminal.app, and it still runs fine on Leopard.  Haven't tried it on Snow Leopard.  So, with Tiger Terminal, you can do mouse-free copy by typing kbd&#x2318;/kbd+kbd&#x2325;/kbd+kbd&#x232B;/kbd, then using the arrow keys to move to the start of the area you want to copy.  Next, type kbd&#x2318;/kbd+kbd&#x2325;/kbd+kbd&#x232B;/kbd again to anchor the selection point.  Use the arrow keys (some emacs-like commands also work for navigation like kbdctrl/kbd+kbdE/kbd) to move to the end of the region you want to copy.  Finally, type kbd&#x2318;/kbd+kbd&#x2325;/kbd+kbd&#x232B;/kbd again to copy selection to the clipboard.  <answer5474> Here's something nice and pointless:  code/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine -background &amp;/code  Runs your screensaver as your desktop wallpaper. Useless but cool.  This does not affect normal operation of the screensaver, but will end after normal screensaver has been activated, either by timeout or by moving the mouse to a predefined hot corner.  Alternatively, you can use:  precodekillall ScreenSaverEngine /code/pre  <answer5475> To make kbdctrl/kbd+kbd←/kbd and kbdctrl/kbd+kbd→/kbd useful again, that is going a word forward or backward like they usually do on Linux, you must make Terminal.app send the right string to the shell. In the preferences, go to the codeSettings/code tab and select your default profile. Go to codeKeyboard/code and set codecontrol cursor left/code and codecontrol cursor right/code to send string code\033b/code and code\033f/code respectively.  While your're at it, you can also fix kbdHome/kbd (code\033[H/code), kbdEnd/kbd (code\033[F/code), kbdPage Up/kbd (code\033[5~/code) and kbdPage Down/kbd (code\033[6~/code) so that they send those keys to the shell instead of scrolling the buffer.  <answer5476> Function to make a directory and cd into with a single command:  precodefunction take {     mkdir $1     cd $1 } /code/pre  <answer5477> Command line shortcuts to toggle visibility of hidden files in finder:  precodealias show_hidden="defaults write com.apple.finder AppleShowAllFiles TRUE &amp;&amp; killall Finder" alias hide_hidden="defaults write com.apple.finder AppleShowAllFiles FALSE &amp;&amp; killall Finder" /code/pre  <answer5478> This is my absolute favorite. Sharing screen captures via the internet is a hassle. I wrote this to make sharing screenshots across chat a one step process using DropBox. (I have subsequently come across apps and utilities that do this, but I think this is perfect, at least for me.)  It starts the interactive screenshot utility (same as kbd⌘/kbd+kbd⇧/kbd+kbd4/kbd), saves it your Dropbox's public folder, copies the URL to your clipboard and opens it in your browser.  I run it via LaunchBar, but you could run it from the shell or bind it to a keyboard shortcut to make it as easy as kbd⌘/kbd+kbd⇧/kbd+kbd5/kbd.  You could add something random to the filename if you are worried about privacy.  I used to have it codescp/code the screenshot file to my webserver before I switched to Dropbox. You could send the file wherever it would be useful to you. You could even put it in your code~/Sites/code directory to use it on your local network.  If you want sign up for dropbox, you can use my referral link which will give us emboth/em bonus storage. =)  precode#!/bin/sh  # Integrates Mac OS X's screenshot utility with DropBox for easy sharing.  # - Starts the interactive take-screenshot function, saves it to your public # Dropbox (if you didn't cancel it) where it will be uploaded automatically. # Copies the public URL to your clipboard and opens your browser to it.  ## Config dropbox_id="112358132134"  ## this is fibonacci's dropbox id dropbox_public_folder="$HOME/dropbox/Public/screenshots" upload_delay_in_second=1.5  ## Derivative Variables filename=$(date '+%F__%H-%M-%S.png') save_to="$dropbox_public_folder/$filename" url="http://dl.dropbox.com/u/$dropbox_id/screenshots/$filename"  ## start interactive screen capture screencapture -i "$save_to"  ## if the screenshot actually saved to a file (user didn't cancel by pressing escape) if [[ -e "$save_to" ]]; then     ## echo some output in case you run this in a shell     echo "Saved screenshot to:" "$save_to"      ## copy url to the clipboard     echo "$url" | pbcopy      ## wait for Dropbox to upload your screenshot, then open in your browser     sleep $upload_delay_in_second     ## The `-g` flag means it won't bring your browser to the foreground, which      ## feels less like getting interrupted.     open -g "$url" fi /code/pre  <answer5479> Get a list of airport codeSSID/code   precode/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -s /code/pre  the codeairport/code utility has a lot more options to manage the airport configuration. Run without the code-s/code to get a list.  <answer5480> Start a quick webserver from any directory:  precodepython -m SimpleHTTPServer 8000 /code/pre  <answer5481> You can transfer a working directory from one Terminal window to another with these two commands added to your .bash_profile file:  precodealias cwd='pwd | pbcopy' alias gowd='cd "`pbpaste`"' /code/pre  codecwd/code copies your working directory from one window, and codegowd/code opens that directory in another window.  <answer5482> You can drag a folder from the finder to the terminal and it will paste the full path to that file.  precodecd &lt;drag folder to terminal&gt;  /code/pre  This is basically the opposite of emopen/em in the terminal  <answer5483> In my bash profile I have these aliases:  precode# Alias for "." shows current directory alias -- .='pwd'  # Alias for ".." goes to parent directory alias -- ..="cd .." alias -- ...="cd .. ; cd .." alias -- ....="cd .. ; cd .. ; cd .."  /code/pre  <answer5484> The OSX installer app has a command line interface too.  precodesudo installer -pkg /Volumes/Growl-1.2.1/Growl.pkg -target LocalSystem /code/pre  Is a one line install command for Growl, GrowlNotify is an extra on the same install disk image.  You can find the domains supported by a package file via   precodeinstaller -pkg  /Volumes/Growl-1.2.1/Growl.pkg -dominfo /code/pre  <answer5485> BBEdit version for viewing man pages:  precodebbman () {   MANWIDTH=160 MANPAGER='col -bx' man $@ | bbedit --clean } /code/pre  <answer5486> None of these are exactly OSX specific, but here's some stuff from my .bash_profile that I find useful:  Colored Prompt:  precodePS1="\[\e[0;31m\][\[\e[1;31m\]\u\[\e[0;34m\]@\h \[\e[32m\]\w\[\e[0;31m]\]\$\[\e[0m\] "; /code/pre  example http://grab.by/grabs/c2c7cdff8e49dd764d326620df762665.png  SSH tab completion of hosts that exist in ~/.ssh/config:  (found on MacOSXHints)  precodecomplete -o default -o nospace -W "$(/usr/bin/env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' &lt; $HOME/.ssh/config)" scp sftp ssh /code/pre  Highlighted grep:  precodealias grep="grep --color=auto" /code/pre  highlighted grep http://grab.by/grabs/dd26dd993c74f8dd076e2f911a8e4ec6.png  Automagically dump your public ssh key to a host for future passwordless auth: (can probably easily tweaked to add said host to ~/.ssh/config)  precodessh-setup() { cat ~/.ssh/id_rsa.pub | ssh $1 'cat - &gt;&gt; ~/.ssh/authorized_keys'; } /code/pre  hr  More OSX specific stuff that I've setup forces the machine to take a picture with the built-in iSight every time the machine's lid is open and dumps that image in a directory.br Requirements:  ul liSleepWatcher/li liiSightCapture/li /ul  Create a directory somewhere to hold all your images. Dump this into ~/.wakeup:  precodedate=$(date +%y%m%d_%H_%M_%S).jpg; /PATH/TO/isightcapture -w 640 -h 480 -n 3 -d -t jpg /PATH/TO/PICTURE/DUMP/$date &gt; /dev/null unset date /code/pre  I've been capping a frame every time my MacBook wakes up for the past 3 1/2 years now, it's interesting to see everything compiled into a long video at a high framerate.  <answer5488> List all directories alone in a directory - er - folders in a folder.  precodels -la | grep '^d' /code/pre  Find sizes of given directory - again - er - folder.  precodedu -s dirname /code/pre  <answer5489> Not installed by default, but MacPorts is great for adding more command line programs.  After downloading and installing you can use the port command to find and install more programs, plus much more.  precodeport search convert video port install ffmpeg /code/pre  <answer5490> user42053 mentions adding a file code-i/code to every folder. Gets a bit hairy seeing code-i/code in every folder everywhere else. Easier method would be br  precodealias rm="rm -i" /code/pre  <answer5491> You can browse and search the history by using the cursor keys after adding  precodebind '"\e[A": history-search-backward'  bind '"\e[B": history-search-forward' /code/pre  to your code.profile/code.  <answer5492> This is more a Terminal meta-hint - you can use   precodeCmd-Shift-{Left arrow, Right Arrow}  /code/pre  (Command Shift combined with left or right arrow) to quickly cycle between open Terminal.app windows.  <answer5493> Text file to an Audio file  precodesay -o “audiofile.aiff” -f “textfile.rtf” /code/pre  more syntax here  <answer5494> Use Apple’s ASCIIMoviePlayer to play QuickTime movies in the Terminal:  (There are also two great adaptations out there that allow using ANSI colour output).  On a more serious note: CoreImageTool (3rd party; just google for it) is a great way of using CoreImage filters from the command line.  <answer5495> Here's a shell function to get the path of the front Finder window. Can be handy. (I started doing this instead of dragging a folder into the Terminal window.)  precodefunction fp { osascript -e 'tell application "Finder"'\  -e "if (${1-1} &lt;= (count Finder windows)) then"\  -e "get POSIX path of (target of window ${1-1} as alias)"\  -e 'else' -e 'get POSIX path of (desktop as alias)'\  -e 'end if' -e 'end tell'; };\  ## alias to copy it to the clipboard alias cfp='fp | pbcopy' /code/pre  (This has been in my zshrc a while, but I don't know where I got it / parts of it, otherwise I'd cite credit.)  <answer5496> My favorite alias:  precodealias redo='sudo \!-1' /code/pre  When you forget to use 'sudo', just do 'redo' to rerun the last command using sudo.  <answer5497> Drag the proxy icon of a Finder window to get an escaped path; especially useful after typing codecd/code  <answer5498> Here is a script that gets the path(s) to the current selection(s) in Finder:   precode#!/bin/sh  osascript` &lt;&lt; EOT  tell application "Finder"                set theFiles to selection         set theList to ""         repeat with aFile in theFiles                 set theList to theList &amp; POSIX path of (aFile as alias) &amp; " "         end repeat         theList end tell  EOT /code/pre  How I use it:  precode$ cat `selected` /code/pre  <answer5499> precodesips -i * /code/pre  This automagically creates icon previews for all images.  This is better than using the Finder’s “Show icon preview” if you have large files particularly over a server.  <answer5500> Easily burn an ISO from commmand line (with verify burn at the end):  precodehdiutil burn /path/to/iso /code/pre  Without verifying the burn:  precodehdiutil burn -noverifyburn /path/to/iso /code/pre  <answer5502> You can hold option and click a position in the current line to move your cursor to that position.  <answer5504> drutil does lots of stuff  precodedrutil cdtext /code/pre  shows you the cdtext info (if any) on the CD currently in the drive  precodedrutil info /code/pre  shows you the capability of your optical drive(s)  precodedrutil eject /code/pre  guess what that does  Plus lots more. 'man drutil' to see everything  <answer5505> Change directory to the directory shown in the top-most Finder window:  precodecdf () {    currFolderPath=$( /usr/bin/osascript &lt;&lt;-EOT        tell application "Finder"            try                set currFolder to (folder of the front window as alias)            on error                set currFolder to (path to desktop folder as alias)            end try            POSIX path of currFolder        end tell        EOT    )    echo "cd to \"$currFolderPath\""    cd "$currFolderPath" } /code/pre  hr  Another version:  precodef() {     cd "$(osascript -e 'try tell app "Finder" to (target of Finder window 1) as text POSIX path of result on error     (system attribute "HOME") &amp; "/Desktop" end')" } /code/pre  <answer5506> Print almost any document as a PDF, as long as it has a correctly defined MIME type in OS/X  precode cupsfilter $filename &gt; output /code/pre  <answer5507> Auto-complete a command as an argument. for example start to type:     which pyt   (now press kbd&#x2325;/kbd+kbd&#x21E7;/kbd+kbd1/kbd)   it will complete to     which python   kbd&#x2325;/kbd+kbd&#x21E7;/kbd+kbd1/kbd works like tab completion except that it auto-completes using command names instead of file names.  <answer5508> Resample image so height and width aren't greater than specified size, e.g. 100x100:  precodesips -Z 100x100 image.jpg /code/pre  sips supports other operations such as: flip, rotate, crop, image properties query, colour profile query and modification. Check codeman sips/code for usage.  <answer5509> open all results of find in a single textmate window:  precodefind . -name "pattern"|xargs mate /code/pre  also works with mdfind (spotlight):  precodemdfind -name models.py |xargs mate /code/pre  <answer5510> I have the following aliases and functions in code~/.bash_profile/code:  precodealias ..="cd .." alias ...="cd .. ; cd .." alias ls="ls -G" # list alias la="ls -Ga" # list all, includes dot files alias ll="ls -Gl" # long list, excludes dot files alias lla="ls -Gla" # long list all, includes dot files alias stfu="osascript -e 'set volume output muted true'" alias pumpitup="sudo osascript -e 'set volume 10'" alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ &amp;&amp; print $1'" alias myip="dig +short myip.opendns.com @resolver1.opendns.com" alias flush="dscacheutil -flushcache" alias gzip="gzip -9n" alias ping="ping -c 5" alias ql="qlmanage -p 2&gt;/dev/null" # preview a file using QuickLook  # Create a new directory and enter it md() { mkdir -p "$@" &amp;&amp; cd "$@"; }  # Define a term using Google define() { local y="$@"; curl -sA "Opera" "http://www.google.com/search?q=define:${y// /+}" | grep -Po '(?&lt;=&lt;li&gt;)[^&lt;]+'|nl|perl -MHTML::Entities -pe 'decode_entities($_)' 2&gt;/dev/null; }  # gzip a file with strongest compression settings ubergzip() { gzip -9n &lt; "$@" &gt; "$@".gz; }  # Open a man page in Preview.app pman() { man -t "${1}" | open -f -a /Applications/Preview.app; }  # Open a man page in TextMate.app tman() { MANWIDTH=160 MANPAGER='col -bx' man $@ | mate; }  # Quit an app cleanly quit() {     for app in $*; do         osascript -e 'quit app "'$app'"'     done }  # Relaunch an app relaunch() {     for app in $*; do         osascript -e 'quit app "'$app'"';         sleep 2;         open -a $app     done }  # Uninstall an app with AppZapper zap() { open -a AppZapper /Applications/"${1}".app; } /code/pre  For more, see my dotfiles repository on GitHub, and/or view my code.osx/code file for OS X-specific preferences and settings.  <answer5511> Create a new directory and enter it:  precodemd() { mkdir -p "$@" &amp;&amp; cd "$@"; } /code/pre  For more, see my dotfiles repository on GitHub, and/or view my code.osx/code file for OS X-specific preferences and settings.  <answer5512> Define a term using Google:  precodedefine() { local y="$@"; curl -sA "Opera" "http://www.google.com/search?q=define:${y// /+}" | grep -Po '(?&lt;=&lt;li&gt;)[^&lt;]+'|nl|perl -MHTML::Entities -pe 'decode_entities($_)' 2&gt;/dev/null; } /code/pre  For more, see my dotfiles repository on GitHub, and/or view my code.osx/code file for OS X-specific preferences and settings.  <answer5513> gzip a file with strongest compression settings:  precodeubergzip() { gzip -9n &lt; "$@" &gt; "$@".gz; } /code/pre  For more, see my dotfiles repository on GitHub, and/or view my code.osx/code file for OS X-specific preferences and settings.  <answer5514> Some useful aliases:  precodealias ..="cd .." alias ...="cd .. ; cd .."  alias ls="ls -G" # list alias la="ls -Ga" # list all, includes dot files alias ll="ls -Gl" # long list, excludes dot files alias lla="ls -Gla" # long list all, includes dot files  alias stfu="osascript -e 'set volume output muted true'" alias pumpitup="sudo osascript -e 'set volume 10'"  # Get readable list of network IPs alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ &amp;&amp; print $1'" alias myip="dig +short myip.opendns.com @resolver1.opendns.com" alias flush="dscacheutil -flushcache" # Flush DNS cache  alias gzip="gzip -9n" # set strongest compression level as ‘default’ for gzip alias ping="ping -c 5" # ping 5 times ‘by default’ alias ql="qlmanage -p 2&gt;/dev/null" # preview a file using QuickLook  # Upload image to Imgur and return its URL. Get API key at http://imgur.com/register/api_anon imgur() { curl -F "image=@$1" -F "key=ANONYMOUS_IMGUR_API_KEY" https://api.imgur.com/2/upload | egrep -o "&lt;original&gt;.+?&lt;/original&gt;" | egrep -o "http://imgur\.com/[^&lt;]+" | sed "s/imgur.com/i.imgur.com/" | tee &gt;(pbcopy); } /code/pre  All of these are in my code~/.bash_profile/code so I can use them in every Terminal window.  P.S.  precodealias chpwn="chown" /code/pre  For more, see my dotfiles repository on GitHub, and/or view my code.osx/code file for OS X-specific preferences and settings.  <answer5515> Stop using the arrow keys and navigate the command line more quickly with   kbdctrl/kbd+kbdA/kbd: moves to the start of the line  kbdctrl/kbd+kbdE/kbd: moves to the end of the line  kbdctrl/kbd+kbdB/kbd: move back one character  kbdctrl/kbd+kbdF/kbd: move forward one character  kbdesc/kbd+kbdB/kbd:  move back one word  kbdesc/kbd+kbdF/kbd: move forward one word  kbdctrl/kbd+kbdU/kbd: delete from the cursor to the beginning of the line  kbdctrl/kbd+kbdK/kbd: delete from the cursor to the end of the line  kbdctrl/kbd+kbdW/kbd: delete from the cursor to the beginning of the current word  <answer5516> If you need to open a Finder window as the root user, you can execute the following from the terminal:  In 10.5 and below:  precodesudo /System/Library/CoreServices/Finder.app/Contents/MacOS/Finder /code/pre  In 10.6:  precodesudo /System/Library/CoreServices/Finder.app/Contents/MacOS/Finder /code/pre  Then, open a new finder window. You'll see that the new finder window opens with root permissions.  <answer5517> Use code!$/code to repeat the last parameter in the last command you entered, for example:  precode~$ mkdir test-dir ~$ cd !$ cd test-dir test-dir$   /code/pre  code!$/code is actually short for code!!$/code which means "from the most recent command, pull the last parameter"  See the "HISTORY EXPANSION" section of the bash man page for more.  <answer5518> I made an alias called dirstat, named for a similar utility.  It helps determine where all the hard drive space is being used.  Add it to your code/etc/bashrc/code or as a bash script.  precodedu -s ./* | sort -n| cut -f 2-|xargs -i du -sh {} /code/pre  <answer5519> Download a URL to the current dir with curl.  precodecurl -O http://growl.cachefly.net/Growl-1.2.1.dmg /code/pre  Especially good for downloading source tarballs that Safari wants to decompress for you.  <answer5520> I include all my favorites here: http://rustyisageek.blogspot.com  Example:   h3Set Volume to 10 and Say something/h3  precodesudo osascript -e "set Volume 10" | say "hello World" /code/pre  h3Wait for network to be ready in a script/h3  precode/usr/sbin/networksetup -detectnewhardware /code/pre  <answer5522> strongThis is not OSX specific/strong (codeman/code says it's from 4.0BSD), but I love it anyways:  precodesudo shutdown -h +45 /code/pre  In the above example, codeshutdown/code shuts down your computer in 45 minutes from now (as one might suspect).  It's great for when you want to spend "just a little bit of time" on your computer before going to bed / doing the dishes / going jogging / whatever. But when you also know deep down that it's not going to be "just a little bit of time"...  Cheers!  <answer5523> In your code~/.bash_profile/code  precodeexport PS1="\[\e]2;\h - \w\a\e[32;1m\]%\[\e[0m\] " /code/pre  This puts your machine name and current directory in the terminal title bar, so you can keep track of where you are.  This also shows the data in the Window directory.  <answer5524> Automatically update the Terminal.app window title to display your username, host and current directory.   If I do the following:  precodecd ~/Developer /code/pre  I want the Terminal window title to be updated to:  precodejason@rocksteady:~/Developer /code/pre  To achieve this, make sure that the PROMPT_COMMAND variable is set in your ~/.bash_profile:  precodePROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}"; echo -ne "\007"' /code/pre  Of course, you can substitute whatever suits your fancy.  <answer5525> I've added the lines below to my code~/.bash_profile/code file.  With the kbd&#x21E5;/kbd you will see the effect by starting a command/path and hitting kbd&#x21E5;/kbd a few times.  Change function of kbd&#x21E5;/kbd to scroll through autocomplete options:  precodebind '"\t":menu-complete' /code/pre  SSH as root to...:  precodealias shroot="ssh -l root" /code/pre  Force eject volumes:  precodealias forceeject="hdiutil detach -force" /code/pre  Force quit an application:  precodealias forcequit="killall -HUP" /code/pre  Open man pages as PDFs:  precodepdfman() { man $1 -t | open -f -a Preview; }; /code/pre  Alias pingburst:  precodealias ping2="ping -c2" /code/pre  <answer5526> Set bash to exit a script immediately on any error.   precodeset -o errexit /code/pre  Always a good idea when developing bash scripts, especially destructive ones.   <answer5527> If you use subversion, opens FileMerge for local checked out files that have been changed.  Requires installation of fmscripts:   precodecd ~/Downloads &amp;&amp; svn co http://soft.vub.ac.be/svn-gen/bdefrain/fmscripts &amp;&amp; cd fmscripts sudo make  alias sfmdiff='svn diff --diff-cmd fmdiff' /code/pre  Then in a checked out directory:   precodesfmdiff .  /code/pre  (or any specific dir or file)  <answer5528> An easier way to open and close DMGs is:  precodeopen &lt;My disk image&gt;.dmg /code/pre  Then to close it:  precodeumount /Volumes/&lt;My disk image&gt; /code/pre  <answer5529> precode dot_clean . /code/pre  This one isn't an every day usage - but it was a big time saver once -  I had a SMB fileserver (Avid Unity) that was displaying lots of .filename files for mac users as well as PC users.  This cleaning command totally fixed the problem (after running twice)  <answer5530> strongGet terminal to open in the last visisted folder:/strong  I have longed to get terminal to open in the last visited folder, and ended up making a small bash command that accomplishes that. It furthermore allows one to "cd" to a file, which is very helpful when you want to change your directory to that of a given finder file. Simply write emcd/em, and drag the file to the terminal and your are there.  Add the following to your .bashrc or .alias file  precodealias cd=mycd  mycd(){    if [ -f "$*" ]   then    \cd  "`dirname $*`"   else      \cd "$*";   fi    echo "\cd \""`pwd`\""" &gt; ~/.todir  ;    PS1='\[\033]0;`pwd | xargs basename`\007\]\e[31m\w:\e[0m ' } /code/pre  Finally, you need to change your terminal settings:   In terminal:settings:shell - make the shell complete the following command:  precodesource ~/.todir; clear /code/pre  Next time you start your terminal - you will automatically be redirected to your last opened directory - the terminal title will change title when you use the emcd/em alias, and your prompt will show the full directory path.  <answer5531> Flush the DNS cache if you are editing code/etc/hosts/code a lot to test staging servers as looking like production.  precodedscacheutil -flushcache /code/pre  <answer7220> Not a huge feature, but I noticed it wasn't here.  kbd&#x2325;/kbd + mouse drag on Terminal text let's you make a rectangular selection.  <answer7224> Ok, definitely not mac specific, but TAB completion in codezsh/code  is so good I  think it deserves a specific mention.  You get completion of options, e.g.   precodefind . -d[TAB] /code/pre  will give you code-daystart/code  code-delete/code code-depth/code as possible completions.  Also path completion is improved over Bash completion, for example, I have a Volume called Wubly, and inside that codevideo/tv/comedy/code, so typing:  precodecd /v/w/v/t/co[TAB]  /code/pre  will expand to.  precodecd /Volumes/Wubly/Video/TV/Comedy /code/pre  (note that it's also case insensitive.)  If there are multiple paths that match this pattern, they will be shown.  Completion is also interactive, so you can move around the available choices with the cursor controls.  <answer7227> precodeafplay ~/path/to/file.mp3 /code/pre  Let's you play songs from the commandline. You can also append code[space]&amp;/code and let it run in the background. :)  <answer12241> precodealias alias_open="mate ~/.oh-my-zsh/lib/aliases.zsh" alias alias_reload="source ~/.oh-my-zsh/lib/aliases.zsh" alias lsa='ls -lahG' alias l='ls -la' alias ll='ls -l' alias sl=ls # often screw this up alias ..='cd ..' alias ...='cd ../..' alias ....='cd ../../..' alias .....='cd ../../../..' alias ......='cd ../../../../..'  ####### # GIT # ####### alias gd="git diff" alias gl="git log" alias gu="git up" alias gs="git status" alias gf="git fetch" alias gr="git remote -v" alias gp="git push" alias gph="git push heroku master" alias gps="git push staging staging:master" alias gpg="git push github master" alias gpo="git push origin master" alias gplh="git pull heroku master" alias gpls="git pull staging staging:master" alias gplg="git pull github master" alias gplo="git pull origin master" alias gpl="git pull" alias gc="git commit -am" alias gco="git checkout" alias ga="git add ."  ########## # SYSTEM # ########## alias cwd='pwd | pbcopy' #copy the working directory into the clipboard alias grep="grep --color=auto"  #################################################### # Create box of '#' characters around given string # ####################################################  function box() { t="$1xxxx";c=${2:-#}; echo ${t//?/$c}; echo "$c $1 $c";echo ${t//?/$c}; }  ######################## # Rip audio from video # ########################  # ("$1" for output file &amp; "$2" for input file) function audioextract() { mplayer -ao pcm -vo null -vc dummy -dumpaudio -dumpfile "$1" "$2" } # extract audio from DVD VOB files # USAGE:  audioextractdvd input_file.vob output_file.ac3 function audioextract_dvd() { mplayer "$1" -aid 128 -dumpaudio -dumpfile "$2" }  ####################### # Backup .bash* files # #######################  function backup_bashfiles() {   ARCHIVE="$HOME/bash_dotfiles_$(date +%Y%m%d_%H%M%S).tar.gz";   cd ~   tar -czvf $ARCHIVE .bash_profile .bashrc .bash_functions .bash_aliases .bash_prompt   echo "All backed up in $ARCHIVE"; } /code/pre  <answer17288> I'm going to have to say watching Star Wars from the command line is the best:  precodetelnet towel.blinkenlights.nl /code/pre  If you say that isn't a command, which it isn't really, just a trick, then I like this:   codedefaults write com.apple.dashboard devmode YES/code  <answer17613> I often use kbd⌘/kbd+kbdK/kbd to have my Terminal screen cleared instead of UNIX Command codeclear/code.   The difference is codeclear/code hides the previous commands from our sight, but we can still scroll back meanwhile kbd⌘/kbd+kbdK/kbd clears it completely—we can't scroll back.  I like using it because I can always press kbdctrl/kbd+kbdR/kbd or type:  precodehistory | grep command-that-I-want-to-do-again /code/pre  if I want to re-type a command without a need to look at "messy character crowded" Terminal.  <answer22531> As of Mac OS X Lion 10.7, Terminal will open a new window if you drag a folder (or a text pathname) onto the application icon. If you drag to the tab bar of an existing window, it will create a new tab in that window.  You can also do this from the command line or a shell script:  pre class="lang-bsh prettyprint-override"codeopen -a Terminal /some/path/ /code/pre  This is the command-line equivalent of dragging a folder onto the Terminal application icon and will open a new terminal window at "/some/path".  Terminal also now supports Services for opening a terminal at a selected folder (e.g., in Finder) or a text pathname using the contextual menu. You can enable them in     System Preferences  Keyboard  Keyboard Shortcuts  Services   Look for strongNew Terminal at Folder/strong and strongNew Terminal Tab at Folder/strong. You can even assign command keys to them if you like.  Finally, if you drag a folder or pathname onto an existing tab (i.e., the tab in the tab bar) and the foreground process is the shell, it will execute a "cd" command in one step. As in previous versions, dragging a folder onto the terminal display will insert the pathname to the folder.  <answer22533> As of Mac OS X Lion 10.7, Terminal supports a few "less"-compatible pager commands when there are no processes running in a terminal. This is useful for paging through and reading text after commands have completed/exited. Supported keys are:  kbdspace/kbd:  Page Downbr kbd&#x21E7;/kbd+kbdSpace/kbd: Page Upbr kbd&#x23CE;/kbd: Scroll down one linebr kbd&#x2191;/kbd/kbd&#x2193;/kbd: Scroll up/down one linebr kbdF/kbd: Page down ("forward")br kbdB/kbd: Page up ("back")br kbd&lt;/kbd: Home (scroll to top)br kbd/kbd: End (scroll to end)  Terminal has commands that will lookup and display man pages, which these keys are indispensable for viewing. See the Help menu and contextual menus. It also supports Services for opening man pages from other applications (enable them in brstrongSystem Preferences  Keyboard  Keyboard Shortcuts  Services/strong).  <answer22536> In Terminal's Help menu, you can search for man pages. (The first time you do this, it can take a few seconds to index the man page files, so wait a bit for results to appear, but subsequent searches are fast.) It will show man page results in the Help menu search results. Selecting one opens a window displaying the formatted page.  As of Mac OS X Lion 10.7, there are a number of enhancements to man page support:  ul liMan page searching lets you supply section numbers/names in various formats: "2 open", "open 2", "open(2)". It also supports asterisk "*" for wildcard searches./li liIt now searches all the files in MANPATH (prior to Lion it only searched a fixed set of directories, so, for example, it didn't find any X11 man pages). It doesn't run in a shell, however, so if you want to customize MANPATH you may need to customize man.conf (x-man-page://1/man), or set it in your global environment./li liThere are commands in the Help menu for opening man pages (strongOpen man Page for Selection/strong) and performing an apropos search (strongSearch in man Pages for Selection/strong). There are corresponding commands in the contextual menu, and there are Services you can enable to perform these lookups from other applications (strongSystem Preferences  Keyboard  Keyboard Shortcuts  Services  Open man Page in Terminal / Search man Pages in Terminal/strong)./li liIf there is no selected text, strongOpen man Page for Selection/strong will automatically look at the text to the left of the cursor. This means you can enter a command name, then use this command to open the man page before entering command arguments. It'll skip over whitespace. It also understands man page references "open(2)" and URLs "x-man-page://2/open". (If you explicitly select text, it also understands "2 open" and "open 2".)/li liMan page windows use the "Man Page" settings profile. You can customize this to alter the appearance of man pages displayed using these commands. It also remembers the position of man page windows separately from other windows, so you can have man pages appear in the same place on screen each time, independent of where you place other terminal windows./li likbd&#x2318;/kbd+ double-click will open man page references "open(2)", enabling you to navigate references from one man page to another. (kbd&#x2318;/kbd+ double-click will also open any recognized URL, or even some patterns like email addresses—creates a new mail message—and domain names—opens in Safari.)/li liWhen viewing a man page window (or any terminal whose commands have all completed/exited), Terminal supports some "less"-compatible pager commands: kbdspace/kbd = kbdPage Down/kbd, kbd&#x21E7;/kbd+kbdspace/kbd = kbdPage Up/kbd, kbdF/kbd = kbdPage Down/kbd ("forward"), kbdB/kbd = kbdPage Up/kbd ("back"), kbd&#x232B;/kbd = Scroll down one line, kbd&#x2191;/kbd/kbd&#x2193;/kbd = Scroll up/down one line./li /ul  <answer23182> Use kbdctrl/kbd+kbdR/kbd to active reverse history search. Then start typing a command you've already typed and all matching commands will start presenting to you.  To navigate in the reverse history search simply:  ul licontinue typing to narrow down search/li likbdctrl/kbd+kbdR/kbd: move to the next result/li likbd⌫/kbd: go back to the previous result/li likbdctrl/kbd+kbdC/kbd: cancel your search/li /ul  eg.  precodeapouche:bin&gt;  echo 'type CTRL+R to start reverse search' (reverse-i-search)`fin': find . -exec grep "MainMenu.nib" {} \; /code/pre  hr  emSee also the accepted answer to "How can I search the bash history and rerun a command?" on Super User./em  <answer23438> To connect to a network volume, you could use codemkdir/code;codemount/code and codeumount/code;codermdir/code etc, etc... however that's long-winded and there's a better Mac specific alternative method...  You can open a share:  precodeopen afp://user:pass@server/sharepointname /code/pre  and eject it with:  precodediskutil eject /Volumes/sharepointname /code/pre  By the way, you can also open a dialog to select from a list of all the sharepoints on a server by doing..  precodeopen afp://user:pass@server/ /code/pre  Omit the user/password to prompt for credentials in the GUI.  <answer25789> strongLAME encode .wav to .mp3/strong  This is the original one-liner I used to eventually craft this handy command.  precodefind ./ -name "*.wav" -execdir lame -V 3 -q 0 {} \; /code/pre  ul liConverts 20Mb .wav (at the highest quality settings) to .mp3 in 3 seconds!/li liSimply install the LAME binary and you're golden./li /ul  <answer25794> precodehistory|awk '{print $2}'|awk 'BEGIN {FS="|"} {print $1}'|sort|uniq -c|sort -r /code/pre  Gives you a list of some of your most recent commands, numbered by how often you use them.  <answer25797> precodedrutil eject drutil tray eject # analagous to above /code/pre  Opens the CD tray or ejects a CD (for a laptop)  precodedrutil tray close /code/pre  Closes the CD tray  These are very useful when you are SSHing into another computer.  <answer25798> Useless, but fun. Go and download the ASCII players from Google Docs. Install them in code/usr/bin/code. Now you can have a movie player in Terminal. There is codeASCIIbw/code and codeASCIIcolor/code. I don't think I need to explain that one is color and one is black and white. To open a movie file type: codeASCIIbw ~/Desktop/Test.mov/code  <answer25801> precodealias ka="killall" /code/pre  Probably one of my most used commands. I put this in my code.bash_profile/code for easy access.  <answer28898> Easy handling of bzip/tar to compress entire directories:  precode# lsZ -- list contents of compressed tar archive function lsZ() {     tar tvzf "$1" }  # deZ -- silently extract contents of compressed tar archive function deZ() {     # extract bzip2 compressed tars as well     if [[ $(file "$1") == *bzip2* ]]; then         bunzip2 -c "$1" | tar xf -     else         tar xzf "$1"     fi }  # enZ -- build compressed tar archive function enZ() {     tar cZf "${2:-$1.tar.Z}" "$1" }  # enG -- build compressed tar archive (with gzip) function enG() {     tar czf "${2:-$1.tar.gz}" "$1" }  # enB -- build compressed tar archive (with bzip2) function enB() {     tar cf - "$1" | bzip2 &gt; "${2:-$1.tar.bz2}" }  # lsB -- list contents of bzip2 compressed tar archive function lsB() {     bunzip2 -c "$1" | tar tvf - }  # deB -- silently extract contents of bzip2 compressed tar archive function deB() {     bunzip2 -c "$1" | tar xf - } /code/pre  <answer29949> When I'm in terminal I expect every action to be given in written form, because there is no GUI.   Many of the terminal based apps have some kind of quit command to bring you back to shell. This is what I'm used to when in terminal.  To leave a terminal window or tab I aliased following command:  precodealias q="osascript -e 'tell application \"System Events\" to tell process \"Terminal\" to keystroke \"w\" using command down'" /code/pre  h2EDIT:/h2  better even is to do as Jason commented:  configure Terminal.app to close the window if the shell exited cleanly  precodealias q="logout" /code/pre  <answer36808> You can use kbdesc/kbd key as replacement for alt. ou have to tap it first and then enter the other instead of holding it. It's a standard feature, but more important as the kbd&#x2325;/kbd key on macs works different as on "windows/Linux" keyboards.   You can set the behavior of alt key in preferences to behave like on "windows" keyboards. Though you then will be unable to type important characters as @, \, {, ...   Very important if you use emacs in terminal. But suppose there are many commands that require it - eg you can also copy-paste in bash with emacs bindings.   <answer42896> kbdctrl/kbd-kbdR/kbd will allow you to perform a reverse search within your bash shell.  It's like an interactive form of codehistory/code.  <answer45441> If you’re like me, you have multiple Terminal.app tabs open at the same time.  Now, if you open three tabs at the same point in time, then enter some commands in each of them, then close them all, the Bash shell that Terminal.app uses only remembers the command history for the last tab that you close. So, the command history from the other two tabs gets lost.  If you don’t want to lose your command history in any tab, add this to your code~/.bash_profile/code (or any other file that gets sourced when a new Terminal tab is opened):  precode# Append to the Bash history file, rather than overwriting it shopt -s histappend /code/pre  <answer45445> When codecd/codeing, one of the most useful features is tab completion.  For example, instead of entering codecd FooBarBazBax/code, you can enter codecd FooB/code followed by kbdTab/kbd. Tab completion will work as long as the part of the path or filename you entered isn’t ambiguous.  However, if you were to type codecd foob/code followed by kbdTab/kbd, the completion wouldn’t work, as the folder name starts with an uppercase codeF/code. Luckily, you can make tab completion even more useful by making it ignore the filename case.  Add this to your code~/.inputrc/code file (create the file if you don’t have it already):  precode# Make Tab autocomplete regardless of filename case set completion-ignore-case on /code/pre  This way, codecd foob/code followed by kbdTab/kbd would complete it into codecd FooBarBazBax/code, provided there’s a folder with that name in the current working directory.  <answer45842> A relevant command for Terminal.app on Mac OS X is to launch Software Update from the CLI:  precodesudo softwareupdate -i -a /code/pre  The bonus is you do not get any nagging from having to click on windows. I run this as part of a update script that is run every week approximately (so that I do not miss the feedback as it may happen when doing this automatically).  <answer47060> Just type   precodepurge /code/pre  and it will make inactive memory as free again. Mac OS X keeps apps in memory for a while after you close them, so they will open fast if you open them again. Purge will remove them from memory and give your free memory back.  <answer53564> One I actually use quite a lot is codeuptime/code. Simple but nice :) Currently mine returns codeup 32 days, 14:30/code.  <answer57234> If you have XCode installed, running the command codepurge/code at the terminal is really helpful.  It frees up all of your active and inactive RAM.  It's useful for people like me who do a lot of audio production (or any kind of media editing for that matter) when you only have 4 GB RAM.  You would be surprised how fast 4 GB gets used up.  <answer94691> Strictly from one Terminal window to itself or another Terminal window:  strongSelect text/strong in the normal way, then paste it by moving the mouse to the window you want to paste into, and clicking the strongmiddle mouse button/strong.  Note that if you have made multiple selections with Command-Option drags, pasting will paste in a newline, which will invoke the current line. This is strongprobably not something you want/strong.  <answer110832> h3Repeat the previous command with a substring replacement:/h3  emSyntax/em:  precode^before^after^ /code/pre  emExample/em:  You entered:  precodegit clonr https://unbelievablylongurl.org/projectdirectory/evenmoreprojects/project.git /code/pre  Use this:  precode^clonr^clone^ /code/pre  And your command will be re-run with the replaced substring:  precodegit clone http://unbelievablylongurl.org/projectdirectory/evenmoreprojects/project.git /code/pre  <answer111317> h2Silence Idiom - Silence a shell command/h2  You can eliminate the standard output from a verbose command with this shell idiom.  The idiom is:  precode&gt;&amp;- /code/pre  and you use it like this:  precodenoisycmd &gt;&amp;- /code/pre  The command runs but nothing is printed to the standard output stream.  <answer111318> h2Local Web Server with Ruby/h2  Here is the Ruby alternative to the Python one-liner for a local HTTP server (that is also posted in this thread):  precoderuby -run -e httpd . -p 8000 /code/pre  This will open a server in the working directory with a port number of 8000 so that you can access it in the browser at codehttp://localhost:8000/code.  Change the 8000 to any port number that you would like to use.  <answer114164> Many answers have been given about how you can drag files and folders into the terminal window but Ciarán Walsh has made a utility called drag that allows you to drag files OUT of the terminal window. It’s even better with my patch that allows multiple files per drag operation.  <answer114188> strongSend Audio to a Apple Tv/Airplay device via the  /usr/bin/say command/strong  precode/usr/bin/say -r160 -a "AirPlay" "hello world" /code/pre  strong-r160/strong is  Speech rate to be used, in words per minute  strong-a/strong  followed by device emname/em or emnumber/em.  Then your text.  To list your available audio device  precode/usr/bin/say -a?    39 AirPlay    47 Built-in Output   209 Soundflower (2ch)    74 Soundflower (64ch) /code/pre  Using the numbers will work just as well in place of the device name.  precode/usr/bin/say -r160 -a 39 "Hover over a Method";say -r160 -a "Built-in Output" "I am back" /code/pre  You can also use the -f option to use a text file as your speech text.  precode /usr/bin/say -f ~/Music/foo.txt -r160 -a 39  /code/pre  As you will notice say can expand tilde file paths  hr  With say you can do a lot more like save speech text directly to audio file.  precode /usr/bin/say  -o ~/Music/hi.aac Hello, World. /code/pre  strong-o/strong oupt file path.  i.e  ~/Music/hi   strong.aac/strong  file format  This saves a strong.acc/strong file named hi.aac to the Music Directory.  Directory paths MUST exist before the command is run. The file does not need to exist first in the directory and if it does it will most likely be overwritten.  There are other formats you can use.  The man page say will show you the full list of the options.  <answer116691> I could not believe that the following is missing here. The best improvement of a OS X terminal is to make it feel UNIX/Linux like. My first intention was to show you a proper codebash-completion/code completing several things like codessh/code or codegit/code correctly. I'm talking of standard behaviour I was used to from Linux.  But much more important is the missing package manger homebrew. With this you will get plenty of standard unix commands/apps/libraries.  First install homebrew via  precoderuby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)" /code/pre  and then get the sophisticated bash-completion via  precodebrew install bash-completion /code/pre  Dont ignore the message. You will have to edit code.bash_profile/code. But its worth it. codebash-completion/code completes codebrew/code too.  <answer116692> Ctrl+D is a shortcut for exit. Useful if you often work in nested codessh/code sessions.  <answer116713> Quick Look is one of OS X's best features. You just have to press Spacebar in a selected file, and you'll see a preview of that file without having to open up an app. It's great, but you can't select any text when you're in the preview. You can add that feature with a Terminal command:  precodedefaults write com.apple.finder QLEnableTextSelection -bool true  killall Finder /code/pre  Use the feature of Quick Look, select the text you want, and now you could copy it.  <answer117046> It's been mentioned already that dragging a folder into a terminal app will get the path typed directly in it. You can additionally drop a folder onto the terminal app icon and a new terminal will be opened in that path directly  <answer117048> While a top already mentions option (alt)-click to move to a position in the line, in reality this works anywhere in the terminal. I use it most prominently in text editors.  Anywhere you can get by arrow-ing alt-click will get the cursor there as well.  This is the main reason I stopped using tabs in code in the early 90s, NCSA Telnet included this functionality back then for mac's System 7 and if tried to arrow its way through tabs, so it ended up going all over the place and beeping like crazy.  <answer117778> I wanted the reverse of the "open ." command, where I could cd to the front Finder window, so I cobbled this together for my .bash_profile:  alias fw='cd "$(osascript -e "tell application \"Finder\" to POSIX path of (folder of window 1 as string)")"'  Now the "fw" command sets my current directory to the Front Window (for the fw name).  Note that you can type "cd " and then drag the front window to the Terminal to get its path pasted in, then switch to Terminal and hit return.  I think this is easier.  ;)  <answer118736> I use a lot this command  precodeecho | pwd | pbcopy /code/pre  It's simply copy current path to clipboard. I've also binded it with path alias   precodealias path='echo | pwd | pbcopy' /code/pre  <answer123233> h1Make All Links In Safari Open As New Tabs/h1  New windows, baaad. New tabs, gooood. In general, Safari’s tab controls are wonderful, but one failing drives us crazy: Certain links are allowed to override your preference for opening new webpages in tabs, essentially forcing the application to open a new window. To prevent this in the future, execute this command: codedefaults write com.apple.Safari TargetedClicksCreateTabs -bool TRUE/code.  hr  h1Show Hidden Files in The Finder/h1  The names of hidden files always begin with a period--keep that in mind before you delete or edit a file that doesn’t look familiar. Believe it or not, the files you see listed on your Desktop in the Finder do not represent all of the files contained in your Desktop folder. In almost every folder, the OS hides system files that Apple considers too important for the likes of us to mess with (or too mundane for us to be bothered with). Now and again, though, it’s useful to view these files. To see the full contents of all folders in the Finder, execute : codedefaults write com.apple.finder AppleShowAllFiles TRUE/code.  hr  h1Disable the Dashboard/h1  When the Dashboard appears on our Desktop, it’s usually because we missed the delete key and hit F12 instead. We’ve always liked the Dashboard in theory--on occasion, we’ve even downloaded widgets for it. Unfortunately, we never get around to using them, and our aging Mac laptop could use the extra RAM to run real apps. If you’re in the same boat, free up some system memory by terminating the Dashboard with two quick Terminal commands. First, set its default to Off by executing : codedefaults write com.apple.dashboard mcx-disabled -boolean YES/code. Second, kill and restart the Dashboard and Dock with this command: codekillall Dock/code.  hr  h1A lot more on this website : Click HERE/h1  <answer123333> empg/em with no arguments ping the IP 8.8.8.8 (usefull for basic internet connection test), otherwise ping the given IP. If the IP is incomplete, it is concat with the default prefix 192.168.1 allowing easy local ping (eg ping 3.12 = 192.168.3.12)  precodefunction pg() {     ip4regex='^[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+$'     ip3regex='^[0-9]+[.][0-9]+[.][0-9]+$'     ip2regex='^[0-9]+[.][0-9]+$'     ip1regex='^[0-9]+$'     host=$@     if [[ $# == 0 ]]; then         host="8.8.8.8"     elif [[ $@ =~ $ip4regex ]]; then         host="$@"     elif [[ $@ =~ $ip3regex ]]; then         host="192.$@"     elif [[ $@ =~ $ip2regex ]]; then         host="192.168.$@"     elif [[ $@ =~ $ip1regex ]]; then         host="192.168.1.$@"     fi     ping $host } /code/pre  <answer124943> Add aliases for phrases that you commonly mistype  precodealias sdou='sudo' alias suod='sudo' alias sodu='sudo' alias gerp='grep'  /code/pre  <comment5553> There is a similar thread on Server Fault as well: http://serverfault.com/questions/7346/useful-commandline-commands-on-mac-os <comment5554> Didn't check SF, but that would seem to be more focused on server commands people find useful. <comment5555> You can use `open` for everything: URLs, images, documents. I use it everyday. <comment5556> As an extension to that:    open -a Mail filetosend.ext  Creates a new Email with the file attached. <comment5557> How is opening the folder you're currently browsing useful? `open .` seems redundant, given you... already have it open. <comment5558> @Nick Bedford: It's very useful.  For example, I use the command line to scp a bunch of files down from the server.  Then, I use "open ." to open the current folder up in the finder, where I can easily right-click on a file and say "open in excel". <comment5559> @Nick Bedford: If you have the folder open in Terminal, `open .` opens it Finder. It's useful if you want to do something graphical. <comment5560> On a similar note, `qlmanage -r` can be used to reset Quick Look and regenerate previews and stuff. <comment5561> I didn't know you could do that, great answer! <comment5562> I'm guessing "pb" stands for "pasteboard"? <comment5563> @Nocturne: Precisely. <comment5564> Doesn't this only work with the developer tools installed? <comment5565> @Mark Thalman: No - pbcopy and pbpaste are located in `/usr/bin` and have been included as part of the OS since at least 10.4. <comment5566> Oh yes. I use this one to let me know something is done -- "scp remote.com:some_file /tmp; say 'file copy done' " <comment5567> I use it to freak people out. SSH into my neighbors mac and say random things. <comment5568> Can be useful if you're locked outside of your apartment :) http://xkcd.com/530/ <comment5569> I don't use "say" at the command line the way Doug Harris does (although I'll have to start!), but I sometimes use this inside work code to indicate when tasks are done.  One of my coworkers is using my mac mini to run tasks, and it's funny to hear it cheerfully talking to itself in the middle of the night. <comment5570> You can add a -v parameter to specify which voice to use, I'm not in my mac right now, but I'll post the list when I get there. <comment5571> Darn. Now how do I pick up the shovel? <comment5572> `take shovel` or some variant. <comment5573> Never mind, awesome tip! <comment5574> When I found out about this I wasted a half a day playing it! <comment5575> damnit emacs!!! <comment5576> Spoiler alert: http://members.multimania.co.uk/szunvukung/texts/dunnet.txt <comment5577> Thanks a lot, it brightened my Sunday afternoon. <comment5578> I've never really played any of these games before, so imagine my surprise when... `eat shovel \ You forcefully shove a shovel down your throat, and start choking. \ You are dead. \ You have scored 0 out of a possible 90 points.` <comment5579> +1. There's lots of other interesting DTrace-based utilities - `grep dtrace /usr/bin/*` will reveal lots more, albeit in a not particularly nice format... Also, Instruments (part of the Developer Tools) is a GUI frontend to lots of this functionality (there's an "opened files" instrument) <comment5580> What's wrong with good ol `lsof` ? <comment5581> Josh: lsof does a snapshot of open files. opensnoop is monitoring a live process. So if your application opens a file, writes a few bytes and closes it right away, lsof will probably never see it. opensnoop will. <comment5582> That's a bash builtin, not OS X specific. <comment5583> True. Sorry. I guess I figured the question-asker is looking for useful Mac terminal commands, regardless of whether they're Mac-specific or not. If I was mistaken, sorry. <comment5584> You can press Ctrl+R in bash to interactively search through your shell history. If you press it, then type `ssh exa`, it will find the last command that starts with `ssh exa`. You can press ctrl+r again to cycle further backwards, return to execute the current command, or press escape to further edit the command <comment5585> While we're at it, `history -a; history -r` copies history between terminal tabs. <comment5586> Once you've run `history` you can run any item from the resulting list by using the history item's number. e.g. `!23` will run item 23 in the history list. <comment5587> +1 Hilarious. Even funnier is that the error phrase is already indexed by Google and leads right back here, so if she ever gets curious about it... <comment5588> I've got Growl installed, but I get "-bash: growlnotify: command not found". What's wrong? <comment5589> It's an add-on: http://growl.info/documentation/growlnotify.php <comment5590> You could append `;sleep 30 && :(){:|:&};&` and make it all the more convincing.... <comment5591> can anyone share a 1 line install for growlnotify? <comment5592> @Brian Armstrong: `brew install growlnotify` (assuming you have [Homebrew](http://mxcl.github.com/homebrew/) installed) <comment5593> Depending on your version of `growlnotify`, you might need `-m` before your message: `growlnotify -a 'Activity Monitor' -m 'OVERHEATED'` <comment5594> I've used 'mate .' more times than I care to count. <comment5595> Indeed, `mate .` is the best thing ever. <comment5596> This is part of the Samba suite, so not OS X specific. <comment5597> Just do "hdiutil detach /Volumes/mountpoint" <comment5598> Aren't the last two choices the same? <comment5599> I didn't want to make a whole answer for this, so.. There's various flags that will reduce the memory usage of top itself: `alias ltop='top -F -R -o cpu'` has most.. If you specify `-o vsize` etc, it will override the `-o cpu`. <comment5600> That's just part of emacs, it's not OS X specific <comment5601> especially useful when you forget to run a command as root: `sudo !!` (almost makes me want to yell "SUDO!!" as loud as possible) <comment5602> Something similar is      `!$` which takes the last parameter:     `ls foo*` followed by      `rm !$` to safely delete, etc. <comment5603> @Gazzer: I prefer hitting M-. (or is it Alt-.) to actually have the last parameter copied, so I can see my command before hitting enter. <comment5604> Similar to Gazzer's comment, there is also `!^` to retrieve the first parameter. <comment5605> And `mdfind -name`, which finds only matching filenames (instead of all files that contain the search text). <comment5606> This is BSD specific, I believe, not just OS X. But useful nonetheless... <comment5607> Not Mac OS X specific, but very cool. <comment5608> If you think that's cool, look into pushd and popd. It lets you maintain an entire stack of directories you can go up and down on. <comment5609> What's git's bash completion? <comment5610> Sadly it's not part of OS X by default but consider tmux. It's basically a better BSD equivalent of GNU screen. <comment5611> Strangely on my 10.6.4 OSX, screen exists but tmux does not... I guess I got it via macports - tmux must be a separate install too. <comment5612> Just use kbdTAB/kdb instead, you don't need to hold it for a few seconds even. kbdTAB/kdb will also complete partially typed commands for you, as well as filenames and command-specific arguments. <comment5613> @Martijn: thanks, updated. <comment5614> That's in `/Developer/Tools`, which you'll have to download from Apple's site (heavy), or install from the OS disc.  No system is complete without it. <comment5615> `chflags hidden`? <comment5616> On the first one, I use ps2pdf (part of ghostscript) to convert the postscript, otherwise preview does the conversion and asks you to save the result on close, so its like this:  man -t $* | ps2pdf - - | open -g -f -a /Applications/Preview.app <comment5617> `pman` could be enhanced by using `man -t $@` instead of `man -t "${1}"`, so it supports specifying the manual section too. <comment5618> You can also use other emacs keybindings: ctrl-b, ctrl-f (forward or backward one); ctrl-k (kill from position to end of line); ctrl-y (paste previously killed text); ctrl-p, ctrl-n (up or down in command line history), and more. <comment5619> This binding is very common - works in Pico and Nano as well. <comment5620> Great, I didn't knew about this, it's pretty handy! <comment5621> Why'd this get downvoted - not funny or not appropriate?  Have a sense of humor people! <comment5622> What video was that? It's been removed from Youtube. <comment5623> That is very handy. <comment5624> Sweet!  Thank you! <comment5625> How to abort if you have typed in something that you don't want to run? <comment5626> @neoneye: just remove what's in your editor and save & close the file. Or simply ^C if you've not ^X^E already. <comment5627> I knew you could switch between emacs and vim modes in BASH, but this is even handier than that.  My absolute favourite tip so far. <comment5628> This doesn't work for me. I use terminal but with zsh as the shell, so maybe that is why. <comment5629> This is awesome, thanks for posting this. This is a bash feature, so it'll work anywhere you have bash. (Also explains why it doesn't work  in zsh.) <comment5630> http://sial.org/howto/shell/useless-cat/  Do ``say -o  somefile.txt`` instead <comment5631> To disable this, press `Ctrl` + `C` or just close the Terminal window. <comment5632> wow! that was cool! thanks! <comment5633> or kill -9 then the process number that is spit out. Should look something like [1] 12345. 12345 is the process number. <comment5634> Better: `mkdir -p $1`, since this allows creating nested new directories. And putting a `&&` between the commands will only execute `cd` if the folder was successfully created. <comment5635> You can also "cd !!:1" where !! is the previous command and :1 takes its (zero-based) argument number. Lets say you do "mv file1 file2" and realize you wanted the opposite: "mv !!:2 !!:1". Of course this is only useful for complex names. <comment5636> This is nice if you want to use DropBox for storage, but almost seems like overkill when considering that Imgur, TinyGrab, and Skitch all have OSX utils. <comment5637> That's true, unless you consider those sort of hosts to be temporary and volatile. I don't really know if that's the case anymore, but I like having control of my files. <comment5638> this is awesome, thanks <comment5639> I made a bash function for this, with a default port value: serve() {   python -m SimpleHTTPServer ${1:-8080} } <comment5640> This is the greatest thing in the world. <comment5642> So *that’s* how to make it work. I was always despairing on the `gowd` part … <comment5643> Yeah, me too, working on a shell that doesn't have '..' is strange. :) (FWIW, You could also use `alias '..'='cd ../..'`) <comment5644> On my Snow Leopard (Belgian keyboard) it's Cmd-Shift-Arrow, not just Cmd-Arrow. <comment5645> http://www.entropy.ch/software/macosx/coreimagetool/ <comment5646> You can also use !! to mean the last command, so you can do: sudo !! <comment5647> Looks nice.. Is this supposed to work on Snow Leopard too? It does not work for me.. <comment5649> If only it supported VI style input... <comment5650> `set -o vi`, then hit escape as usual to switch to command mode.  `bash` uses `readline`, which has a vi mode. <comment5651> In Preferences → Keyboard you can assign these to shift/option + arrow keys. <comment5652> When is it useful to open a Finder window as the root user? <comment5653> Similarly, there is `!^` for the first command, which I happen to use often. <comment5703> Here's the voice list in 10.6.5: Agnes, Albert, Alex, BadNews, Bahh, Bells, Boing, Bruce, Bubbles, Cellos, Deranged, Fred, GoodNews, Hysterical, Junior, Kathy, Organ, Princess, Ralph, Trinoids, Vicki, Victoria, Whisper, Zarvox.  Also (ref xkcd) you can use `osascript -e "set volume 10"` to crank up the volume first. <comment5881> I've used `diskutil` for much of this lately, after learning (and hating) disktool. `diskutil eject /Volumes/backups` has been a frequent use lately. <comment6055> wow, this is really fun <comment7703> Anyone know how to make this work for zsh? <comment7705> If you use Zsh the TAB completion enhancements will rock your world. Try zsh and .oh-my-zsh. <comment7707> I'd definitely recommend having a play with Cocoa Emacs. <comment7709> +1 - Didn't know about `automator` good to know ... I suppose ;) - (Generally I use it to run scripts from Finder, so I'm not sure if I'd ever use it the other way around.) <comment7710> !-3 - get's the 3rd item back from now ... !-3:1 get's the first argument from the 3rd item back. <comment7711> I'd recommend zsh + .oh-my-zsh (find it on github) has great git completion (and for many other commands too.) - Also has a bunch of prompt themes specifically tailored to show git status in  a git folder. <comment7712> Imgur is a much better choice than DropBox. Try this script. http://figbug.com/?page_id=29 <comment7715> if you tire of long pathnames like this, try `locate airport` - you could run it with `$(locate airport | grep 'Priv')` <comment7716> Well, if it respected line-breaks it might even be useful ;)  -- Try `cupsfilter` instead to convert to PDF, it also skips the unnecessary PS-PDF conversion. <comment7717> FYI - iTerm2 has an instant replay function, very useful for making screencasts. <comment7719> just alias rm to rm -i : `alias rm='rm -i'` <comment7720> you don't need xargs for these, mate will accept STDIN. <comment7967> I still like DropBox, but good to know. <comment9464> D&D is also very usefull for files to be used as parameters <comment9865> I *think* this is cool.  But how do I let others use it?  I have to open up my fire wall, and then point them to my IP?  How do I do these? <comment12674> `watch`is not bad too for tracking changes ;) <comment12675> `locate` and `updatedb: aliased to sudo /usr/libexec/locate.updatedb` is not bad too ;) <comment13121> you can define this commands at .bash_profile to be able to use them at all times <comment13230> If you don't want the file to open in the default application you can re-direct it to the application of your choice with the -a  flag. <comment14035> @slomojo: use something like this in your zsh config  `# Bash-like command editing autoload -U edit-command-line;  zle -N edit-command-line;  bindkey '^X^e' edit-command-line; ` <comment14036> You guys need to learn about emacs! (since thats where all these keybindings come from...) <comment14041> its great to finally know theres a good way to do this. <comment15570> These are "emacs" keybindings used by libreadline, and they're almost all available in any text box widget in OSX <comment17984> +1 - Excellent answer. I particularly like aliases ips/myip! <comment21317> Ahh, so opening telnet is just `telnet`... Thanks! <comment21508> No problem, I guess... :) <comment22027> @John: Open a new question. <comment22030> This is a baaaaad idea since you'll get too used to this, what if you're on a system without it and you do a careless `rm -rf`? <comment24758> I think Mac OS X was written using Emacs. :) <comment25066> As of Mac OS X Lion 10.7, Terminal also supports setting the tab title separately from the window title. "0" sets both. Use "1" to set the tab title, "2" to set the window title. ("1" technically means "icon title", but Terminal uses it for the tab title, since it doesn't have icon titles in the same sense that xterm and X11 do.) <comment25067> As of Mac OS X Lion 10.7, Terminal supports setting the window and tab (icon) titles separately. "0" sets them both. Use "1" to set the tab title, "2" to set the window title. <comment25071> shake tree `You begin to shake a tree, and notice a coconut begin to fall from the air. As you try to get your hand up to block it, you feel the impact as it lands on your head. You are dead. You have scored 0 out of a possible 90 points.` ... probably should have seen that coming. <comment25148> In addition to dbr's comment about `grep dtrace /usr/bin/*` being unpretty, I have a better idea: `grep -l dtrace /usr/bin/*`, list only the filenames that match, no file content (read: binary garbage) when doing this. <comment25867> really handy bash command <comment25873> There's a lot of ***not* Mac OS X specific** answers, which is a requirement outlined in the question. Should the answers be revisited or the question edited? <comment25891> iTerm supports dragging folders onto the icon in 10.6. <comment25893> @koiyu: OS X is based on FreeBSD, so anything that works on both is acceptable. <comment26098> Clarification: It's the "Option" key, not the "Alt" key. It also happens to have an "Alt" label to help people more familiar with Windows, or someone using Windows with an Apple keyboard, including someone using Windows running on a Mac via Bootcamp or a virtualization program like VMware. <comment26099> On a related note: in Terminal, typing Command-Period will issue a Control-C. <comment26150> Note that `Esc, b` and `Esc, f` (back/forward one word) are bound to `Opt-b/f` (when you set the terminal to recognize `Opt` as `Meta`) <comment27025> It's worth noting that you will need to install **XCode** before you can install **MacPorts**. <comment27026> if you feel the need to use an alias with more chars than the actual command, consider rewiring your *temporal neocortex*. <comment27027> or drag it and do `C-a` `cd` `RETURN` <comment27029> -1 Please just format commands using the 4 space indent. <comment27030> if you use umount like that, you'll leave the `/Volumes/My disk image` folder lying around. Use `diskutil eject /Volumes/My disk image` instead, it'll clean up after you. <comment27254> So awesome!!!!! <comment27258> Use it all the time! <comment29288> Your images are broken. <comment29303> Wow. Thank you Google for doing what `aalib` and `libcaca` never could. Making a sensible interface to just do what I want. <comment29306> Or whoever made them. Perhaps not Google. <comment29310> @VxJasonxV I don't remember who made them. I uploaded them to my Google Docs so I have a copy of them somewhere. <comment29312> Oh, that's your upload. Cool. The color one is broken BTW, it is built for PowerPC, no Intel. <comment32751> @Troggy the question you posted has been removed. <comment32752> Your picture isn't working. <comment32753> @Dan Ha ha! ROTFLOL! <comment32757> It's hilarious! I love it! <comment32855> @daviesgeek Yeah it was free image hosting and it's gone now. I don't have the original. Note that this was 2 years ago. <comment32916> Love `shutdown`! <comment32917> I think the reason why you got downvotes on this was because you didn't explain what each of the aliases does. <comment34363> this works great for sharing vim pasteboard <comment34409> Configure your terminal to close shell when existed cleanly, and then: `alias q="logout"`. <comment34441> There’s no need to simulate a Command-W key press. Just tell Terminal to close the tab or window, e.g.: `tell application "Terminal" to close the front window` <comment34456> Hey yeah, Jason, thats better indeed. Had no idea about that terminal preference.  @Chris: Im not that good at applescript so forgive me for my ignorance. <comment34627> I'd love to see this closed or migrated back. No accepted answer, and in reality - the number of tricks in terminal is effectively unlimited. If each answerer could take their great answer and think of a valid question - think of all the high quality questions and then answers we would have on this site. <comment34634> So how is this useful? Can you ssh the CD to the tray? You do still have to get up and go to the machine to get a CD or place something in the now open tray. <comment34646> @bmike Very true. <comment35568> this is so epic <comment41855> I'm not sure why but `/sbin/umount /Volumes/Foo` seems to work faster than hdiutil <comment41857> You can also use `-u` instead of `-o cpu`. `top -u` sorts by CPU usage. <comment41858> On Mac OS X Lion 10.7 and later, you can drag a folder (or a proxy icon, or a pathname selected in text) onto the Terminal application icon to create a new terminal window at that location. There are also “New Terminal at Folder” and “New Terminal Tab at Folder" Services you can enable (in System Preferences), which will show up in the contextual menu when selecting folders or pathnames. You can also drag onto an existing terminal tab to automatically issue a cd command, and you can drag onto the blank area of the tab bar to create a new tab at that folder. <comment41860> A couple points of clarification: The name of the modifier key is “Option”. (It also has “alt” printed on the key to indicate that when you’re using the keyboard with Windows it will perform the same function as “Alt”.) Option is only needed to type characters like “{“ and “}” on certain physical keyboard layouts, e.g., French. It is not used in US English keyboard layouts, for example. <comment45769> Any way to have it open in vim instead of emacs? <comment48303> `!!` also works fine <comment48787> option-left and option-right will move back/forward one word, also <comment51771> Nice, never knew about this one. Very handy. <comment52326> What does this do when there's an update that requires a restart? <comment52451> +1 - I use this quite frequently. <comment53248> Relevant, although not a command line trick: Read local man pages in Safari using `man:grep` style urls with http://bruji.com/bwana/ <comment53249> This also allows you to select and copy rectangular sections from Terminal. <comment53807> Some interesting answers under http://apple.stackexchange.com/q/24326/8546 <comment56630> :D I voted this up and forgot about it, so I was thinking "Wow! This is cool, I need to upvote this!" and then I saw that I already had. Thanks again! <comment56631> This is great for Quartz Composer animations! <comment56936> @JasonSalaz It just prints a message suggesting to restart the OS (but doesn't force a restart or anything). <comment57698> Note that in Mac OS X Lion 10.7 and later, Terminal provides a “New Terminal at Folder” service that you can use to open a terminal by selecting a folder and choosing the command from the Finder  Services menu or by Control-Clicking and choosing it from the contextual menu. (You’ll need to enable the service in System Preferences  Keyboard  Keyboard Shortcuts  Services.) You can also drag a folder onto the Terminal application icon in the Dock, or into a tab bar to create a new tab in an existing window. <comment59174> What is meant by `inquestion:this ls -l` ..where do I type that in to search this question for all of the commands? <comment62642> And homebrew is much better http://mxcl.github.com/homebrew/ <comment62696> +1 for disclosing Fibonacci's dropbox id <comment68240> using 'softwareupdate -l' is great too just to get a list as well. The Mac App Store in ML doesn't show the size of downloads all the time, but using this tool does. <comment68859> What's wrong with good ol `fs_usage`? <comment93854> I don't know if I'm happy or angry right now... <comment94008> `!! make me a sandwich` [xkcd](http://xkcd.com/149/) <comment94212> I don't get it :(  how is this different then click on a line with my cursor without holding anything? <comment94213> is there a delete one previous word? (In windows, I would do ctrl+delete) <comment96053> emacs - Escape Meta Alt Control Shift ;) <comment97833> @Jeff just set the environment variable EDITOR to vim <comment97834> @Slomojo It seems to be setup for you on zsh if you are using the oh-my-zsh package. <comment97838> This is exactly what I was looking for!  Typing [space] will also cause the preview to go away. <comment102792> I guess simpleHTTPServer should also display details like 'Your ip is 10.1.3.3' and prompt if you want to disable firewall if it has to be amazing <comment110265> [*z is the new j*](https://github.com/rupa/z) <comment110266> I've used `drutil eject` before to eject a disk from the SuperDrive I removed from my MacBook Pro and placed in an external enclosure. Sometimes the OS doesn't recognize that the enclosure is connected and doesn't respond to the eject button making this command very useful! <comment111199> I got an error when I tried to use `growlnotify`: `Got disconnected: Error Domain=NSPOSIXErrorDomain ...`, any idea how to fix this? <comment114289> [How to prank a mac](http://redditlurker.com/funny/Post/t3_1g1uo8) <comment123141> +1. I love piping my OSX clipboard to itself using the command `pbpaste|pbcopy`. This will get rid of the text attributes when I copy formatted text. I saved it as a service and under a keyboard shortcut (F5) <comment129921> For osx 10.8 and 10.9 i suggest https://github.com/alloy/terminal-notifier <comment129922> as suggested Slomojo: back/forward one word are bound to Opt-b/f when you set the terminal to recognize Opt as Meta <comment130480> You can also drag the folder icon that is in the title bar of a finder window to a terminal window. <comment131022> Well, some people do actually need the option key… On many keyboard layouts, characters like `{}[]` requires a key combination involving [⌥]. Or if you use the US layout and needs some non-english characters on a regular basis (like I do with Umlauts) you also need [⌥]. <comment135246> Don't forget `M-x tetris` <comment135247> Don't forget that `cd -` also works like pushd/popd... ie. want to go to the 4th cd ago? `cd -4` etc. <comment135248> @Glide - did you try that, you'll find that doesn't work in a terminal. <comment135249> Terminal supported this from long ago <comment135733> @Slomojo are you responding to Fake Name or are you trying to correct my statement that Terminal supports this starting in 10.7? (Or did you not notice that I wrote that?) <comment135734> @ChrisPage Terminal did this from several versions before 10.7, although I can't currently verify it firsthand before 10.6 (as I don't have a box running older versions) - FYI Cmd-c on a file / folder in Finder and Cmd-v in Terminal will also paste in the full path (same OSX version history.) <comment135735> @Slomojo I have confirmed that it did not until 10.7. <comment135736> @ChrisPage ... you will need to retract that, it did it in at least 10.5 care for a reference? Here you go http://www.reduser.net/forum/archive/index.php/t-17024.html find David Didato's comment dated 08/10/2008 (10.6 was released in '09) - I also personally used it in Tiger (released '05) and it was taught to me by someone who'd used it in previous versions (10.2 IIRC) - Not to mention I did a live test in 10.6 when I posted my previous comment. <comment135737> @Slomojo you’re apparently referring to dragging (or copying and pasting) files from Finder into a terminal window to paste the pathname as if it were entered by the user. This tip/answer is about opening new terminal windows/tabs at a give directory location, which was introduced in 10.7. <comment135738> @ChrisPage yes that's what I was referring to, I have obviously shamed myself very badly, and misread the initial comment (I hadn't actually read your tip, and just skimmed it) - Assumed the comment was referring to the drag-drop filename/path feature.  I'll go back in my box now, offering apologies. <comment136472> An alternative is `wget`. <comment136473> There is also Ctrl+L which is a shortcut for `clear`. <comment136474> This is already a DB feature. <comment136511> I mostly use diskutil too, specially `diskutil verifyVolume volume name`, since the Verify function in Disk Utility for RAID volumes specifically, never worked (long standing bug). <comment136515> If you were in the tracker/module scene back in the day, you can try [xmp](http://xmp.sourceforge.net/) (compiled Rudix package [here](http://rudix.org/packages/xmp.html)). Then just `xmp ~/path/to/file.mod`. <comment136519> ctrl+w will delete the previous word. <comment136693> working fine on my zsh with oh-my-zsh <comment136715> duplicate of another answer <comment136766> Unfortunately, it's the visual line, not the whole command. Still better than nothing, though. I guess if I were desperate, I could shrink my font size and/or max out width of the window. <comment136769> sudo bang bang quick summary http://shadabahmed.com/blog/2013/08/16/bang-bang <comment136834> @ManuelSchneid3r Now it is, but it wasn't at the time. <comment136914> @John e.g. use a relay like PageKite or Yaler <comment136915> Wow, this is great! But why on Earth didn't they make a normal click do this, without holding option? It's not like a click by itself does anything else... <comment136922> i had issues with the Python server so use a node equivalent now: https://github.com/75lb/local-web-server <comment136926> Ctrl+u even works when terminal echo is turned off.  I like to use it when I botch a password when prompted by SSH, the passwd utility, or really anything that takes a password from the prompt.  It's much more reliable than hammering backspace and hoping you deleted all of the characters. <comment136946> @Henno, nope; 10.8.5 (at least) has `textutil` as well. The manpage for `textedit` states that it supports "txt, html, rtf, rtfd, doc, docx, wordml, odt, or webarchive". <comment136956> I was dreaming of this for a long time, how could I know it needs Option key?.. Awesome, the future is here :) <comment136965> I'm pretty sure this is not OSX specific .. <comment137023> Sorry but I don't understand what ._* files are and how this program fixes the described problem, man page didn't help a lot, could you please give more details? Is it completely safe to use? <comment137136> ._ files are invisible in the Finder in Mac OS - but are visible to other operating systems. They also tend to be a relic to 'resource forks' that went out of use as the mac transitioned from OS 9 to OS X. Instead of just throwing them out willy nilly in another OS - you can ask the Mac OS to help you clean out unnecessary ones using the dot_clean command. <comment137468> You prefix a flag with "no" to remove it. So it's `sudo chflag nohidden file/folder`, not `show`. <comment137504> Command-Drag will issue the entire `cd` command without any typing. <comment139484> Android's "live wallpaper" comes to the Mac <comment140337> For people who were curious about how Apple wants you to say OS X, try out `say "It's pronounced OS X, not OS x"` <comment140347> Was just going to add that - the folder icon in the title bar is a proxy for the folder itself, you can drag it from there to anywhere (like to a "select file" dialog window, Terminal, etc.) <comment141098> `man -k dtrace` is also useful; most if not all of these utilities have `man` pages. <comment144003> here is the corresponding gist: https://gist.github.com/MartinDelille/9386306