Auto-tag folders/files dropped into a folder <body> I want to be able to automatically assign a red tag to any folder/file that is dropped into a folder sitting on my desktop. I've done some research about this and it seems like this can't really be done even with Automator or Smart Folders, even though it seems pretty simple.  <answer281045> h1Option 1: Using Hazel/h1  You can auto-tag folders/files dropped into a folder using the commercial software Hazel, which according to its developer Noodlesoft, "watches whatever folders you tell it to, automatically organizing your files according to the rules you create."  h1Option 2: Using Folder Actions/h1  You can auto-tag folders/files dropped into a folder using the emFolder Actions/em feature of macOS. I wrote the following AppleScript based partly on one of Apple's default emFolder Action Scripts/em and partly on a script provided in a discussion in the Apple Support Communities. I tested this script in Mac OS X 10.6.8, 10.9.5, and 10.11.6 and it worked in all three versions of macOS (but see the strongImportant Caveat/strong section below).  precodeproperty label_color : {none:0, orange:1, red:2, yellow:3, blue:4, purple:5, green:6, gray:7} on adding folder items to this_folder after receiving these_items     tell application "Finder"         try             repeat with i from 1 to number of items in these_items                 set this_item to item i of these_items                 set label index of this_item to red of label_color             end repeat         end try     end tell end adding folder items to /code/pre  The first line of the script, codeproperty label_color : {none:0, orange:1, red:2, yellow:3, blue:4, purple:5, green:6, gray:7}/code, is not really necessary; I just included it to show which label index number corresponds to each color. You could remove the first line and change codered of label_color/code to code2/code and the script would have the same effect.  There are a few ways to attach this AppleScript to a folder as a emFolder Action Script/em. One way is to open Automator, create a new emFolder Action/em, add a emRun AppleScript/em action, and replace the content of the emRun AppleScript/em action with this scriptâ€”but this didn't work in my test. Another way, which worked in my test, is to save the script in either code/Library/Scripts/Folder Action Scripts//code (for use by any user) or in code~/Library/Scripts/Folder Action Scripts//code (for use by the current user only), and then do the following steps:  ol liIn the Finder, kbdControl/kbd+click (or right click) on any folder to show the contextual menu. /li liFrom the contextual menu, choose emFolder Actions Setup/em (or emServices/em and then emFolder Actions Setup/em)./li liFrom the prompt window, choose the name of the script that you just saved./li liCheck the emEnable Folder Actions/em option in the upper-left side of the emFolder Actions Setup/em window, if it is not already checked./li /ol  h2Important Caveat/h2  Technically, the previous script only sets the file emlabel/em, which is not exactly the same as a emtag/em, as John Siracusa explained in his emArs Technica/em review of tags implementation in OS X 10.9; however, in Finder in OS X 10.9 and later, the result of the previous script will be indistinguishable from a tag. The previous script works in versions of Mac OS X 10.6 or later.  A more robust emFolder Action Script/em that sets a red emtag/em strongand/strong emlabel/em instead of only a red emlabel/em (although, as I said, the results are indistinguishable in the Finder) can be found in the AppleScript given below.  The script given below requires that you first install James Berry's tag tool (which requires OS X 10.9 or later). It can be installed easily with the package manager Homebrew (codebrew install tag/code) or MacPorts (codesudo port install tag/code). If you install it with Homebrew, replace code/opt/local/bin/tag/code (which is the MacPorts path) with code/usr/local/bin/tag/code (which is the Homebrew path) in the script below.  precodeon adding folder items to this_folder after receiving these_items     tell application "Finder"         try             repeat with i from 1 to number of items in these_items                 set this_item to item i of these_items                 do shell script "/opt/local/bin/tag --add Red " &amp; quoted form of POSIX path of this_item             end repeat         end try     end tell end adding folder items to /code/pre  A third way to write the AppleScript (in OS X 10.9 and later) would be to install an AppleScript/Objective-C Library written by Shane Stanley called emFileTagsLib/em and then replace the codedo shell script/code line in the script above with the appropriate command as described in the emFileTagsLib/em documentation, but I have not tested this third option.  <comment354103> Just a side-note/question: Is it possible to extend this or another script so that any file/folder added to the folder that adds the tag (the script above works beautifully) is then moved to another location? Is that possible? What we routinely are doing is dropping files/folders into a File folder, then I'm giving them a red tag to indicate I worked on that particular job, then later moving all those folders to another location on a server. Is it possible to fully automate that process? <comment354266> In either script above, add a new line just before `end repeat` that says `move this_item to POSIX file "/Server Name/Path/To/Folder/"` where `"/Server Name/Path/To/Folder/"` is the path to "another location on a server" that you mention. In my test, this line "moves" folders/files on the same volume but "copies" folders/files between volumes (just like when you drag folders/files in the Finder). It won't move or copy if there's an item in the destination folder with the same name; you'll have to rename one of the two manually (more code could be added to do the renaming automatically). <comment354300> The path to a server will probably be something like `"/Volumes/Server Name/Path/To/Folder/"`. <comment354402> Awesome, thank you! This works great, except yeah unfortunately it copies between volumes. But no big deal.