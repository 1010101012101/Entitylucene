Make my password protected SSH key expire or timeout after a while <body> I have a private SSH key I use for authentication that is stored in em~/.ssh/id_rsa/em. When I ssh into a server, I am prompted for the password to unlock the key:  img src="https://i.stack.imgur.com/CISrN.png" alt="enter image description here"  I like this. I also like that I can ssh again and again and it doesn't prompt me for my password.  What I don't like is that I am not required to enter my key password days or even weeks later. I can lock my screen or put it to sleep and I still don't have to enter my key password. The only time it seems to expire the password is when I logout (which I do rarely).  How do I get the key password to expire after a while, forcing me to enter my password again to authenticate? Making it so that perhaps after 1 hour, the key is automatically forgotten.  <answer118226> You need to set the life of the key. It ordinarily defaults to forever.  When you run codessh-add/code you want to use the code-t/code option. If you want a key life of one hour then it is codessh-add -t 1h/code. The time formats can be seen in the codesshd_config/code man page but put simply they are a number followed by s, m, h, d, or w for seconds, minutes, hours, days or weeks.  codessh-add/code can be put into your .bashrc file and it will just ask you to validate the key once. Even when the key "expires" it isn't removed - it just asks for the passphrase again when an attempt is made to use it.  The other option would be to alter the launch options for codessh-agent/code which are stored in code/System/Library/LaunchAgents/org.openbsd.ssh-agent.plist/code and add the code-t/code there. (I use codeLaunchControl/code for changing these but you can do it by hand if you are careful.)  <answer118624> strongNote/strong: in newer versions of OS X you must disable System Integrity Protection for this answer to work. (Thanks to @Dave Gregory and @Jaap for pointing this out.)  Open code/System/Library/LaunchAgents/com.openssh.ssh-agent.plist/code (in older versions: codeorg.openbsd.ssh-agent.plist/code) in a text editor. Replace:  precode&lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt;     &lt;string&gt;/usr/bin/ssh-agent&lt;/string&gt;     &lt;string&gt;-l&lt;/string&gt; &lt;/array&gt; /code/pre  with:  precode&lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt;     &lt;string&gt;/usr/bin/ssh-agent&lt;/string&gt;     &lt;string&gt;-l&lt;/string&gt;     &lt;string&gt;-t&lt;/string&gt;     &lt;string&gt;30m&lt;/string&gt; &lt;/array&gt; /code/pre  This will expire the key after 30 minutes.  Reboot. Wait, reboot?!? This isn't Windows! Yes, reboot.  Well, you can try to decipher the instructions for changing the setting on the fly, but good luck.  <answer216377> Rather than tweaking ssh-agent (which now requires silly amounts of hacking), I strongly recommend simply changing the settings on your default (login) keychain. I use the very helpful 'lock on sleep' as well as 'lock after 4 hours' because I don't want prompts unless I'm actually afk.  Open Keychain Access and right-click the login keychain to change settings: img src="https://i.stack.imgur.com/u5bkD.png" alt="Keychain Security Settings"  Or if you prefer a commandline:  precodesecurity set-keychain-settings -lu -t 14400 /code/pre  This will result in at least one extra prompt for unlocking the keychain itself (requiring your login password) as well as the prompt for whichever key you're trying to use... but it beats disabling System Integrity Protection IMO.  <answer281621> An other solution is:  precodessh-add -t &lt;time&gt; &lt;ssh-private-key&gt;  # Set maximum lifetime to your SSH priv key. killall ssh-agent                    # Kill all ssh-agent processes. ssh-add -D                           # Delete all identities recorded by the agent. /code/pre  With this solution, you do not have to choose a timeout to all your keychain - quite annoying when you want to set a timeout of some seconds to your private key password recording - and you do not have to disable your SIP to edit /System/Library/LaunchAgents/org.openbsd.ssh-agent.plist.  <comment137968> I'd rather not have to remember to run `ssh-add` manually before I run `ssh` every time. It's interesting, but I'm really looking for something automatic. <comment138375> +1 thanks for pointing me to the `org.openbsd.ssh-agent.plist` solution <comment138383> A pedant like me would replace the "1800" with "30m" as it makes it a little easier to read. See TIME FORMATS in sshd_config(8) for the full format. <comment138417> @Tony Williams cool! fixed <comment139294> Works perfect, thanks! <comment243683> This doesn't seem to be working for me on Yosemite; anyone else? <comment263177> I found a workaround on Yosemite that doesn't involve disabling System Integrity Protection; added as an answer below. <comment321550> This isn't an option in El Capitan for me, and the commandline command doesn't seem to make any difference, do you know if there is a similar option in El Capitan somewhere ? <comment321666> Pretty sure I was able to do this on El Cap - I've just checked and both methods (UI and cmdline) certainly still work on Sierra. I can only do it on the login keychain, though, not System or iCloud. <comment339446> In El Capitan and Sierra, my changes were reset by the system upgrade. I had to disable System Integrity Protection to be able to edit the plist (which is renamed in Sierra to `com.openssh.ssh-agent.plist`) file: https://developer.apple.com/library/content/documentation/Security/Conceptual/System_Integrity_Protection_Guide/ConfiguringSystemIntegrityProtection/ConfiguringSystemIntegrityProtection.html <comment339449> Thanks for the info @Jaap. I don't use OS-X day-to-day currently so I can't verify anything personally, but to try and be a good steward of this Q&A I updated my answer based on your info and changed the accepted answer to Dave Gregory's because disabling System Integrity Protection seems inadvisable in many cases.