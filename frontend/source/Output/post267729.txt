need AppleScript to search a 2 column table, w/o Excel, Numbers, etc <body> emdon't know how elementary a question like this is, but.../em  • I have a 2 column csv file that I want to search for a value in col A and then grab its matching value in col B.  • I will store the csv file in an AppleScript bundle to keep things tidy.  Is there a way (search with grep?) to do this, and keep a separate GUI app (Excel, Numbers, etc) out of the equation?   <answer267764> You can use write a script to read your two column CSV file, and then convert it into a list where you'd have one list item for every row in your CSV file, and every list item would itself be a list (column A value, column B value). So, if your CSV file looked like this:  precodered,apple yellow,banana green,pickle brown,desk white,sock /code/pre  It would be converted it to this:  precode{{red,apple},{yellow,banana},{green,pickle},{brown,desk},{white,sock}} /code/pre  Then it is easy to loop through the list and find the first item whose first item matches the search term. For example if I'm searching for "brown" I would find "brown" in item 4 of the larger list, and then pick off item 2 of item 4 of the larger list, resulting in "desk."  Here is a script that asks you to choose a CSV file, then asks you for the search term (the thing you want to find in Column A). It then displays the Column B value in a dialog box. This may not completely solve your problem, but it does answer your question regarding searching a CSV file using AppleScript and not Excel or Numbers.  precode    tell application "Finder"         set the_file to choose file     end tell      set my_data to read the_file     set my_list to paragraphs of my_data as list     -- we need to make a list of lists... each item in my_list needs to be a list of two items.     set new_list to {}     -- this is housekeeping     set oldDelims to AppleScript's text item delimiters     set AppleScript's text item delimiters to ","     -- /housekeeping     --     --make the list look right     repeat with an_item in my_list     -- inserting "try" statement to catch blank lines     try         set x to text item 1 of an_item         set y to text item 2 of an_item         set component_list to {x, y}         set end of new_list to component_list     end try     end repeat     set AppleScript's text item delimiters to olddelims      -- now you have a list with each item in the list     -- being Columns A and B of one line in the CSV file     --     -- Bringing Finder to the front to make dialog boxes show more easily     tell application "Finder"       activate       set the_search_term to display dialog "What are you looking for?" default answer "red"       set the_search_term to text returned of the_search_term        repeat with some_item in new_list           if item 1 of some_item is the_search_term then               display dialog "Column B value is: " &amp; item 2 of some_item               return           end if       end repeat     end tell /code/pre  <answer268182> I've rewritten the script to be much more efficient (and a LOT faster). I thought it would be useful to see the original as well as this one so I am posting this as a second answer.  It's a different approach. First I split the CSV file into TWO lists-- one called ColumnA_list and one called ColumnB_list. Then I find the search term in ColumnA_list and note its position. Then I go straight to the corresponding item in ColumnB_list. This eliminates the second loop in the script, speeding things up a LOT.  precodetell application "Finder"     set the_file to choose file end tell -- set my_data to read the_file set my_list to paragraphs of my_data as list -- we need to make two lists: ColumnA, and ColumnB set ColumnA_list to {} set ColumnB_list to {} -- this is housekeeping set oldDelims to AppleScript's text item delimiters set AppleScript's text item delimiters to "," -- /housekeeping -- --make the lists repeat with an_item in my_list     -- inserting "try" statement to catch blank lines     try         set end of ColumnA_list to text item 1 of an_item         set end of ColumnB_list to text item 2 of an_item     end try end repeat set AppleScript's text item delimiters to oldDelims -- -- now you have two lists. -- we will search ColumnA_list for the search term, then locate the corresponding item -- in ColumnB_list -- -- Bringing Finder to the front to make dialog boxes show more easily tell application "Finder"     activate     set the_search_term to display dialog "What are you looking for?" default answer "red"     set the_search_term to text returned of the_search_term end tell -- -- Now we find the line number of the item in ColumnA_list matching the earch term set the_position to indexof(the_search_term, ColumnA_list) -- "indexof" is Emmanuel Levy's routine-- thanks Emmanuel! if the_position is 0 then     tell application "Finder"         activate         display dialog "The search term does not exist in Column A."     end tell     return end if -- now we know which line has the search term, so we can specify the corresponding -- item in ColumnB_list tell application "Finder"     display dialog "Column B value is: " &amp; item the_position of ColumnB_list end tell -- -- This is Emmanuel Levy's routing on indexof(theItem, theList) -- credits Emmanuel Levy     set text item delimiters to return     set theList to return &amp; theList &amp; return     set text item delimiters to {""}     try         -1 + (count (paragraphs of (text 1 thru (offset of (return &amp; theItem &amp; return) in theList) of theList)))     on error         0     end try end indexof /code/pre  <comment336039> Using your example CSV file and your AppleScript _code_, it errors out in the first `repeat` loop with: `error "Can’t get text item 1 of \"\"." number -1728 from text item 1 of ""` <comment336041> You do not need to use a GUI app like Excel, Numbers etc. however why AppleScript when you can use `awk`, `grep` etc. in Terminal? It would be more helpful if you'd provide a sample of the contents of the CSV file and an example match you like to make along with additional information on how you expect this to work in AppleScript in that do you want to be prompted for what to search or is this a hard-coded value, etc. <comment336112> Of course you are right. When I posted the answer I neglected to format the sample CSV file properly, so instead of looking like A,B (return) A,B (return) it was all in one line. Thanks for cleaning up my answer. I learned something about formatting answers today thanks to you. <comment336113> You _code_ errors out with a properly formatted CSV file! <comment336129> I'll edit the original answer and get it right. There, done. I even copied the script out of my answer here (as published) and ran it. <comment336131> Sorry but your modified _code_ still errors out at the same place with the same error. I've tried your _code_ under both OS X 10.8.5 and macOS 10.12, both copying the content for the CSV file from the post as well as creating it manually in a Spreadsheet saving it as a CSV file! <comment336143> If you are getting the same error as you first reported, that makes it sound as if there is a blank line at the top or the bottom of the file. <comment336144> Let us [continue this discussion in chat](http://chat.stackexchange.com/rooms/51382/discussion-between-christian-boyce-and-user3439894). <comment336350> I think you're right, Applescript seems to bog down with this. [more below] <comment336353> Christian, OP here... bravo. I got the script to work, but I think my number of list values (over 1200 sets of 2) is making Applescript sluggish. Do you think @user3439894 is right about doing this with Terminal/awk? (In case it matters, this would be a fairly static 2 column list, so I don't mind just pointing to a hard linked file.) <comment338233> Thanks for all of your work Christian. <comment338253> You're welcome!