How to correctly uninstall an App Store application <body> Recently I installed codePages/code which I purchased with version of codeiWork '09/code. Unfortunately this operation downloaded and installed version codePages 5.5.3/code which is not exactly an upgrade of codePages '09/code. Hopefully, the old version is still there (code/Applications/iWork '09/Pages.app/code), but I suspect that the 2 of them are using the same sets of application dependant files for templates, styles...  codePages '09/code and codePages 5.5.3/code are different products, and the last one would have been more appropriately named codePages Light/code or codeLittle Pages/code. Every time I open a codePages/code file (with codePages 5.3.3/code) I get warnings about incompatibilities and unsupported functions and I am threaten to save my work with these missing pieces (ex.: bookmarks) without any chance to check the real difference on a large document. For me this is a file corruption.  Hence I would like to uninstall cleanly codePages 5.5.3/code to avoid any internal misbehaviour and file corruption.  (codePages 5.5.3/code is an example which is an annoying one, disturbing my work. But I have the same problem with applications I installed to check their real functions. Then I discovered these to not correctly answer my needs. I would like to be able to cleanly and safely uninstall these useless applications.)  After scanning all menu entries (with the kbd‚å•/kbd key pressed too) and the internal help, I discovered that I can't find an easy way to uninstall an application installed within codeApp Store/code.  Clearly this function isn't within codeApp Store/code.  What is the correct and safe method to uninstall an App Store application, with a resonable control this won't damage any related application?  <answer211118> You can see exactly what was installed by the appstore with this command:  precodelsbom /private/var/db/receipts/com.apple.pkg.Pages5.bom /code/pre  codelsbom /private/var/db/receipts/com.apple.pkg.Pages5.bom | grep -v '/Applications/Pages.app'/code will show you all the files which are not in the code/Applications/Pages.app/code folder (which is actually nothing).  Beware that each new update via the appstore will overwrite this bom file, and not create a version-specific one.  The bom should reflect the current installed files.  Assuming you installed iWork09 from the DVD, then the files in code/Applications/iWork '09//code as well as the support files in code/Library/code should not have been affected.  <answer211123> They use their own files, no need to 'uninstall'. You can even use them side-by-side! As for the root of your issue: it's mostly the UI that was updated, functionality should be the same.   <comment254878> My overall objective is not limited to the `Pages 5` problem. I want to be able to cleanly, safely **uninstall** any application. By cleanly I mean in the same meaning I feel that `App Store` is cleanly, safely  **installing** any application. <comment254932> The appstore "installs" most applications by downloading them and copying them in to the application directory. If you then delete something, the system will notice and mark the app 'uninstalled'. Some apps do have actual installation packages, or have files in additional places. It is up to the author of such applications to provide an unistaller. Unlike Windows, however, files that might remain after you manually delete an application are not harmful in any way. The worst that could happen is a third party plugin staying behind without being functional. <comment255816> I read that answer but wasn't satisfied with it:br1. This is not a correct ergonomy to place the "uninstall" function within another application.br2. Nothing insured me this will uninstall `Pages 5.5.3` and not `Pages '09`. Hence this is a **dangerous method**, a leap in the dark, for users which don't live with `Time Machine` or backups. <comment255820> Nice answer which permits me to make a clean and verified uninstall as `App Store` should provide. I don't understand the missing of such a basic function. <comment255832> @grgarside: I use a markup language on purpose to make a clear difference between different objects with similar names, for example: pages, Pages and `Pages`, or then, Then and `then`.brMany scientific publishing use this kind of markup for reserved words. This is of the upper importance when the confusion with common names is possible. <comment255834> This has been [discussed at length in meta](http://meta.apple.stackexchange.com/a/2199) <comment255835> Unless I missed something important, this relative length in discussion wasn't enough to lead to a positive and constructive proposal :).