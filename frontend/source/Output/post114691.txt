Why isn't `history -a` working? <body> I am working under OS X 10.9.1 (Mavericks), using Terminal, which reports that it is GNU bash, version 3.2.51(1)-release (x86_64-apple-darwin13)  I noticed some weird issues where history was not working properly: codehistory -a/code and codehistory -a filename.txt/code don't do emanything/em.  codehistory/code shows the history I would expect.  This breaks my .bashrc synchronization of history across terminals.  I started to investigate by manually changing bash HIST variables.  Here is how I am able to reproduce my problem under somewhat controlled conditions:  ol liI disabled my .bashrc/li liI opened a new terminal window and cleared the history  precodehistory -c /code/pre/li liI confirmed that my PROMPT_COMMAND is back to normal/default:  precodeecho $PROMPT_COMMAND /code/pre  This returns: update_terminal_cwd;/li liI manually set the relevant HIST variables:  precodeexport HISTFILE="/Users/rsage/temp_history.txt" export HISTSIZE=20000 export HISTFILESIZE=20000 /code/pre/li liI confirm my test history files are deleted:  precodels *history*.txt # To make sure I know what I'm about to delete rm *history*.txt /code/pre/li liI attempt to save the history using codehistory -a/code with no luck  precodehistory -a history -a history_a.txt ls -ltr ; date /code/pre  This latter shows no history files:  precode... drwx------+ 40 rsage  staff   1360 Dec 20 14:16 Desktop drwxr-xr-x   4 rsage  staff    136 Dec 20 18:48 webApps drwxr-xr-x   8 rsage  staff    272 Dec 22 09:11 code drwxr-xr-x  17 rsage  staff    578 Dec 22 09:26 stuff /code/pre  Sun Dec 22 10:17:50 PST 2013/li li...but I stumbled across the codehistory -w/code command (I know it overwrites the file, which is fine with my nominal bashrc) and this seems to work fine:  precodehistory -w history -w history_w.txt ls -ltr ; date /code/pre  which produces the expected results:  precode... drwx------+ 40 rsage  staff   1360 Dec 20 14:16 Desktop drwxr-xr-x   4 rsage  staff    136 Dec 20 18:48 webApps drwxr-xr-x   8 rsage  staff    272 Dec 22 09:11 code drwxr-xr-x  17 rsage  staff    578 Dec 22 09:26 stuff -rw-------   1 rsage  staff    461 Dec 22 10:19 temp_history.txt -rw-------   1 rsage  staff    494 Dec 22 10:19 history_w.txt /code/pre/li /ol  One last note.  It occurred to me that my sizes might be too large, so I just tried 200 and no change to behavior (the thirties are the history output numbers):  precode34  export HISTFILESIZE=200 35  export HISTSIZE=200 36  history -a 37  history -a history_a.txt 38  ls -ltr ; date /code/pre  The ls outputs show no new files.  <answer114695> I have two answers - why the procedure does not work and why my original problem happened.  h1history -a issue/h1  In addition to the procedure for repeating this above, I started systematically building my .bashrc up from the ground up.  Pretty quickly I determined that it's the codehistory -c/code that wrecks everything.  If you do the procedure with or without the codehistory -c/code, you find that codehistory -a/code works if codehistory -c/code has not been called in the instance of bash and codehistory -a/code fails if codehistory -c/code has been called.  h1solution to original problem/h1  That answer was not very satisfying - particularly since the issue is that my .bashrc formula relies on codehistory -c/code as part of propagating history (the standard codeexport PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"/code shown at Preserve bash history in multiple terminal windows among other places).  Without fixing this above issue, it seems that the history propagation issue results from using a (relative) path in HISTFILE.  HISTFILE seems to want a filename with no path.  Thus, changing from codeHISTFILE="~/.bash_history_shared"/code to codeHISTFILE=".bash_history_shared"/code fixes the original problem.    That raises the obvious question if that would fix the first issue shown above.  It seems not to.  That being said, the fact that the  codeexport PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"/code works seems to suggest that perhaps the bizarre to me behavior of codehistory -a/code is not unusual...?  <answer119853> I noticed the same odd behavior, checked permissions, and sure enough, both the "World" and "System" had explicit permissions set to read AND write my .bash_history file, but I (the owner) had no permissions to that file at all!  I just forced "World" to "No Access" and gave myself and system r/w access and voila, everything is working the way it should.  <comment134358> I just repeated the experiment on another computer with OS X 10.8.5, GNU bash, version 3.2.48(1)-release (x86_64-apple-darwin12).  I guess it's not Mavericks...