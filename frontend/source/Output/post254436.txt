How do I activate VPN via AppleScript without using the GUI? <body> I have an HTPC setup on my Mac. I would like to use a one button toggle on my remote to activate and deactivate my VPN. I have a bash script that works great; it checks to see if the VPN is running: if it is, it turns off the VPN, otherwise it turns on the VPN. Because I want to use a keystroke to fire this off, I wrapped this in an AppleScript and saved it as an application, using Apptivate to map it to a keystroke and mapping THAT to a button on my remote.  The problem is that activating the app creates dialog confirmations. Is there a way to just run the bash script via a single key stroke that DOESN'T require user interaction?  Here's an example of one of the two dialog confirmations I receive:  img src="https://i.stack.imgur.com/pEVBR.png" alt="VPN Confirmation Dialog"  Here's the AppleScript:  precodedo shell script "bash /Users/htmac/RemoteConfig/toggleVPN.sh&amp;" /code/pre  And the bash script:  precode#!/bin/bash  # Call with &lt;script&gt; "&lt;VPN Connection Name&gt;"  set -e #set -x  vpn=${1:-"IPSec-HK"}  function isnt_connected () {     scutil --nc status "$vpn" | sed -n 1p | grep -qv Connected  }  function poll_until_connected () {     let loops=0 || true     let max_loops=200 # 200 * 0.1 is 20 seconds. Bash doesn't support floats      while isnt_connected "$vpn"; do         sleep 0.1 # can't use a variable here, bash doesn't have floats         let loops=$loops+1         [ $loops -gt $max_loops ] &amp;&amp; break     done      [ $loops -le $max_loops ] }  if isnt_connected; then     scutil --nc start "$vpn"      if poll_until_connected "$vpn"; then         echo "Connected to $vpn!"         exit 0     else         echo "I'm too impatient!"         scutil --nc stop "$vpn"         exit 1     fi else     scutil --nc stop "$vpn" fi /code/pre  <comment316766> Please add the Apple Script containing the shell script or the shell script itself (as text and **not** as screenshot)!