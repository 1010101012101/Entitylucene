Anyone with experience in hacking the codesigning on OS X? <body> Apparently Mavericks doesn't allow any property list/configuration file to be used when it's been changed since release from Apple.(This opposed to previous versions of OS X, where you could do some editing and still run the app)  For those who don't have a clue what I'm talking about:  There is a file called "CodeResources" which holds hashes/code signatures of each and every file in an app's folder. Now there's this one trick I want to do, which involves editing the Info.plist in Boot Camp(utility to run Windows on another partition) so I can install Windows 8 from USB (I downloaded the iso via our college's site for free and I don't want to burn it to DVD, because I'm cheap/stubborn like that).  Once I modify /Applications/Utilities/Boot Camp Assistant.app/Contents /Info.plist, Is it possible to codesign the app myself or otherwise get it to run?  <answer123029> Since 10.7, sandboxed applications have crashed on launch if the Info.plist has been modified.   As a workaround, you can run codesudo codesign -fs - /Applications/Utilities/Boot\ Camp\ Assistant.app/code to replace the code signature with an ad-hoc signature.   It disables sandboxing, so for example the preference file is saved in ~/Library/Preferences/ instead of the sandbox container.  (direct copy from @user3936's comment )  <answer166282> Before OS X 10.10, you can run codesudo codesign -fs - /Applications/Utilities/Boot\ Camp\ Assistant.app/code to re-sign the app with an ad-hoc signature.  In order to re-sign it in 10.10, you need to additionally specify the --deep command to re-sign bootcamp:  precodesudo codesign -fs - /Applications/Utilities/Boot\ Camp\ Assistant.app --deep /code/pre     '--deep' When signing a bundle, specifies that nested code content such as helpers, frameworks, and plug-ins, should be recursively signed                in turn. Beware that all signing options you specify will apply, in turn, to such nested content.                When verifying a bundle, specifies that any nested code content will be recursively verified as to its full content. By default,                verification of nested content is limited to a shallow investigation that may not detect changes to the nested code.                When displaying a signature, specifies that a list of directly nested code should be written to the display output. This lists only                code directly nested within the subject; anything nested indirectly will require recursive application of the codesign command.   <answer195466> Just what I needed, thanks.  But in os x version 10.10 upwards you require the following command:  precodesudo codesign -fs - /Applications/Utilities/Boot\ Camp\ Assistant.app --deep /code/pre  It will prompt for the install of command tools, then will work without issues.  <comment124145> While we're waiting for Mavericks to be released and declared on-topic here, feel free to edit this to be more clear about the change you are seeking to make in Boot Camp app. I'll edit out the options since we can let people answer with options once this is re-opened. <comment124170> I voted to reopen this question because it also applies to 10.7 and 10.8. Since 10.7, sandboxed applications have crashed on launch if the `Info.plist` has been modified. As a workaround, you can run `codesign -fs - /Applications/Utilities/Boot\ Camp\ Assistant.app` to replace the code signature with an ad-hoc signature. It disables sandboxing, so for example the preference file is saved in `~/Library/Preferences/` instead of the sandbox container. <comment124189> @LauriRanta thank you! This worked <comment189152> i get the error: `no identity found` when trying to do this. know how to fix it?