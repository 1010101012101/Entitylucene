Are my permissions for /usr/local/ correct? <body> I’m using HomeBrew for my port needs (seems a bit “cleaner” than MacPorts).    I can install without codesudo/codeing (which is great), but the man linking step seems to require it (code/usr/local/share/man/man3/code is owned by coderoot/code).br A guide I found suggests I recursively codechown /usr/local/code by doing  precodesudo chown -R `whoami` /usr/local /code/pre  Is this safe…or is it a Bad Idea™?  Also: are my permissions correct?  precode$ pwd /usr/local/share/man $ ls -lah total 32 drwxrwxr-x    8 root  staff   272B  4 Set 11:02 . drwxrwxr-x    9 root  staff   306B 10 Set 11:27 .. drwxr-xr-x    3 root  wheel   102B  4 Ago  2009 de drwxrwxr-x  163 root  staff   5,4K 10 Set 11:27 man1 drwxr-xr-x   11 root  wheel   374B 10 Set 11:27 man3 drwxr-xr-x    7 ago   staff   238B 10 Set 11:39 man5 drwxr-xr-x   11 ago   staff   374B 10 Set 11:39 man7 -rw-r--r--    1 root  staff    13K  4 Set 11:02 whatis /code/pre  <answer1394> I use Homebrew too and can confirm it's totally safe. Quoting the Installation page on the official Homebrew FAQ:     h3Do yourself a favour and pick code/usr/local/code/h3      ol   listrongIt’s easier/strongbr   code/usr/local/bin/code is already in your codePATH/code./li   listrongIt’s easier/strongbr   Tons of build scripts break if their dependencies aren’t in either /usr or /usr/local. We fix this for Homebrew formulas (although we don’t always test for it), but you’ll find that many RubyGems and Python setup scripts break which is something outside our control./li   listrongIt’s safe/strongbr   emApple has conformed to POSIX and left this directory for us. Which means there is no code/usr/local/code directory by default, so there is no need to worry about messing up existing tools./em/li   /ol      h3If you plan to install gems that depend on brews then save yourself a bunch of hassle and install to code/usr/local/code!/h3      It is not trivial to tell gem to look in non-standard directories for headers and dylibs. If you choose code/usr/local/code, everything “just works!”   I'll just add that emdoing things as root is a very bad idea/em, so codechown/codeing code/usr/local/code not only seems reasonable to me (it's not a system dir on OSX), but emsane/em.  Your permissions are not correct (yet). Just run the command you listed and you're gonna be fine.  If you have other problems remember, the codebrew doctor/code can help you!  <answer1395> It is usually better to keep permissions as strict as possible. Keeping code/usr/local/code owned by coderoot/code means that only processes that run as coderoot/code/codesudo/code (or ask for admin user via the Apple authorization dialog box) can write to this area. Thus, a process download has to ask you for a password before corrupting files there.  But as you say, it makes adding new programs harder.  I am OK with running codesudo/code, as you install things less often than running them but you have to trust that the build process does not change anything it should.  If you want to avoid sudo I would install Homebrew into code~/usr/local/code and alter your path, manpath etc to include the directories under there.   A better way is to create another user—say, codehomebrew/code and create a directory owned by that user. Then, install there using codesudo -U homebrew/code. Other users will have the benefit of not being able to overwrite any other files, because they are not running as coderoot/code  and other programs cannot affect homebrew.  However as the Homebrew wiki says the recipes don't find all cases of code/usr/local/code and replace them with the chosen directory I suspect we are stuck with code/usr/local/code.   <answer1410> For what it's worth, code/usr/local/code is not considered a "system" folder by OS X, and on a brand new Snow Leopard install that folder is empty.  Any root-owned stuff in that folder is a result of codesudo make install/code on other software, or giving your password after double-clicking on a code.pkg/code that wants to dump stuff into code/usr/local/code.  Owning code/usr/local/code has "worked for me" on 2 machines for over a year.  One gotcha is that if you've installed MySQL (not using Homebrew) and chown its files, then it probably won't be able to see its databases anymore (so you'd have to chown them back to whatever user MySQL is running as.)  <answer92629> I think it's OK for users to have emwrite permissions/em to code/usr/local/code -- after all, that means you're not using codesudo/code on every build script. I don't like the idea of an ordinary user emowning/em code/usr/local/code. I'd prefer to have root (or similar) own code/usr/local/code, but change the permissions so that users (or at least some privileged group) can write to it. That seems like the conceptually correct approach.  <answer189404> If you're using Homebrew, you should give the write permission to specific group (either codeadmin/code or codestaff/code), so the files can be shared between users who are in that group.  For example:  precodesudo chgrp -R admin /usr/local /Library/Caches/Homebrew sudo chmod -R g+w /usr/local /Library/Caches/Homebrew /code/pre  Then assign the users who should have access to codebrew/code command to that group (check your groups via: codeid -Gn/code).  Then when working with codebrew/code, do not run it with codesudo/code.  When still having some permission issue, run codebrew doctor/code to troubleshoot the problem.  <answer253811> As in Homebrew 1.0.0:     Homebrew no longer needs to have ownership of /usr/local. If you wish   you can return /usr/local to its default ownership with:   sudo chown   root:wheel /usr/local   <comment1197> +1 for keeping authorizations strict, and altering `$PATH` and `$MANPATH` to include user directories. If the installed programs don't require systemwide installation, it's a much better alternative. <comment1204> gcc and other development tools do automatically look in /usr/local so it does affect the system <comment1210> The problem isn't that it's a "system" folder; it's that it is a "systemwide" folder. Even if there's nothing there, `/usr/local/bin` is still in the default `$PATH` value, and whatever you put there can be used by other users too and should be _trusted_. If the whole `/usr/local/` directory has the same permissions `/usr/local/share/man` currently has on OP's setup, anyone can go and change any binary with a script that does `rm -rf ~`. <comment1319> too risky: it's likely that I will install MySQL sooner or later <comment1320> +1 and accepted answer for “keep permissions as strict as possible”. Doing `brew doctor` (suggested below) told me I only have to chown the shared man directories... safe enough for me. <comment1325> @Agos: you can always install MySQL with HomeBrew, in which case you won't have any problems :) <comment1417> This is how Homebrew is meant to be used. Some people may disagree but the lead developer says to do things that way. <comment108654> The problem here is that `/usr/local/bin` may very well be at the front of $PATH for most users. Making the directory world-writable opens a lot of security holes that way. <comment108923> @patrix So change the paths. :) If you have scripts that have security holes due to ambiguous command paths, I'd blame the scripts, not your permissions -- commands invoked in scripts should usually be fully qualified for exactly this reason. Anyway, there's no better solution: either you give your admin account an insecure umask, or you run all your build scripts with `sudo`, or you give some users write permissions to `/usr/local`. I'll take the third as being least risky...unless you know of a better way. <comment108924> Hmm. Thinking about this some more, maybe a better way would be to have Homebrew do what RVM does by default: install everything into `~/brew` or some such. The problem, though, is that unlike Ruby, which is pretty self-contained, a lot of *nix utilities expect to find each other in `/usr/local`... <comment108925> I neglected to mention that my `/usr/local` isn't world-writable: rather, I have a trusted group `homebrew` (not just admin) that has write permissions to it (extended permissions such as `0: group:homebrew allow add_file,delete,add_subdirectory,delete_child,file_inherit,directory_inherit` totally rock). This is the best compromise I've been able to figure out: no `sudo` on build scripts, but *some* control over `/usr/local`. <comment138528> @CarminePaolino Not a great idea. Usually Mac installers such as MySql provides are better behaved than even a very good package manager like Homebrew. <comment138529> @Agos Not risky at all. The caution only applies if you've installed MySQL before Homebrew. If you do it afterwards the permissions on `/usr/local` should be fine. (But you probably use Postgres anyway. :) ) <comment182810> Slightly better alternative to your chown: `sudo chown -R :admin /usr/local`.  This way, it'll work the same for any admin user of the machine.  Though you may also need to run `sudo find /usr/local -perm -200 -exec chmod g+w '{}' \+` to ensure the group has the same write access as the user. <comment260577> Comments are not for extended discussion; this conversation has been [moved to chat](http://chat.stackexchange.com/rooms/31567/discussion-on-answer-by-carmine-paolino-are-my-permissions-for-usr-local-corre). <comment281662> "I'll use homebrew, it feels cleaner than macports. Oh, look at this ill-defined permission mess. I'll check in Stack Overflow. Oh, here's a quick hack that goes against Unix best practices and against what OS updates try to enforce. Perfect!". Month later: "Hey, how did this malware get installed?" <comment281663> The chat is gone, which is a pity. So at the risk of repeating history, I will leave my comment here: that this is done doesn't mean that this is safe. <comment281664> +1 for giving an actual, better-behaved-ish solution, even if not really finished. For example: add an user to the admin group at the BSD level? Won't that mess with the OS X's concept of Admin users? <comment287980> @MarnenLaibow-Koser I would love to see a more in-depth explanation of this approach (creating a trusted group of users with write permissions to `/usr/local`). Doing a lot of trawling on SO and other sites, seeing arguments re: moving Homebrew into the user's home folder vs. keeping in `/usr/local`, changing owner and/or group of `/usr/local` or not, and so on… it is difficult to tell if there is any universally acceptable solution. Do you have a blog post or article on this, or could you give a deeper explanation somewhere? <comment288835> The gist of the chart is although this is what Homebrew suggests there are are  reasons as to why this is wrong <comment288838> @GabrielL. boils down to do you have more than one user (and also my answer) if so which one user should own /usr/local <comment289109> @GabrielL. What part don't you understand? If you understand how *nix permissions work, and think about who should be able to write to `/usr/local`, setup should be self-evident. <comment289118> @MarnenLaibow-Koser — thanks for the reply. It's not that I don't understand it, so much as I don't know what I don't know. ;-) Mostly I was trying to discern what the potential cons / downsides of that approach might be. It does seem like a good compromise. <comment293969> For the record, I followed these instructions, but just used my existing OS X GUI-made Admin user instead of adding anyone to any group in the CLI. It works: to be able to run brew commands, I have to first do `su myAdminUser`, and then everything works as intended. But of course this solution won't give any security for people who anyway are already running an Admin user all the time. <comment293974> A compromise solution, at least for people caring for security enough to not run as Admin users all the time, is to change the group ownership and permissions so only Admins can write to /usr/local. See kenorb's answer. <comment313848> `brew doctor` is simply awesome. <comment320025> I'm currently updating Brew using `brew update`, which still requires ownership of `/usr/local`. I'll try restoring the permissions afterwards. <comment333326> This is probably the best way to go, I agree with @kenorb <comment354213> The problem I have with this approach is that it means only the user account which installs Homebrew can use it.  I have a Mac with multiple accounts which I use to keep work projects separate from home projects (for example). If I am logged into the wrong account I can't use brew install. I have taken this route to avoid the dangers of using root but I'm not convinced it's the best approach. <comment356302> This is really great info!  I set perms as specified by Homebrew (1.0), and after updating, it gave these instructions on how to set them back. <comment357043> @Carmine Paolino I find it interesting that Homebrew has finally admitted fault on this and in the new version released a week or two ago, has restored the default permissions to /usr/local <comment357044> @Mark I find it interesting that Homebrew has finally admitted fault on this and in the new version released a week or two ago, has restored the default permissions to /usr/local <comment357045> @MikeMcQuaid I find it interesting that Homebrew has finally admitted fault on this and in the new version released a week or two ago, has restored the default permissions to /usr/local <comment357046> @Agos See comment above