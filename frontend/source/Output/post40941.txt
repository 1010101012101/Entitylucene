How do so set "date added" metadata in Mac OS X 10.7 Lion <body> The Finder in Mac OS X 10.7 Lion shows a new piece of file metadata, "Date Added," which tracks the date an item was added to a folder.  After upgrading to 10.7, none of the items in my code~/Downloads/code folder have "Date Added" values.  I'd like to set all the empty "Date Added" values to match the "Date Modified" values, but I can't figure out how to set the "Date Added" attribute to a specific value.  My first guess was this:  codexattr -w com.apple.metadata:kMDItemDateAdded "2012-02-19 16:34:47 +0000" myfile/code  But that doesn't seem to work (though it doesn't report an error either).  <answer40947> When I run codexattr -l/code on items in my Downloads folder, I get a field that looks something like this:  precodecom.apple.metadata:kMDItemDownloadedDate: 00000000  62 70 6C 69 73 74 30 30 A1 01 33 41 B4 83 4D BF  |bplist00..3A..M.| 00000010  4C 4F E3 08 0A 00 00 00 00 00 00 01 01 00 00 00  |LO..............| 00000020  00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00  |................| 00000030  00 00 00 00 13                                   |.....| 00000035 /code/pre  This is a binary plist. When I use HexFiend to create a file with those bytes (yes, I manually entered them; blast from the past like entering assembler code out of a magazine into my Apple ][GS), then save it as a .plist file, I opened the file in TextWrangler and got the following uncompiled xml:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;array&gt;     &lt;date&gt;2011-11-28T05:03:59Z&lt;/date&gt; &lt;/array&gt; &lt;/plist&gt; /code/pre  That said, while Apple seems to store the dates in compiled XML, plain text seems to work.  In other words, if you can get the file's modified date in string form, you can run the command codexattr -w com.apple.metadata:kMDItemDownloadedDate "2012-02-19 16:34:47 +0000" file/code to change the "downloaded date", which appears to be the field actually sorted on, not actual Date Added.  Finally you got no error when adding the (unused) codekMDItemDateAdded/code field because, as I learned in this article, codexattr/code will happily set whatever metadata field you want, used or unused.  That's the core of the answer. I'll work on writing an AppleScript to get the modified date for each file, check to see if codekMDItemDownloadedDate/code is set, and if it isn't, set kMDItemDownloadedDate to the modified date, but I wanted to get the core of the answer posted.  <answer40952> I can't find a way to set the "Date Added" shown in the Finder.  I believe you're correct that it's retrieved from the Spotlight index's codekMDItemDateAdded/code metadata attribute. However, Spotlight appears to derive this itself in some way.  I've tried setting up an extended file attribute called codecom.apple.metadata:kMDItemDateAdded/code to a date value in one of several different formats, including the format used by codekMDItemDateAdded/code and none of them were picked up by the Spotlight index, i.e. no matter what the value shown by codexattr/code, the value shown by codemdls/code wasn't changed.  I would emguess/em, though I don't know for sure, that Spotlight simply sets this date based on the first time it indexes a file in a particular location, and doesn't check any other metadata in order to generate it. If you codemv/code a file out of Downloads and back in, the Date Added updates to when it was moved back in, but none of the emfile/em metadata seems affected, only the Spotlight metadata.  So, in summary, I reckon Date Added is only stored somewhere in the rather cryptic guts of /.Spotlight-V100, and unless someone can come up with a way of telling Spotlight to update a metadata entry to an arbitrary value, I can't see a way of doing this.  <answer40979> OK, new approach here. Caution: I don't have a system upgraded to Lion (my computer came with Lion installed) so I can't test this. Untested code; back up before trying this code!!!.  My previous answer was based on the sort order used by the Downloads stack in the Dock. The Date Added field in the Finder appears to be based on Spotlight information, which is difficult to hack. It also isn't accessible via AppleScript. But, there does seem to be a workaround.  ol liCreate a new Workflow in Automator./li liSet the workflow to accept files or folders from the Finder/li liHave the workflow run an AppleScript./li /ol  Use this AppleScript:  precodeon run {input, parameters}     do shell script "sudo /usr/sbin/systemsetup -setusingnetworktime Off" with administrator privileges     tell application "Finder"         repeat with x in input             set myfile to POSIX path of x             set nm to name of x             set d to modification date of x             set yr to (character 3 of (year of d as string)) &amp; (character 4 of (year of d as string))             set mth to (month of d as number) as string             if length of mth is 1 then set mth to "0" &amp; mth             set dy to day of d as string             if length of dy is 1 then set dy to "0" &amp; dy             set h to hours of d as string             if length of h is 1 then set h to "0" &amp; h             set m to minutes of d as string             if length of m is 1 then set m to "0" &amp; m             set s to seconds of d as string             if length of s is 1 then set s to "0" &amp; s             set dt to mth &amp; ":" &amp; dy &amp; ":" &amp; yr as string             set tm to h &amp; ":" &amp; m &amp; ":" &amp; s as string             do shell script "sudo /usr/sbin/systemsetup -setdate '" &amp; dt &amp; "'" with administrator privileges             do shell script "sudo /usr/sbin/systemsetup -settime '" &amp; tm &amp; "'" with administrator privileges             do shell script "mv \"" &amp; myfile &amp; "\" /var/tmp/clobber"             do shell script "mv /var/tmp/clobber \"" &amp; myfile &amp; "\""         end repeat     end tell     do shell script "sudo /usr/sbin/systemsetup -setusingnetworktime On" with administrator privileges     return input end run /code/pre  Select the files that do not already have a Date Added (sort by Date Added in Finder, then select the part of the list without a Date Added) and run this service.  img src="https://i.stack.imgur.com/ICa5e.png" alt="enter image description here"  <answer135297> Thanks to Daniel Lawson for the solution! It still works well, even two years later.  I have two additions:  1) Please note that there's a small error in the code of the accepted answer.  This line:  precodedo shell script "/usr/sbin/systemsetup -settime ''" &amp; tm &amp; "'" /code/pre  ...has an extra apostrophe, triggering an "unexpected EOF" error. It should read:  precodedo shell script "/usr/sbin/systemsetup -settime '" &amp; tm &amp; "'" /code/pre  2) More important, starting with Mavericks 10.9.2, systemsetup requires administrator rights. So every call to shell script should follow this formula:  precodedo shell script "sudo /usr/sbin/systemsetup -setusingnetworktime Off" with administrator privileges /code/pre  Here's the full modified version of the AppleScript, confirmed to work in 10.9.3:  precodeon run {input, parameters}     do shell script "sudo /usr/sbin/systemsetup -setusingnetworktime Off" with administrator privileges      tell application "Finder"         repeat with x in input             set myfile to POSIX path of x             set nm to name of x              set d to modification date of x             set yr to (character 3 of (year of d as string)) &amp; (character 4 of (year of d as string))             set mth to (month of d as number) as string             if length of mth is 1 then set mth to "0" &amp; mth             set dy to day of d as string             if length of dy is 1 then set dy to "0" &amp; dy             set h to hours of d as string             if length of h is 1 then set h to "0" &amp; h             set m to minutes of d as string             if length of m is 1 then set m to "0" &amp; m             set s to seconds of d as string             if length of s is 1 then set s to "0" &amp; s              set dt to mth &amp; ":" &amp; dy &amp; ":" &amp; yr as string             set tm to h &amp; ":" &amp; m &amp; ":" &amp; s as string             do shell script "sudo /usr/sbin/systemsetup -setdate '" &amp; dt &amp; "'" with administrator privileges             do shell script "sudo /usr/sbin/systemsetup -settime '" &amp; tm &amp; "'" with administrator privileges              do shell script "mv \"" &amp; myfile &amp; "\" /var/tmp/clobber"             do shell script "mv /var/tmp/clobber \"" &amp; myfile &amp; "\""         end repeat     end tell      do shell script "sudo /usr/sbin/systemsetup -setusingnetworktime On" with administrator privileges      return input end run /code/pre  <comment46343> Run mdls on the files in your Downloads folder and you'll see the kMDItemDateAdded values.  That's what the "Date Added" column in the Finder's List view shows. <comment46344> Incidentally, if you want to show the kMDItemDownloadedDate as plist information without going through HexFiend and TextWrangler, try `xattr -p com.apple.metadata:kMDItemDownloadedDate FILENAME_HERE | xxd -r -p | plutil -convert xml1 - -o -`. The xxd converts to binary plist data, then the `plutil` converts to XML plist and prints it. <comment46352> OK, I'm in over my head, I'm afraid to say. kMDItemDateAdded isn't listed in `xattr -l`, and kMDItemDownloadedDate isn't listed with `mdls`. Curiouser and curiouser. Neither is the Date Added field stored in an xattr for the *directory*. Where does this metadata live? <comment46360> Since `xattr` is a python script, I guess it should be possible to poke around in this script and figure out how to get the binary data of the attribute in binary, rather than hex, so you can feed it directy to `plutil`. <comment46366> Spotlight! Well done. <comment46512> That is awful…in a good way, maybe? <comment46533> Well, it's definitely a hack. But it appears that particular piece of metadata is computed from Spotlight, and without hacking the dark mystery known as `/.Spotlight-V100`, this might be as good as it gets. But I'd *love* to see a clean answer. <comment123894> I'm getting a weird error from this script? sh: -c line 0: unexpected EOF while looking for matching `" <comment123895> Did you ended up finding a solution? <comment124576> The accepted answer worked when I tried it (as crazy as it is). <comment160366> Welcome to Ask Different! Instead of writing an answer to edit someone else's answer, simply click the **edit** or **improve this answer** button *below the post that you wish to improve*. <comment215763> @erotsppa it should be corrected and updated now.