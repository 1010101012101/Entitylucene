Issue with Automator and bash script <body> I'm making an automator service, and the first part takes files and RARs them using a bash script  So in Automator, I have a Get Specified Finder Items action to test the workflow, and then the bash script  precodeF='' for i in "$@"; do      F="$F \"${i//\"/\\\"}\"" done  /usr/local/bin/rar a ~/archive.rar $F /code/pre  so it just takes the file paths, puts quotes around them, and then runs the RAR command with all the files as arguments. When I run this, automator gives me the error      Cannot open  "/Users/user/test.txt" No such file or directory       Cannot create ~/archive.rar No such file or directory   No clue why it's getting those errors. When I add an echo to the last command  precodeecho /usr/local/bin/rar a ~/archive.rar $F /code/pre  The results are the exactly the command I need. I can copy and paste it in terminal and it works.  Does automator run bash scripts differently then they would run in terminal?  <answer223229> Weird auto-quoting going behind the scenes that I couldn't figure out. So I just did this work-around to get it to do what I wanted, although not exactly a solution:  precodeecho /usr/local/bin/rar a ~/archive.rar $F | bash /code/pre  <answer223386> codebash/code does expansion of code$@/code different than all other environment variables to preserve white space etc in arguments. From codebash(1)/code:  precode@ Expands  to  the  positional  parameters,  starting from one.  When the expansion occurs   within double quotes, each parameter expands to a  separate  word.   That  is,  "$@"  is   equivalent  to  "$1"  "$2" ...  If the double-quoted expansion occurs within a word, the   expansion of the first parameter is joined with the beginning part of the original word,   and  the  expansion  of  the last parameter is joined with the last part of the original   word.  When there are no positional parameters, "$@" and $@  expand  to  nothing  (i.e.,   they are removed). /code/pre  So you basically should be able to call coderar/code within the Shell Script action without any parsing:  precode/usr/local/bin/rar a ~/archive.rar "$@" /code/pre  <comment270505> `~` doesn't get expanded inside quotes, so you need at least `~/"archive.rar"` there. And I would suspect some issues with handling spaces and quoting also for `$F`. Does it work if you run it directly in Terminal? <comment270563> Oops, yeah I didn't mean to have quotes around the ~/archive.rar. and actually, yeah it also does not work in terminal, the error says it still can't open the file(s) in the arguments <comment270589> Why do you preprocess $@ into $F, can't you pass `"$@"` to rar directly? <comment270590> Passing "$@" would pass all the file paths as 1 long string. Each file path argument needs to be encased in quotes <comment270591> There's some weird auto quoting going on when the command is called that screws it up. Since echoing the command actually displays the correct command, I can just pipe it to bash, and it works fine lol.... <comment270623> Did you try it? <comment270624> Please add the working scripts so others can benefit as well. <comment270909> Ha this did work and now I feeld stupid. Thanks man.