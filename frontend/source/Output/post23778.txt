How to manage tunnels as background processes from a shell script? <body> I need to set up a couple of ssh-tunnels from a shell script. I've tried running them as bg tasks using:  precode#!/bin/sh ssh -L 3000:server1:5029 me@server2 &amp; ssh -L 3001:server3:3306 me@server2 &amp; /code/pre  but the tunnels don't seem to work correctly when I launch them that way.   They work fine when I manually set them up in their own tabs, so my next idea is to have the script open new tabs in Terminal and run the commands in there as foreground processes.  strongNote:/strong this question was originally "How do I launch a new terminal tab from the shell and then run a command in it?", but I got two answers about dealing with the tunnels. For the "opening a shell" question, I found this on SuperUser, which will work , though new tabs in the background would be preferable to the foreground windows that it opens.  <answer23787> This is technically not an answer to the question asked, but rather an answer to your problem as described.  The ssh command has two switches that may be useful to you:  precodessh -f -N -L 3000:server1:5029 me@server2 /code/pre  tells ssh to hang around in the foreground just long enough to ask for any necessary passwords, and then put itself in the background, not executing any remote command but just handling the tunnel.  If you really want this to appear in a tab then you may want a different solution.  <answer23984> I would suggest simply integrating your tunnels into your "one for whatever" connection.  You can make it easy by adding the appropriate entries to your code~/.ssh/config/code file:  precodeHost server2     HostName 10.1.1.1     User me     LocalForward 3000 127.0.0.1:5029     LocalForward 3001 127.0.0.1:3306 /code/pre  You can then simply log in by running:  precode&gt; ssh server2 /code/pre  The tunnels should come up and start working, leaving you with a single SSH instance in which to do "whatever".  If you need to open a second connection to codeserver2/code, you might get an error, though:  precode&gt; ssh server2 bind: Address already in use channel_setup_fwd_listener: cannot listen to port: 3000 bind: Address already in use channel_setup_fwd_listener: cannot listen to port: 3001 Could not request local forwarding. /code/pre  This doesn't hurt anything other than your eyes.  You can also set up these forwards for multiple servers by adding similar lines for other servers, and it would all happen automagically.  <comment26563> Do you keep an active SSH session to the server?  Meaning, do you have your tunnels in the background, and a foreground SSH session you actually work in? <comment26581> Until now, I've kept three tabs open: one for each tunnel, plus another one for whatever. Most of my actual work takes place in Eclipse and a browser. <comment26582> (The tunnels are only so I can access some remote dbs from my local Tomcat instance.) <comment26583> I set up keys, so I don't need to enter passwords, but that seems to work. Thanks! One question: how do I access the tunnels to see if they've timed out, or to end them, etc.? Neither `jobs` nor `ps` lists a handle to them.... <comment26584> ps -wwajx|grep ssh should show you the processes, then you can kill them as you see fit. <comment26800> @zzz's answer seems to do the same thing, more or less, and is a bit more straight-forward. Thanks, though. <comment57533> This, combined with the -f -N options are an excellent way to set up forwarding for multiple ports in one shot.  Thanks man.