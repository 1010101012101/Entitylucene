OS X Terminal equivalent of Ctrl+Left / Ctrl+Right <body> In Windows and Linux I could always hit kbdctrl/kbd+kbd&#x2190;/kbd or kbdctrl/kbd+kbd&#x2192;/kbd to skip a word to the left or right in the terminal.  In text editors it seems that kbd&#x2325;/kbd+kbd&#x2190;/kbd/kbd&#x2192;/kbd works, but no dice in the terminal.  I've searched Google and found nothing except a Wikipedia page that claims kbd&#x2325;/kbd+kbdB/kbd/kbdF/kbd does the job, but all it does is print ∫ and ƒ characters to my terminal (or ı and Ï if I hold kbd&#x21E7;/kbd). Any ideas?   <answer1627> You can use the kbd&#x2325;/kbd key, but you have to select the option to use it as the "meta" key: img src="https://i.stack.imgur.com/cW37e.png" alt="alt text"  Once you do that, kbd&#x2325;/kbd+kbdF/kbd and kbd&#x2325;/kbd+kbdB/kbd will work as you expect.  <answer4632> if you know how to use vi you can also turn on vi line editing mode using codeset -o vi/code in your code.bash_profile/code or at any time on the command line.  Then you can switch between vi command and insert modes.  So you could hit escape, then use the vi commands for navigating the line:  precode0 = move to beginning of line $ = move to end of line w = move forward one word b = move backward one word /code/pre  Once you get to the correct position, you can use the other vi commands to enter insert or append modes, or remove characters one by one, etc.  <answer4637> Open terminal, go to preferences, keyboard. On the list you'll find “ctrl cursor right” and “ctrl cursor left”.br Change their assigned actions to “\033f” and “\033b” respectively, and you'll be able to use kbdctrl/kbd+kbd&#x2192;/kbd and kbdctrl/kbd+kbd&#x2190;/kbd to move, without losing your alt key.  <answer5275> It seems that kbdesc/kbd+kbdB/kbd and kbdesc/kbd+kbdF/kbd are mapped by default to go to the beginning and end of words. Although, for my system you can't hold down kbdesc/kbd but have to re-press it for each word.  <answer20641> As of Mac OS X Lion 10.7, Terminal maps kbd&#x2325;/kbd-kbd&#x2190;/kbd/kbd&#x2192;/kbd to kbdesc/kbd+kbdB/kbd/kbdF/kbd by default, so this is now built-in for bash and other programs that use these emacs-compatible keybindings.  <answer29037> This was driving me crazy too, however I didn't want a Terminal-specific fix as I don't use Terminal, and being able to SSH into my OSX box had to use the correct keybindings too.  Also, personally, I didn't care about the kbd&#x2325;/kbd key as discussed earlier; I wanted to maintain the kbdctrl/kbd+kbd&leftarrow;/kbd/kbd&rightarrow;/kbd combination that I'm used to on Linux.  To solve this problem, I added the following to my code~/.profile/code:  precodebind '"\e[5C": forward-word' bind '"\e[5D": backward-word' bind '"\e[1;5C": forward-word' bind '"\e[1;5D": backward-word' /code/pre  Note the first two apply to bash in strongTerminal/strong; the last two apply to bash in strongiTerm2/strong and strongincoming ssh/strong connections. Don't ask me why the keyboard emulation is different ;)  For the record, I was able to find what the keycodes actually were thanks to a hint from this stackoverflow answer: You can run codecat &gt; /dev/null/code to monitor the exact keycodes sent during a key combination.  (Note that for me, when I run codecat &gt; /dev/null/code and press kbdctrl/kbd+kbd&leftarrow;/kbd it produces code^[[1;5D/code. emYour exact keycode may differ/em, but the first code^[/code is represented as code\e/code, as shown in my example code.)  BTW, if you want to see all active bash keybindings, run codebind -p/code.  <answer246150> Latest version of OS maps this to Spaces.  Even if you have Spaces turned off, the hotkeys can still get short-circuited in this hidden location:  h3Terminal.app cursor keys: disable System Preferences - Shortcuts - Mission Control - Move left a space/h3  <comment2071> awesome... this has been driving me crazy for a long time.  thanks. <comment4501> Also check http://apple.stackexchange.com/q/1391/115 for possible “drawbacks” of that option. <comment6082> I never knew you could use 0 for start of line, I always used ^ <comment6094> @vxjasonxv: ya, ^ moves to the first non-whitespace char, 0 moves to the first column (which you probably already noticed but I figured I'd throw it out there for others :P) <comment6102> OH WOW, THAT IS EVEN BETTER, I *hadn't* noticed that yet! Oh man, that functionality (first non-whitespace) of ^ always pissed me off. Thank you. <comment7723> Esc is never a modifier, it's just going into "Escape" mode when you press it, consider it a modal way of doing things, unlike shift/ctrl/meta etc. (in the Readline scheme of things anyway.) <comment22720> Cool answer. +1 <comment33359> I like to use `xxd` to examine keyboard input. You can see the character displayed as you type it, then `xxd` emits the value in hex when you type return. <comment33387> Of course, `ESC ^` is great when you do need it, it's only annoying when you wanted to do something else entirely :) <comment35277> Perfect! Just what I was looking for :) Never had the luck of making the "App-specific" settings above, but this just works!