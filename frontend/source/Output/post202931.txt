How to direct an app to use a specific Java version? <body> I got an Java application that strongdoes/strong run under Java 1.8 without problems when I start its JAR directly. However on my Mac the JAR is wrapped within an app that demands me to install Java 1.6 -- which I really do not want to do!  So I'm searching the point within the app package where I could configure that my App shall use the installed Java 1.8  Changing property codeInfoDictionary version/code within codeContents/Info.plist/code to 8.0 will not help.  Is this possible at all or do I need to build a complete new App Package? In case of the later, which tool would be best to do this for a bunch of applications?  <answer202940> This might help jump-start finding an answer. Recalling that PyCharm.app does something similar, here is an extract from the applications codeInfo.plist/code file (watch the …snip… lines in there):  precode…snip… &lt;key&gt;JVMOptions&lt;/key&gt; &lt;dict&gt;   …snip…   &lt;key&gt;JVMVersion&lt;/key&gt;   &lt;!-- string&gt;1.6*,1.7+&lt;/string --&gt;   &lt;string&gt;1.7+&lt;/string&gt;   …snip… &lt;/dict&gt; …snip… /code/pre  Also, the PaperCut Client application (PCClient) uses some simliar items in its codeInfo.plist/code:  precode&lt;plist version="1.0"&gt;   &lt;dict&gt;     …snip…     &lt;key&gt;CFBundleExecutable&lt;/key&gt;     &lt;string&gt;JavaAppLauncher&lt;/string&gt;     &lt;key&gt;JVMRuntime&lt;/key&gt;     &lt;string&gt;jre&lt;/string&gt;     &lt;key&gt;JVMMainClassName&lt;/key&gt;     &lt;string&gt;biz.papercut.pcng.client.uit.UserClient&lt;/string&gt;     &lt;key&gt;JVMOptions&lt;/key&gt;     &lt;array&gt;       &lt;string&gt;-Dclient.home=$APP_ROOT/Contents/Resources/&lt;/string&gt;       &lt;string&gt;-Dcom.apple.macos.useScreenMenuBar=true&lt;/string&gt;       &lt;string&gt;-Xmx256m&lt;/string&gt;       &lt;!-- Workaround since the icon parameter for bundleapp doesn't work --&gt;       &lt;string&gt;-Xdock:icon=$APP_ROOT/Contents/Resources/client-icon.icns&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;JVMArguments&lt;/key&gt;     &lt;array/&gt;   &lt;/dict&gt; &lt;/plist&gt; /code/pre  Again, these are parts of different codeInfo.plist/code files so they might not work as straight copy-and-paste. However, both apps strongwork/strong on OS X, so these keys/values might help you narrow down to a working solution.  Both apps seem to have a slightly different way of doing things. PCClient.app appears to include it's own version of Java, whereas PyCharm relies on what’s installed on OS X.  <answer203092> Thanks to a post on SuperUser, this appears to be fairly straightforward. It appears that different Java versions can be called from Apple's own JRE:  precode/usr/libexec/java_home -v 1.6.0 --exec &lt;Java command&gt; /code/pre  My understanding is that this doesn't actually provide a different JRE, but simply causes the installed JRE to identify itself as the called version, and implements any minor differences between versions. Others should definitely correct me if this is not the case.   For your purposes, this would be  precode/usr/libexec/java_home -v 1.6.0 --exec java -jar &lt;yourJarHere&gt;.jar /code/pre  The above linked post also points out that you can edit the file called /Applications/yourApp.app/Contents/MacOS/yourApp to use the correct command so you don't need to re-type that or remember every time.   All this courtesy Geff  <answer211033> It seems that Oracle could have fixed this. But didn't ...  So I got it working now doing this: (All credits go to: https://oliverdowling.com.au/2014/03/28/java-se-8-on-mac-os-x)  I assume you got the latest JDK installed (currently 1.8.0_60, please adjust this in future)  h3Change content of Info.plist:/h3  Open Terminal and issue this command  precodesudo nano /Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Info.plist /code/pre  Look for key codeJVMCapabilities/code and change it to this:  precode&lt;key&gt;JVMCapabilities&lt;/key&gt; &lt;array&gt;     &lt;string&gt;CommandLine&lt;/string&gt;     &lt;string&gt;JNI&lt;/string&gt;     &lt;string&gt;BundledApp&lt;/string&gt; &lt;/array&gt; /code/pre  h3Add a sum-link to libjvm.dylib:/h3  Open Terminal and issue these two commands:  precodesudo mkdir -p /Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/bundle/Libraries sudo ln -s /Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre/lib/server/libjvm.dylib /Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/bundle/Libraries/libserver.dylib /code/pre  <comment244797> Is the app a Java application on its own, or is it called Tom within another app? If it's a Java app on its own, you can point a specific Java version at it, otherwise you'll need to specify a global Java version any time you want to open that app. <comment244936> @agentroadkill: Originally it's an application of its own, being deployed as a JAR file on every other platform. For MacOS it is packaged within an APP package. If you select "show package content" in it you will find some meta data, Info.plist and the JAR itself. I can start this JAR directly though. <comment244937> Thank you, that's exactly the place where I thought one should be able to state the minimal JRE required... However, none of these settings had an effect. I still get a dialog asking to install JRE 1.6. I think it also depends on the JavaAppLauncher that is actually started up, which will in turn ask for a JRE 1.6 <comment244938> @agentroadkill: So, could you please elaborate a bit on how to specify my Java version to all the apps? <comment244941> [Here](http://superuser.com/questions/490425/how-do-i-switch-between-java-7-and-java-6-on-os-x-10-8-2) is the SuperUser post specifying what you're looking to do. I'll elaborate more in an answer below. <comment254566> I think this answer may complete this thread: http://stackoverflow.com/a/15379462/335478 <comment254571> that describes how to deploy an app with a built-in JRE. It was my understanding you had an application which had external Java dependencies you were attempting to run. If you were attempting to build an app, I apologize for the misunderstanding; StackExchange is the proper forum for that sort of question. <comment254601> No, you did not get it wrong. I don't want to build an app, but to get an existing app running. However the answer describes that fumbling with Info.plist cannot work, as this is an apple mechanism. And Oracle will use a different stub and packaging. It also mentions that `Jar Bundler` that could be used to re-pack my JARs would always use the apple JRE. I'm sure that there is an utility out there to create an APP package from JARs using Oracle's mechanism. <comment254623> If that's all you want to do, the easiest thing may be to simply write a quick script in Automator, then build an app from Automator with all the decencies (your .jar and the JRE) bundled in. <comment254748> All it does is run the java defined with the -v parameter <comment254754> What does this chnage do? <comment254760> Right-the issue was that the app wanted a different version of the JRE. This causes the Apple-supplied JRE to identify itself as the required one, and provides the expected functions of that Java version