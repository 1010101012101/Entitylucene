How to open a new Terminal tab in current working directory? <body> I want to create and run a strongbash/strong function that:  ol licodecd/code into a project's directory/li liOpen a new tab in Terminal in the same directory/li liOpen my dev tools and start dev services/li /ol  Item #2 doesn't work as expected, the new tab doesn't change directory.  Here is the script (both functions residing in my strong.bashrc/strong file:  precode# Open a new tab (needs a path as an argument) new_terminal_tab(){     osascript -e "tell application \"Terminal\"" \                         -e "tell application \"System Events\" to keystroke \"t\" using {command down}" \                         -e "do script \"cd $1; clear;\" in front window" \                         -e "end tell"                         &gt; /dev/null }  # Set up workspace affiliatesForm(){     # cd into the project's directory     cd /Users/iamuser/Documents/path/to/project\ file     # Get the working directory     pwd=`pwd`      # Open a new tab in Terminal and cd into project's directory     # The idea is to have a tab with Rails server output, and another tab in the project's directory     new_terminal_tab $pwd      # Open the project in Sublime Text 2     subl $pwd      # Start the Rails server     rails server } /code/pre  What am I doing wrong? What is this code doing that I don't know?  hr  h2Update/h2  The path for the directory I am trying to access has spaces in it. But escaping the space is not helping at all. The script works with paths that do not include spaces.  <answer128999> strongOpening a new tab in Terminal should by default retain the current directory./strong If it doesn't, you may've broken the code$PROMPT_COMMAND/code.  Also remember to not replace the previous value if you intend to add custom behaviour by adding code; $PROMPT_COMMAND/code at the end.  precodePROMPT_COMMAND="my_custom_function; $PROMPT_COMMAND" /code/pre  For reference, here's the default from code/etc/bashrc/code (OS X 10.9):  precode# Tell the terminal about the working directory at each prompt. if [ "$TERM_PROGRAM" == "Apple_Terminal" ] &amp;&amp; [ -z "$INSIDE_EMACS" ]; then     update_terminal_cwd() {         # Identify the directory using a "file:" scheme URL,         # including the host name to disambiguate local vs.         # remote connections. Percent-escape spaces.         local SEARCH=' '         local REPLACE='%20'         local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"         printf '\e]7;%s\a' "$PWD_URL"     }     PROMPT_COMMAND="update_terminal_cwd; $PROMPT_COMMAND" fi /code/pre  <answer129021> I use an app called go2shell. This gives you a little button on Finder that opens the current directory in a terminal.  https://itunes.apple.com/es/app/go2shell/id445770608?mt=12  You can also use the terminal to cd to the folder you want, and use 'open .'  <answer129024> The service provided here works for me. It opens a new Terminal tab at the folder I ran the service from.  I did encounter the problem that when I already had a Terminal window open it would open a new one. I solved it as follows:  precodeon run {input, parameters}     repeat with this_item in input         set the_path to POSIX path of this_item         repeat until the_path ends with "/"             set the_path to text 1 thru -2 of the_path         end repeat          set numberOfWindows to "0"          tell application "Terminal"             activate             set numberOfWindows to (numberOfWindows + (count windows))             if numberOfWindows is 0 then                 do script with command "cd " &amp; quoted form of the_path                 activate             else                 activate                 delay (0.3)                 tell application "System Events"                     keystroke "t" using command down                 end tell                 do script with command "cd " &amp; quoted form of the_path in window 0             end if          end tell     end repeat     return input end run /code/pre  All credit for this code goes to Jeroen Leenarts. I just made some small adjustments.  <answer129140> So as it was mentioned, my script worked with paths that didn't include spaces. It turns out that the solutions lies in wrapping the variable (inside codenew_terminal_tab()/code) in single quotes like so:  code-e "do script \"cd '$1'; clear;\" in front window" \/code  Amazing what quotes can do isn't it?  <answer250550> I know this question is a little dated but I just found an answer that would be useful for iTerm2 users on Mac OS X.   Under the "profile tab" in iTerm2 preferences you can set exactly where iterm opens up new tabs under the "Working Directory" heading  img src="https://i.stack.imgur.com/kMJG7.png" alt="iterm preferences"  After that, close and restart iTerm and you should be good to go!  <comment151023> $PROMPT_COMMAND is not broken. Any other suggestions? <comment151146> that's an interesting script. But my idea is to type a command in Terminal and have my applications opened as well as the two tabs in Terminal, one for Rails Server, another in the directory where the project resides. <comment330015> This is exactly what I want. Tanks ;)