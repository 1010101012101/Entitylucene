How do I copy to the OSX clipboard from a remote shell using iTerm2? <body> Using iTerm2, I start an interactive SSH session to a remote Linux machine (where codepbcopy/code is not available). On the remote Linux machine I would like to capture the output of some arbitrary command (e.g. codels *.foo/code), and have it magically appear in my OSX clipboard, so that when I hit kbdâŒ˜/kbd+kbdv/kbd it appears in whatever OSX application I've just pasted into. Is this possible? I've tried the escape codes mentioned on the iTerm2 doc page and can't make them work.  <answer257610> You can do this  precodessh -ttt user@location "ksh -c 'ls *'" | pbcopy /code/pre  <answer258168> h2Solution/h2  Piecing together lots of information from several different sources, here's what I came up with.  h3Local Daemon/h3  From the local computer (OSX), setup a daemon to listen on a specific port, via codelaunchd/code (see links below). The daemon process will simply call codepbcopy/code, which will take anything passed in via codeSTDIN/code and put it on the clipboard. To do this you need to setup a codelaunchd/code plist file. Mine looked like this:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;local.pbcopy.9999&lt;/string&gt;     &lt;key&gt;UserName&lt;/key&gt;     &lt;string&gt;joe&lt;/string&gt;     &lt;key&gt;Program&lt;/key&gt;     &lt;string&gt;/usr/bin/pbcopy&lt;/string&gt;     &lt;key&gt;StandardOutPath&lt;/key&gt;     &lt;string&gt;/tmp/pb9999.out&lt;/string&gt;     &lt;key&gt;StandardErrorPath&lt;/key&gt;     &lt;string&gt;/tmp/pb9999.err&lt;/string&gt;     &lt;key&gt;Sockets&lt;/key&gt;     &lt;dict&gt;         &lt;key&gt;Listeners&lt;/key&gt;         &lt;dict&gt;             &lt;key&gt;SockNodeName&lt;/key&gt;             &lt;string&gt;localhost&lt;/string&gt;             &lt;key&gt;SockServiceName&lt;/key&gt;             &lt;string&gt;9999&lt;/string&gt;         &lt;/dict&gt;     &lt;/dict&gt;     &lt;key&gt;inetdCompatibility&lt;/key&gt;     &lt;dict&gt;         &lt;key&gt;Wait&lt;/key&gt;         &lt;false/&gt;     &lt;/dict&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  By convention, the plist file name should be the label name with code.plist/code appended, so for the above example, it would be codelocal.pbcopy.9999.plist/code. If you wish to use a port other than 9999, just change it everywhere (keeping in mind that it should be something above 1024 and should not be a well-known port that you might already be using). Once you have things working, you can remove the codeStandardOutPath/code and codeStandardErrorPath/code keys and strings, as they're only needed for debugging.  In order to load the daemon, run the following command:  precode$ launchctl load local.pbcopy.9999.plist /code/pre  You can see that it's loaded or remove it with the following commands:  precode$ launchctl list local.pbcopy.9999 $ launchctl remove local.pbcopy.9999 /code/pre  If you would like this to load every time you login, place the plist file into the code~/Library/LaunchAgents/code directory.  strongNote:/strong you will need to set this up on each local host you want this to work on.  h3SSH Port-Forwarding/h3  Because I could be accessing the remote machine from several different local computers, I can't hard-code the sending of the data on the remote machine to a specific host. To make this as painless and dynamic as possible, I've used SSH port-forwarding to create a dynamic link from the remote machine back to the local computer (the how's and why's of this are beyond this answer; see below for more information). Specifically, I create a link from the remote machines's port 9997 to the local computer's port 9999, which now has a daemon listening on it, thanks to the codelaunchd/code stuff above. I could use port 9999 on both the remote machine and the local computer, but I don't need to.  To setup this tunnel, execute the following command:  precode$ ssh -R 9997:localhost:9999 user@remote.com /code/pre  You can remote into multiple different remote machines with the same command and all will function as expected. You can remote into the same remote machine multiple times with the same command, and it will sort of work as expected; see note below.  If you don't feel like typing the code-R 9997:localhost:9999/code on every SSH invocation you make, you can put the remote forwarding definition in the SSH config file to do it automatically. Here's an example from my code~/.ssh/config/code file:  precodeHost ufo*   RemoteForward 9997 localhost:9999 /code/pre  With that, any time that I SSH to a host whose name starts with 'ufo', the remote forwarding from 9997 to localhost:9999 will automatically be set up. See the config file man page link below for more options.  h3Sending Data/h3  On the remote end I use codenetcat/code to send the desired content back to the listening daemon.  precode$ date | nc localhost 9997 /code/pre  You can get as complicated as you'd like:  precode$ nc localhost 9997 &lt;&lt;EOF &gt; `ls -ld *` &gt; `date` &gt; EOF /code/pre  You can even dynamically decide whether or not to send any data, based on whether or not anyone is listening (there's probably a more efficient way to do this, but it works):  precode#!/bin/bash cnt=`(netstat -lnptu 2&gt;/dev/null) | grep 127.0.0.1:9999 | grep -v grep | wc -l` if [[ $cnt -eq 1 ]]; then     date | nc localhost 9999 fi /code/pre  h3Observations &amp; Caveats/h3  Things I noted:  ul licodepbcopy/code plays nicely with Copy'em Paste/li liif you initiate more than one SSH session with the same remote port forwarding to the same remote machine, only the first one will have any effect; no "duplicate port" type errors will be reported on either end/li lisimilarly, if you remote in from several different local computers to the same remote machine using the same remote port (e.g. 9997), only the first one will have any effect/li /ul  h3Reference Links/h3  ul lilaunchd Tutorial/li lilaunchd Examples/li liSSH Port Forwarding/li liSSH Config files/li /ul  <comment321745> I need a solution for an interactive shell session -- I'll clarify above. <comment321746> http://stackoverflow.com/questions/1152362/getting-items-on-the-local-clipboard-from-a-remote-ssh-session <comment321750> @klanomath -- thanks, I'll consider that (I'm not sure I want to setup access back to my machine via SSH keys, though it could be passcode-protected, of course.). <comment321752> It does require X on the remote server, which isn't there, and XQuartz running on the local server, which makes my machine run hot. But it might be my best bet -- thanks! <comment321754> then nbren12's comment to the [second answer](http://stackoverflow.com/a/18893823/4100967)! ;-) <comment321755> Looked at that already -- it still requires SSH keys be set up, and it's the only way I'd be able to do it, since one use case has me SSH'ing into the remote machine from a VPN connection, so no static IP or hostname. Another problem is that I have different user account names on my two primary local machines, but I could solve that in an environment variable or something. Thanks for the effort, though, I really appreciate it.