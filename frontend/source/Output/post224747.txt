Using rsync to backup <body> I currently back up the contents of an external hard drive A by (1) deleting everything in the destination external hard drive B and (2) copying everything from A to B (in Finder). The external hard drive only contains “basic data” (folders, images, videos, documents, etc.), nothing fancy/weird.  But with all the amazing free tools that exist out there I couldn't find a decent one to backup (suggestions accepted).  I want to automize this. After a few searches, it seems I can use codersync/code. I want then to automize this by using codersync/code to avoid copying files that are already on the destination hard drive (of course, if a change has been made, I want to update the file/folder; the same with deleted files/folders or new files/folders; the idea is to mimic what I usually do manually with Finder).  I got to this point  precodersync -av --progress --delete /Volumes/A/ /Volumes/B /code/pre  Now the log is full of files which name starts with code./code or code._/code or even code._./code. Are they necessary?  h2Question/h2  How can I copy only the files that matter, leaving all those that don't matter behind. For example, if I have codephoto.png/code I would expect to copy codephoto.png/code, not code._photo.png/code or many files.  What code--exclude/code or code--exclude-from/code can be used safely on a Mac? May be a good rule is “just copy anything that Finder shows” which is what I would copy if I passed manually through all folders.  h2 Extra question/h2  Is code-av --progress --delete/code enough? Am I committing a crime or risking some data? What options would you use.  emPlease, back your answer with some arguments, I would appreciate it./em  I'm looking for a way to automate codersync/code which seems quite powerful and free to use.  <answer224769> I'd advise against pruning emmeta-data/em during a backup, particularly the emdot-files/em e.g. code._$filename/code, however if you really want to exclude the emdot-files/em from your codersync/code command add code--exclude '.*'/code to it.  precodersync -av --exclude '.*' --progress --delete /Volumes/A/ /Volumes/B /code/pre  <answer224772> h1For Maximum Safety, Copy Everything/h1  The emsafest/em option is to emcopy everything/em, including invisible meta-data files.  Files tend to exist for a reason and as software changes, so will the existence, purpose, and contents of these meta-data files. Copying everything will reduce the maintenance burden and offer ease of mind that nothing is being lost.  The log file created by codersync/code will be technically involved by the very nature of codersync/code being a command line tool. Consider presenting a tidied up, meta-data filtered, and maybe even coloured coded output for the user to check. You could do this with a wide range of scripting tools and languages. Please ask more questions here on Ask Different and on StackOverflow if you need help with this approach.  h2Delete Last &amp; Copy OS X Resources/h2  Regarding the codersync/code flags, take a look at the question Fastest and safest way to copy massive data from one external drive to another. In this question, a few additional flags are used and explained:  precodesudo rsync -vaE --progress --delete-after /Volumes/SourceName /Volumes/DestinationName /code/pre  In this situation, the codeE/code will ensure resource forks and other Mac specific properties are copied.  You may want to consider code--delete-after/code to avoid deleting until the copy has completed; please note that this approach will potentially require a destination drive twice the size of the source.  h1Possible Exclusions/h1  An answer to a related question, How can I omit FCPX Render Files from a Time Machine backup?, provided a useful link of OS X files and folders that can be excluded from most back-ups. This link provides a practical list of file patterns, folders, and paths that you could exclude.  h2Include dot Files/h2  There are good reasons to back up files beginning with dots, code.*/code matching files.  Some software keeps preferences, settings, and other information of value in folders at the top of the user's folder in invisible dot prefixed folders. Running codels -la ~//code will reveal these folders and files.  If any user uses or has software that in turn uses version control software, be sure to back-up dot files. Software like subversion and git both store critical information within their dot folders. These hidden folders can be scattered across your file system, where ever a project is checked out.  h1Spotlight and Disk Access/h1  Spotlight is OS X's search service. Spotlight uses the codemdworker/code process to index and update the search catalogue. If you are concerned about possible disk corruption or slow copies, disabling codemdworker/code while running codersync/code may help. Personally, I leave Spotlight running while running large codersync/code transfers.  <answer225807> I have used rsync for backups at several jobs, and I use it at home.  I highly recommend it, but with some modifications. As a backup tool, it's great, but as an archiving tool it falls a little flat. Yes, it copies everything, but you don't get versions of everything, you always get the latest versions only.  I used this guide http://www.mikerubel.org/computers/rsync_snapshots/ as a jumping-off point. Read the whole page. It does a great job of explaining the options, and outlines how you can implement incremental backups. And amazingly, the article is over 10 years old but is still applicable today. Gotta love unix.  <answer225905> I'm not completely pleased with the current answers, but I will try to cover here a bit of the possibilities that I've seen on the web trying to find a nice setup for codersync/code.  And, by the way, if one is interested in Time Machine like copies, there's codersnapshot/code. And there's also Unison for two way syncronizations. Plus, there's actually a few GUIs, like Backup Utility and arRsync; not exactly what I was looking for but they might do the job for somebody.  First, my only intention was to duplicate photos and videos, so exact copy wasn't needed, hence no need to care emtoo much/em. In fact most of my doubts were if I could exclude everything (the same that would happen if, say, I downloaded a photo from the internet, I just download a .png, everything else is not downloaded embut autogenerated/em).  Here's an unstructured list of thoughts that you may want to take in account  ul liI you want to ensure that your laptop doesn't go to sleep, you may want to codecaffeinate/code the process codecaffeinate -s rsync -av .../code. Taken from here./li liIf you are doing local copies, like in my case, or even if internet connection is not too slow, you should emnot/em use code-z/code option (compression), and use code-W/code (transfer whole file, rather than delta transfers; this is a default when local) and probably use code--inplace/code to make transfers fast. Taken from here./li liYou can use code--delete-after/code so any file will be first transferred, and then moved on destination (and deleted the original one) and is safer than deleting before the transfer or during the transfer./li liYou can stop the transfer by pressing kbdctrl + C/kbd, and it will stop cleanly. Taken from here. This was one of my fears with SuperDuper!, if you need to stop a transfer you get the message “You will leave the hard drive in an unknown state…”./li liIn recent versions there's code--info=progress2/code which adds even more details to code-v/code./li liThere's code-P/code (which equals code--partial/code and code--progress/code) that will leave mid-transferred files there so you can keep going when you restart the process (if for some reason you can't end the syncronization at once)./li liOne might be interested in stopping Spotlight or TimeMachine before doing the copy, and reenable them after the transfer. And even disable Spotlight for the external disk./li liOther options used in all those references include code-x/code (or code--one-file-system/code), code-E/code (code--executability/code), code-H/code (code--hard-links/code), code-X/code (code--xattrs/code), code-A/code (code--acls/code), and code--sparse/code, code--hfs-compression/code, code--protect-decmpfs/code. You may want to look at them./li /ul  For me, a basic command looks like (I might use more options, but this is enough for an example):  precodecaffeinate -s rsync -av --delete-after --progress --stats --exclude-from 'excludefile.txt' \   "/Volumes/SrcHDD/" "/Volumes/DstHDD" # note the trailing slash / after the source /code/pre  Now in my case I could just include code{*.jpg,*.png,*.mp4,*.txt,*.pdf,…}/code and no one would say “you need also system files” but since I don't want to search to get all the possible filetype I have files of, I prefer to exclude. And there are things that not only can be but emseem convenient/em to exclude.  I found a few links, take what you want:  ol lihttps://bombich.com/kb/ccc4/some-files-and-folders-are-automatically-excluded-from-backup-task/li lihttps://gist.github.com/tvwerkhoven/4541989/li lihttps://github.com/necolas/dotfiles/li lihttps://gist.github.com/shkm/5531679/li lihttp://www.hackurmac.com/2014/08/backing-up-and-restoring-your-hackintosh.html/li lihttps://github.com/jedda/Counterpart/li lihttp://alanwsmith.com/rsync-exclude-list-for-mac-osx/li /ol  And from there you could probably get what's safe or sane to ignore. Here's the full list (I just removed duplicates)  precode.HFS+ Private Directory Data* /.journal /.journal_info_block .AppleDouble .AppleDB /lost+found  .metadata_never_index .metadata_never_index_unless_rootfs /.com.apple.timemachine.donotpresent .VolumeIcon.icns /System/Library/CoreServices/.disk_label* /TheVolumeSettingsFolder  .DocumentRevisions-V100* .Spotlight-V100 /.fseventsd /.hotfiles.btree /private/var/db/systemstats  /private/var/db/dyld/dyld_* /System/Library/Caches/com.apple.bootstamps/* /System/Library/Caches/com.apple.corestorage/* /System/Library/Caches/com.apple.kext.caches/*  /.com.apple.NetBootX  /Volumes/* /dev/* /automount/* /Network/* /.vol/* /net  /private/var/folders/zz/* /private/var/vm/* /private/tmp/* /cores/*  .Trash .Trashes  /Backups.backupdb /.MobileBackups /.MobileBackups.trash /.MobileBackups.trash  Library/Mobile Documents.* .webtmp  /Library/Caches/CrashPlan /PGPWDE01 /PGPWDE02 /.bzvol /Library/Application Support/Comodo/AntiVirus/Quarantine /private/var/spool/qmaster $Recycle.Bin Saved Application State Library/Preferences/ByHost/com.apple.loginwindow*  .AppleDesktop .com.apple.timemachine.supported Network Trash Folder /Library/Caches/* /private/var/spool/postfix/* $RECYCLE.BIN /stuff/* /afs/* /private/var/run/* /Previous Systems.localized /tmp/* .dbfseventsd .DS_Store .PKInstallSandboxManager .SymAV* .symSchedScanLockxz .TemporaryItems Desktop DB Desktop DF hiberfil.sys pagefile.sys Recycled RECYCLER System Volume Information Temporary Items Thumbs.db AUTORUN.INF Autorun.inf autorun.inf /code/pre  <comment272620> This is good. I wasn't sure if removing *all* dot-files would be problematic (by the way, is there any difference between `'.*'` and `'/.*'`?). I don't think Finder copies all of them, may be just some associated. In that case I would prefer to exclude only those that are unnecessary (e.g., `.DS_Store`). And yes, those that might be important, but that I don't want to have in my log I can filter with regular expressions. <comment272640> *The safest option is to copy everything, including invisible meta-data files.* But that same link from Carbon Copy Cloner says that there are certain files that are automatically built so it may even corrupt them if you copied with `rsync`. <comment272641> Some files will be recreated but is the effort required in isolating those files and tracking changes in behaviour across multiple versions of software worth the time and risk? Maybe, but for most situations copy everything and keep those back-ups safe. The CCC exclusion list is reasonable and, if desired, can be encoded in an exclusion file for `rsync` to use. <comment272644> You could add a full example for future readers. I found two sources, [one](https://gist.github.com/tvwerkhoven/4541989) and [two](http://alanwsmith.com/rsync-exclude-list-for-mac-osx) (plus the [third one](https://bombich.com/kb/ccc4/some-files-and-folders-are-automatically-excluded-from-backup-task) that you linked); I leave them here for future reference. <comment273888> Comments are not for extended discussion; this conversation has been [moved to chat](http://chat.stackexchange.com/rooms/35077/discussion-on-question-by-manuel-using-rsync-to-backup). <comment274072> What the Finder copies is undocumented, and this is the source of everyone's problem when building a backup policy. You should maintain a copy of *all files* if you want a backup which could be used exactly in place of `A` disk. <comment274074> "There are good reasons to back up files beginning with dots": **yes!** These files are hidden (from the Finder for the dummies) but most of the time these are very important files. <comment274076> The `E` and `--delete-after` are the key points which make of this answer a winning one. <comment274090> Thanks. In any case I wanted to cover the special considerations that one might want to take under Mac OS X. I didn't really wanted just a guide of `rsync`. In any case, good link, it covers a lot of `rsync` but there is as of today a tool to do exactly that: `rsnapshot`. <comment274091> @danielAzuelos Those are the nitpickings I wanted to see in an answer: what things should I take care in Mac OS X? In my particular case, as I stated, I only have photos, videos or documents, there's no “magic” programs as in `~/`. In my case I thinks I'm pretty safe with `--ignore ' .*'` since it would be the same exact thing as if I downloaded a photo from the internet (I don't download aux files, those are *generated* from the computer). Now I wanted arguments that said: “yes you can imagine you download from the internet a photo, but it would be much if you did X”. <comment274093> @danielAzuelos As of `-E`, in newer versions there's `-X` which I see recommended in some places, which one si the correct? Or both of them? I would like an up to date, pseudo-complete that covers most of the general worries. Would copying Spotlight files be easier and faster than letting them be generated? How can I stop Spotlight so it doesn't mess meanwhile? What about `caffeinate`ing the process? Or may be if it's just a backup list make it not indexable by Spotlight, much less worries, etc. Many of this questions have been answered for sure. <comment274095> @Manuel on Ask Different, we prefer to limit questions to one concise query. Please can you [ask new questions](http://apple.stackexchange.com/questions/ask) for these additional enquiries and refinements. <comment274096> @GrahamMiln My question is “what to take in account when specifically trying to use `rsync` on Mac OS X”, all of those are just ideas that one might answer. <comment274100> @danielAzuelos Which is not the case, in case the main hard drive A dies, then I will buy a third hard drive C, copy from hard drive B to hard drive C and probably start using one of B or C. I say again, that this is not the kind of backup that one needs to use like what SuperDuper does. It's just that my photos are better in two places instead of just one.