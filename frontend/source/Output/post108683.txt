On OS X is it possible to override DHCP assigned DNS servers but still keeping them for fallback? <body> By default I would like to use the google public DNS servers and to fallback to intranet ones when these are failing.  Is this possible? ... I am looking for a setup that would not break when I move my laptop no other networks.  It would be acceptable if I found a solution specific to this wifi network connection (to do the trick only in this case, and to use defaults for others).  <answer108687> Yes, you can add the Google DNS servers at the top of the list and follow those with your own (intranet servers).  ul liGo to strongSystem Preferences  Network/strong/li liSelect your network interface from the list on the left/li liClick the strongAdvanced/strong button on the right/li liIn the strongDNS/strong tab of the dialog, click "+" to add or "-" to remove entries (you can also edit entries by double clicking or selecting and clicking on the address)/li liAdd the Google DNS addresses as the first two entries/li liAdd your intranet DNS servers below those/li liClick strongOK/strong/li liClick strongApply/strong/li liClose strongSystem Preferences/strong/li /ul  <answer162057> There's also a way to do this from the command-line if you're a network administrator looking for a way to do this in a batch:  precodenetworksetup listallnetworkservices # look for the correct network device here, probably "Wi-Fi" sudo networksetup -setdnsservers Wi-Fi 8.8.8.8 8.8.4.4 /code/pre  Replace "Wi-Fi" with the correct network device. You may, instead, wish to use:  precodedevice=`networksetup listallnetworkservices | grep Wi-Fi` sudo networksetup -setdnsservers "$device" 8.8.8.8 8.8.4.4 /code/pre  <answer273022> I'm trying to do the same. I'm going to manually run a caching dns server locally and have it learn intranets as I join.  I'm excited that the dns server might even be able to differentiate between intranet and internet hostnames before making the recursive call.  I'm worried that I'll either need short TTLs, or need to write hooks so that every time an interface changes I consider flushing the dns cache, or similiar.  I'll report back if successful...  h3The first 50%/h3  After looking at the Wikipedia comparison of DNS servers, Dnsmasq comes to the top of my list.   Turns out codebrew/code has a forumla for codednsmasq/code, and it even has some codeservices/code sub-interface written for codebrew/code...great, less to think about, just have to work out the config.  precode$ brew install dnsmasq  # [libidn] internation domain names $ cp /usr/local/opt/dnsmasq/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf # To have launchd start dnsmasq now and restart at startup: $ sudo brew services start dnsmasq  /code/pre  (codebrew/code also has codebind/code, but minimal state is attractive too me -- not having to clear it when doing network configuration).  h3Todo/h3  ul liFigure out configuring strongNetwork/strong Preferences to use my new dns, and/li liConfigure codednsmasq/code to ensure it can use intranet settings. (the real challenge)/li /ul  <answer287412> You can use codeipconfig getpacket/code to find the DNS server that DHCP recommended:  precode$ ipconfig getpacket en0  ... domain_name_server (ip_mult): {192.168.3.2, 192.168.42.1} ... /code/pre  So, assuming you are using the codeWi-Fi/code adapter and its device is codeen0/code, you can:  precode#!/bin/bash  default_servers=$( ipconfig getpacket en0 | \    perl -ne'/domain_name_server.*: \{(.*)}/ &amp;&amp; print join " ", split /,\s*/, $1' ) networksetup -setdnsservers Wi-Fi 127.0.0.1 $default_servers /code/pre  <comment127368> I know this, but the problem is that this makes impossible for me to use the same VPN from another location. It should be another solution, maybe something to configure in the VPN server (PPTP) or to configure a DNS with 127.0.0.1 address and  to configure a local DNS that does still use the DHCP provided DNS servers. <comment127373> What does it mean "when google public DNS servers are failing"? There are plenty of ways to script changing network locations and/or simply script the entry of different DNS, but it's not clear how you would test failure of google DNS. Worse, the comment below about VPN will further complicate things if you add that to your requirements mix. <comment210887> I'm surprised this isn't possible. I sometimes have the DNS servers which are supplied to me via DHCP fail so I use the Google ones. However I can't use any networks which use DNS to implement a captive portal now. If I could have the DHCP supplied servers as a backup then it would solve this. Did you find a solution?