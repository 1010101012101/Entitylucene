How to create automatic launchd job that sets the Ruby version to use <body> I’d like to run a ruby script automatically once or twice a day on my MacBook running OS X Yosemite.  Problem is that I currently have three versions of Ruby on my system including 1.8.7 and 2.2.1, neither of which the script will run with. So I say codervm use system/code which switches to a different version, though I don’t know how to find out which one (as codervm current/code just replies “system”). And then I can run the script happily.  However, when I create this little script:  precode#!/bin/bash rvm use system /Users/jonathan/Library/Scripts/slogger/slogger /code/pre  It won’t run from the shell, saying:     RVM is not a function, selecting rubies with 'rvm use ...' will not work.   You need to change your terminal emulator preferences to allow login shell.   Sometimes it is required to use code/bin/bash --login/code as the command.   I know how to create and set basic launchd jobs; but I don’t know how to set the ruby version for the created process if I can’t include it in a script in this way. I’m sure it must be possible, though…  <answer218020> This is untested (as I don’t use codervm/code), but there should be two simple ways to fix this.  ol liSource codervm/code in your script (which you likely do anyway in your code.profile/code, or code.bashrc/code, or equivalent):  precode#!/bin/bash [[ -s "${HOME}/.rvm/scripts/rvm" ]] &amp;&amp; source "${HOME}/.rvm/scripts/rvm" rvm use system /Users/jonathan/Library/Scripts/slogger/slogger /code/pre  That new line is a shorter way of saying  precodeif [[ -s "${HOME}/.rvm/scripts/rvm" ]]; then   source "${HOME}/.rvm/scripts/rvm" fi /code/pre  code-s/code is used to return “True if codeFILE/code exists and has a size greater than zero”./li liAnd you’ll probably laugh as to how easy it was to fix, simply do what the message says and use code/bin/bash --login/code, like so:  precode#!/bin/bash --login rvm use system /Users/jonathan/Library/Scripts/slogger/slogger /code/pre/li /ol  <comment263545> Why not use the full path to the required ruby - or create ruby18 runby22 as scripts to call the correct ruby