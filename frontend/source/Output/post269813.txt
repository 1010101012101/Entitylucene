Why does my `rootless.conf` not always affect SIP’s choice of which files get the `restricted` flag treatment? <body> h1What sources say/h1  Like everyone else’s, my code/System/Library/Sandbox/rootless.conf/code file contains the following entries:  precode$ cat /System/Library/Sandbox/rootless.conf […]         /System […] *       /System/Library/Extensions         /System/Library/Extensions/* […] /code/pre  All sources on the subject I’ve found (example 1 2 3) seem to suggest that according to the rules of coderootless.conf/code, those entries will be enforced at boot time, and can be roughly interpreted as follows:  ol listrongInside the code/System/code hierarchy/strong, no process is allowed to write to any file or folder, except when a more specific rule grants such access;/li listronginside code/System/Library/Extensions/code/strong, any process that has root privileges is allowed to create new files and subfolders;/li lihowever, no process is allowed to modify or delete any strongexisting files or subfolders/strong inside code/System/Library/Extensions/code./li /ol  h1What I actually observe/h1  However, when I looked at the actual contents of code/System/Library/Extensions/code, I discovered to my surprise several files and folders which, despite SIP being active, are perfectly writable and deletable:  precode$ csrutil status System Integrity Protection status: enabled. $ ls -lAO /System/Library/Extensions | tail -16 drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 corecrypto.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 exfat.kext drwxr-xr-x  3 root  wheel  -            102 19 Aug  2013 hp_Inkjet9_io_enabler.kext drwxr-xr-x  3 root  wheel  -            102 27 Apr  2013 hp_fax_io.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 iPodDriver.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 mcxalr.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 msdosfs.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 ntfs.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 pmtelemetry.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 pthread.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 smbfs.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 triggers.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 udf.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 vecLib.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 webcontentfilter.kext drwxr-xr-x@ 3 root  wheel  restricted   102 20 Apr  2016 webdav_fs.kext /code/pre  Note that codehp_Inkjet9_io_enabler.kext/code and codehp_fax_io.kext/code are third-party kernel extensions which were already present at the time I updated to El Capitan (which I did in May 2016).  When I search the list of SIP exceptions at code/System/Library/Sandbox/Compatibility.bundle/Contents/Resources/paths/code, I don’t see those 3rd-party extensions listed there either:  precode$ defaults read /System/Library/Sandbox/Compatibility.bundle/Contents/Info.plist CFBundleVersion 12.0 $ grep Extensions /System/Library/Sandbox/Compatibility.bundle/Contents/Resources/paths /System/Library/Extensions/IONetworkingFamily.kext/Contents/PlugIns/AppleRTL815XComposite109.kext /System/Library/Extensions/IONetworkingFamily.kext/Contents/PlugIns/AppleRTL815XEthernet109.kext /code/pre  I found over a dozen more kernel extensions that also lack the coderestricted/code flag and the codecom.apple.rootless/code attribute; all affected kernel extensions appear to be 3rd-party extensions I installed over the course of the last decade, and apparently have survived the update to El Capitan.  Which leaves me wondering about the following conundrums:  h1What I’d love to know/h1  h2Q1. Missing flags/h2  How come that no 3rd-party kernel extension – and in fact no file I create manually inside code/System/Library/Extensions/code – ever receives a coderestricted/code flag or a codecom.apple.rootless/code attribute, even though the coderootless.conf/code rule seems to mandate the contrary?  For example, a codels -dlO/code along the path chain of codehp_fax_io.kext/code reveals:  precode$ ruby -rpathname -e 'puts Pathname.new("/System/Library/Extensions/hp_fax_io.kext").enum_for(:ascend).to_a' | xargs ls -dlO drwxr-xr-x   39 root  wheel  -           1394 19 Jan 11:36 / drwxr-xr-x@   4 root  wheel  restricted   136 19 Jan 11:29 /System drwxr-xr-x   80 root  wheel  restricted  2720 10 Jan 19:19 /System/Library drwxr-xr-x  297 root  wheel  sunlnk     10098 22 Jan 00:57 /System/Library/Extensions drwxr-xr-x    3 root  wheel  -            102 27 Apr  2013 /System/Library/Extensions/hp_fax_io.kext /code/pre  I also remember that at the time I upgraded from Yosemite, the El Capitan installer chose to move basically everything and their grandma into SIP quarantine in many instances.  h2Q2. Time of enforcement/h2  If I were to:  ul liboot into a recovery volume,/li lithen add to coderootless.conf/code (on the original volume) a line:  precode/usr/local/* /code/pre/li liand then reboot again into the original volume,/li /ul  would macOS then douse all files under code/usr/local//code with coderestricted/code flags on the next reboot?  If not, then this brings me to my final question:  h2Q3. Actual purpose/h2  What purpose does coderootless.conf/code emactually/em serve? 