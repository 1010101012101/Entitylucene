Can I start an application as another user without actually switching users? <body> Is there a way to start an application as another user so that the started application would use the other user's preferences/history/resources et al?  For example: I've logged in as Alice and I'd like to start Firefox as Bob, so therefore Firefox would show Bob's browsing history instead of Alice's.  I tried  precode$ su Bob $ open -a Firefox /code/pre  But with no apparent effect; as a matter of a fact Activity monitor shows the Firefox process is being run by Alice—not Bob.  I understand I will need Bob's login credentials, but that's not a problem.  <answer25909> You need to ssh. I.e. codessh username@123.456.00/code. As you said, you'll need the password for the user. Then you can do what you're asking. You'll need to enable remote login under System PrefsSharing:br img src="https://i.stack.imgur.com/rn8XL.png" alt="Remote Login Preference"br Then, you can just do codeopen -a Firefox/code and Firefox will open as the other user, not yours.  <answer25911> From the command line strongyou have to find the Unix executable/strong and run it using sudo like so:  precode$ sudo -u Bob /Applications/Firefox.app/Contents/MacOS/Firefox  /code/pre  … or the same with su: (however this also needs you to set up a password for root - which I do not recommend)  precode$ su Bob $ /Applications/Firefox.app/Contents/MacOS/Firefox /code/pre  (…or the above in one line:)  precode$ su Bob -c /Applications/Firefox.app/Contents/MacOS/Firefox /code/pre  hr  In the past, the easiest way for PPC Macs was to use Pseudo, but it has been long discontinued. This is to drop the application icon on Pseudo's icon or window.  <answer102106> See https://apple.stackexchange.com/a/102105/1860 for why codesu/code does not work for all applications.  h2launchd's bsexec/h2  Recent versions of codelaunchd/code have the ability the launch applications within another user's session; although Apple engineers have not recommended its general use.  Use the codebsexec/code option in launchctl to target the appropriate user session:  precode bslist [PID | ..] [-j]           This prints out Mach bootstrap services and their respective states. While the namespace           appears flat, it is in fact hierarchical, thus allowing for certain services to be only avail-           able to a subset of processes. The three states a service can be in are active ("A"), inactive           ("I") and on-demand ("D").            If [PID] is specified, print the Mach bootstrap services available to that PID. If [..] is           specified, print the Mach bootstrap services available in the parent of the current bootstrap.           Note that in Mac OS X v10.6, the per-user Mach bootstrap namespace is flat, so you will only           see a different set of services in a per-user bootstrap if you are in an explicitly-created           bootstrap subset.            If [-j] is specified, each service name will be followed by the name of the job which regis-           tered it.   bsexec PID command [args]           This executes the given command in the same Mach bootstrap namespace hierachy as the given           PID.   bstree [-j]           This prints a hierarchical view of the entire Mach bootstrap tree. If [-j] is specified, each           service name will be followed by the name of the job which registered it.  Requires root priv-           ileges. /code/pre  The recommended approach is to write a launchd job ticket and restart the Mac - or ask the user to log-out and back in again.  <answer177374> One more method:  precode# chown someuser command # chmod u+s command $ ./command /code/pre  Thanks to wysota at :  http://www.qtcentre.org/threads/4730-Linux-Bash-Run-a-command-as-another-user  (Spent a lot of time hunting for something that works in my particular situation, figured I'd spread the wealth)  <comment29455> Unfortunately I get: `LSOpenURLsWithRole() failed for the application /Applications/Firefox.app with error -10810.` when trying `open -a Firefox` :-| <comment29456> Ah, the key was to find the Unix executable. It works also with `su` if one wishes not to `sudo`. Thanks! <comment29457> @koiyu Try `sudo open -na Firefox` <comment29459> it fails as above :-/ (also using the path to the unix executable fails, albeit differently.) <comment29461> @koiyu Permissions? What does `ls -l` say for Firefox? <comment29510> Processes started from an SSH session do not have access to the GUI. If this works on your system I suspect you changed some low-level configuration at some point. <comment29513> So this wouldn't work in *my* case; but for someone who doesn't need app's GUI, this might be a feasible alternative :-) <comment29514> @koiyu: The `sudo` option mentioned in the other answer (with the path to the executable) works at least under Lion. <comment29520> @patrix, yes, that is because it doesn't use SSH. (Also, because it works, I had accepted the answer.) <comment29544> @Tobias Nope. Didn't change a thing. Just SSHed in then `open -a ` and it opens the application's GUI. <comment29583> @daviesgeek but did you SSH into a user other than the one who currently has the GUI, as the OP wanted. <comment87596> Hmm, when trying to run Google Chrome I get this: `Trace/BPT trap: 5` <comment305832> When using the `sudo` approach I get login failures even though I use the correct password for the other user. `su` works on the other hand (no password for root set) <comment306174> @lapplandscohan sudo takes the password of the current user