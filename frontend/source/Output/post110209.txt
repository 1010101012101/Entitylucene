Removing the builtin command-line utilities from PATH, zsh <body> Okay, so I'm a Linux power user, that is I feel most at home when I have access to the command-line, and I'm very much used to using GNU coreutils, so now that I've installed GNU coreutils on Mac OS X using Homebrew, how would I go about removing the builtin coreutils that vanilla Mac OS X comes with?    Please keep in mind that I'm using zsh, so when I set the path to something I do it like this:   pre class="lang-bash prettyprint-override"codepath=(/usr/local/bin ~/.gem/ruby/2.0.0/bin ~/.nvm/bin ~/bin /bin $path) /code/pre  I want to be able to say,  Include everything present in the current path in the new path, excluding these files: code/usr/bin/ls/code, code/usr/bin/grep/code...   <answer110211> Add the following to your path to replace the OS X tools with Homebrew Coreutils:  precode$(brew --prefix coreutils)/libexec/gnubin /code/pre  hr  Per zsh syntaxâ€¦  precodepath=($(brew --prefix coreutils)/libexec/gnubin $path) /code/pre  <answer110215> First, you don't want to remove the any of the command line tools that apple provides unless you want an unstable / unusable system. However in traditional Unix/Linux fashion you can set up your path statement to check code/usr/local/bin/code first, thus utilities installed there (default for homebrew) will be used before code/usr/bin/code (or code/bin/code). The remaining issue is in shell scripts - you must be explicit since they may ignore your $PATH.  <comment129849> doesn't this just say `brew install everything from now on in 'coreutils'`  That's not really what I want.  I want some that says `include everything in '/usr/bin' EXCEPT for this list of files` <comment129851> @AlexejMagura Adding `$(brew --prefix coreutils)/libexec/gnubin` to *your existing path* will mean that any GNU tool will replace the relevant tool found in /usr/bin. If it doesn't exist in GNU's bin, it will use /usr/bin. <comment129853> doesn't seem to work.  Adding that to the path doesn't do anything, even if I add it after `$path`. <comment129854> @AlexejMagura Adding it after your current path (i.e. $PATH) definitely won't work - it searches in the order given in your $PATH, so the GNU bin must be either the very first entry in $PATH, or at least before any location that you are attempting to override.