Set Computer to Sleep Mode for Specific Amount of Time from CLI <body> This terminal command sets the computer to sleep mode:  precodeosascript -e 'tell application "Finder" to sleep' /code/pre  How can I make the computer sleep for a specific amount of time, say 20 minutes? Do I need to issue a separate command to wake the computer up at a specific time?  Thanks  <answer235869> Here is a embash script/em that when run, without an argument, schedules the system to wake in 20 minutes and then puts it to sleep immediately. Or you can supply, as an argument, the number of minutes you want it to sleep before it wakes the system. Unfortunately the OS X command line utility codepmset/code, which does the wake scheduling and sleeping, requires elevated privileges. Meaning the command must be run using codesudo/code as shown in the example output below.  In the example below, the emscript/em was saved as codesleepwake/code and then in Terminal made executable using codechmod u+x sleepwake/code, then run just as codesleepwake/code to show the internal help message. (Note: The current working directory I'm in is in my code$PATH/code. See Examples Note:, further below, for additional information.)  precode$ sleepwake    This script must be run as root using sudo.    Syntax:  sudo sleepwake [n]   Example: sudo sleepwake 10   Wakes the system 10 minutes after going to sleep.    Example: sudo sleepwake   Wakes the system, using the default, 20 minutes after going to sleep.  $   /code/pre  strongCreating codesleepwake/code:/strong  In a Terminal, type the following, pressing Enter after each command:  precodetouch sleepwake open sleepwake /code/pre  Copy and paste the emcode/em below into the opened, blank, document.  strongCode:/strong  precode#!/bin/bash  if [[ $EUID -ne 0 ]]; then    printf "\n  This script must be run as root using sudo.\n\n"    printf "  Syntax:  sudo sleepwake [n]\n  Example: sudo sleepwake 10\n"    printf "  Wakes the system 10 minutes after going to sleep.\n\n"    printf "  Example: sudo sleepwake\n"    printf "  Wakes the system, using the default, 20 minutes after going to sleep.\n\n"    exit 1 else             # If no argument (number of minutes) was passed.      if [[ -z $1 ]]; then             # Default number of minutes to sleep.         m="20"     else             # Number of minutes to sleep given from command line.         m="$1"     fi         # Do the math and set date time format to         # what 'pmset schedule wake' requires.      e="$(date -j -f "%a %b %d %T %Z %Y" "$(date)" "+%s")"     ((o=60*$m))     ((e+=o))     t="$(date -r $e "+%m/%d/%Y %H:%M:%S")"          # Schedule the 'wake' date time and sleep the system.      pmset schedule wake "$t"     pmset sleepnow          # Revoke elevated privileges from this Terminal session.      sudo -k  fi /code/pre  Now save the document, then close it.  In Terminal, make the embash script/em executable:  precodechmod u+x sleepwake /code/pre  Execute the codesleepwake/code command without using codesudo/code, to see that the internal help displays.  Then test it for a minute with the following command:  precodesudo sleepwake 1 /code/pre  Type in your password when prompted, and press Enter.  The system will now sleep for one minute.  hr  strongExamples Note:/strong The examples assume that codesleep wake/code is saved in a directory that is in the code$PATH/code, otherwise if not and it's in the current directory then use codesudo ./sleepwake/code, or not in the code$PATH/code or current directory, then use codesudo /path/to/sleepwake/code.  hr  img src="https://i.stack.imgur.com/hSk8T.png" alt="enter image description here"  strongAdditional Notes:/strong  The code# Do the math.../code comment in the script means the code block directly below it converts the current emdate time/em to seconds since Epoch, in order to add the number of seconds in minutes to sleep to the current emdate time/em, and then convert back in order to then have a emdate time/em in the format that codepmset schedule wake/code requires and this will be the emdate time/em codex/code number of minutes from now, being the emdate time/em of execution, incremented either the default 20 minutes or the number of minutes passed as an argument on the command line. Wow! :)  Once the emdate time/em to wake has been scheduled and the system put to sleep, it can be woken ahead of schedule if you need to access the system before the scheduled wake emdate time/em by the usual means, clicking the mouse or using the keyboard, etc.  For additional information about codepmset/code, see it's man page.  <comment288624> I updated the script to add `sudo -k` to revoke elevated privileges from the Terminal session.  The fact that the system is going to sleep for a while it probably really isn't necessary as the sudo session will time out in that Terminal before the system awoke if it's sleeps for 10 minutes.  However I normally like having it there as it's a good practice in general as once the `pmset` command are executed there is no need for elevated privileges to remain in that Terminal session.