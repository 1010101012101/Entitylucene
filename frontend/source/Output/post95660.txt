How to fix 403 in Mac OS X built-in Apache? <body> I'm trying to set a local environment on my new MacBook Air 13": built-in Apache with my own codeDocumentRoot/code, PHP, and MySQL. I usually update code/etc/hosts/code just to run my local websites with a pretty permalink: codelocal/example/code. For references, I usually check:  ul liHow to turn Mac OS X Lion into a web server?/li liEnabling Apache in Mac OS X Mountaion Lion/li liApache permissions/li /ul  This time I'm simply getting a em403 Forbidden/em error every time I hit code127.0.0.1/code, codelocalhost/code, or codelocal/code. First I saw through the terminal that both Apache and PHP are running (even though I can't view PHP pages); then I updated all permissions according to Apache permissions; now I'm just desperate. Here are the relevant Apache configs:  ul licode/etc/hosts/code (view file — added one line)/li licode/etc/apache2/httpd.conf/code (view file — updated the codeDocumentRoot/code)/li licode/etc/apache2/users/joao.conf/code (view file — created this file)/li licode/etc/apache2/extra/httpd-vhosts.conf/code (view file — updated codeVirtualHost/code)/li /ul  It looks like Apache is somehow denying me access to my codeDocumentRoot/code (which by the way is code~/Sites/code). Because code~/Sites/code is actually a symlink, I then tried to update codeDocumentRoot/code with the following paths (all pointing to the same directory):  ul licode~/Sites/code/li licode/Users/joao/Sites/code/li licode/Users/joao/Dropbox/Workflow/Sites/code (the emoriginal/em directory)/li /ul  Still throwing em403/em. Any ideas how to fix/debug this?  strongQuick update/strong — here's what my code/var/log/apache2/joao.pt-error_log/code looks like:  precode[Sun Jul 07 12:50:45 2013] [error] [client 127.0.0.1] (13)Permission denied: access to / denied [Sun Jul 07 12:50:45 2013] [error] [client 127.0.0.1] (13)Permission denied: access to /favicon.ico denied [Sun Jul 07 12:50:45 2013] [error] [client 127.0.0.1] (13)Permission denied: access to /favicon.ico denied [Sun Jul 07 12:50:45 2013] [error] [client 127.0.0.1] (13)Permission denied: access to /favicon.ico denied [Sun Jul 07 12:50:47 2013] [error] [client ::1] (13)Permission denied: access to / denied [Sun Jul 07 12:50:47 2013] [error] [client ::1] (13)Permission denied: access to / denied [Sun Jul 07 12:50:48 2013] [error] [client ::1] (13)Permission denied: access to /favicon.ico denied [Sun Jul 07 12:50:48 2013] [error] [client ::1] (13)Permission denied: access to /favicon.ico denied /code/pre  <answer95779> I just solved my issue by setting permissions not only to the codeDocumentRoot/code directory, but also to all its parent directories. This is how I did it.     h3(13) Permission Denied/h3      Error 13 indicates a filesystem permissions problem. That is, Apache was denied access to a file or directory due to incorrect permissions. It does not, in general, imply a problem in the Apache configuration files.      In order to serve files, Apache must have the proper permission granted by the operating system to access those files. In particular, the User or Group specified in httpd.conf must be able to read all files that will be served and search the directory containing those files, along with all parent directories up to the root of the filesystem.      Typical permissions on a unix-like system for resources not owned by the User or Group specified in httpd.conf would be 644 -rw-r--r-- for ordinary files and 755 drwxr-x-r-x for directories or CGI scripts. You may also need to check extended permissions (such as SELinux permissions) on operating systems that support them.      If you are running 2.4, the AH error code may give you more information here.      ul   liAH00132: file permissions deny server access/li   liAH00035: access denied because search permissions are missing on a component of the path   An Example/li   /ul      Lets say that you received the Permission Denied error when accessing the file /usr/local/apache2/htdocs/foo/bar.html on a unix-like system.      First check the existing permissions on the file:   precodecd /usr/local/apache2/htdocs/foo ls -l bar.htm /code/pre     Fix them if necessary:   precodechmod 644 bar.html /code/pre     Then do the same for the directory and each parent directory (/usr/local/apache2/htdocs/foo, /usr/local/apache2/htdocs, /usr/local/apache2, /usr/local, /usr):   precodels -la chmod +x . cd .. # repeat up to the root /code/pre     On some systems, the utility namei can be used to help find permissions problems by listing the permissions along each component of the path:      namei -m /usr/local/apache2/htdocs/foo/bar.html   If your system doesn't have namei, you can use parsepath. It can be obtained from here.      If all the standard permissions are correct and you still get a Permission Denied error, you should check for extended-permissions. For example you can use the command setenforce 0 to turn off SELinux and check to see if the problem goes away. If so, ls -alZ can be used to view SELinux permission and chcon to fix them.      In rare cases, this can be caused by other issues, such as a file permissions problem elsewhere in your apache2.conf file. For example, a WSGIScriptAlias directive not mapping to an actual file. The error message may not be accurate about which file was unreadable.      DO NOT set files or directories to mode 777, even "just to test", even if "it's just a test server". The purpose of a test server is to get things right in a safe environment, not to get away with doing it wrong. All it will tell you is if the problem is with files that actually exist.      h3CGI scripts/h3      Although the CGI script permission might look correct, the actual binary specified in the shebang might not have the proper permissions to be run. (Or some directory on its path, check with namei as explained above.)      h3(13)Permission denied: proxy: HTTP: attempt to connect to 127.0.0.1:8080 (localhost) failed/h3      This error is not really about file permissions or anything like that. What it actually means is that httpd has been denied permission to connect to that IP address and port.      The most common cause of this is SELinux not permitting httpd to make network connections.      To resolve it, you need to change an SELinux boolean value (which will automatically persist across reboots). You may also want to restart httpd to reset the proxy worker, although this isn't strictly required.      code# setsebool -P httpd_can_network_connect 1/code   <answer120831> I was using ACL's to set permissions, following the instructions in "How to Set File and Directory Permissions for Apache on Mac OS X", but still getting:  precode[Wed Feb 12 15:43:51 2014] [error] [client ::1] (13)Permission denied: access to /trace/trace.php denied (filesystem path '/Library/WebServer/Documents/trace/trace.php') because search permissions are missing on a component of the path /code/pre  Then I read "(13) Permission Denied" (linked to in João Ramos's answer) and tried adding "execute" to the ACL. That worked.  <answer136941> I have an alias specified in OSX server pointing to a user directory. I spent a long while chmodding and messing with _www user, adding executable permissions recursively, uninstalling macports and all sorts of stuff trying to get this to work. No idea why it wasn't working.  Eventually, strongI just checked the "shared folder" checkbox in the Finder for that folder, and it worked/strong, on the specified domain, with php active, the way I wanted it to. :/ ...so that was easy.  <answer141298> I generally fix this by setting the Apache user to myself in local environments and in machines where the only user who uses Apache is me. In code/private/etc/apache2/httpd.conf/code, set codeUser/code to your username from code_www/code, e.g.:  precodeUser _www /code/pre  -  precodeUser joao /code/pre  And then restart Apache:  precode$ sudo apachectl restart /code/pre  Additional steps:  ol liIf you have active sessions, they are going to give permission errors since they are still owned by code_www/code. Own them:  precode$ sudo chown joao: /var/tmp/sess_* /code/pre/li /ol  h3Implications:/h3  After this, Apache (and PHP et al.) will run as you and will gain read/write permission to all of the files you have read/write permission. But since this is just a local development environment, that shouldn't be a problem unless you have no rules to block Apache in your firewall emand/em let questionable files like file explorers, shells, scripts that may contain vulnerabilities run under Apache; in which case anyone including your public wifi neighbor in a cafe can enter codehttp://&lt;your IP&gt;/code and do whatever those scripts let them to do.  In fact, you should prevent this regardless of the scripts you run or even if you don't set Apache user to yourself since you probably don't want random outsiders to be able to see the contents of your codelocalhost/code.  strongPrevention:/strong  ol liMake Apache listen only to localhost. Again, in codehttpd.conf/code:  precodeListen 80 /code/pre  -  precodeListen 127.0.0.1:80 /code/pre  And restart Apache again:  precode$ sudo apachectl restart /code/pre/li liDisable Apache in the application firewall (note that you may have already disabled it if you clicked codeDeny/code if/when it was asked during the first time you run Apache):  ol liOpen codeSystem Preferences/code » codeSecurity &amp; Privacy/code » codeFirewall/code./li liClick the lock icon to the lower left and enter your password if needed./li liTurn the firewall on if it's disabled./li liClick codeFirewall Options/code./li liClick the code+/code button./li liHit kbdcmd ⌘/kbd + kbd⇧ shift/kbd + kbdG/kbd and enter code/usr/sbin/httpd/code and click codeAdd/code (If codehttpd/code doesn't show up there, you can look for it in the terminal by codewhich httpd/code)/li liIn the list click codehttpd/code and select codeBlock incoming connections/code./li liHit codeOK/code./li liReload the firewall:  precode$ launchctl unload /System/Library/LaunchAgents/com.apple.alf.useragent.plist $ sudo launchctl unload /System/Library/LaunchDaemons/com.apple.alf.agent.plist $ launchctl load /System/Library/LaunchAgents/com.apple.alf.useragent.plist $ sudo launchctl load /System/Library/LaunchDaemons/com.apple.alf.agent.plist /code/pre/li /ol/li liRestrict PHP to the document root. In codephp.ini/code:  precodeopen_basedir = /Users/joao/Sites/:/var/tmp/ /code/pre  (code/var/tmp//code is for sessions)/li /ol  Use all three solutions to secure yourself in case one of them gets disabled for some reason.  sub- Note that as my active language in my machine is not English right know, wording might be a little different (Menu options and wording can be different regardless of the language in various OS X versions)./sub  sub- Lines starting with code$/code need to be entered in command line (Terminal or iTerm etc), with the code$/code removed./sub  <answer271178> I update to strongmacOSS Sierra/strong, Version strong10.12/strong  I face the same issue, I did two things to fix it properly. Following is my approaches.   strong1)/strong Please check "strong/private/etc/apache2/extra/httpd-userdir.conf/strong" file. Change   precode#Include /private/etc/apache2/users/*.conf /code/pre  to   precodeInclude /private/etc/apache2/users/*.conf /code/pre  strong2)**And edit  your "/strong/etc/apache2/httpd.conf"  change   precodeOptions FollowSymLinks Multiviews /code/pre  to   precodeOptions FollowSymLinks Multiviews Indexes /code/pre  finally your doc root will be look like the following,    precodeDocumentRoot "/Library/WebServer/Documents" &lt;Directory "/Library/WebServer/Documents"&gt; Options FollowSymLinks Multiviews Indexes MultiviewsMatch Any AllowOverride All Require all granted /code/pre   strong3)/strong Restart apache  precodesudo apachectl restart /code/pre  Still  you facing the problem, Kindly check How to Set up Apache in macOS Sierra 10.12  <comment162610> Could you summarize the basic points in your answer? Thanks! <comment191181> Granting access to all its parent directory would be a **huge** security infringement! <comment276095> This answer is not useful. The workaround works for linux machines / configurations. OSX has a different directory structure, specially for apache (located in /Library/WebServer) the solution given is not for OSx, as the apple.stackexchange does. <comment369564> Thank you, you save my life.