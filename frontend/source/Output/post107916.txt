How to store new iWork (2013) documents in a flat file (for version control)? <body> With the October 2013 iWork update, the new UI is great but it seems one cannot store documents as 'flat file' any more. This really limits my ability to store the files, essentially ruling self-hosted version control (git, hg etc.) out of the picture.  The problem is:   ul liadding a new picture to a document creates a new file within the bundle, which should be explicitly added to the version control/li liremoving pictures removes them from the bundle but - again - version control should be notified./li /ul  I tried the trick of zipping the bundle and renaming it back to '.pages' (the way iWork'09 handled flat files) but it does not work.  Has anyone else been bit by this - do you have work-arounds (other than using iCloud, Dropbox - I'm fine with some of the documents living there but for some others I'd like to keep closer to my chest)?  Workarounds can be either on the iWork side, or ways that I get i.e. 'hg' (Mercurial) to version the bundle directories nicely.  strongAddendum/strong  As the SO item says, I solved this by codehg addremove/code. Other suggestions and discussion are still welcome. :)  <answer110010> Using git, I noticed that it just works as expected:   A codegit status/code gives me a handy list of the files to be added inside the presentation bundle.   With the shortcut codegit add -A/code you can add all of them in one go. I find this a very small inconvenience, if at all.  <answer114511> Export to the prior format; it’ll be a flat file, not a package.  <answer126997> The tool keynote-to-text gives a textual representation of a code.key/code file. You can register it as the text converter for a Keynote file by adding to code.gitconfig/code:  precode[diff "keynote"]   binary = true   textconv = /PATH/TO/KEYNOTE/keynote-to-text  /code/pre  And code.gitattributes/code:  precode*.key diff=keynote /code/pre  Then codegit diff/code provides useful output:  img src="https://github.com/robertoaloi/keynote-to-text/raw/master/screenshots/riak-diffs.png" alt=""  <comment126570> There's a related discussion from the version control point of view here: http://stackoverflow.com/questions/27027/best-approaches-to-versioning-mac-bundle-files/ <comment126608> Are there any specific reasons why you would not consider the built-in `Versions` feature of OS X and prefer Hg or Git? Seems like it would be simple to just manage it through OS X. <comment126626> I'm using Mercurial for software development and am just familiar with keeping files 'in the repo'. By 'Versions' you mean the OS X Time Machine feature, right? (deals with undoing changes but not in syncing files between computers). <comment130463> Plus, with packaged files, it seriously screws up when you try to sync with Dropbox and Google Drive! <comment130571> You are right. Also 'git commit -a' (if I recall right) does the same. <comment130572> So, I presure (being the original author) that we're fine with not having an option but always storing stuff as 'bundles' (i.e. directories on the file system level). I was wrong - it just took a little time to find suitable ways to cope with it. <comment134188> True, but then in your git commit history you end up with a bunch of changes to a bunch of files that mean nothing to you — rather than an atomic change to the deck file, which is what you really want. <comment134310> Theoretically, your suggestion would work, but the export would be needed to be repeated each time a file is changed (and it would slow down opening). Thus, I won't do so. I've grown to be okay with the directory-based new format. 'hg addremove' is enough to take the pain away from having .pages (or .numbers, .keynote) files in a repository. <comment148774> Didn't know git can do such! There's many good answers to the question, depending on the needs of people. I haven't tested this one, but for elegance you get the Vote!