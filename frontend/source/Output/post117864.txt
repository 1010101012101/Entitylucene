How can I tell if my Mac is keeping the clock updated properly? <body> I would like to know what the default settings for OS X are in terms of keeping the clock adjusted when I enable automatic time sync in the Date &amp; Time preference.  I do know that the venerable codentpd/code daemon on Mavericks (10.9) and Yosemite (10.10) is no longer responsible for adjusting the time and instead a new program codepacemaker/code has been introduced — so how can I know things are working or need adjustment to keep time?  <answer117865> codepacemaker/code is the new daemon responsible for managing the time in OS X. It uses codeadjtime/code to adjust the clock per the content of code/var/db/ntp.drift/code.  You can see how 'off' your clock is by looking at the contents of codentp.drift/code — for example, my file contains the following:  precode-23.640 /code/pre  This means that the clock is -23.64 PPM away from the time that it should be. The units of this number is PPM, or Parts Per Million. 1 PPM is 1 microsecond/second, or 3.6ms/h.  You can make the clock update more often by running codepacemaker/code with the code-a/code option, providing a time in seconds to wait between time movements:  precode/usr/libexec/pacemaker -a 10 /code/pre  To see the parameters being used by OS X for pacemaker, open code/System/Library/LaunchDaemons/com.apple.pacemaker.plist/code.  precode{     KeepAlive = { PathState = { "/private/var/db/ntp.drift" = :true; }; };     Label = "com.apple.pacemaker";     ProgramArguments = ( "/usr/libexec/pacemaker", "-b", "-e", "0.0001", "-a", "10" ); } /code/pre  To find your current settings, run with the code-i/code option:  precode/usr/libexec/pacemaker -i Jan 19 18:20:08 g pacemaker[12544] &lt;Info&gt;: --- settings for external power --- Jan 19 18:20:08 g pacemaker[12544] &lt;Info&gt;: interval = 1 seconds, tolerance = 0.000000, drift = -23.640000 Jan 19 18:20:08 g pacemaker[12544] &lt;Info&gt;: --- settings for internal power --- Jan 19 18:20:08 g pacemaker[12544] &lt;Info&gt;: interval = 1 seconds, tolerance = 0.000024, drift = -23.640000 /code/pre  You can show the log by running with the code-v/code option:  precodesudo /usr/libexec/pacemaker -v Password: Jan 19 18:23:17 g pacemaker[13202] &lt;Info&gt;: power status check: using external power Jan 19 18:23:17 g pacemaker[13202] &lt;Info&gt;: created file monitor for /var/db/ntp.drift Jan 19 18:23:17 g pacemaker[13202] &lt;Info&gt;: interval = 1 seconds, tolerance = 0.000000, drift = -23.640000 Jan 19 18:23:19 g pacemaker[13202] &lt;Debug&gt;: drift -23.640000 residue 0.000000 delta -23 Jan 19 18:23:20 g pacemaker[13202] &lt;Debug&gt;: drift -23.640000 residue -0.640000 delta -24 Jan 19 18:23:21 g pacemaker[13202] &lt;Debug&gt;: drift -23.640000 residue -0.280000 delta -23 Jan 19 18:23:22 g pacemaker[13202] &lt;Debug&gt;: drift -23.640000 residue -0.920000 delta -24 Jan 19 18:23:23 g pacemaker[13202] &lt;Debug&gt;: drift -23.640000 residue -0.560000 delta -24 Jan 19 18:23:24 g pacemaker[13202] &lt;Debug&gt;: drift -23.640000 residue -0.200000 delta -23 ⌃C% /code/pre  <answer117866> The first step is to see if your time is set up.  precodeMac:~ me$ ntpq -p      remote           refid      st t when poll reach   delay   offset  jitter ============================================================================== *time.apple.com  17.168.198.149   2 u 1046  512   37   58.475    9.477   3.674 /code/pre  Assuming you have delay/offset/jitter values less than 100 (delay could be less than 1000 in normal situations for less time-accurate-critical systems), the next command to run in terminal is codentpq/code followed by the timeserver from your codentpq/code and system preference. You can also test other time servers to see if they have lower delays since the timekeeping system likes to have a close, fast response from time servers when correcting the time for millisecond differences and calculating how the current hardware clock is drifting away from the standard time.  precodeMac:~ me$ ntpdate -q time.apple.com server 17.151.16.12, stratum 2, offset 0.081698, delay 0.11237 server 17.151.16.20, stratum 2, offset 0.081365, delay 0.11310 server 17.151.16.21, stratum 2, offset 0.082754, delay 0.11440 server 17.151.16.22, stratum 2, offset 0.081750, delay 0.11264 server 17.151.16.23, stratum 2, offset 0.082691, delay 0.11415 server 17.151.16.38, stratum 2, offset 0.082077, delay 0.11458 server 17.171.4.13, stratum 2, offset 0.084822, delay 0.08054 server 17.171.4.14, stratum 2, offset 0.083749, delay 0.08142 server 17.171.4.15, stratum 2, offset 0.086343, delay 0.07605 server 17.171.4.33, stratum 2, offset 0.086526, delay 0.07690 server 17.171.4.34, stratum 2, offset 0.084500, delay 0.07997 server 17.171.4.35, stratum 2, offset 0.083987, delay 0.08278 server 17.171.4.36, stratum 2, offset 0.084382, delay 0.08028 server 17.171.4.37, stratum 2, offset 0.085948, delay 0.07831 server 17.151.16.14, stratum 2, offset 0.082043, delay 0.11270 19 Jan 12:09:32 ntpdate[4592]: adjust time server 17.171.4.15 offset 0.086343 sec Mac:~ me$ ntpq ntpq&gt; assoc  ind assid status  conf reach auth condition  last_event cnt ===========================================================   1 57788  9014   yes   yes  none    reject   reachable  1 ntpq&gt; peer      remote           refid      st t when poll reach   delay   offset  jitter ==============================================================================  time.apple.com  17.168.198.148   2 u  729  512    1  133.274   51.653 371.362 ntpq&gt; q /code/pre  The next thing to check is your pacemaker program:  precodeMac:~ me$ ps -ef|grep [p]acemaker 0    76     1   0 Fri08AM ??         0:03.64 /usr/libexec/pacemaker -b -e 0.0001 -a 10 /code/pre  This shows that on battery, the adjust interval is no more than once every 10 seconds and adjusting even less if the clock error is less than 0.1 millisecond.  If you find that your offset is seconds or more, you might want to change the timeservers you use or perhaps change the values used on pacemaker to use more energy and CPU but have a clock closer to the true time in exchange for the settings Apple has shipped with 10.9.  ul liHow can I keep my system clock in sync under Mavericks?/li lintpd not updating time/li lintpd: consistently incorrect time on mid-2013 MacBook Air/li /ul  <answer204623> If you go to http://time.gov you can see the official time (up to the second) and use that to verify if your system time is correct or not. Note that this is the official NIST time, and does its own synchronization in the browser, independently of the system time (as an example, you can see here that time.gov handles leap seconds, whereas OS X apparently does not).   <comment137591> Excellent information on how to change `pacemaker` settings. I wonder if people with bad sync have anything in common - perhaps no ntp.drift file or odd delays or just that the configuration file is cranky when you choose to override the Apple-default time servers in euro / asia / US. <comment137604> Also, is it save to run a second pacemaker or did you skip a step on how to shut it down (and keep it from respawning) while you run pacemaker in verbose mode interactively)? <comment137608> @bmike It's perfectly safe to run both at the same time. <comment164958> pacemaker still needs to check a drift wrt ntp time server(s) somewhere. According to Apple's pacemaker man page it "normally" uses ntpd to compute the drift. So I presume adding at least two more time servers to the single default one in /etc/ntp.conf. (Just one is a single point of failure; two gets ntpd confused; three or more allows ntpd to make a better decision.) <comment167823> [correction?] I believe the drift file contains the error in PPM of the clock frequency, not time. <comment246861> Could you elaborate how this affects my choice to use "keep the clock synchronized" I suppose this is as good an answer as "check your Apple Watch - it's accurate up to the second." <comment247019> The question is "how can I tell if my Mac is keeping my clock updated properly?" If "look at the official time" doesn't answer your question, you should probably rephrase it. <comment247021> Regarding time.gov, it's the *official* NIST time, and does its own synchronization in the browser when you visit the page. Saying "check an Apple Watch" would be the same as just telling you that your OS X system clock is already synchronized by default (which is true, but doesn't really answer the question). This is also much cheaper than an Apple Watch, and the Apple Watch doesn't have a digital second display AFAIK. <comment247026> My supposition was the watch has more engineering to keep the time both accurate and precise. Mac clocks are notoriously over precise and under accurate. The same goes for any computer I'm aware of - accuracy is hard for timekeeping. +1 for the detailed explanation of the web features. (Even if it's not in the body of the answer)