Make Mac OS X "Option-Arrow" work like Windows "Ctrl-Arrow" <body> I rely on the "kbdCtrl/kbd-kbd&rarr;/kbd" command on Windows to navigate my way through text documents.   This useful key-combo will quickly bring me to the embeginning/em of the next word. For example, the following sequence illustrates what would happen to the cursor location after successive presses of kbdCtrl/kbd-kbd&rarr;/kbd (the "^" will represent the cursor):  precode^The quick brown fox jumped over the lazy dog The ^quick brown fox jumped over the lazy dog The quick ^brown fox jumped over the lazy dog The quick brown ^fox jumped over the lazy dog The quick brown fox ^jumped over the lazy dog ... /code/pre  And, if I start pressing the kbd&larr;/kbd instead, it will move the cursor to the exact same spots in the document, just going the other direction (which is ideal because the position of the cursor is predictable, which leads to me being faster at making my edits):   precodeThe quick brown fox ^jumped over the lazy dog The quick brown ^fox jumped over the lazy dog The quick ^brown fox jumped over the lazy dog The ^quick brown fox jumped over the lazy dog ^The quick brown fox jumped over the lazy dog ... /code/pre  Mac OS X has a similar keyboard shortcut (kbdOption/kbd-kbd&rarr;/kbd - I mapped "kbdCtrl/kbd" to "kbdOption/kbd" specifically so I could get this same functionality in the way I've become accustomed to).   However, "kbdOption/kbd-kbdArrow/kbd" brings me to the emend/em of the current word when using the right arrow key, as illustrated here:  precode^The quick brown fox jumped over the lazy dog The^ quick brown fox jumped over the lazy dog The quick^ brown fox jumped over the lazy dog The quick brown^ fox jumped over the lazy dog The quick brown fox^ jumped over the lazy dog ... /code/pre  And, what's worse, going the other direction doesn't bring you back to the same spot as moving forward, it brings you to the start of the last word:   precodeThe quick brown fox^ jumped over the lazy dog The quick brown ^fox jumped over the lazy dog The quick ^brown fox jumped over the lazy dog The ^quick brown fox jumped over the lazy dog ^The quick brown fox jumped over the lazy dog ... /code/pre  This is extremely frustrating for me, as I need to switch between Windows and Mac often, and very rarely do I want to go to the end of the current word (why would I want that, unless I'm holding "kbdShift/kbd" as well?). I emalways/em want to skip to the beginning of the next word.   I'm willing to go to some lengths to make the Mac version work the same way (purchase software, write a custom Applescript command tied to these keyboard shortcuts), so I'm looking for suggestions.   Are there any existing tools that will change this for me?   How would you suggest "fixing" it?  Thanks  strongEDIT/strong  I was able to make a "Service" in Automator, and used the following AppleScript:   precodeon run {input, parameters}      tell application "System Events" to key code 124 using {option down}     tell application "System Events" to key code 124  end run /code/pre  Then I tied this Service to the "kbdCommand/kbd-kbd&rarr;/kbd" keystroke using the "Keyboard" settings in System Preferences.  However, for this to work I have to take my finger off the kbdCommand/kbd key.. which makes it sorta pointless. It's also slow, and don't seem to work in the application I most need it to work in (Xcode).  <answer22677> Things you might try. I have not tested these to see if they will perform the function you need.  There's a free, open-source utility for remapping key commands for Mac OS X called DoubleCommand. It's a kernel extension so it works at a very low level.  Another free program that the DoubleCommand people recommend that you check out is KeyRemap4MacBook. You need to use one or the other; they'll conflict if they are both installed on your Mac.   <answer22680> Here's how you can get kbd⌃ Control/kbd+arrow keys to work like you describe. Copy the following property list into code~/Library/KeyBindings/DefaultKeyBinding.dict/code (you can create the directory if it doesn't already exist):  precode{     "^\UF703" = ("moveWordForward:", "moveWordForward:", "moveWordBackward:");     "^$\UF703" = ("moveWordForwardAndModifySelection:", "moveWordForwardAndModifySelection:", "moveWordBackwardAndModifySelection:"); } /code/pre  This will set up kbd⌃ Control/kbd+arrow to navigate to the beginning of the next word (by using OS X's normal navigation three times: to the end of the current word, end of the next word, then back to the beginning of the next word). I also included a version that works with kbd⇧ Shift/kbd so you can select text as you go.  Caveat: this will only work in Cocoa apps, but I think the normal kbd⌥ Option/kbd+arrow navigation does too. Also, make sure to relaunch your apps!  <answer209557> After years of the annoying OSX default mappings I switched my Command and Control keys and wanted the Control + Arrow keys to provide move-word-forward, move-word-backward functionality instead of BOL / EOL. The accepted answer worked for me except with ^ changed to @ since I now use Control instead of Command.  I also mapped the lesser used BOL / EOL functions to the Option + Arrow key combinations.  precode{     "@\UF702" = ("moveWordBackward:");     "@$\UF702" = ("moveWordBackwardAndModifySelection:");     "~\UF702" = ("moveToBeginningOfLine:");     "~$\UF702" = ("moveToBeginningOfLineAndModifySelection:");     "@\UF703" = ("moveWordForward:", "moveWordForward:", "moveWordBackward:");     "@$\UF703" = ("moveWordForwardAndModifySelection:", "moveWordForwardAndModifySelection:", "moveWordBackwardAndModifySelection:");         "~\UF703" = ("moveToEndOfLine:");     "~$\UF703" = ("moveToEndOfLineAndModifySelection:"); } /code/pre  <comment25277> Awesome feedback, thanks. <comment25278> Whoot! Just what I was hoping for... thank you! Let me try it then I'll mark the answer. <comment25279> Thanks so much! Worked like a charm. FYI "Key Bindings" vs "KeyBindings"... I used "KeyBindings" and it worked. Not sure if it makes a difference.  Too bad Xcode overrides these with their own, less powerful, Key Bindings. <comment25280> Whoops, yes, I meant KeyBindings! Xcode's are kind of nice because you can navigate camelCase subwords. <comment25281> I do like the camelCase nav. Ideally, I'd like Visual Studio's behavior in Xcode... oh well. <comment25282> You can, at least, customize Xcode's. There's a tab in the Preferences for changing the key bindings. <comment25284> Yes, but I can only use their original actions... I can't do anything cool like you did where I can associate multiple actions, chained together, to a single key combo... unless I'm missing something? (I hope I am!) <comment25285> No, you're unfortunately correct, as far as I can tell. However you might be able to use the DefaultKeyBindings.dict to set up more shortcuts to activate some of Xcode's custom actions... (you might be able to find out what these are using [class-dump](http://www.codethecode.com/projects/class-dump/)) <comment25286> http://stackoverflow.com/questions/5626788/custom-key-bindings-xcode-4 <comment347305> Using **KeyRemap4MacBook** on OS X 10.11.x to make **Control** + **[Arrow]** work like in Windows scroll down until you find **For PC Users** and then check (for me, option six) "Use PC Style Control+Up/Down/Left/Right". There are other very useful options in there. Definitely up-voting this answer and on top of that it didn't cost an extra hundred of dollars!