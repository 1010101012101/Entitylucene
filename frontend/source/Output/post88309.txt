Find and remove all photos below a certain size threshhold <body> So, I had a relative's hard drive collapse, and I've used photorec to look for the most obvious files to retain (fortunately they only had pictures on the computer, everything else was cloud-synced, such as email) so I now have a parent-folder with 208 subfolders of all the PNG and JPG files from the old drive. Obviously a lot will be either "OS and Application images" (toolbars, sample images, thumbnails, system caches) and some will be "family photos".  If I can find some way to find all below a certain size (preferably say 300px wide) then sorting the rest emshould/em sup*/sup be easy.   How can I use iPhoto or Spotlight or emsomething/em to do this automatically? I'm also open to scripts using easily installed (brew perhaps?) libraries, if a script of some sort can be pointed to.  sup*/sup subfamous last words/sub  <answer88314> You can use the terminal to do this. The following command should work:  precodefind /path/to/the/folder \   -name "*.jpg" \   -exec bash -c "sips -g pixelHeight -g pixelWidth {} | grep -E ' [12]?[0-9]{0,2}$' &gt;/dev/null" \;\   -print  /code/pre  That command will find all JPEG files under code/path/to/the/folder/code which have a width or a height of between 1 and 299 pixels.  Replace code/path/to/the/folder/code with the actual path to your folder.  You can change code"*.jpg"/code to code"*.gif"/code to find GIF files instead.  You can change code[12]?[0-9]{0,2}/code to change the size of the pictures you wish to locate. For example, to find pictures smaller than 500 pixels, use code[1234]?[0-9]{0,2}/code  If you want to review which pictures this command finds, use:  precodefind /path/to/the/folder \   -name "*.jpg" \   -exec bash -c "sips -g pixelHeight -g pixelWidth {} | grep -E ' [12]?[0-9]{0,2}$' &gt;/dev/null" \; \   -exec mv {} /path/to/some/other/folder \;  /code/pre  Replace codepath/to/some/other/folder/code with the folder you want the files moved to, and that command will move the files it finds there.  hr  The way this works is as follows:  The codesips/code command is the emscriptable image processing system/em. The terminal command codesips -g pixelHeight -g pixelWidth some.jpg/code will print out the width and height of the JPEG file.  The codefind/code command, as one might expect, finds files. code-exec/code passed to find tells codefind/code to execute the specified command and only return files for which the command returns a successful result.  The command codebash -c "sips -g pixelHeight -g pixelWidth {} | grep -E ' [12]?[0-9]{0,2}$'/code invokes a shell, runs codesips/code to get the image size, and then runs codegrep/code, which searches text, asking codegrep/code to search for either a code1/code or a code2/code followed by between zero and two digits (code0/code through code9/code). This is a emregular expression/em, and it matches the numbers (strings) code1/code through code299/code  <answer95412> In Aperture you can do this. And More!  h1Step 1/h1  ol liImport all files into Aperture./li liUse list view./li liClick on an image size criteria to sort by that criteria. Note codepixel dimension/code is probably the best method to use./li liSelect all files below your minimum size./li liDelete/li /ol  h1Now for step 2 assuming these are family photos./h1  ol liTurn on face recognition in Aperture, assign names to all recognizable faces./li liWait until library has been processed.This may take a while depending on number of files./li liNow you can sort by face. (perhaps create a smart album for each face)/li liSelect all photos containing a particular face./li liBatch change metadata (kbdshift/kbd + kbdcmd/kbd + kbdb/kbd), add a suitable keyword for each face./li /ol  Now you can export your files into suitable folders depending on who is in each folder. Plus a folder of files with no one in them. 