How to install recent clang++ with Homebrew? <body> I've tried  precodebrew install llvm /code/pre  but after that I cannot find any codeclang++*/code executable under code/usr/local/code.  Thus my question: How to get clang++ via Homebrew?  <answer227053> You have to install it with code--with-clang/code option:  precode$ brew install --with-clang llvm ==&gt; Installing dependencies for llvm: cmake ==&gt; Installing llvm dependency: cmake ==&gt; Downloading https://homebrew.bintray.com/bottles/cmake-3.4.3.el_capitan.bottle.tar.gz ######################################################################## 100.0% ==&gt; Pouring cmake-3.4.3.el_capitan.bottle.tar.gz ==&gt; Caveats Emacs Lisp files have been installed to:   /usr/local/share/emacs/site-lisp/cmake ==&gt; Summary   /usr/local/Cellar/cmake/3.4.3: 1,980 files, 27.4M ==&gt; Installing llvm ==&gt; Downloading http://llvm.org/releases/3.6.2/llvm-3.6.2.src.tar.xz ######################################################################## 100.0% ==&gt; Downloading http://llvm.org/releases/3.6.2/cfe-3.6.2.src.tar.xz ######################################################################## 100.0% ==&gt; cmake -G Unix Makefiles /private/tmp/llvm20160211-42310-16fdrbw/llvm-3.6.2.src -DCMAKE_C_FLAGS_RELEASE=-DNDEBUG -DCMAKE_CXX_FLAGS_RELEAS ==&gt; make ==&gt; make install ==&gt; Caveats LLVM executables are installed in /usr/local/opt/llvm/bin. Extra tools are installed in /usr/local/opt/llvm/share/llvm.  This formula is keg-only, which means it was not symlinked into /usr/local.  OS X already provides this software and installing another version in parallel can cause all kinds of trouble.  Generally there are no consequences of this for you. If you build your own software and it requires this formula, you'll need to add to your build variables:      LDFLAGS:  -L/usr/local/opt/llvm/lib     CPPFLAGS: -I/usr/local/opt/llvm/include   If you need Python to find bindings for this keg-only formula, run:   echo /usr/local/opt/llvm/lib/python2.7/site-packages &gt;&gt; /usr/local/lib/python2.7/site-packages/llvm.pth ==&gt; Summary   /usr/local/Cellar/llvm/3.6.2: 1,350 files, 338.2M, built in 21 minutes 18 seconds /code/pre  Then, you will find codeclang++/code on strong/usr/local/opt/llvm/bin/clang++/strong.  <answer227292> The codellvm/code package in Homebrew doesn't include codeclang++/code, by default. When installing it, you have to add code--with-clang/code to the command line (e.g. codebrew install --with-clang llvm/code). The extra code--with-clang/code yields a full package compile because there is only one prebuild ('bottled') codellvm/code package available (without codeclang++/code). In addition to that: the codellvm/code package is relatively old - currently it has llvm 3.6 - where 3.7 was released 6 months ago.  Thus, to get a bottled codeclang++/code 3.7 you have to install the llvm package from Homebrew Versions:  precode$ brew tap homebrew/versions $ brew install llvm37 /code/pre  It is then available under:  precode/usr/local/bin/clang++-3.7 /code/pre  The formula also notes:  precodeTo link to libc++, something like the following is required:   CXX="clang++-3.7 -stdlib=libc++"   CXXFLAGS="$CXXFLAGS -nostdinc++ -I/usr/local/opt/llvm37/lib/llvm-3.7/include/c++/v1"   LDFLAGS="$LDFLAGS -L/usr/local/opt/llvm37/lib/llvm-3.7/lib" /code/pre  <comment275783> Hm, is it possible to still get a pre-built binary package (i.e. a 'bottle')? I mean when specifying `--with-clang`? I am asking because I intend to call that in a continuous integration environment ... <comment275906> If exists, I down know about it, but I don't think that exists. <comment276050> Actually, there is a bottled version available via Homebrew Versions. See also my answer. <comment299691> Note that if you're doing this for Emscripten, you have to use the clang version they provide. <comment337203> The latest Homebrew `llvm` (3.9.1) in the `homebrew-core` tap now includes `clang`, `clang++`, etc. under `/usr/local/opt/llvm/bin`