How do I get my LaunchAgent to run as root? <body> I want to run a process as root at user login.  I created code/System/Library/LaunchAgents/eXist.plist/code with coderx—r—r—/code permissions:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt;     &lt;dict&gt;         &lt;key&gt;Disabled&lt;/key&gt;         &lt;false/&gt;         &lt;key&gt;GroupName&lt;/key&gt;         &lt;string&gt;wheel&lt;/string&gt;         &lt;key&gt;Label&lt;/key&gt;         &lt;string&gt;eXist DB&lt;/string&gt;         &lt;key&gt;Program&lt;/key&gt;         &lt;string&gt;/Applications/eXist-db/bin/startup.sh&lt;/string&gt;         &lt;key&gt;RunAtLoad&lt;/key&gt;         &lt;true/&gt;         &lt;key&gt;StandardErrorPath&lt;/key&gt;         &lt;string&gt;/tmp/eXist DB.err&lt;/string&gt;         &lt;key&gt;StandardOutPath&lt;/key&gt;         &lt;string&gt;/tmp/eXist DB.out&lt;/string&gt;         &lt;key&gt;UserName&lt;/key&gt;         &lt;string&gt;root&lt;/string&gt;     &lt;/dict&gt; &lt;/plist&gt; /code/pre  However, my process continues to run as my user codedavea/code instead of root.  Any ideas what else I need to do?  I’m using Mac 10.9.1.    <answer117150> ul liDon’t mess with anything in code/System//code unless you want to risk screwing up your system. Seriously. Stay away./li liPut it in code/Library/LaunchDaemons//code instead./li /ul  <answer117167> Add the key value pair for codeUserName/code:  precode&lt;key&gt;UserName&lt;/key&gt; &lt;string&gt;root&lt;/string&gt; /code/pre  Place the launchd job ticket in code/Library/LaunchDaemons//code; the code/System/code folder is reserved exclusively for Apple's use.  To run as the specified user, be sure to place the job ticket in codeLaunchDaemons/code. As @Manu mentions in the comment below, the codeUserName/code key is ignored for jobs in codeLaunchAgents/code.  <answer222966> To get a user LaunchAgent executing a script to run as root you have to do the following:   Modify the permissions of the script. Add the script (or command) to the sudoers file in the context of the user and finally add and load a proper launch agent plist.  strongThis approach might create severe security holes!/strong  hr  In the example below I use the startup.sh of eXit-db 2.2:  ul liCreate a plist:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Disabled&lt;/key&gt;     &lt;false/&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;org.eXist_DB&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/usr/bin/sudo&lt;/string&gt;         &lt;string&gt;/Applications/eXist-db.app/Contents/Resources/eXist-db/bin/startup.sh&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;StandardErrorPath&lt;/key&gt;     &lt;string&gt;/tmp/eXist_DB.err&lt;/string&gt;     &lt;key&gt;StandardOutPath&lt;/key&gt;     &lt;string&gt;/tmp/eXist_DB.out&lt;/string&gt;     &lt;key&gt;ThrottleInterval&lt;/key&gt;     &lt;integer&gt;10&lt;/integer&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  and save it as emorg.eXist_DB.plist/em in ~/Library/LaunchAgents  The last key:  precode    &lt;key&gt;ThrottleInterval&lt;/key&gt;     &lt;integer&gt;10&lt;/integer&gt; /code/pre  might not be necessary. In my VM it was - for unknown reasons./li liModify the permissions of startup.sh:  precodesudo chown root /Applications/eXist-db.app/Contents/Resources/eXist-db/bin/startup.sh sudo chmod 4755 /Applications/eXist-db.app/Contents/Resources/eXist-db/bin/startup.sh /code/pre/li liModify the sudoers file:  precodesudo visudo /code/pre/li liadd a line to enable executing a command without the need to enter the sudo  password  precode# User privilege specification root    ALL=(ALL) ALL %admin  ALL=(ALL) ALL /code/pre  -  precode# User privilege specification root    ALL=(ALL) ALL %admin  ALL=(ALL) ALL your_user_name ALL=(ALL) NOPASSWD: /Applications/eXist-db.app/Contents/Resources/eXist-db/bin/startup.sh /code/pre/li liFinally enter:  precodelaunchctl load -w ~/Library/LaunchAgents/org.eXist_DB.plist /code/pre  to load and start the launch agent/li /ul  <answer222970> Use a loginhook. They're deprecated but still work:  Mac OS X: Creating a login hook  <answer224324> You can use launchd-oneshot to install a login job run as root with  precodebrew install cybertk/formulae/launchd-oneshot sudo launchd-oneshot &lt;script&gt; --on-login-as-root /code/pre  <answer288322> Creating a LaunchAgent that runs with sudo/root privileges can be done by simply having codesudo/code be the command that the LaunchAgent executes.  h1Create PList File/h1  Try placing this minimal example in code~/Library/LaunchAgents/com.sudoexample.plist/code  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt;     &lt;dict&gt;         &lt;key&gt;Label&lt;/key&gt;         &lt;string&gt;com.sudoexample&lt;/string&gt;         &lt;key&gt;ProgramArguments&lt;/key&gt;         &lt;array&gt;             &lt;string&gt;sudo&lt;/string&gt;             &lt;string&gt;touch&lt;/string&gt;             &lt;string&gt;/tmp/sudoexample&lt;/string&gt;         &lt;/array&gt;         &lt;key&gt;RunAtLoad&lt;/key&gt;         &lt;true/&gt;         &lt;key&gt;StandardOutPath&lt;/key&gt;         &lt;string&gt;/tmp/sudoexample.log&lt;/string&gt;         &lt;key&gt;StandardErrorPath&lt;/key&gt;         &lt;string&gt;/tmp/sudoexample.log&lt;/string&gt;     &lt;/dict&gt; &lt;/plist&gt; /code/pre  subNote: Agents should typically have user file ownership, but coderoot/code ownership seems to work just fine as well./sub  The above example runs codesudo touch /tmp/sudoexample/code and logs the output to code/tmp/sudoexample.log/code.  If you run codelaunchctl load ~/Library/LaunchAgents/com.sudoexample.plist/code at this point, it will fail because codesudo/code will try to prompt for a password and codelaunchctl/code doesn't have any associated codetty/code to serve the password prompt:  precode$ ls /tmp/ sudoexample.log $ cat /tmp/sudoexample.log sudo: no tty present and no askpass program specified /code/pre  h1Allow Elevated Privileges/h1  We need to grant your user permission to run codesudo touch/code without a password.  This can be done like so:  codeecho "$(whoami) ALL=(ALL) NOPASSWD: $(which touch)" | sudo tee /etc/sudoers.d/touch/code  When you're done, the file should look something like this:  precode$ sudo cat /etc/sudoers.d/touch coryklein ALL=(ALL) NOPASSWD: /usr/bin/touch /code/pre  h1Test It Out/h1  precode$ launchctl load ~/Library/LaunchAgents/com.sudoexample.plist $ ls -l /tmp total 0 -rw-r--r-- 1 root      wheel 0 Jun 29 14:01 sudoexample -rw-r--r-- 1 coryklein wheel 0 Jun 29 14:01 sudoexample.log /code/pre  Now you can see the LaunchAgent successfully ran by creating the root owned code/tmp/sudoexample/code.  subThanks to klanomath's answer for providing the foundation for this one./sub  <comment163121> The problem with this is that it will always run before login. So if your service depends on some GUI, it will break on log-off. I am currently searching for an option run after login but as root, unfortunately without any luck, yet. <comment270193> It is odd to run something as root that should run after a particular user logs in - why can't the database start at boot as other root things would do <comment270242> This is not properly tested and doesn't work (at least with the example above and for me)! <comment288262> For the record, changing the 'UserName' key doesn't affect a LaunchAgent, it will still run as the logged in user. <comment364125> The question refers specifically to LaunchAgents and running a process after login. LaunchDaemons are a bad fit for processes that rely on things that are only available after login, like a GUI, and as @Manu pointed out this answer does not work for LaunchAgents.