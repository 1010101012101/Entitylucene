Path not being honored? <body> I have the following in my strongemcode.bash_profile/code/em/strong:  precode$ cat ~/.bash_profile  # Prompt export PS1="\h:\W$ "  # Standard path export PATH="/usr/local/bin:/usr/local/sbin:/bin:/sbin:/usr/bin:/usr/sbin: /opt/local/bin:/opt/local/sbin"  # Android export ANDROID_NDK_ROOT=/opt/android-ndk export ANDROID_SDK_ROOT=/opt/android-sdk export JAVA_HOME=`/usr/libexec/java_home` export ANDROID_HOME="$HOME/.android"  export PATH="$PATH:$ANDROID_SDK_ROOT/tools/":"$ANDROID_SDK_ROOT/platform-tools/" /code/pre  I verified the path with:  precode$ echo $PATH /usr/local/bin:/usr/local/sbin:/bin:/sbin:/usr/bin:/usr/sbin:/opt/local/bin: /opt/local/sbin:/opt/android-sdk/tools/:/opt/android-sdk/platform-tools/ /code/pre  My local build of Emacs is in strongemcode/usr/local/bin/code/em/strong. I just built and installed it:  precode$ which emacs /usr/local/bin/emacs /code/pre  When I run Emacs, I get the one from strongemcode/usr/bin/code/em/strong:  precode$ emacs --version GNU Emacs 22.1.1 ... $ /usr/bin/emacs --version GNU Emacs 22.1.1 ... $ /usr/local/bin/emacs --version GNU Emacs 24.5.1 ... /code/pre  Why am I having trouble with the paths? Why is OS X ignoring them? How can I use my copy of Emacs in strongemcode/usr/local/bin/emacs/code/em/strong emwithout/em specifying the full path?  <answer226162> In order to amend your PATH so that code/usr/local/bin/code is ahead of code/usr/bin/code do the following:  ol liexecute code. ~/.bash_profile/code/li liexecute codePATH="/usr/local/bin:$PATH"/code in the current shell/li lirestart Terminal/li /ol  You may also want to amend code/etc/paths/code so that code/usr/local/bin/code is listed before code/usr/bin/code. You'll need to sudo your editor in order to do that.  precodesudo open -t /etc/paths /code/pre  Bear in mind that if you edit code/etc/paths/code there is a risk that non-terminal applications may pick up your locally build version. Just FYI.  A little more information on paths.  ol licode/bin/code (and code/sbin/code) were intended for programs that needed to be on a small code//code partition before the larger code/usr/code, etc. partitions were mounted. These days, it mostly serves as a standard location for key programs like code/bin/sh/code, although the original intent may still be relevant for e.g. installations on small embedded devices./li licode/sbin/code, as distinct from code/bin/code, is for system management programs (not normally used by ordinary users) needed before code/usr/code is mounted./li licode/usr/bin/code is for distribution-managed normal user programs./li liThere is a code/usr/sbin/code with the same relationship to code/usr/bin/code as code/sbin/code has to code/bin/code./li licode/usr/local/bin/code is for normal user programs not managed by the distribution package manager, e.g. locally compiled packages. You should not install them into code/usr/bin/code because future distribution upgrades may modify or delete them without warning./li licode/usr/local/sbin/code, as you can probably guess at this point, is to code/usr/local/bin/code as code/usr/sbin/code to code/usr/bin/code./li /ol  This source helps explain the filesystem hierarchy standard on a deeper level.  And you might find this article on the use and abuse of code/usr/local/bin/code interesting as well.  <answer286561> I found I had to reboot the machine to have the changes take effect. A logoff/logon may have had the same effect, but I did not try it.  <comment274613> The OP already had `/usr/local/bin` at the beginning of PATHâ€¦ <comment274614> If you open a new terminal tab, does the problem persist there? <comment274615> Yes, thank you, I have noticed that too. One may (or may not) wish to omit according command at will. BTW, who is OP? :) <comment274620> Original Poster :-) BTW, I didn't even realize that people go into holy wars over the use of `/usr/local`. <comment361574> If you had cleared the hash table then the new emacs would have been called. No need tp logout or reboot. <comment361579> @fd0 - Forgive my ignorance... What hash table are you talking about? What does it have to do with a path or a program? <comment361591> The hash table is a shell feature that records the full path of a command to memory after a PATH lookup. Subsequent calls to a command are first checked in the hash table instead of having to use a PATH lookup. More info can be found with the command `help hash`.