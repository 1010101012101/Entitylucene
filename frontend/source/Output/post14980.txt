Why are dot underscore ._ files created, and how can I avoid them? <body> I am using different operating systems on different machines on different locations. I am using a USB flash disk to keep my files (source codes etc.).  I am new to Mac OS X and now I realize there are lots of files created with a dot underscore code._/code prefix.  h1Questions/h1  Why are code._/code files created?   What are their purpose?   How can I avoid them?  <answer14981> You can't avoid them.  They're created to store file information that would otherwise go into an extended attribute on HFS+ (Apple native) or Unix/UFS volumes; in earlier Mac OS this would be the resource fork.  Finder file operations will create them automatically to store the icon information, plus Time Machine stores some information in them so if you copy a file backed up via TM it will have that information copied as well.  (This is nothing new; I've noticed that XP and later leave various turds around as well, although not emquite/em as many.)  <answer14982> the issue is as @geekosaur says and so hard to avoid if you use Apple file tools.  However if you only use command line tools and some 3rd party ones and never write to the USB with Finder they will not be created.   <answer15061> To minimise the presence of dot underscore files on non-HFS+ formatted drives, you can use the BlueHarvest preference pane.  <answer51147> h1Purposes of .DS_Store and ._ files/h1  http://diigo.com/0qiwp for an annotated view of http://lists.apple.com/archives/applescript-users/2006/Jun/msg00180.html where Matt Deatherage (a former engineer at Apple) offers explanations. Also arnotify » On the origins of .DS_Store (2006-10-01).   Since I have seen loss of user data (document content) where code._/code counterparts are prevented or lost, I agree that it's:   ul linot acceptable to have things "vanish into the ether". /li /ul  hr  h1Purposes of ._ files/h1  In addition to the purposes outlined in geekosaur's accepted answer, here are a few examples of how Apple and third party apps either emuse/em or emrequire/em code._/code in some situations …  hr  h2File business during a copy by Finder/h2  See my answer to a question on Stack Overflow.  hr  h2NeoOffice use of deprecated codes/h2  HFS type code codeNO%F/code without a creator code is:   ul liused considerately, only where appropriate./li /ul  h3NeoOffice example 1/h3  NeoOffice 3.2.1 Patch 5 save to JHFS+:  precode[macbookpro08-centrim:~] gjp22% xattr -l /Users/gjp22/Desktop/product\ of\ NeoOffice\ 3.2.1\ Patch\ 5.docx  com.apple.FinderInfo: 00000000  4E 4F 25 46 00 00 00 00 00 00 00 00 00 00 00 00  |NO%F............| 00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................| 00000020 /code/pre  h3NeoOffice example 2/h3  NeoOffice 3.2.1 Patch 5 save to a USB flash drive with MS-DOS FAT32, cleaning by BlueHarvest:  precode2012-05-12 06:42:08.349 BlueHarvest[31146]: Deleted ._product of NeoOffice 3.2.1 Patch 5.docx in /Volumes/FAT32/example. /code/pre  h3NeoOffice example 3/h3  NeoOffice 3.2.1 Patch 5 save to a volume mounted by OS X with file system type codewebdav/code, not SharePoint, cleaning by BlueHarvest:   precode[macbookpro08-centrim:~] gjp22% mount | grep dav https://www.box.net/dav/ on /Volumes/dav (webdav, nodev, noexec, nosuid, mounted by gjp22) [macbookpro08-centrim:~] gjp22% xattr -l /Volumes/dav/product\ of\ NeoOffice\ 3.2.1\ Patch\ 5.docx  [macbookpro08-centrim:~] gjp22%  /code/pre  ul lithe save by NeoOffice to the codewebdav/code file system did not involve an extended attribute/li liBlueHarvest was not required. /li /ul  strongHint/strong: where Microsoft Office fails with codewebdav/code to save to Microsoft SharePoint (see below), NeoOffice succeeds.   hr  h2Microsoft use of deprecated codes/h2  The most recent version of Office strongrequires/strong an emHFS type code/em and emHFS creator code/em when a format such as Microsoft Word (code.docx/code) is chosen. So — it seems that when saving to a file system that does not support those values in a codecom.apple.FinderInfo/code extended attribute:   ul liMicrosoft Office can not save reliably without creating multiple code._/code files./li /ul  h3Microsoft example 1/h3  Word 2011 14.2.1 save to a volume mounted by OS X with file system type codewebdav/code, not SharePoint, cleaning by BlueHarvest:   precodeMay 11 18:32:49 macbookpro08 BlueHarvest[14649]: BlueHarvest started. May 11 18:38:37 macbookpro08 BlueHarvest[14649]: Deleted ._Word Work File D_1.tmp in /Volumes/dav. May 11 18:39:57 macbookpro08 BlueHarvest[14649]: Deleted ._Hello world, this is Microsoft.docx in /Volumes/dav. May 11 18:42:28 macbookpro08 BlueHarvest[14649]: Deleted ._Hello world, this is Microsoft.docx in /Volumes/dav. /code/pre  h3Microsoft example 2/h3  Word 2011 14.2.2 (120421) saving codeexample.docx/code in the same environment:   precode2012-05-12 08:01:07.692 BlueHarvest[41131]: Deleted ._Word Work File D_769960778.tmp in /Volumes/dav. /code/pre  h3Microsoft example 3/h3  Word 2011 14.2.2 (120421) saving codeanother.docx/code in the same environment, quitting then reopening, editing then saving, editing then closing and saving:   precode2012-05-12 08:15:04.252 BlueHarvest[41131]: Deleted ._Word Work File D_.tmp in /Volumes/dav. 2012-05-12 08:18:48.735 BlueHarvest[41131]: Deleted ._another.docx in /Volumes/dav. 2012-05-12 08:21:12.658 BlueHarvest[41131]: Deleted ._Word Work File D_2.tmp in /Volumes/dav. /code/pre  strongHint/strong: Microsoft Office 2011 fails to save to Microsoft SharePoint when the file system type is codewebdav/code because SharePoint does not support file names beginning with a dot code./code (period). See Ask Different answers to Is it possible to mount SharePoint as a volume in 10.6?  hr  h2Type and creator codes: background, Apple Developer/h2  Apple began encouraging third party developers away from type codes and creator codes more than a decade ago. In Appendix B of the File System Programming Guide, File Types and Creator Codes advises that the codes are:      generally deprecated, you may see them in legacy files and apps and in some places in the system.   <answer163498> You can use dot_clean command to remove or merge the ._ files:  precodedot_clean PATH_OF_FOLDER_OR_DRIVE /code/pre  <answer193430> You can delete them through FileZilla or similar files manager.  <answer208495> These files are created by the operating system to speed up searches, store metadata (data used by the OS) about a folder preferences, etc. Windows and OS X both have these kinds of files. Following, is a description of these files pulled from http://annoying-file-be-gone.snack.ws/faq.html:  code.DS_Store/code – The name of a file in the Apple OS X operating system for storing custom attributes of a folder such as the position of icons or the choice of a background image (Read more)  code.Spotlight-V100/code – This file holds information to speed up the 'Spotlight Search' feature. Deleting would simply force this information to be re-indexed if you performed another Spotlight Search for an item in this folder.  code.apDisk/code – This file holds information about shared folders and can be safely removed as it will be automatically re-created if Apple needs it.  code.VolumeIcon.icns/code – This file is used to store the icon of the volume (USB device) if the volume uses a custom icon and not the default icon. If you want the device to continue using this default icon, or if the folder/device you want to clean contains an application, you might want to keep this file in your system. As a side note, if you wanted to create a custom icon for your device you could create/download an code.icns/code file and rename it code.VolumeIcon.icns/code and place in your folder/device.  code.fseventsd/code – This file is used as a buffer for the File System Events daemon. If you are using a program that is monitoring this folder/device, this file might be used to store temporary data.  code.Trash/code &amp; code.Trashes/code – These folders are used to hold deleted items the same way that the 'Trash' icon from the dock works. If you don't need this feature on your folder/device, you can clean this folder to save space.  code.TemporaryItems/code – This file is used by the OS to hold temporary data when files are being copied/moved/appended. If you are running any programs that are accessing the folder/device you want to clean, and you aren't copying or moving any files, then this file can simply hold old data for caching.  <answer222758> I have been using the following method for easy .em* prefix file elimination on flash drives: Remove flash drive from Apple computer, insert into a Windows machine, search the flash drive for "./em*.*", then when the search displays the files with the ._ prefix, delete them. I never delete .Trashes or .DS Store files. So far no issues. I hope I am not causing a future problem for myself.  <answer223481> It really is simple, NTFS (current Windows)  FAT32 (Old Windows) have a very specific data structure for things like permissions, what program is assigned to open this file, creation date, modified date, tags, file comments, icon, and other metadata.  You'll also notice that the same properties won't show in the other OS.  (IE creation date may say it was in 1/1/1990 and other metadata is not accessible from the other OS.  Whenever you are using both a machine writing from HFS to NTFS or FAT32 along with a machine writing native FAT32 or NTFS these . or ._ files along with DS store files will show up.   It's show the OS's deal with the incompatibility factor of the varied elements above that aren't consistent.  So you probably want to keep these files around if you are switching back and forth between the OS's to use these files.  If you are only using one OS or the other ensure you have the media (hard drive, sd card, etc) formatted properly or have a driver which allows your OS to write to the drive format not native to your OS.  (These are available for both OSX to allow it to write NTFS &amp; FAT32 files using Native properties and for Windows 7 &amp; 8 to write to HFS+ &amp; EXFat (linux) drives using the native properties.)  They aren't free, but if you do a lot of back and forth it cuts out the excess duplicate data cluttering the drive.  <answer253567> Yes, some of us have a use for both Macs and windows machines, and I used to use that method.  And if you have a USB with a bunch of .jpgs that you want to play as a slide show, you have to get rid of those pesky ._ files to do it.  After much searching, I found a way to use my mac to remove the ._ files:  using Terminal:  ul licodels -a/code will list all files, including the one starting with code._/code/li lito remove just one file from the directory: coderm -rf ._whateveryourfilenameis.jpg/code/li lito remove all code._/code files: coderm -rf ._*/code/li lito remove unwanted directories emincluding/em code.Trashes/code: coderm -r .Trashes*/code/li /ul  Cleaned my USB right up for use as a TV input  <answer284472> Be careful when deleting ._ related to Git, Visual Studio, and Xcode!  I have an app with a lot of .mov and images and these "._" files showed up to be committed.  I deleted them via Visual Studio Team Explorer's changes and somehow that project folder bloated from around 500MB to 40GB without adding files...still not sure what happened exactly, but I'm guessing it was related to deleting those files so every commit it cached each .mov and image multiple times before I caught on.  I saw each .mov and .png repeated 20-30 times when in Finder  All Files.    Just add "._*" to your .gitignore file and they won't show up as a changed file when using TFS for you iOS Xcode project.  <comment16151> I dislike them too but I've learned to cohabitate with them peacefully. <comment58480> BlueHarvest is an excellent product but some of the third party reviews are misleading. Test results show that creation is **not** prevented; that creation is allowed, and according to the user's preferences BlueHarvest may clean some of what's created. <comment58481> The behaviour is not limited to Apple software. Example: Microsoft Office 2011 requires `._` files when saving to file systems that are without support for HFS type codes and creator codes. <comment58482> If the flash drive is formatted in HFS+ format, that should suppress the creation of `._` files, but I don't know what options exist on your unspecified other operating systems to read HFS+ volumes. <comment58489> Similar: [Dot-files and other meta data on non-Mac network shares](http://apple.stackexchange.com/q/99/8546) (2010) <comment58496> @GrahamPerrin - I meant Apple's file tools for copying etc - yes any app using file forks (ie Apple's libraries) will have them. If yo use tools that just use BSD file libraries then no _ files. <comment165766> I agree, "turd" is an accurate description :) <comment189058> I noticed that my Mac is leaving turds on my linux samba server when I use color labels (using Path Finder 7). There is a ._coloreditem file for each colored item. <comment221944> We have the same situation in our linux samba file server at work. Since we don't need color metadata for files, we used the `veto files = /._*/` and `delete veto files` options in our `smb.conf` to prevent creation of such files. Instead we leave `.DS_STORE` files as they are, since they are useful to set file sorting, and there is only one of them for each dir. <comment245001> At least on Windows you can turn this off! <comment261176> @gerlos thanks for the veto files tip! consider it incorporated :) <comment261211> Upvoted for use of "turds" to describe this. <comment278716> Is there some way to analyse the contents of these turds on windows? to see whether they hold anything of interest or are eligible for composting... We have some mac-turds lying around, but no mac-users on our team anymore. <comment288845> The other answers don't really answer the "How can I avoid them?" part. This does.  Thanks! <comment294103> Not sure why this was downvoted since most of the upvoted answers don't even really give a solution. This is in my opinion the easiest solution... Since ._ and .DS_Store are Finder related files the obvious solution is to avoid finder. Personally I prefer using Transmit, but Filezilla is a great free alternative. <comment294190> From `man dot_clean`: `For each dir, dot_clean recursively merges all ._* files with their corresponding native files according to the rules specified with the given arguments.  By default, if there is an attribute on the native file that is also present in the ._ file, the most recent attribute will be used.` This command does not just remove certain dot files, it may overwrite previous / native attributes for each folder. Use with caution. <comment301088> Not ideal, but `ls  --ignore="._*"` as an alias or keybinding goes a long way. <comment301089> I didn't downvote but it's an undesirable suggestion and misses the intention of the question which is asking for prevention rather than cure. Who wants to spend half their time deleting these files that keep getting generated? Q: "What do I do about our city's littering problem?" A: "Pick it up and put it in the bin, duh." <comment301090> Manual deletion? Ownership of a Windows computer when you're a Mac user? I know you're just documenting what works for you but I can't imagine anyone following your method. <comment329986> Recommended reading: [Extended attributes: the good, the not so good, the bad.](http://www.lesbonscomptes.com/pages/extattrs.html) (2015-07-14)