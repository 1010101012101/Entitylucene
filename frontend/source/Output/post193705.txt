Command + fullstop VS Ctrl + C <body> Is there any difference between codectrl+c/code and codecmd+./code when stopping a terminal process?  <answer193713> No there is no difference. They both send a SIGINT signal to the running process.  You can demonstrate this using the code sample from this answer: https://stackoverflow.com/a/9256709/4087178  <answer193714> They are exactly the same. kbd⌘ CMD/kbd+kbd./kbd sends codeSIGINT/code just like kbd⌃ CTRL/kbd+kbdc/kbd. I've checked this with this python script:  precode#!/usr/bin/env python import signal import sys def signal_handler(signal, frame):     print('You pressed Ctrl+C!')     sys.exit(0) signal.signal(signal.SIGINT, signal_handler) print('Press Ctrl+C') signal.pause() /code/pre  sIt's made this way for backward compatibility,/s earlier versions of Apple keyboards did not have kbd⌃ CTRL/kbd button. Please read Max Ried comment bellow.  hr  supcode from: https://stackoverflow.com/a/1112350/3488699/sup  <comment230978> What Apple keyboard did not have a Control key? I'm not aware of any. <comment230983> @MaxRied for example The Macintosh Plus Keyboard, check: https://en.wikipedia.org/wiki/Apple_Keyboard <comment230987> Wow, that's legacy... From my understanding the Command-key on Apple OSes was traditionally used to issue commands, while control-key was a modifier key to Enter control characters. Up to OSX, there was no commandline, which traditionally is controlled using control characters. Thus the easy to memorable CMD+. (Read "Command full stop") was used. With the xnu Backend of OSX, Apple added the traditional Ctrl-C (Read " Cancel") as a lot of software expected it. Besides: CMD+. to interrupt Command line tasks is Terminal.app specific. <comment230989> @MaxRied thanks for clarification. I've edited my post, so that future readers can see Your comment.