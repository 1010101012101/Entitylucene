How to find out which photos were made by my iPhone and which were sent via WhatsApp? <body> After a nice holiday I've often taken around 200 photos and 80% was made by myself, 10% was incoming WhatsApp pictures and 10% was some other pictures that ended up on my iPhone.   I don't even want the WhatsApp pictures automatically backed up by Carousel on my iPhone 6, but unfortunately there is no way to disable that.  Is there an easy way from my MacBook to filter out the pictures I made myself from the other pictures?  img src="https://i.imgur.com/t2QlNhT.png"  ul liGood picture: http://i.imgur.com/lucv1DD.png/li liWhatsApp picture: http://i.imgur.com/GmPHn0Y.png/li /ul  <answer198050> This makes use of the Exif info stored within the JPEG image file, some of which is indexed by Spotlight, however see the strongNotes:/strong section below.  Here is a simple sample bash script to preform an action on any JPEG image files found in the emworking directory/em that was taken on a iPhone.  Copy and paste the code below into a plan text file, without an extension, and from a Terminal, make it executable using codechmod +x filename/code where "emfilename/em" is the name you gave to the script file.  Then place it in a directory that's in your code$PATH/code, e.g code/usr/local/bin/code, otherwise you'll have to provide the fully qualified pathname to the script file on the emcommand line/em to execute it.  Now in a Terminal use the codecd/code command to change to the target emdirectory/em containing the JPEG image files you want to act upon, this becomes the target emworking directory/em, and type the name you gave to the script, then press Enter.  It will echo the name of each JPEG image file that was taken on an iPhone.  ul liHint: To more easily navigate to the target emworking directory/em from within the Terminal, type codecd/code followed by a space then drag and drop from Finder the target folder onto the Terminal window.  This populates the emfully qualified pathname/em for you and then you can just press Enter.  You're now in the target emworking directory/em containing the JPEG image files./li /ul  strongCode:/strong  precode#!/bin/bash  for f in *.jpg *.JPG; do     x="$(mdls "$f" | grep -o 'iPhone')"     if [[ ! -z "$x" ]]; then         echo "$f was taken on an iPhone."     fi done /code/pre  Now obviously you'll want it to do something other then just echo the name of a JPEG image file that was taken on an iPhone, so you'll have to add additional command(s) within the codefor ... done/code loop.  In this example I want all JPEG image files that were taken on an iPhone to be moved into a directory name "iPhone" within the emworking directory/em.  So I modified the script accordingly.  strongEdited Code:/strong  precode#!/bin/bash  if [[ ! -d "iPhone" ]]; then     mkdir "iPhone" fi  for f in *.jpg *.JPG; do     x="$(mdls "$f" | grep -o 'iPhone')"     if [[ ! -z "$x" ]]; then         echo "$f was taken on an iPhone."         mv -v "$f" "./iPhone/"     fi done /code/pre  strongIn Summary:/strong  In the first codeif ... fi/code block code[[ ! -d "iPhone" ]]/code tests for the existence of the "iPhone" directory within the current emworking directory/em and if it doesn't already exist, it's created by the codemkdir/code command.  In the codefor ... done/code loop it only looks at files with extensions code.jpg/code and code.JPG/code. (emI have both on my system./em)  The code$x/code variable will either be empty containing nothing code""/code or code"iPhone"/code upon completion of the commands within the code"$(...)"/code command substitution.  The output of the codemdls/code command for the JPEG image file gets piped code|/code to the codegrep/code command looking for codeiPhone/code and because of the code-o/code option it's either going to be an empty string or the word "iPhone" that's returned, which becomes the content of the code$x/code variable.  Therefore in the second codeif ... fi/code block code[[ ! -z "$x" ]]/code tests to see that the code"$x"/code variable is not an empty string and when it holds something, in this case being "iPhone", it's going to act upon that code.jpg/code or code.JPG/code file.  In the case of code$x/code not being an empty string, as it can only contain nothing or "iPhone", it moves that file into the "iPhone" directory within the emworking directory/em.  strongNotes:/strong  Having tested this in several locations on both internal and external storage medium I noticed that in some places the files were stored and that while they did actually contain the model of the camera that created them nonetheless it was not reflected in the output of the codemdls/code command as those locations were excluded from indexing by Spotlight. So using the, third-party supplied, codeexiftool/code command insured reading the information directly from the file itself and not relying on indexed information (or lack of indexed information) that the codemdls/code command accesses.  So if you want to download and install ExifTool and use it, then change codemdls/code to codeexiftool/code in the codex="$(mdls "$f" | grep -o 'iPhone')"/code line of the script so it would look like codex="$(exiftool "$f" | grep -o 'iPhone')"/code.  In comparison on the same JPEG image file the codeexiftool/code command showed the values of 23 additional Tags that were not displayed by the codemdls/code command.  This may provide additional info to programmatically make the decision how to absolutely differentiate the source of the files by adding additional code to the script that would use info in the additional Tags, if necessary.  <comment236918> Wouldn't this also wrap up pictures which were sent via WhatsApp since those pictures should (theoretically) retain their EXIF data? For example, if I had a friend who sent me a photo and they had taken the picture on an iPhone, would that EXIF data no longer be present or wouldn't it be swept up into your script as well? <comment236920> @smoooosher, Theoretically yes JPEG files coming from WhatsApp could contain "iPhone" that `grep` looked for however, looking at the images linked in the OP the one from WhatsApp isn't showing that information.  That of course doesn't mean it doesn't exist however the purpose of the script it to show a way of acting upon given files base on a variable and it can be coded to check other info that could stop a false positive in this case.  This is where I'd use `exiftool` to get a cross section of info from several files known to each source to see what can delineate against a false positive. <comment236926> @smoooosher, As an example, it's my understanding the WhatsApp does not send a exact copy of the original image file, it also compresses it and may even remove some of the original Exif info in doing so. I don't have WhatsApp installed to play/test with. So the script could be further coded to also look a file size or maybe files being sent by WhatsApp are being tagged with the string e.g. "WhatsApp" and it's not indexed by Spotlight. Another good reason to use `exiftool` over `mdls`.