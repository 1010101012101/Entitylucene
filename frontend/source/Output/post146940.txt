Accidentally removed all commands in terminal <body> I was following a tutorial and put in the following line:  precodeexport PATH="~/.composer/vendor/bin/" /code/pre  Now no commands work at all, not even things like codels/code.  What does the command do that I copy and pasted in and how do I fix it?  <answer146941> codeexport/code command works in the current session only. You can "fix" it by opening new strongTerminal/strong window/tab.  <answer146981> h1What you did/h1  code$PATH/code is the variable that tells your shell (bash by default) where to look for you commands. It contains a list of directories, seperated with colons (code:/code). When you type codels/code, the shell will search all the directories listed within code$PATH/code (code/bin/code, code/usr/bin/code, and so on) until it finds a file called codels/code, and will execute that.  Normally you set a variable simply with  precodevariable="foo bar baz" /code/pre  ...however, that only sets that variable for the current shell -- those changes won't carry over to subshells, which can be important in (for example) scripts. Using  precodeexport variable="foo bar baz" /code/pre  ...emwill/em allow you to use the variable in subshells.  So, when you use codeexport PATH="~/.composer/vendor/bin/"/code, you are over-writing the code$PATH/code variable -- so when you try to use codels/code, the shell looks in code~/.composer/vendor/bin//code, doesn't find any file named codels/code, and so fails. What you probably want to do is emadd/em code~/.composer/vendor/bin//code to your code$PATH/code, which you can do with:  precodeexport PATH="$PATH:~/.composer/vendor/bin/" /code/pre  You can view the current contents of your code$PATH/code with codeecho $PATH/code.  h1How to fix it/h1  All of this only applies to the current shell (and all its subshells, since you used codeexport/code), so you can fix the problem most simply by opening a new terminal, as Mateusz Szlosek's answer notes.  If you emdo/em want to alter your $PATH permenantly, you can put that line at the end of your code~/.bashrc/code, which is sourced whenever you open an interactive shell. This is standard practice if you want to write a few of your own scripts (on Linux we use code~/bin/code for user scripts, but they can go anywhere).  <comment173167> What happens when You open new Terminal window? <comment173168> Oh crikey that actually fixes it. Panicked a bit when nothing was working. If you give that as an answer i'll happily accept :D <comment173174> If you want to change the path for the current session, use `export PATH="~/.composer/vendor/bin/:$PATH"` instead, this will keep the existing PATH entries. <comment173256> Great answer +1. <comment173257> Fantastic answer and thanks alot for explaining. Really need to get out of the habit of copy and pasting things from tutorials.