Using launchd to monitor a running program or process <body> I've written a simple bash script to check whether a program (supplied as its only argument) is running and send an email to a set address in the script if it's not. The script works if run on the command line, but I cannot for the life of me get it to work under launchd as a user agent (~/Library/LaunchAgents) where I try to set it to run every minute. The latest incarnation of the relevant .plist file is (monitoring Dropbox):  precode&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;  &lt;plist version="1.0"&gt;     &lt;dict&gt;         &lt;key&gt;Label&lt;/key&gt;         &lt;string&gt;greencollar.Dropbox.checkRun&lt;/string&gt;         &lt;key&gt;StartInterval&lt;/key&gt;         &lt;integer&gt;60&lt;/integer&gt;         &lt;key&gt;Program&lt;/key&gt;         &lt;string&gt;/Users/greencollar/Documents/code/proc_check.sh&lt;/string&gt;         &lt;key&gt;ProgramArguments&lt;/key&gt;         &lt;array&gt;             &lt;string&gt;proc_check.sh&lt;/string&gt;             &lt;string&gt;Dropbox&lt;/string&gt;         &lt;/array&gt;     &lt;/dict&gt; &lt;/plist&gt; /code/pre  Yes - the bash script is executable and no there are no entries in Console indicating any problems with the .plist file. I have tried making /bin/bash the program, but that doesn't seem to make any difference and reading execvp(3) seems to hint that it wouldn't. I've also tried having everything under code&lt;ProgramArguments&gt;/code without any luck as well. Any help would be greatly appreciated as this seems to me pretty basic and it's very frustrating that I can't get it to work!  ----------------------------- 1st Edit ---------------------------  Here is the pared-down basics of the shell script:  precode#!/bin/bash PROC=$1 if ! /usr/bin/pgrep $PROC &gt; /dev/null then     /bin/echo "$PROC is not running!" | /usr/bin/mail -s "$PROC down" email@mydomain fi /code/pre  Not much to go wrong there...  <answer237527> I'm posting this as an answer because it's to much for a comment and I believe I know what the issue may be, even without seeing the contents of the codeproc_check.sh/code emshell script/em.  I realized after reading again your question and ensuing comments, after deleting my first answer, the emhint/em was the emscript/em worked from the command line but not when called by codelaunchd/code.  When your User Agent code.plist/code file is triggered, the code$PATH/code it receives may not contain the paths to some commands/utilities that are being called within the emscript/em.  The code$PATH/code passed to the codeproc_check.sh/code emshell script/em is only:  precode/usr/bin:/bin:/usr/sbin:/sbin /code/pre  So, any program that is called in the emscript/em that is not in the above code$PATH/code or includes it's emfully qualified pathname/em is not running when called by codelaunchd/code.  To fix this, either use the emfully qualified pathname/em for all executables called within the emscript/em, that are not in the above code$PATH/code, or add a codePATH=.../code statement after the codeshebang/code, where code.../code is the actual output of, codeecho $PATH/code in Terminal, e.g.:  precode#!/bin/bash PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin /code/pre  Note: The code$PATH/code above is what's outputted by codeecho $PATH/code on my system and may well be different on yours.  <answer237647> After getting this far, it had to be some issue with mail being invoked by launchd, so I searched on that and I found this which referenced this. It emwas/em the .plist file in that it did not include the AbandonProcessGroup key which would allow the mail process to live long enough to work. Adding  precode&lt;key&gt;AbandonProcessGroup&lt;/key&gt; &lt;true/&gt; /code/pre  made it work.  I was setting myself up for this in that I was using a .plist generated by a 3rd party app to "save time". Such apps are not always complete or accurate in the .plist files they produce, apparently.  Thanks to @user3439894 &amp; @Mark for their help.  <comment290893> Have you run with the full path as the first argument in ProgramArguments - also what are the permissions on the script? (the easy way is to use LaunchControl or other  programs  to edit the script) <comment290894> Also when you say does not run - how would you know if it runs? <comment290943> Without omitting anything, other then to put a suitable placeholder for something that's sensitive,  e.g. the actual _email address_ and _password_, etc., edit you question to include the contents of the `proc_check.sh` shell script.  Because without it, there cannot be a complete troubleshooting process that's done easily or by trying to replicate as exact as possible, where the issue is. <comment290948> @Mark, Thanks for the comment on my now deleted previous answer.  It made me test the `.plist` in the question, which I admit I hadn't because I thought I saw a problem with it, and it did trigger (on my system anyway).  So, I do not believe that's where the issue is. My new answer I believe may be spot on for where the issue could be.  Obviously without seeing the contents of the _script_ I can't say for sure, however this is most likely where the issue may be. <comment291127> Thanks for the comments so far. I modified my script down to the barest essentials and put the full paths to all executables but it *still* doesn't work. Here is the script:  `#!/bin/bash PROC=$1 if ! /usr/bin/pgrep $PROC  /dev/null then     /bin/echo "$PROC is not running!" | /usr/bin/mail -s "$PROC down" email@mydomain fi`  It is definitely the script as an improper edit resulted in console messages every minute. But I can't see what's wrong with it. <comment291128> @GAM, Please add your script to your question in a properly formatted  structure, not in a comment. <comment291136> I've tested both the `.plist` and the `proc_check.sh`, using my `$HOME` and rest of your path of course, and this works when called by `launchd`  for me in testing with "Caculator" and  `say $PROC is not running`. I didn't test sending email as my system is not setup to do that.  So you might want to test like I did to see if that works and then if it does the troubleshooting will need to be done on how `mail` might be being handled when triggered by `launchd`. BTW I'm running OS X 10.8.5, what version are you running? <comment291138> @Mark I am now running with first arg of ProgramArguments as full path. But it was triggering anyway without having done that. I didn't say it didn't run. I said it didn't *work*.