Open new Terminal tab in current working directory doesn't work <body> In the Terminal preferences you can find an option to open new windows and tabs in the current working directory. Yet there's a message that says that programs notify Terminal about the current working directory using scape sequences, which I don't know what it means. But the Terminal itself is not doing this, as I would like to create a new tab when I press ⌘+T to open at the same working directory (not ~/). I found this post but it doesn't address this. Here you have a figure with the options:img src="https://i.stack.imgur.com/o8Clg.png" alt="enter image description here"  <answer144899> Well codeTerminal/code will certainly open a new tab or window in the current directory if you are at the prompt in codebash/code all things working well.  I'm running Terminal version 2.4 on 10.9.4 and it works perfectly for both new tabs and windows.  If it doesn't then something is upsetting things. Try moving your code.profile/code, code.bash_profile/code and code.bashrc/code out of the way in case something in them is upsetting bash.  Once you've discovered which file is causing the problem then you can discover which part is the problem using a "halving method". Cut the file approximately in half and move that half back. That will tell you which half is doing it. Repeat with the cutting in half  and moving until you have it down to a few lines or so you can then ask your question again.  <answer145020> So I found the problem with the Terminal and I'm posting the answer hoping it can help others. The problem was in the definition of the codePROMPT_COMMAND/code environmental variable. I changed its definition from   precodeexport PROMPT_COMMAND='history -n;' /code/pre  to  precodeexport PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ;} history -n" /code/pre  appending at the end of the existing codePROMPT_COMMAND/code instead and this solved the problem.  <answer241939> I have noticed that this kind of behaviour also reproduces, when having whitespaces in your hostname.  code$ sudo scutil --set HostName 'no-whitespace-name'/code fixes this issue.  <comment170685> I'd also check `.bash_profile` file. <comment170686> You're right, something is upsetting the Terminal, because if I rename my `.bash_profile` to another file, everything works fine. Any ideas on what would be happening within `.bash_profile`? My file is quite large. <comment170695> @aaragon maybe check for `cd` commands: `cat ~/.bash_profile | grep cd` <comment170696> This is the result: `$ cat ~/.bashrc | grep cd # automatically correct mistyped directory names on cd shopt -s cdspell # If set, an argument to the cd builtin command that is not a directory is assumed to be the name of a variable whose value is the directory to change to shopt -s cdable_vars alias ..='cd ../'                           # Go back 1 directory level alias cd..='cd ../'                         # Go back 1 directory level (for fast typers) alias ...='cd ../../'                       # Go back 2 directory levels alias ~="cd ~"                              # ~:        Go Home` <comment170703> I'm assuming you didn't write your entire .bash_profile file yourself carefully over many years so I suggest you take the file and cut it down to only the things you understand completely and _really_ need until the Terminal app behaves. Then slowly add stuff back that you might _like to have_ until it breaks again. This is basic profile and login file debugging. <comment170826> I found the problem and posted the solution. Thanks @TonyWilliams. <comment170851> Right.  The contents of `PROMPT_COMMAND` is executed by the shell every time the prompt is displayed. The Terminal  behavior you're looking for depends upon that variable being set to a function called `update_terminal_cwd`, which outputs your current working directory as a URL in a manner that is intercepted by Terminal so that it knows where you are. You were overwriting that setting. <comment250968> Thanks, this solved my problem!  I do have a question about your bash:  What does the extra "+$PROMPT_COMMAND ;" part do?  I get errors when I use this syntax...   $ echo $PROMPT_COMMAND   update_terminal_cwd; ; spwd  -bash: PROMPT_COMMAND: line 1: syntax error near unexpected token `;'  -bash: PROMPT_COMMAND: line 1: `update_terminal_cwd;  ; spwd'  $  I had to change this to:  export PROMPT_COMMAND="$PROMPT_COMMAND extra stuff" <comment250970> (Sorry about the poor formatting, stack exchange does not make this easy!) <comment264987> Note: `export` is unnecessary and undesirable with shell variables—variables that are specific to the shell's behavior and not used by other programs invoked from the shell. There's no need to export shell variables, because interactive sub-shells will execute the startup script, and it is generally undesirable to export variables to programs run from the shell unless you intend for them to use it. <comment266817> This results in a syntax error and does not fix the issue.