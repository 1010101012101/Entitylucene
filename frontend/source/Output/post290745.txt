macOS, launchctl and dnsmasq for localhost domain spoofing <body> I am usually a Linux user, but I would like to test my mojolicious webapp on a macOS system.  thus, I would like code*.test/code code*.*.test/code and code*.*.*.test/code all to resolve to 127.0.0.1, where my webapp is eagerly listening on port 80 .  I understand that this is best done by installing dnsmasq.  For macOS,  precode# brew install dnsmasq /code/pre  and then  precode# echo "address=/test/127.0.0.1" &gt;&gt; /usr/local/dnsmasq.conf # launchctl start dnsmasq # launchctl list | grep dns 89254   0   homebrew.mxcl.dnsmasq /code/pre  so, if I understand this correctly, ping abc.test should now ping localhost.  alas, it does not.  (or, is there a better way to test?)  I also do not understand how to shut down and restart dnsmasq.  codelaunchctl restart dnsmasq/code, codelaunchctl kill dnsmasq.mxcl.dnsmasq/code, and codelaunchctl disable 89254/code (and many permutations thereof) all seem to elicit scorn but no results.  <answer290748> You've not said which version of MacOS you're on; my reply here is from macOS Sierra Version 10.12.5. (I'm using it in order to run tests against a VMWare installation of ADCS...)  strongFirst/strong, the commands to stop and start dnsmasq are:  precodesudo launchctl stop homebrew.mxcl.dnsmasq sudo launchctl start homebrew.mxcl.dnsmasq /code/pre  strongETA/strong If codelaunchctl stop/code doesn't actually stop it, it's likely that the code.plist/codefile (presumably code/Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist/code contains the lines  precode&lt;key&gt;KeepAlive&lt;/key&gt; &lt;true/&gt; /code/pre  If you don't want it to be always on, change that to   precode&lt;key&gt;KeepAlive&lt;/key&gt; &lt;false/&gt; /code/pre  instead. Or you can disable it with   precodesudo launchctl disable homebrew.mxcl.dnsmasq /code/pre  The next time you want to turn it on, run  precodesudo launchctl enable homebrew.mxcl.dnsmasq /code/pre  strongSecond/strong, you should check the other values of your dnsmasq.conf file. Here's mine:  precode[jenny@temeraire ~] $ grep -v ^# /usr/local/etc/dnsmasq.conf | grep -v ^$ domain-needed bogus-priv resolv-file=/usr/local/etc/resolv.conf server=/ad.dybedahl.se/192.168.226.10 server=/226.168.192.in-addr.arpa/192.168.226.10 listen-address=127.0.0.1 no-negcache /code/pre  Note the line coderesolv-file/code. It tells dnsmasq which nameservers to use for hosts that aren't in the dnsmasq config. In my case, it looks like this:  precode[jenny@temeraire ~] $ more /usr/local/etc/resolv.conf  nameserver 8.8.8.8 nameserver 8.8.8.4 /code/pre  So all DNS lookups that aren't answered by my virtual AD server will be handled by Google's nameservers, meaning that I can still connect to hosts that aren't in my config.   strongThird/strong, to debug whether dnsmasq acts properly, don't use ping. Instead, use dig, like so:  precodedig @127.0.0.1 abc.test /code/pre  To test whether your system is using dnsmasq as its resolver, again use dig:  precodedig abc.test /code/pre  It will tell you what nameserver it's using, among other things.  Dig will give you information about how the lookup is actually done.  strongFourth/strong, in order to use dnsmasq as your resolver, you need to also change code/etc/resolv.conf/code to point to 127.0.0.1 instead of whatever it now points at. You should start by copying your current code/etc/resolv.conf/code to code/usr/local/etc/resolv.conf/code, so that dnsmasq will know what nameservers to use. Then change /etc/resolv.conf to read   precodenameserver 127.0.0.1 /code/pre  On my laptop, I do this in System Preferences - Network - DNS. I'm not sure how you do it on a server; perhaps simply editing the file will work.  <comment367026> hi jenny---this was great.  [0] (/etc/resolv.conf claims that it is no longer used in OS X.)  [1] my macbook moves around, too, so it needs to pick up the IPv4 address via DHCP.  alas, I think DHCP also populates Network-DNS.  how do you fix DNS to 127.0.0.1, but still pick up/repopulate the IP?  [2] I just noted that `launchctl stop` automatically relaunches dnsmasq.  so how do you really stop this thing? <comment367028> @ivoWelch I've added info about how to stop the service more permanently. As for DHCP, if you go in and edit the settings as I wrote, that will override the DNS settings while still picking up on the rest of the DHCP settings. <comment367075> @ivoWelch Adding an additional spin like getting dnsmasq in various DHCP networks to work (your item 1) is beyond the scope of your original question. Please ask a new question. <comment367078> @JennyD ad item 3: `dig @127.0.0.1 abc.test` will yield a positive result if dnsmasq is set up properly. It doesn't necessarily resolve abc.test to mDNSresponder (and subsequently Safari, ping or any other app which requires name resolution) though. In an environment set up properly, ping should work. ad item 4: the injection of 127.0.0.1 into /private/var/run/resolv.conf would have to be done after every reboot/probably after every *"Renew DHCP Lease"* ... <comment367122> thanks @klanomath - I've edited the post. (Changing the nameserver in Networks settings persists after reboot; I've verified this. Editing resolv.conf directly will be overwritten, as you say.) <comment367123> Also, /etc/resolv.conf is a symlink to /var/run/resolv.conf; I tend to use the shorter path, being a unix sysadmin I have that in a "finger macro"... <comment367193> nope: `launchctl disable homebrew.mxcl.dnsmasqasd Usage: launchctl disable service-target`