How do I change desktop background with a terminal command? <body> I trying to add to my OS X configuration script a command which sets the background to the plain dark grey, however, when applied, it only sets it to the main monitor and any additional monitors currently connected keep their current background and any added thereafter still receive the default space background. What I have so far is as follows:   precode# Change Desktop default BackgroundColor to grey defaults write com.apple.desktop '{ Background = { default = {BackgroundColor = ( "0.2549019753932953", "0.4117647111415863", "0.6666666865348816" ); Change = Never; ChangePath = "/Library/Desktop Pictures/Solid Colors"; ChangeTime = 1800; DrawBackgroundColor = 1; ImageFileAlias = &lt;00000000 00ce0003 00000000 c73804cd 0000482b 00000000 000c2624 000c2633 0000ca1c 0a310000 00000920 fffe0000 00000000 0000ffff ffff0001 000c000c 2624000c 25fc000a 0789000e 00280013 0053006f 006c0069 00640020 00470072 00610079 00200044 00610072 006b002e 0070006e 0067000f 000c0005 006f0073 00780038 00360012 00394c69 62726172 792f4465 736b746f 70205069 63747572 65732f53 6f6c6964 20436f6c 6f72732f 536f6c69 64204772 61792044 61726b2e 706e6700 00130001 2f00ffff 0000&gt;; ImageFilePath = "/Library/Desktop Pictures/Solid Colors/Solid Gray Dark.png"; NewChangePath = "/Library/Desktop Pictures/Solid Colors"; NewImageFilePath = "/Library/Desktop Pictures/Solid Colors/Solid Gray Dark.png"; NoImage = 0; Placement = Crop; Random = 0; }; }; }' /code/pre  How do I set the default the the dark grey background via a terminal command? How do I change all monitors already configured to grey via a terminal command?  <answer40646> This should work for you:  precodeosascript tell application "Finder" set desktop picture to POSIX file "/Library/Desktop Pictures/Solid Colors/Solid Gray Dark.png" end tell /code/pre  There are several other ways on this Mac Rumors thread, but his way is the easiest.  <answer40653> A perl script to accomplish the same:  precode#!/usr/bin/perl use Cwd;  if ($#ARGV != 1) {     die "\nUsage: ./changedesktop &lt;filename&gt; &lt;startup disk&gt; \nwhere &lt;filename&gt; may be    any JPEG, PNG, GIF, TIFF or PSD and &lt;startup disk&gt; is the name of your boot volume.\n\n"; }  my $filename = $ARGV[0]; my $bootdisk = $ARGV[1]; my $directory = getcwd; my $file = $bootdisk.$directory."/".$filename; $file =~ tr/\//:/; system("osascript -e \'tell application \"Finder\"\' -e \'set theFile to \"$file\"\' -   e     \'set desktop picture to \(theFile as alias\)\' -e \'end tell'"); /code/pre  <answer69199> The paths need to be properly referenced using codePOSIX file/code for code/posix/paths/code or codeas alias/code with codeOld:Mac:Style:Paths/code.  Pick your poison...  POSIX path:  precodeset desktopImage to POSIX file "/Library/Desktop Pictures/Solid Colors/Solid Gray Dark.png" tell application "Finder"     set desktop picture to desktopImage end tell /code/pre  Mac path:  precodeset localLibrary to path to library folder from local domain as string set desktopImage to localLibrary &amp; "Desktop Pictures:Solid Colors:Solid Gray Dark.png" as alias  tell application "Finder"     set desktop picture to desktopImage end tell /code/pre  You can easily turn any of the above Applescripts into a terminal command using codeosascript [-e statement]/code:  precodeosascript -e 'set desktopImage to POSIX file "/Library/Desktop Pictures/Solid Colors/Solid Gray Light.png" tell application "Finder"     set desktop picture to desktopImage end tell' /code/pre  To set multiple desktops, you can try something like codetell application "System Events" to set picture of every desktop to "&lt;path&gt;"/code. Unfortunately, this seems to be broken in 10.7, so you'll end up getting the following error: codeExpected class name but found application constant or consideration./code  <answer145174> None of these other solutions work on Mavericks anymore because Apple moved the settings to a sqlite DB. But that's ok because now it's easier, the png can be anywhere in the filesystem, and all desktops (even virtual) are updated.  precode #!/usr/bin/env bash  sqlite3 ~/Library/Application\ Support/Dock/desktoppicture.db "update data set value = '/path/to/any/picture.png'";  killall Dock; /code/pre  Or, add it as a function to your ~/.bash_profile and call it as a terminal command with any non-relative path.  precode#   Update all Wallpapers function wallpaper() {     sqlite3 ~/Library/Application\ Support/Dock/desktoppicture.db "update data set value = '$1'" &amp;&amp; killall Dock  } /code/pre  codewallpaper ~/path/to/any/picture.png/code  <answer150336> The simplest way to do it in one line:  precodeosascript -e 'tell application "Finder" to set desktop picture to POSIX file "/Library/Desktop Pictures/Earth Horizon.jpg"' /code/pre  <answer249589> Combining jeremyjjbrown's answer and this Gist by willurd, the most convenient way for El Capitan and up is as follows:  ol liOpen Automator (in Applications) and create a new Service/li liSet codeService receives selected/code to codeimage files/code at the top of the workflow. You can optionally limit it to only work in Finder./li /ol  img src="https://i.stack.imgur.com/Y1ntz.png" alt="Sample image 1"  ol start="3" liAdd a codeRun Shell Script/code action to the workflow  /li liEmpty the default script and insert a slightly modified version of jeremyjjbrown's answer into the editor:  precoderead -e IMAGE; sqlite3 ~/Library/Application\ Support/Dock/desktoppicture.db "update data set value = '$IMAGE'"; killall Dock; /code/pre/li liSave the service with a name of your choosing, for example codeSet Desktop Picture on all Spaces/code./li /ol  You can now right-click any image directly from Finder and choose the service from the context menu, easily setting the background for all desktops.  <answer273628> If you prefer installing a new application to making a new function, using codem-cli/code is the way to go. It's easy to use, and it has lots of other useful features if you need.   precodebrew install m-cli  m wallpaper ./wallpapers/tree.jpg /code/pre  codem-cli/code auto detects the version of OS, internally do the same things as other correct answers using codebash/code script.  <comment45992> That's a pretty useful set of commands! I also like your .aliases one too. Thanks! <comment46006> Did you get this to work your self?  It didn't work for me. <comment46007> No that is a perl script which executes running an osascript performing the same operation as the first post with a bunch of unnecessary perl code inputing the the image file which is to be set as the background. <comment46008> gave me `./a.scpt:31:46: execution error: Finder got an error: Can’t set file "/Library/Desktop Pictures/Solid Colors/Solid Gray Dark.png" to file "/Library/Desktop Pictures/Solid Colors/Solid Gray Dark.png". (-10006)` <comment46009> Tried it again with a different color to see if it had something to do with the desktop already being set to dark grey and got `./a.scpt:31:46: execution error: Finder got an error: Can’t set file "/Library/Desktop Pictures/Solid Colors/Solid Gray Medium.png" to file "/Library/Desktop Pictures/Solid Colors/Solid Gray Medium.png". (-10006)` <comment46020> I can't take all the credit, I forked it from [mathiasbynens](https://github.com/mathiasbynens/dotfiles), I did add the keyboard, mouse, and non-working background settings though. <comment46021> Ohh and my mouse tracking speed is set hight than system preferences will allow :() thats me screaming because it tracks fast. <comment46032> @KurtRudolph Try running it within AppleScript Editor. Does it work there? I did not try it, but I believe I have in the past. <comment165668> Based upon @faraz's answer, it would appear that you need to tell Apple Script that you're supplying a POSIX path by including the POSIX keyword before the file keyword, e.g. `tell application "Finder" to set desktop picture to POSIX file "/Library/Desktop Pictures/Solid Colors/Solid Gray Dark.png"` <comment165793> @JasonMusgrove Actually, I believe that's correct. Sorry I didn't have that originally! <comment260027> The method of using `osascript` works for me only if I run `killall Dock` afterward. Does anybody else notice that? <comment263931> This is the only thing that works currently . <comment318250> @jeremyjjbrown: thanks for you answer! Unfortunately this is not working in macOS Sierra anymore.. Do have an idea where Apple might now be saving which picture to use as wallpaper?