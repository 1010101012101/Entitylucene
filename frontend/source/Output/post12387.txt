How to send an email from command line? <body> How to send an email from command line or script? I want to be able to run the script programmatically by passing the receiver and the message.  <answer12388> Since it's Unix based, you can use strongsendmail/strong command.  <answer12389> codemail -s subject someone@example.com/code  type your message, press codeCtrl+D/code to finish  <answer40142> There are two programs that I am aware of which will easily allow you to configure your Mac to send email from the command line.  I have written up HOWTOs for both of them:  ul limailsend/li limsmtp/li /ul  Of the two, I suggest codemsmtp/code.  Configuration is complicated enough that I'm not sure if I should replicate all of the steps here, but I will mention that if you use Homebrew you can install msmtp using  codebrew install msmtp --with-macosx-keyring/code  Then the rest is just a matter of setting up the related configuration files  The first is code/usr/local/etc/msmtprc/code  precode# Begin msmtprc # Set default values for all following accounts. defaults tls on logfile ~/.msmtp.log  # A first gmail address account example@gmail.com host smtp.gmail.com port 587 protocol smtp auth on from example@gmail.com user example@gmail.com tls on tls_starttls on  # this next line is crucial: you have to point to the correct security certificate for GMail. # If this doesn't work, check the mstmp documentation # at http://msmtp.sourceforge.net/documentation.html for help # # This next line should all be on one long line: tls_trust_file /path/to/Thawte Roots/Thawte SSLWeb Server Roots/thawte Premium Server CA/Thawte Premium Server CA.pem  # Set a default account # You need to set a default account for Mail account default : example@gmail.com  # end msmtprc /code/pre  Note that codetls_trust_file/code line should point to wherever you have downloaded and installed the certificates from https://www.thawte.com/roots/index.html.  I put mine in code~/Dropbox/Thawte Roots/code so that I can have it on all of my Macs.  Then you need a code~/.mailrc/code file to say where the msmtp binary is located. If you use codebrew/code it will be code/usr/local/bin/msmtp/code so the file would look like this:  precodeset sendmail="/usr/local/bin/msmtp" /code/pre  The last but crucial step is making sure your Keychain has the information exactly in the format that msmtp will expect it:  img src="https://www.blogcdn.com/www.tuaw.com/media/2010/05/msmtp-make-keychain-item-426x395.png" alt=""  I think that covers most of the details. See http://www.tuaw.com/2010/05/04/msmtp-a-free-tool-to-send-email-from-terminal/ if you want a few more specifics.  <answer40156> The most basic way to send mail is trough a telnet session with the smtp server of your provider/network. After you contacted the server and after every command the server will answer if it accepts the command with something like "250 OK", or if not with an error message.  All details can be found in RFC2821 - Simple Mail Transfer Protocol, Google for it. This basic way is great for testing why something goes wrong sending mail, but I think it's quite complicated to script it full proof.  First get an command-line interface on your computer, by starting Terminal. Then continue with the following commands, one after one.  Open a telnet session to port 25 of the smtp server of your provider/network  precodetelnet name_or_ip_of_smtp_server 25 /code/pre  say hello plus the internetname of your provider/network, like abc.com  precodeEHLO name_of_your_network /code/pre  a from=return address is needed, the &lt; and  are part of the command  precodeMAIL FROM:&lt;your_email_adress&gt; /code/pre  give one or more destinations, the &lt; and  are part of the command  precodeRCPT TO:&lt;destination_email_address&gt; RCPT TO:&lt;second_destination_email_address&gt; RCPT TO:&lt;etc_destination_email_address&gt; /code/pre  tell the server you want start sending data  precodeDATA /code/pre  now the server should answer you can start sending your mail and goes into data-mode  precodeyour data more data etc /code/pre  now finish data with a dot as only char on a line  precode. /code/pre  the server goes back to command-mode so you can quit  precodeQUIT /code/pre  <answer71229> mtcmail is another option: http://www.macupdate.com/app/mac/33505/mtcmail-cli.  [Ignore this additional text. Added because: body must be at least 30 characters; you entered 27.]  <answer92205> This worked for me, it was written with Lion in mind but works for Mountain Lion. Btw this is using Gmail so if you're not...  emstrongYou don't need to download anything! (just setup a gmail account)/em/strong  http://www.anujgakhar.com/2011/12/09/using-macosx-lion-command-line-mail-with-gmail-as-smtp/  Configure Postfix for Gmail SMTP Edit file /etc/postfix/main.cf  precodesudo vim /etc/postfix/main.cf /code/pre  and add in the following below the commented out relayhosts :-  precoderelayhost = [smtp.gmail.com]:587 smtp_sasl_auth_enable = yes smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd smtp_sasl_security_options = noanonymous smtp_use_tls = yes /code/pre  Generate sasl_password if not already exists  precodesudo vim /etc/postfix/sasl_passwd /code/pre  and enter in the following:-  precode[smtp.gmail.com]:587 username@gmail.com:password /code/pre  Run the following commands  precodesudo chmod 600 /etc/postfix/sasl_passwd sudo postmap /etc/postfix/sasl_passwd sudo launchctl stop org.postfix.master sudo launchctl start org.postfix.master /code/pre  And you are doneâ€¦.br Now, you should be able to send emails from within the command line e.g. to send the contents of a directory as a tree to an email address  precodetree /var/www/somefolder | mail -s "contents" your@yourdomain.com /code/pre  <answer247676> You may want to check out postfixconf that enables and configures OSX to send emails from the command line (using your input).   It is based on the postfix configuration that are well documented on the web here, here and here.  <comment12925> -1: sendmail is the SMTP server command <comment21727> If you are writing a program many languages have libraries that deal with email <comment45386> If you haven't configured your system to tell it where to send email, that will probably not actually send email, it will just pile up on my Mac. <comment45387> Obviously my examples in the above script assume that you are using Gmail, but it can be used for other servers as well. Change `example@gmail.com` to your Gmail or Google Apps email address. <comment108390> PS: I got this to work great when running this manually from Terminal or in scripts. However at this point I'm stuck with the problem that mails are never sent when launchd launches the script. I guess it's a problem with launchd job setup. <comment108395> I got it working. See http://apple.stackexchange.com/questions/92406/mail-does-not-work-in-scripts-launched-with-launchd <comment110428> -1: This answer is incomplete. Unless system was configured prior to executing this command, as @TJLuoma noted, this command will not work. <comment201071> +1 Thanks for adding this. Really helped me out. All I really needed was the relayhost entry in main.conf (it's my own SMTP server on my LAN). <comment261789> +1 for by the straps of your boots <comment299453> The above may be out of date. I had to do add "smtp_sasl_mechanism_filter = plain" as per http://stackoverflow.com/a/26451135/197789 to get it to work. Otherwise I got a "generic failure" error. <comment340162> TJ Luoma and melvkim are incorrect:  a standard OS X system out of the box will send email just fine with no configuration needed.  The OS X machine will act as its own SMTP server, looking up the DNS MX for the destination domain and sending the mail there. <comment340178> @JohnEDee At least as you don't expect the receiver to answer to a mail coming from `username@users_mac.local`... <comment340447> @patrix, Correct, it uses the logged-in account's long username and the Mac's self-generated ".local" address to form a "From".  I use it all the time for notification emails to me and my staff from shell-scripted processes.  TJ Luoma and melvkim were saying it "will not work" and "not actually send email", however, both of which are incorrect.