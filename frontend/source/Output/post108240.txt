CVS on OS X Mavericks <body> Apparently, Apple has removed CVS under the OS X 10.9 Mavericks devtools (and yes, it's really gone). For the uninitiated, CVS is the Concurrent Version System, a tool for keeping files up to date between different machines and users (developers).  I have some legacy projects that still require it (no, I cannot change it to use SVN, much less git).  Where is the best place to get a version that works under OS X Mavericks?  <answer108247> The easiest way for most programs is to install with a package manager like Macports, Homebrew or Fink. The porters will have worked out the issues about porting the code to OSX so it should be as simple as follows (for Macports)  ol liInstall macports, download the .pkg file and run it/li liInstall Xcode and its command line tools/li liAdd code/opt/local/bin/code to your path - the installer attempts to do this for you so you probably just need to check/li liInstall the port codesudo port install cvs/code/li liRun cvs either with the full path code/opt/local/bin/cvs/code or use your PATH/li /ol  <answer108249> A unix-ish package manager is clearly the way to go. I have moved from fink and Macports to homebrew, which has a recipe for cvs:  precodebrew install cvs /code/pre  For historical completeness, you formerly had to use the   (slightly hard to find) recipe for cvs: codebrew install homebrew/dupes/cvs/code.  After only very minimal testing, it seems to work.  <answer108271> edit: As remarked in the comments git requires a working cvs client which makes this approach just a nice interop layer but not a solution to the problem of a missing csv client.  Another option would be to use git as a cvs client and directly push to the CVS server.  Depending on your needs this could be sufficient cvs interop + a advantage of using git locally.  <answer136533> CVSNT runs on Mac OS X 10.9, and supports HQX encoding of resources etc.   Beta for 10.9 is available here: http://march-hare.com/cvspro/#downcvsnt  If you previously used Mac CVS X then this (CVSNT) is the 'command line' that was previously included.  <answer223171> I just had this same problem, and a big issue with Macports, Fink etc. is that they pull in lots of other depedencies which is confusing and unnecessary if all you need is a single tool like cvs. In my case, trying to install it using macports resulted in a popup asking me to install a java compiler (?!) and dozens of other packets had to be built so I quickly pulled eject :)  If all you need is cvs, just building it yourself is easy and more clean and the resulting binary integrates with all the existing libs etc. on the computer. You do need Xcode installed and its command-line tools, but if you need cvs, I'm sure you already have this installed.  Get the cvs sourcecode from:  http://download.savannah.gnu.org/releases/cvs/source/stable/1.11.23/  un-tar it into a folder, enter the folder, and run ./configure  You then (unfortunately) need to edit the files in src/ and lib/ to rename their getline function into, say, getlineX, because getline clashes with a libc function. I could do a patch of this and put somewhere I guess..  After this, do "make" and you will get a binary in src/cvs that you can put in your ~/bin folder or wherever, and make sure your PATH points there.  <answer271008> Following up on BjornW's answer with a patch.  After downloading and unarchiving the source from: http://download.savannah.gnu.org/releases/cvs/source/stable/1.11.23/  Copy the patch below to some file, say, codecvs-1.11.23.patch/code, then apply the patch with:  codepatch -d cvs-1.11.23 -p1 &lt; cvs-1.11.23.patch/code  Then build as per the cvs-1.11.23 codeREADME/code file instructions:  precodecd cvs-1.11.23 ./configure make make install /code/pre  Here's the patch:  precodediff -r -u cvs-1.11.23/lib/getline.c cvs-1.11.23-osx/lib/getline.c --- cvs-1.11.23/lib/getline.c   2005-04-05 06:46:05.000000000 +1000 +++ cvs-1.11.23-osx/lib/getline.c       2017-01-31 12:04:19.000000000 +1100 @@ -154,13 +154,10 @@    return ret;  }  -int -getline (lineptr, n, stream) -     char **lineptr; -     size_t *n; -     FILE *stream; +ssize_t +     getline(char ** restrict lineptr, size_t * restrict linecapp, FILE *     restrict stream)  { -  return getstr (lineptr, n, stream, '\n', 0, GETLINE_NO_LIMIT); +  return (ssize_t)getstr (lineptr, linecapp, stream, '\n', 0, GETLINE_NO_LIMIT);  }   int diff -r -u cvs-1.11.23/lib/getline.h cvs-1.11.23-osx/lib/getline.h --- cvs-1.11.23/lib/getline.h   2005-04-05 06:46:05.000000000 +1000 +++ cvs-1.11.23-osx/lib/getline.h       2017-01-31 12:03:21.000000000 +1100 @@ -11,8 +11,8 @@       #define GETLINE_NO_LIMIT -1  -int -  getline __PROTO ((char **_lineptr, size_t *_n, FILE *_stream)); +ssize_t +  getline(char ** restrict linep, size_t * restrict linecapp, FILE * restrict stream);  int    getline_safe __PROTO ((char **_lineptr, size_t *_n, FILE *_stream,                       int limit)); /code/pre  <comment126898> Did you check whether it is still in `/usr/bin/cvs`? <comment126899> Yep, it's really gone. <comment127097> I had no idea you could do that. Very cool! <comment133108> I tried the slightly shorter command `brew install cvs` (OS 10.9, Homebrew 0.9.5); it installed CVS 1.12.13, which appears to work. <comment161978> Welcome to the site. Please have a look at http://apple.stackexchange.com/help/behavior, especially the part about self-promotion. <comment167554> Yes, nknight's command is the right one. The command has changed because the CVS formula [has moved](https://github.com/Homebrew/homebrew-dupes/pull/247) from homebrew-dupes to Homebrew core in November 2013. <comment199305> I tried this, but `git-cvsimport` seems to require a CVS client, so it's a chicken and egg problem. <comment199353> Thanks @DavidMoles. I have changed the answer to make sure that everybody is aware of this limitation. I did not try it myself before. <comment273878>  I could do a patch of this and put somewhere I guess.      　　　　That would be nice, and worth submitting back.  (Not urgent for me, I generally have good luck with Homebrew.) <comment359091> I'm pretty sure my comment was relevant to the question asked, and my affiliation with the product is well known and clearly identified (e.g.: my avatar is the company logo), and I'm a member of the [Concurrent Versions System project](http://savannah.nongnu.org/project/memberlist.php?group=cvs).