Enable/disable Time Machine depending on network connection type <body> I've not got a great Wi-Fi setup here at home and it sometimes results in failed Time Machine backups.  Is there a way of specifying that Time Machine only backs up under certain circumstances - i.e. Ethernet connection is active...?  <answer99969> You can open you Network Prefs and make sure Ethernet is the top connection in the service order. You can see what I mean in this screenshot, I hope.  Then, if Ethernet is connected you should always use it as your primary connection.  See here for how to set the service priority: http://osxdaily.com/2013/06/15/set-network-connection-priority-mac-os-x/  <answer99978> This AppleScript will check if the Ethernet connection is active, and then run a Time Machine backup if so.  First, disable Time Machine in System Preferences. The below method will run it automatically.  emWhile connected to Ethernet/em, you will need to run one command manually to confirm which interface Ethernet is assigned to. Run this command:  precodeifconfig /code/pre  It should output a screen full of information. What you are looking for is a section labeled codeen/code with a number after it, and whose last line is codestatus: active/code, like this:  precodeen1: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500     options=b&lt;RXCSUM,TXCSUM,VLAN_HWTAGGING&gt;     ether 00:25:00:ef:30:3c      inet6 fe80::225:ff:feef:303c%en1 prefixlen 64 scopeid 0x5      inet 192.168.1.68 netmask 0xffffff00 broadcast 192.168.1.255     media: autoselect (100baseTX &lt;full-duplex&gt;)     status: active /code/pre  Note the number next to codeen/code at the beginning - this is the interface that your Ethernet connection is running on. In the script below, where it says codeen9/code, replace code9/code with the number from above. (If you have a Mac Pro, it will most likely be codeen0/code or codeen1/code. Otherwise, it will likely be codeen0/code.)  precodeif (do shell script "ifconfig en9 | awk '/inet/ {print $2}'") is not equal to "" then     do shell script "/System/Library/CoreServices/backupd.bundle/Contents/Resources/backupd-helper &amp;" end if /code/pre  Save this as codeEthernetTimeMachine.scpt/code into your home folder (code/Users/&lt;yourusername&gt;//code).  Next open up Terminal and type the following command:  precodepico ~/crontab /code/pre  This will open up a text editor to allow you to schedule this script to run on an hourly basis, just like Time Machine does by default. Paste this line:  precode@hourly osascript ~/&lt;yourusername&gt;/EthernetTimeMachine.scpt /code/pre  Press kbdcontrol/kbd+kbdX/kbd then type codey/code and press kbdreturn/kbd to save and exit.  To disable it, go back into Terminal, again use the command:  precodepico ~/crontab /code/pre  Then delete the line you added above and use the same steps to save and exit.  <answer100097> This is an alternative to the other script I posted. This one runs in the background and tests the network connection every two minutes to determine if it is using an Ethernet connection or wireless. If on Ethernet, it enables Time Machine; when the connection switches to wireless it disables Time Machine.  h2Step 1: System Check/h2  While connected to Ethernet, you will need to run one command manually to confirm which interface Ethernet is assigned to. Run this command:  precodeifconfig /code/pre  It should output a screen full of information. What you are looking for is a section labeled codeen/code with a number after it, and whose last line is codestatus: active/code, like this:  precodeen1: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500     options=b&lt;RXCSUM,TXCSUM,VLAN_HWTAGGING&gt;     ether 00:25:00:ef:30:3c      inet6 fe80::225:ff:feef:303c%en1 prefixlen 64 scopeid 0x5      inet 192.168.1.68 netmask 0xffffff00 broadcast 192.168.1.255     media: autoselect (100baseTX &lt;full-duplex&gt;)     status: active /code/pre  Note the number next to codeen/code at the beginning - this is the interface that your Ethernet connection is running on.  h2Step 2: Create the AppleScript Application/h2  In the script below, where it says codeset wired_interface to "0"/code, change the code0/code to the number next to codeen/code in the above output. (It should be 0; if you are on a Mac Pro, it may be 1.) Also in the below script, at the top where it says codemyusername/code, substitute your own Mac username.  precode-- Edit variables here -- global current_username set current_username to "myusername" global wired_interface set wired_interface to "0"  -- DO NOT EDIT BELOW THIS LINE -- global last_connection set last_connection to "wireless"  on idle     if (do shell script "ifconfig en" &amp; wired_interface &amp; " | awk '/inet/ {print $2}'") is not equal to "" then         -- on ethernet         if last_connection is equal to "wireless" then             -- turn TM on             -- else do nothing, we're still on ethernet             set last_connection to "ethernet"             do shell script "sudo /Users/" &amp; current_username &amp; "/TMSwitch/TM_On.csh"         end if     else         -- on wireless         if last_connection is equal to "ethernet" then             -- turn tm off             -- else do nothing, we're still on wireless             set last_connection to "wireless"             do shell script "sudo /Users/" &amp; current_username &amp; "/TMSwitch/TM_Off.csh"         end if     end if     return 120 end idle /code/pre  kbdâŒ˜/kbd+kbds/kbd to save. In the Save property sheet, set the codeFile Format/code as codeApplication/code, and check the box for codeStay open after run handler/code. Save it wherever you like - Desktop, or Applications Folder - it really doesn't matter, just know where you saved it.  img src="https://i.stack.imgur.com/fsQZb.png" alt="AppleScript Editor Save dialog box showing the File Format set to Application, and box checked for Stay open after run handler"  h2Step 3: Create the Shell Scripts/h2  Next, open Terminal. Type the following commands:  precodecd ~/ mkdir TMSwitch cd TMSwitch pico TM_On.csh /code/pre  Paste the following line in:  precodedefaults write /Library/Preferences/com.apple.TimeMachine AutoBackup -bool TRUE /code/pre  Press kbdcontrol/kbd+kbdx/kbd, type kbdy/kbd and press kbdreturn/kbd to save and exit. Then run this command:  precodepico TM_Off.csh /code/pre  And in this file paste the following line:  precodedefaults write /Library/Preferences/com.apple.TimeMachine AutoBackup -bool FALSE /code/pre  Again, kbdcontrol/kbd+kbdx/kbd, then kbdy/kbd and kbdreturn/kbd to save and exit.  Next, enter these commands:  precodechmod 4555 TM_O*.csh chown root TM_O*.csh /code/pre  h2Step 4: Setting Up codesudo/code to Run Without a Password/h2  Letting the Terminal command codesudo/code run without a password can be very dangerous. That's why the steps above created the shell scripts in their own directory, so what can actually be run is limited.  Enter the following command in Terminal:  precodesudo pico /etc/sudoers /code/pre  Then enter your administrator password when prompted.  This may bring you to a (mostly) blank screen, or it may have some text in it. If it's blank - that's fine. You'll just paste the below line at the top. If text already exists, that's also fine; use your down arrow to go right below the lines already in the code# User privilege specification/code section, as seen in the below screenshot.  img src="https://i.stack.imgur.com/3HrgX.png" alt="Terminal screenshot showing the sudoers file open in Pico"  Here, add the following line:  precode&lt;yourusername&gt; ALL = NOPASSWD: /Users/&lt;yourusername&gt;/TMSwitch/* /code/pre  In both places where code&lt;yourusername&gt;/code appears, replace it with your Mac username. Press kbdcontrol/kbd + kbdx/kbd, type kbdy/kbd and press kbdreturn/kbd to save and exit.  Test that these files turn Time Machine on and off by running the following command (assuming Time Machine is currently on):  precodesudo ./TM_Off.csh /code/pre  After a moment the Time Machine icon in the menubar should turn gray, indicating Time Machine is turned off. (You may need to click the icon for it to reflect the change). Assuming this works, run this command:  precodesudo ./TM_On.csh /code/pre  And Time Machine should be re-enabled.  h2And Off You Go/h2  Run the application you created in AppleScript Editor above, and it will remain open, enabling and disabling Time Machine as your connection switches from Ethernet to wireless and back. To disable switching, simply close the AppleScript application (right-click on the icon in the Dock and choose Quit).  <comment117617> Thanks, I do understand that piece. The problem is I explicitly need to disable backups when ethernet is not connected.  I guess I could write an AppleScript to en/disable it (something like this: http://hints.macworld.com/article.php?story=20040222210724156 grepping from ifconfig en0)... <comment117634> Would manually running time machine be an option? <comment117773> Ah - this is awesome - thanks so much!  One question - do I need to disable time machine? Or have it enabled? Surely if it's enabled it'll still run on its own schedule? <comment117774> I'm not sure what 'manually running' means - if it's enabled it will run anyway, I need to turn it on / off according to network configs, ideally. <comment117775> A thought on similar lines (sorry for double post) - could you not run something like this: http://lwgat.blogspot.co.uk/2013/02/disabling-time-machine-via-applescript.html to enable / disable time machine, and run this rather than @hourly but on network change event? <comment117786> The Time Machine icon in the status bar has a "Backup now" menu entry when right clicked. <comment117805> You would want to disable Time Machine in its settings before doing this. As far as utilizing a network change event and/or enabling/disabling Time Machine, that's definitely doable. I'll take a look tonight and throw something together in another answer. <comment117814> The one disadvantage to detecting a network change is you have to have something constantly running in the background to detect it. <comment117890> Wow, this is amazing - I'll be sure to look into it and paste my results here - I may even stick it in GitHub (with due credit of course)! <comment117899> There's a race condition here: when you connect to WiFi you have a two-minute window in which TM might start before the script notices and turns it off. <comment118026> Rather than triggering this every 2 minutes, you can trigger it whenever there is a change in the network configuration. You just have to use `launchd` and tell it to look for any changes to the `/Library/Preferences/SystemConfiguration/` folder. I have an example of this available at https://github.com/tjluoma/onnetworkchange.