How can I invert my selection in Microsoft Excel using AppleScript? (selection itself, not properties of selection) <body> I'd like to invert my selection with AppleScript. This is analogous to Adobe Photoshop's (and other Adobe products) functionality "Invert selection (Ctrl/Cmd + I to deselect what was previously selected and select what was not selected)"  ol liI emcan/em select a group of cells with AppleScript./li liI emcan/em get selected range with AppleScript/li liI emcan/em loop selected cells/li liI'd emlike to/em select all cells that are not currently selected/li /ol  h1Code/h1  precodetell application "Microsoft Excel"     repeat with item_cell from 1 to count large of selection -- all cells in selection         --do stuff with selected cells     end repeat      -- index of selected cells technique, not sure whether helpful     set sel_range to selection     tell selection to set {rowIndex, columnIndex, rowCount, columnCount} to {get first row index of sel_range, get first column index of sel_range, get count rows of sel_range, get count columns of sel_range} end tell /code/pre  h1Originally Selected Cells/h1  img src="https://i.stack.imgur.com/RvsJU.png" alt="enter image description here"  h1Desired Selection/h1  (All cells in the sheet are selected that were not originally selected) img src="https://i.stack.imgur.com/xG6he.png" alt="enter image description here"  <answer273251> I've been working on this question for a while and, hitting a brick wall, decided to try and get it to work using Visual Basic instead. My hope is that doing this will make it easier to get the code right within AppleScript, so I'm sharing the Visual Basic code in case it helps someone else to get an AppleScript version working - not that I've given up on this myself yet! :)  precodeSub InvertSheet()  Set s1 = Selection Set s2 = Range("A1:Z100") Set sinv = Nothing  For Each s In s2 If Intersect(s, s1) Is Nothing Then If sinv Is Nothing Then Set sinv = s Else Set sinv = Union(sinv, s) End If End If Next  If sinv Is Nothing Then Else sinv.Select End If End Sub /code/pre  NOTES:   ul liI did come across a problem - namely that I couldn't find a way to get this to apply to the entire sheet without it causing Excel to hang for extremely long periods of time (probably because it has to check 1,048,576 rows and 16,384 columns) to do so./li liTo get around this problem I used codeSet s2 = Range("A1:Z100")/code to limit the area of the sheet that the code applies to to the range of A1:Z100. However, this can be changed to suit a larger area if needed./li liI imagine trying to cover the whole sheet will be a problem within AppleSCript as well./li /ul  <answer274099> Finally, I have a solution. Huge thanks to Monomeeth for the VBA version that set me on the right path. em(And making it possible to do this under Windows too)/em  Works similarly to Monomeeth's version. It has a emrange considered/em for performance reasons. Set it by changing this line accordingly:  codeset range_considered to range "A1:Z100" of active sheet/code  Here it is:  precode-- use "intersect" to test whether the considered area overlaps with the selected area -- use union to append non-selected cells to a new range  tell application "Microsoft Excel"     set screen updating to false -- optimize performance     --tell active sheet of active workbook     set range_considered to range "A1:Z100" of active sheet     set range_selected to selection     set range_new_selection to "Nothing"      -- setup ref vars for selection     tell selection to set {range_selected_row_index, range_selected_column_index, range_selected_row_count, range_selected_column_count} to {get first row index of selection, get first column index of selection, get count rows of selection, get count columns of selection}     -- setup ref vars for considered     tell selection to set {range_considered_row_index, range_considered_column_index, range_considered_row_count, range_considered_column_count} to {get first row index of range_considered, get first column index of range_considered, get count rows of range_considered, get count columns of range_considered}      -- go column by column and iterate each row in each column     repeat with considered_col_step from range_considered_column_index to range_considered_column_count         repeat with considered_row_step from range_considered_row_index to range_considered_row_count             set range_this_cell to range (get address row considered_row_step of column considered_col_step of active sheet) of active sheet             log range_selected             try                 set range_test to intersect range1 range_this_cell range2 range_selected -- test for intersection with selected                 (*use try to detect error. Will fail if cell is within selection*)                 log "TRUE Intersected"             on error                 (*Create or append to range_new_selection*)                 log "FALSE intersected"                 if range_new_selection is "Nothing" then                     set range_new_selection to range_this_cell                 else                     set range_new_selection to union range1 range_new_selection range2 range_this_cell                 end if             end try         end repeat     end repeat     try         select range_new_selection     on error         log "Could not select new range."     end try     set screen updating to true -- optimize performance end tell /code/pre  <comment343270> When we talk about setting a fill color, “inverting a selection” could mean two different things. Is your goal to swap the text color with the background color in each selected cell? Or are you trying to select a set of cells that is not currently selected (and vice versa)? Where do you want this to end? (In your example screenshot, would you want your inverted selection to go past `H18`, or past `H20`? How about `A200`? `ZZ999`? `XFD1048576`?) <comment343282> @Synoli "set a set lf cells that is not currently selected" (and vice versa) The selection can be any cells in any particular order, hence the uneven selection in my example. If it were nice and neat, I could easily program it. <comment343285> So in your example, would H20 need to be selected, or would it not? <comment343287> @Synoli Yes, because it lies within the realm of the unselected. <comment343303> Maybe I'm missing something, but by _invert my selection_ do you want Excel to swap the text colour with the background colour (as Synoli asked about) or do you just want the cell shaded a particular colour? <comment343491> I'm revisiting this question and was wondering if could share the entire code, rather than just the snippet? <comment343493> This answer does not address the question. <comment343494> @macmadness86 I think it's not just me who doesn't understand what on earth you're asking. Mind clarifying a bit and then leaving a comment here so I can check it out more? <comment343495> @macmadness86 Perhaps I should have been a little clearer, but what I really meant by the sentence _If I've totally misunderstood your question, please let me know_ was for you to actually clarify the question, rather than just telling me my answer doesn't address it. If you don't mind, perhaps you could edit your question to include two screenshots (one before, one after) so we know what you want the code to do. Not trying to be difficult, just trying to clarify this so someone can help you. :) <comment343496> Oh! Just read your latest edit and it now makes sense to me! Thank you. :) <comment343499> I thought synoli clarified the question pretty well in the comments. And I did adjust my question to make it clearer shortly after synoli's comments. I can add an screenshot showing the desired result, sure. <comment343685> Ok, I have two questions for you: (1) What version of Excel are you using? (2) Does the solution have to use AppleScript? A bit of context behind my two questions... I think I have achieved what you want by using Excel's built-in Visual Basic support. However, depending on the version of Excel this may not be relevant, and if you require the solution to be in AppleScript, then it's also not relevant. :) <comment343696> @Monomeeth I am working in an enterprise environment with multiple versions. The latest version would suffice, however. Obviously, the parameters of the question have been set, so Visual Basic would not be the "accepted" answer, but nonetheless I think it would be quite useful to others and would perhaps provide a clue as to solving the problem in AppleScript. I would recommend changing your existing answer, because it would then apply to the question. <comment344979> This is great news! Very happy you succeeded with what you wanted. And thank you for sharing the result! :)