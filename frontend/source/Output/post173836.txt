Why `echo -n` doesn't work in this script on mac terminal? <body> I am learning shell from tutorialspoint today:http://www.tutorialspoint.com/unix/unix-shell-loops.htm  And I copied this code block to a codeloop.sh/code file:  precode#!/bin/sh  a=0 while [ "$a" -lt 10 ]    # this is loop1 do    b="$a"    while [ "$b" -ge 0 ]  # this is loop2    do       echo -n "$b "       b=`expr $b - 1`    done    echo    a=`expr $a + 1` done /code/pre  But when excute it, I got things like:  precode... -n 4 -n 3 -n 2 -n 1 -n 0 ... /code/pre  Apparently, the code-n/code flag doesn't work in codeecho -n "$b "/code.  Then I move the same file to my Ubuntu virtual system. Runs it.  I got ï¼š  precode0 1 0 2 1 0 3 2 1 0 4 3 2 1 0 5 4 3 2 1 0 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 /code/pre  I'm confused, though Ubuntu use dash as its default codesh/code, but OSX use official codebourne shell/code as its codesh/code, why the script failed here? How to fix it?  <answer173837> Echo is both a binary program (code/bin/echo/code) as well as builtin command in some shells such as bash and sh.  As codeman echo/code states,    precode Some shells may provide a builtin echo command which is similar or iden-  tical to this utility.  Most notably, the builtin echo in sh(1) does not  accept the -n option.  Consult the builtin(1) manual page. /code/pre   In order to fix this, you can change your script to use bash by setting the first line to   precode#!/bin/bash /code/pre  Or change your invocation of echo to  precode/bin/echo -n "$b " /code/pre  <answer173873> codeecho/code is not portable as you experienced. I would suggest to use the POSIX alternative codeprintf/code:  precodeprintf "$b " /code/pre  <comment204613> So tutorialspoint made a mistake? <comment204630> Possibly but sh is not the same everywhere e.g. on OS X it is link to bash on other Unicies can be ash etc. (or even sh) and the POSIX [definition of echo](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html) says -n is not portable <comment204631> @Zen, Tutorials.com probably assumed Linux.  Mark, you are absolutely right. Since this is on Ask Different I answered for OS X. <comment257694> 1, OSX (Atleast 10.10.x) Bash does not use builtin echo. 2. `If bash is invoked with the name sh, it tries to mimic the startup behavior of historical  versions of sh as closely as possible, while conforming to the POSIX standard as well.` The Builtin echo for Bash as SH will work as SH's builtin echo should. It will act differently than the Bash builtin echo. <comment257745> @cde, are you sure that bash does not use the built-in echo? Invoked as /bin/bash or as /bin/sh, `type echo` returns `echo is a shell builtin` for me. <comment257776> Geez, your right. Just tried `/bin/echo -e "\n"` and it doesn't parse the newline character. Because the OS X echo lacks "-e" support, but the builtin bash one does. Damn it apple.