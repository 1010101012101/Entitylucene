How does DiskImageMounter.app work? <body> Normally to mount a disk-image, I would run the command codesudo mount /path/to/disk/image /path/to/mountpoint [-t filesystem type]/code. This is what I would do for any Unix-like system, including Darwin/OS X. But, recently I noticed that when I double-click a disk image to mount it (which uses code/System/Library/CoreServices/DiskImageMounter.app/code), there is a new node created in code/dev/code (/dev/diskX). If I use codeDiskImageMounter.app/code to mount a raw disk image with two partitions, they will be both mounted in code/Volumes/MountpointsNameUsuallyUntitledAndUntitled2/code and in code/dev/code there will be codediskX/code, codediskXs1/code, and codediskXs2/code. And when I mount an image with one supported filesystem and another partition that can't be mounted, in code/dev/code there will be codediskXs1/code, which will be mounted), and codediskXs2/code, which won't. And the node in code/dev/code (/dev/diskX) is identical to the original image. I presume the reason this is done is to handle the issue that the image might have multiple partitions and it might not be a raw disk image. How does codeDiskImageMounter.app/code perform this? It it possible in other Unix-like systems (mainly Linux)? It would be really helpful so that I don't have to copy 60GB partitions from 60.1GB Disk Images into their own image (which most of the time I don't have storage to do) to mount them whenever I'm using Linux (which is what I use %90 of the time). And how does Disk Utility knows that it is a disk image?brbrimg src="https://i.stack.imgur.com/xqxdS.jpg" alt="List of drives in Disk Utility"  <comment297707> Linux is not POSIX. <comment297708> Thank you @MaxRied. I corrected that.