ssh fails: image not found [preauth] <body> When I try to SSH to my computer, ssh fails with this error:  precodeMothership:~ kuyan$ ssh kuyan@localhost Connection closed by ::1 /code/pre  This also happens when I attempt to SSH to my user from another computer. This message appears in Console when I attempt to connect:  precode12/12/12 3:44:30.468 PM sshd[2576]: fatal: ssh_sandbox_child: sandbox_init: dlopen(/usr/lib/libsandbox.1.dylib, 261): image not found [preauth] /code/pre  Relevant information:  ul liI'm using a different version of sshd than OS X provides, installed via codebrew install openssh/code - but this error occurs with both versions./li licode/usr/lib/libsandbox.1.dylib/code exists:  precodeMothership:~ kuyan$ ls /usr/lib/libsandbox* /usr/lib/libsandbox.1.dylib /usr/lib/libsandbox.dylib /code/pre/li liHere's my /etc/sshd_config. The relevant line seems to be codeUsePrivilegeSeparation/code: when uncommented and set to codeyes/code instead of codesandbox/code, everything works A-OK./li liThough I'm not using MacPorts, the error I'm getting is essentially the one here./li lisshd version: codeOpenSSH_6.1p1, OpenSSL 0.9.8r 8 Feb 2011/code/li /ul  <answer85703> dtruss shows:  precode2892/0xdc8e:  stat64("/usr/lib/libsandbox.1.dylib\0", 0x7FFF500DA5F0, 0x7FFF500DB500)        = -1 Err#2 /code/pre  which is ENOENT (No such file or directory) and the reason is probably that chroot already happened.  If you are so foolish as to experiment by  precodesudo mkdir -p /var/empty/usr/lib sudo cp /usr/lib/libsandbox.1.dylib /var/empty/usr/lib /code/pre  You will move the crash to the next shlib not under /var/empty/  precodesshd[3256]: fatal: ssh_sandbox_child: sandbox_init: dlopen (/usr/lib/libsandbox.1.dylib, 261): Library not loaded: /usr/lib/libsqlite3.dylib\\n  Referenced from: /usr/lib/libsandbox.1.dylib\\n  Reason: image not found [preauth] /code/pre  If you persist with this madness  precodesudo cp /usr/lib/libsqlite3.dylib /usr/lib/libMatch.1.dylib /var/empty/usr/lib/ /code/pre  sshd will start to work again at least for SSH keys, passwords still don't work.  You can also edit code/usr/local/etc/sshd_config/code changing  precodeUsePrivilegeSeparation sandbox /code/pre  into  precodeUsePrivilegeSeparation yes /code/pre  But outside of debugging purposes I don't suggest trying any of this.  <answer120709> I've fixed this problem in MacPorts' sshd by porting a patch from Apple's sshd (which can be found at http://opensource.apple.com/source/OpenSSH/OpenSSH-186/). Apple moved the function that calls codesandbox_init(3)/code (which calls codedlopen(3)/code internally) before the codechroot(2)/code call that would make loading the library fail.  The required patches are  ul lihttp://trac.macports.org/browser/trunk/dports/net/openssh/files/patch-sandbox-darwin.c-apple-sandbox-named-external.diff,/li lihttp://trac.macports.org/browser/trunk/dports/net/openssh/files/patch-sshd.c-apple-sandbox-named-external.diff and/li liputting http://trac.macports.org/browser/trunk/dports/net/openssh/files/org.openssh.sshd.sb into the location referenced in the first patch./li /ul  and openssh needs to be built with code-D__APPLE_SANDBOX_NAMED_EXTERNAL__/code in the preprocessor flags.  The failure to authenticate with passwords is because OS X doesn't support the required library functions to do that without using PAM. Setting codeUsePAM yes/code in your codesshd_config/code should work (as should applying http://trac.macports.org/browser/trunk/dports/net/openssh/files/pam.patch, which changes the default to enabling PAM).  <comment106050> Can you say more about why 'UsePrivilegeSeparation yes' is insufficient? Because right now that's the only option (AFAICT) if you want to use a non-standard sshd. <comment243119> "This madness" is stock behavior from an OpenSSH download. I don't think the guy asking the question is doing anything special, other than using and building OpenSSH as intended by the OpenSSH team. <comment243134> When you configure OpenSSH before the build, you should include `--with-libs="-lsandbox"`. The Macports and Homebrew folks should probably do the same. From building OpenSSH from scratch (see [Building OpenSSH for OS X?](http://superuser.com/q/961349/173513)), I know its not included on OS X but its needed to avoid ***`fatal: ssh_sandbox_child: sandbox_init: dlopen(/usr/lib/libsandbox.1.dylib, 261): image not found [preauth]`***. I also think its the easiest way to avoid it rather than hacking the source code. <comment243138> Why not configure with `--with-libs="-lsandbox"`? Its much easier than patching the source code. The dependency will ensure `libsandbox` is loaded by [`dyld(1)`](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html) at load time. There will be no need to mess with dynamic loading at the wrong time. <comment243201> I just used the patches that Apple applies to the copy of OpenSSH they ship with OS X. They allow the use of a (possibly more specific, I couldn't quickly find the actual definition of `kSBXProfilePureComputation`) named sandbox, which needs to be loaded at runtime and requires moving the sandboxing before the chroot. So this is really more about (a) supporting a named sandbox rather than supporting sandboxing in general, which could be done with `-lsandbox`, and (b) aligning with the behavior of Apple's OpenSSH.