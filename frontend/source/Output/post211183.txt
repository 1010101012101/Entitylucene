How to update Server 5 to TLS 1.2? <body> In the latest version of Apple's Server app version 5.0.4 running on El Capitan (10.11.2), SSL websites use TLS version 1.0. But, as one Ivan Ristic says, « The bottom line is that TLS 1.0 is insecure and we must migrate away from it ». How to achieve that with Server 5?  <answer218515> ol liGo to http://www.apple.com/feedback and send feedback demanding that they update Server and OS X to support TLS 1.2. It's ridiculous that they don't, especially considering that in iOS 9 and El Capitan they require that Apple developers release software that only talks to TLS 1.2 servers. Even if you could patch Server to work with TLS 1.2, what happens when Apple updates Server again, and it still doesn't support TLS 1.2? When you install that update, will it overwrite whatever you put into place?/li liIn the mean time, the only real option you have, I guess, is to install OpenSSL 1.0.1 or later, download the Apache source code, and then build it linking against OpenSSL 1.0.1, and then replace OS X's Apache with the one you just built. That will almost certainly require disabling System Integrity Protection because you can't modify the core OS files like apache2. You might be able to get away with just swapping out mod_ssl.so after you do your build. But it's ridiculous that we'd even have to resort to this! Apple needs to fix this!!! (see https://serverfault.com/questions/265556/upgrade-openssl-mod-ssl-on-mac-os-x-server)/li liDownload VirtualBox, and install CentOS or another security-enhanced Linux flavor, and just run your server out of that on the Mac. Because, evidently, Apple CBA to chew gum and walk at the same time./li /ol  UPDATE:  Here are the exact steps that I did to get (2.) above to work.  This gets OS X Server 5 to work with TLS 1.2 and forward secrecy on 10.11.1, making ATS perfectly happy (especially if you're a developer this is really cool).  ol liInstall Homebrew and brew install openssl, brew install PCRE/li liDownload the latest source for Apache, apr, and apr-util/li liExtract Apache source into strong/usr/local/src/httpd-2.4.17/strong/li liExtract apr and apr-util archives to strong/usr/local/src/httpd-2.4.17/srclib/apr/strong and strong/usr/local/src/httpd-2.4.17/srclib/apr-util/strong/li liReplace the character "+" with the word "apache2" in the files config.layout inside the apr and apr-util dirs/li liIn Terminal, execute the following commands:  precodecd /usr/local/src/httpd-2.4.17 CFLAGS="-arch x86_64" ./configure --prefix=/usr/local/apache-2.4.17 --with-included-apr --with-included-apr-util -with-mpm=prefork --with-ssl=/usr/local/opt/openssl --enable-mods-shared=reallyall --enable-layout=Darwin make make install /code/pre/li liCopy mod_hfs_apple.so, mod_authnz_ldap.so, and mod_ldap.so from strong/usr/libexec/strong into strong/usr/local/apache-2.4.17/libexec/apache2//strong/li liDisable SIP: Restart into Recover mode (command-R), open Terminal, and type codecsrutil disable/code. em(This allows you to be able to make changes inside the /usr/sbin and /usr directories, necessary to swap out the insecure default Apache with the new secure one you'll be building.)/em/li liRestart back into normal mode, open Terminal, and type the following commands:  precodesudo mv /usr/sbin/httpd /usr/sbin/httpd.old sudo mv /usr/libexec/apache2 /usr/libexec/apache2.old sudo ln -s /usr/local/apache-2.4.17/sbin/httpd /usr/sbin/httpd sudo ln -s /usr/local/apache-2.4.17/libexec/apache2/ /usr/libexec/apache2 /code/pre/li liRe-enable SIP: restart into Recover mode, open Terminal, and type codecsrutil enable/code. /li liRestart back into normal mode and download the latest source for PHP, then extract it to strong/usr/local/src/php-5.6.16/strong (or whatever version; 7.0 just came out, woot, but I don't know if it would break OS X Server's own uses of PHP)/li liConfigure PHP with the following command (modify as needed, but this worked for my LAMP stack with OS X Server 5):  precodeln -s /usr/local/opt/openssl /usr/local/openssl cd /usr/local/src/php-5.6.16 CFLAGS="-arch x86_64"  ./configure --with-openssl=/usr/local/opt/openssl --with-pcre-regex=/usr/local/opt/pcre --with-curl=/usr/bin/curl --enable-exif --with-mysql=/usr/local/mysql --with-mysql-sock=/tmp/mysql.sock --with-pdo-mysql --enable-opcache --with-apxs2=/usr/local/apache-2.4.17/bin/apxs --prefix=/usr/local/apache-2.4.17/php/ --enable-sockets --enable-zip --with-pear=/usr/local/apache-2.4.17/lib/php --enable-mbstring --with-mysqli make make install /code/pre/li liIn a text editor, edit the file: /Library/Server/Web/Config/Proxy/servermgr_serviceproxy_customsites.plist Starting at line 65, perform these changes (lines to emdelete/em, strongnew lines/strong):     emSSLCipherSuite &quot;ALL:!aNULL:!ADH:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM&quot;/em      strongSSLCipherSuite &quot;ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS&quot;/strong      strongSSLHonorCipherOrder On/strong      emSSLProtocol -ALL +TLSv1/em      strongSSLProtocol -SSLv2 -SSLv3/strong      emSSLProxyProtocol -ALL +TLSv1/em      emSSLProxyProtocol -SSLv2 -SSLv3/em /li liNext, make a similar change in apache_serviceproxy_customsites.conf, starting at line 13 (lines to emdelete/em, strongnew lines/strong):     emSSLCipherSuite "ALL:!aNULL:!ADH:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM"/em      strongSSLHonorCipherOrder On/strong      strongSSLCipherSuite "ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS"/strong      emSSLProtocol -ALL +TLSv1/em      emSSLProtocol ALL -SSLv2 -SSLv3/em      emSSLProxyProtocol -ALL +TLSv1/em      strongSSLProxyProtocol ALL -SSLv2 -SSLv3/strong /li liNext, make the exact same changes as in step 14., in apache_serviceproxy.conf, starting at line 198./li liStart OS X server and run the following command to verify that you have succeeded: /usr/bin/nscurl --ats-diagnostics https :// [[your custom site's https url]] Note: the URL will obviously need to be formatted properly. I put an extra space in there before the colon because otherwise this post gets sent to moderation./li /ol  In my case ALL of the tests came back with a "PASS."  I can provide you a git patch file to make the changes to your .conf files assuming you still have a virgin install and you're on the same version as me.   <comment283625> My question is now obsolete, because the latest Server 5.1 (on El Capitan 10.11.4) fully supports TLS 1.2, at long last.