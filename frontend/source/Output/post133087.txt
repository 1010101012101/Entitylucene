How to prevent the application launched in Terminal from undesirably exiting? <body> I launch applications from the Terminal with commands like this one :  code/Applications/Mail.app/Contents/MacOS/Mail &amp;/code  The important part is the code&amp;/code.  ul liFor Unix / Linux / Solaris :   ul liI have learned at school that adding the code&amp;/code makes the program live on his own. /li liI strongly remember launching a command like codexeyes &amp;/code and having the program running safe even after I close the shell./li /ul/li liOn Mac OS X (Unix inside) :   ol liI launch an app with code&amp;/code and I close the Terminal window : the application exits ! /li liWhy does this undesirable behaviour happen on Mac OS X ? /li liHow can this be fixed ? /li /ol/li /ul  <answer133089> Using the ampersand "code&amp;/code", you are telling Terminal to run the process in the background of the shell itself. Thus, when you close the shell (and kill the process), the GUI (Mail.app itself) will also close.   The correct command to launch Mail from the terminal is simply:  precodeopen -a Mail; exit /code/pre  hr  strongEdit:/strong I just found this over at U&amp;L Stack Exchange: What does ampersand mean at the end of a shell script line? The answers provided are excellent and explain exactly what's going on in more detail and better than I ever could! I highly recommend reading through it.  <answer133090> When you close a terminal window, it sends a SIGHUP (hangup signal) to the shell, which then sends SIGHUP to all the processes it started. This is traditional behavior for bash and many other shells, and the traditional solution to this is to use nohup.  There are ways that different Unix machines can differ, so it's possible that the specific terminal emulators you used or the specific shells you used behaved different.  But it's not specific to OS X.  For example, there is a question on this same issue on Ubuntu.  <answer133091> The "standard" way of accomplishing what you want to accomplish (on OS X as well as on Linux, FreeBSD or other systems) is to use the command codenohup/code:  precodenohup program &amp; /code/pre  This will start codeprogram/code, which will run in the background relative to the shell because of the code&amp;/code - and will ignore hangup signals due to the nohup command.  This way the program will continue running even though you close the shell. It doesn't matter if you're closing the shell because you're closing Terminal.app, or you're closing the shell because you are disconnecting from a ssh connection to the computer, or similar.  <answer133093> I have found a solution : fighting evil with evil.  I launch my app with this kind of command :   code/Applications/Mail.app/Contents/MacOS/Mail &amp; exit/code  The shell exits at once. And the app survives, even after I close the Terminal window.  But this solution is not very handy.  <answer133096> @jksoegaard has the proper commands but as you mentioned in the comment, it creates a nohup.out file.  To stop the nohup.out file from being created, you need to redirect STDOUT and STDERR somewhere else.  The complete command would be codenohup program &amp;&gt;/dev/null &amp;/code.  This will run your program in the background, ignoring the SIGHUP, and sending all STDOUT and STDERR to /dev/null.  However, if you didn't remember to add nohup (like in your original question), you can use the codedisown -arh/code command to mark all backgrounded running jobs to ignore the SIGHUP.  <answer133148> I have found the solution :  strongcode(/Applications/Mail.app/Contents/MacOS/Mail &amp;)/code/strong  It is simple, it is pretty, and it works !  The parentheses code( )/code launch the command in a sub-shell.  <comment157670> What about passing command-line params to the app ? Like this : `/Users/nicolas/Desktop/Firefox-29-fr/Firefox.app/Contents/MacOS/firefox -profile "/Users/nicolas/Desktop/Firefox-29-fr/Profil-Firefox-29-fr/" -no-remote &` <comment157676> This creates a file `nohup.out` in the current folder. Even when there is nothing to write. After a few weeks, I would have files `nohup.out` everywhere in my Mac. :-( <comment157678> @NicolasBarbulesco That is a separate question - see [the man page for open](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/open.1.html) and I think a question here <comment157679> You really should be opening Applications that are bundled with [open](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/open.1.html). That's future proof as bundle contents change as well as canonical. <comment157724> What about launching a specific application, not being in `/Applications`, but at a specific path ? Like this : `/Users/nicolas/Desktop/Firefox-29-fr/Firefox.app/Contents/MacOS/firefox -profile "/Users/nicolas/Desktop/Firefox-29-fr/Profil-Firefox-29-fr/" -no-remote &` <comment157725> Nice answer, yet still complicated. And nice profile image. :-) <comment157726> @Ian — Here I am particularly interested in opening applications who are at a specific path, not in `/Applications`, and not bundled with my Mac. <comment157730> @NicolasBarbulesco open [full path] , or cd to the directory and open [file]. You can use ~/ for your home folder and the special character, "asterisk", as shorter notation assuming no other strings match the value, IE: ~/De*/Fire* ...et cetera. Or just write a simple script: cat  nameofscript ..... #! /bin/sh .... open [full path] .... ^D ..... chmod +x nameofscript..... .\nameofscript .... and optional, mv nameofscript $PATH/yourpersonalbin. Irecommend reading man open. It's a simple command, and as a simple command the tradeoff is it's not that powerful. <comment157734> So : `open /Applications/Mail.app/Contents/MacOS/Mail ; exit` This launches Mail. **But :** This terminates my Terminal window. And this opens a new Terminal window. And, when I close the new Terminal window, Mail undesirably exits ! Back to square 1. <comment157754> Sorry, still need to use the -a argument: `open -a Applications/Mail.app/Contents/MacOS/Mail; exit` <comment157760> @njboot — It works — with a `/`. But it terminates my Terminal window. <comment157764> `.app` folders are called "bundles", and the `open` command can launch them whether they are in the `/Applications` folder or any other folder. The "bundle" term in this context does not mean "shipped with OS X". <comment171985> @NicolasBarbulesco Use either `nohup command/dev/null&` or `command&disown`. <comment195594> Related question: http://apple.stackexchange.com/q/119319/20773 <comment219834> This worked for me as well, thanks <comment269226> open does not behave like launching a program from the command line.  If it's already running, the window is simply brought to the front, it's not executed again. <comment269227> open is the same as clicking the icon.  It's not the same a launching the app from the command line as the OP asks. <comment336954> --and the & returns from the program to the shell without waiting, so you can keep using the shell or terminate it, without the program you started exiting.