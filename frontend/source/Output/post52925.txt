FileVault 2 Login Issues on OpenLDAP Network with Admin, Managed, Mobile Account on Lion 10.7.4 <body> This issue occurs on any machine with Lion in my environment. I install Lion and connect to OpenLDAP for authentication. I enable FileVault.  strongSome users were reporting that when they'd wake their computer from sleep or reboot, the only available account to unlock FileVault was Administrator (not their local cached OpenLDAP account any longer)./strong  In an attempt to reproduce this issue, I shut down all network interfaces on my test MacBook Pro and rebooted -- sure enough FileVault will only allow me to unlock my hard drive by using the Administrator password, just as it occurred for my users.  Also, when I tried to check to see if my user account was still enabled in FileVault (by accessing strongSystem Preferences/strong - strongSecurity &amp; Privacy/strong), System Preferences emcrashes/em.   I found a workaround that sometimes works: Open any other System Preferences pane (for example, Users &amp; Groups), and authenticate by clicking the lock icon. Then click Show All to go back to the main System Preferences UI, and access Security &amp; Privacy again. It will work. In the FileVault tab, the text "Some users are not able to unlock this disk" appears (presumably my Admin, Managed, Mobile Account). I click on the "Enable Users" button and it brings up a dialog, but in this dialog my user account is the only one listed, and it has a green checkmark badge, as though it's set up properly (even when it isn't). If I click the "Done" button here, it appears to process something for a moment. If I reboot after doing this, it works, and I'm able to authenticate as myself.  I think what is happening here is that the network is shutting down on MacBooks that are in sleep mode or shut down, and FileVault is then removing any accounts that authenticate with LDAP from the Enabled Users. I presume something is broken too here, due to the crash that happens when trying to investigate the FileVault configuration.  h1Steps to Reproduce/h1  ol liInstall Lion./li liConnect to my OpenLDAP server./li liEnable FileVault 2, enable LDAP-authenticated user to unlock FileVault./li liReboot./li liIt works!/li liLog in, and disable network interfaces, with the goal of forcing Lion to use the cached LDAP credentials for user authentication in FileVault./li liReboot./li liThe only user that is available for authentication is Administrator./li liAfter logging in as Administrator, then logging out, and logging back in as the LDAP-auth'd user, I try to access System Preferences - Security &amp; Privacy. This causes System Preferences to crash with the crash dump pasted below. The only way to prevent this crash is to authenticate by clicking the lock icon on any other System Preferences pane (e.g. Users &amp; Groups), then click "Show All", then click "Security &amp; Privacy" again. This time it will work. Details are noted in the above Summary section of this bug report./li /ol  h1Expected Results/h1  I would expect FileVault 2 authentication to work for the user it is originally set up under.   h1Actual Results/h1  This isn't happening, and the users end up not able to unlock their machine (and thus, can't work without me (the sysadmin) coming over and unlocking their machine as Administrator, then logging out and letting them log into OS X under their account). I have filed a bug report with Apple, but heard nothing from them. I'm going to get in touch with phone support to see if it is of any use, but I'm curious if anyone here has encountered and somehow overcome these issues.  h1Notes/h1  Here is the crash log produced when trying to access Security &amp; Privacy after the issue occurs:  http://pastebin.com/2ewfZCUP  <answer53245> Assuming they are mobile accounts (which should cache required user information locally on login) and there's a possibility of the network connectivity to the LDAP server not being immediately available / available at all, I'm highly suspicious of this log line:  2   libcsfde.dylib                      0x00007fff8565af1f CSFDEGetUserEntryForUUID + 134  This is the thread that's crashing in your log and right before it crashes, it's attempting to get the length of a string returned as the result of that particular (private) library call.  The name of the call seems to imply: CoreServices Full Data/Disk Encryption (aka FileVault2) "GetUserEntryForUUID" - note: This is a function asking emFileVault/em for user information based on a UUID, not the Collaboration framework, Identity Services, DirectoryServices / OpenDirectory, etc.  This bit of code is asking FileVault to provide details about a user with only UUID information, which sounds like FV is tracking user information separately (possibly) from the rest of OS X. This emis/em accurate, because the FileVault2 procedure, as part of marking users available to unlock the boot OS partition, writes some information to the recovery partition.  However, it sounds like there's a breakdown somewhere with OpenLDAP / mobile / "alternative" directory account authentication mechanisms and the necessary information isn't being written to be able to unlock it without network access to the OpenLDAP server.  This is just a shot in the dark - but maybe an Apple rep would be able to help more with this. Sounds like a legit real bug to me.  <answer54030> FileVault 2 uses the strongGeneratedUID/strong user attribute to save who is permitted to unlock an encrypted volume. If the strongGeneratedUID/strong of a user differs from what was generated (or pulled from LDAP) when FileVault 2 was enabled, the user will not be permitted to unlock the machine, as their account will appear to be unavailable at the EFI menu. Also, this causes the crash of System Preferences on their Mac whenever they try to access the Security &amp; Privacy prefpane.  This problem arises when code/usr/bin/mcxrefresh/code runs and pulls a codenull/code value or a value different than what is stored locally from LDAP (if the attribute isn't defined for the user in question or is defined incorrectly, respectively), overwriting the strongGeneratedUID/strong stored locally (which is generated and only stored locally when FileVault 2 is enabled without a matching LDAP attribute).  In other words, if an strongapple-generateduid/strong value exists in LDAP for a user and is mapped properly on the users Mac to the strongGeneratedUID/strong attribute, FileVault 2 will not generate a new value, but will instead use the value stored in LDAP.  I was able to resolve this issue by adding an attribute called codeapple-generateduid/code to the LDAP entry of any user experiencing this issue.  I could generate a random value for this attribute in Python by running the following one-liner from my terminal:  codepython -c 'import uuid; print str(uuid.uuid4()).upper();'/code  This isn't the only step, however. You must also add a mapping for this attribute on the client side. This is easily done using the following steps:  ol liOpen strongSystem Preferences/strong./li liClick strongUsers &amp; Groups/strong./li liClick strongLogin Options/strong./li liClick on the strongUnlock Icon/strong./li liUnder strongNetwork Account Server/strong, click strongEdit/strong./li liClick to highlight your directory server./li liUnder strongServices/strong, double-click on your directory service (in my case, it was LDAPv3)/li liIn the window that slides open, highlight your configuration name, and then click the strongEdit.../strong button./li liUnder strongSearch &amp; Mappings/strong scroll down and single-click on strongUsers/strong to highlight it./li liClick the strongAdd/strong button (the left one)./li liChoose emGeneratedUID/em from the list of available Attribute Types./li liIn the right column, click the Add button, and type codeapple-generateduid/code. Click strongOK/strong to save the changes until you're back at the main System Preferences dialog./li liAt this point a mapping from emGeneratedUID/em to codeapple-generateduid/code has been created. Now when OS X looks up the GeneratedUID value it will get the value of apple-generateduid from the user in questions LDAP entry./li /ol  Finally, it's important that the locally stored value of GeneratedUID and value stored on LDAP match. Run the following command and make sure the two GeneratedUID values match:  codedscl /Search search /Users GeneratedUID $(dscl . read /Users/$(echo $USER) GeneratedUID | cut -d " " -f2)/code 