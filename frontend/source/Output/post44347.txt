Saving files on lost focus in console Vim <body> I have been trying to setup the console version of vim to save any changed files when the Terminal window loses focus.  Following these instructions does not work.  Am I to assume that maybe the reason why this does not work for a console version of vim is because it's only intended to work with GUI versions, i.e. MacVim?  Is there a way to get this to work for a console version of vim?  I'm using the latest version of vim available in homebrew.  <answer44377> code:help FocusLost/code says:     …   Only for the GUI version and a few console versions where this can be detected.   …   Poking around in the code revealed the function codeui_focus_change/code whose comment says:     Used for the GUI or for systems where this can be done in the console (Win32).   Based on searching for callers, that statement seems accurate (it is only emautomatically/em called (asynchronously) from the GUI code for various platforms and (synchronously) from the non-GUI Windows code).  hr  An answer to a related question (“Can I make Tmux tell Vim when its pane loses focus?”) over on Unix &amp; Linux pointed out a new Vim plugin called Vitality. The plugin makes a series of Vim configurations to enable FocusLost and FocusGained autocommands for instances running under emiTerm 2/em:  ul liIt configures Vim to send a special control sequences that cause emiTerm 2/em to send “focus out” and “focus in” control sequences when the emiTerm 2/em window loses/gains focus (though apparently emiTerm 2/em currently fumbles these sequences a bit when switching tabs inside a window)./li liIt configures Vim to recognize the “focus out” and “focus in” sequences as rarely used keys (F24 and F25).br This is done instead of just mapping the sequences so it is possible to enable codettimeout/code and use a short codettimeoutlen/code to avoid causing delays when pressing Escape by itself./li liIt maps those keys to trigger FocusLost and FocusGained (via codedoautocmd/code)./li /ul  Vitality is only designed to look for emiTerm 2/em, but other terminal emulators also support the same “focus notification” control sequences:   ul liemxterm/em from 10.6 supports them (probably emxterm/em from most other platforms, too)/li liemTerminal/em from 10.6 strongdoes not/strong support the sequences/li liI do not know about 10.7’s emTerminal/em/li /ul  If you have some other terminal emulator that supports the same focus control sequences as emiTerm 2/em/&#xfeff;emxterm/em (for the details, see codedoc/vitality.txt/code, or search for “Focus” emxterm/em’s ctlseqs), then it should fairly easy to extend Vitality to detect your terminal emulator (or you could just fake being emiTerm 2/em by setting the ITERM_PROFILE environment variable (codeexport ITERM_PROFILE=not-really-iTerm/code)—the environment variable is the only thing that Vitality uses to check for emiTerm 2/em)  <comment56164> [Cross-posted](http://meta.stackexchange.com/q/64068/137637) to [Unix&Linux 34479](http://unix.stackexchange.com/q/34479/1107).