How to add export formats to Preview.app? <body> Is there any way to teach Preview how to export/save (and not just import/open) additional formats? If so, how?  img src="https://i.stack.imgur.com/pacIH.png" alt="Default export formats in Preview.app (OS X 11 “El Capitan”)"  As you may know, Apple has removed several export formats from the default dialog in recent OS X versions. They are still available if holding down kbdOpt/Alt/kbd, though. Yay for “expert features”!  img src="https://i.stack.imgur.com/Fz1Qe.png" alt="Advanced export formats in Preview.app (OS X 11 “El Capitan”)"  h2Default formats/h2  ul liJPEG/li liJPEG-2000/li liOpenEXR/li liPNG/li liTIFF/li /ul  h2Additional advanced formats/h2  ul liASTC/li liGIF/li liICNS/li liKTX/li liMicrosoft BMP/li liMicrosoft icon/li liPBM/PGM/PPM/li liPVRTC/li liPhotoshop/li liPostScript/li liQuickTime movie/li liSGI/li liTGA/li /ul  <answer231928> The simple answer here is strongNo./strong   You cannot add formats because the libraries and support for those libraries must be compiled into the Preview application.  Since Preview is not an Open Source project, there is no access to the source code to add this support and subsequently compile it.  I investigated creating a plugin, however that also hit a dead end as there is no way to access the Plugin API (if it exists)    https://discussions.apple.com/message/16054059#16054059  The best way to address this is to let Apple know about it by submitting feedback:  http://www.apple.com/feedback/macosx.html  <answer231947> strongThere's no possibility to extend 'Preview.app', without re-compilation./strong The source code is not public, so there's no way.  Give up with codePreview.app/code, as it has more drawbacks, than benefits: small number of formats, performance of Preview.app is surprisingly bad as well... I took decision for myself to strongmove alternative way/strong.  I highly recommend to try strongXnView/strong (freeware) (I mean strongcodeXnView MP/code/strong, which is the enhanced version of codeXnView Classic/code). Probably it's not looking that user friendly in terms of  emApple style/em after Preview.app, but it's easily compensated with tons of nice features, and extreme speed. Regarding your purposes - it has strongBatch Conversion/strong conversion feature, plus supports more than 500 image formats and strongexport to about 70 different file formats/strong.  <answer232266> Yes, you can, using the CoreImage and ImageIO frameworks. To have Preview recognize your custom image format, it must be registered properly (CoreTypes), etc. See:  Packaging and Loading Image Units  Custom Filters  Cocoa/Images Overview  Application Extensions  <comment265312> “No” if based on a reliable source is of course also a valid answer. <comment283190> Are you asking how to access the additional formats without pressing opt, or add an entirely new format? <comment283257> @Ashley Entirely new formats. <comment283308> The thread at apple.com is from 2011. Did anything change with OS X 10.11+ and [App Extensions](https://developer.apple.com/library/mac/documentation/General/Conceptual/ExtensibilityPG/)? I assume Preview relies upon [Image I/O](https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/ImageIOGuide/imageio_intro/ikpg_intro.html) for supported formats and not QuickLook plugins or AV Foundation (successor to QuickTime). <comment283314> Everything they had was for Photos, not Preview.  While Photos looks extensible, Preview is what you get.  What I saw with Image I/O is was for manipulating the images with the supported formats, I didn't see anything about adding additional formats. <comment283765> @GeoffNixon, why down-vote? What I said incorrect? read the first sentence, outlined in bold "without re-compilation". The original question is about **plugins** to extend, and you are proposing to create conversion plugins yourself, and build them using some frameworks, without any details. Definitely not the short path ;) <comment283769> Yes, it is incorrect. There are in fact any number of ways one could extend Preview without recompilation. Most of them are not really things you want to mess with ([SIMBL](https://en.wikipedia.org/wiki/SIMBL), dylib interposition, etc); but it **is** possible. Be careful with such black-and-white statements! <comment283771> Having said that, I don't disagree with your recommendation; and I never claimed building such plugins would be easy; but the question was _How ..._, and well, that is _how_ one would do that. <comment283776> As far as I understood @Crissov , he was asking in the original question about plugins, which doesn't assume the knowdlege of programming, and you proposed to compile libs and to create formats extensions with the use of Cocoa Drawing... if that would be that easy, then everyone would have library packs, and shared or would include it to OSX package. <comment283778> You are just manipulating words... What you state, would mean to read in-depth information on writing kernels and creating image units, in *Xcode*. Doesn't it mean writing code and **compiling**?! So I don't agree with the down vote here, it wasn't fair. <comment283781> Yes, I'm manipulating words. So are you. This is called _writing_. Anyway, compiling, yes, re-compiling Preview, no. There is a big difference; *plugins exist so that applications __don't__ have to be recompiled*. There is literally a PlugIns directory within the Preview.app application bundle, so I'm pretty sure Preview.app supports plug-ins. *Someone* has to compile a plugin; they don't materialize out of thin air. I'm not going to engage any further in a flame war with you. <comment284086> @Farside Actually, I wanted to know if it was possible for someone in a documented and supported way that would make it possible for me to use it, i.e. if a package can be written that I can download and install on my copy of OS X that would be fine as well. However, skimming the links in this answer I’m still not sure how it would be possible and whether someone has done it for, say, Google’s [WebP](https://developers.google.com/speed/webp/) – or why not. <comment284407> @GeoffNixon Could you perhaps be a bit more specific, please? In the Cocoa documenation, section [“Creating New Image Representation Classes”](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CocoaDrawingGuide/Images/Images.html#//apple_ref/doc/uid/TP40003290-CH208-BCIFJBGC), it says: “If you want to add support for new image formats (…), you may want to subclass `NSImageRep`.” It’s unclear to me whether and how Preview would be able to use that. Should this better be asked on Stack Overflow instead? <comment284521> I’ve awarded the bounty to this answer, but have not accepted it (yet), because for that it’s lacking required details in my opinion. <comment285076> Related question for video formats (and QuickLook): http://apple.stackexchange.com/questions/192090/is-it-possible-to-extend-quick-look-to-support-h-265?lq=1