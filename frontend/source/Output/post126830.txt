How to upgrade OpenSSL in OS X? <body> Today the heartbleed OpenSSL exploit was announced in the wild, which allows an attacker to surreptitiously detect and steal private server keys (allowing them to MitM and decrypt your encrypted data and steal passwords).  This affects OpenSSL versions including 1.0.1f which is the version on my sup-to-date Mavericks computer/s iMac (because I used port/brew to install other software which updated my openssl without me realizing it/i):  precode$ openssl version OpenSSL 1.0.1f 6 Jan 2014 /code/pre  iThis demonstrates I am not using the Mavericks version of OpenSSL:  precode$ which openssl /opt/local/bin/openssl /code/pre  /i  OpenSSL released a fix today in 1.0.1g and I wonder how I can get this fixed version installed over my current version?  <answer126832> For what it's worth, I just used homebrew (http://brew.sh/):  precodebrew update   brew install openssl   brew link --force openssl  openssl version -a   /code/pre  If one of the bad versions come up (1.0.1a-f), you can figure out which version of openssl you're using, this way:  precodewhich openssl /code/pre  Often this is from /usr/bin. To make sure you get the updated version, drop a symlink into /usr/local/bin to point to the updated openssl, like this:   precodeln -s /usr/local/Cellar/openssl/1.0.1g/bin/openssl /usr/local/bin/openssl /code/pre  hr  As an alternative to that final step, some people replace the openssl in code/usr/bin/code with a symlink to code/usr/local/Cellar/openssl/1.0.1g/bin/openssl/code (or whatever your version is):   precodemv /usr/bin/openssl /usr/bin/openssl_OLD   ln -s /usr/local/Cellar/openssl/1.0.1g/bin/openssl /usr/bin/openssl /code/pre  But this is known to cause problems with some more recent versions of OSX.  Better to just insert a new symlink into /usr/local/bin, which should take precedence on your path over /usr/bin.    <answer126902> Or for those who are using mac ports, and are not worried about keeping the version  precodesudo port upgrade openssl /code/pre  simples :-)  <answer254013> For resolving OCSP Status Request extension unbounded memory growth (CVE-2016-6304) on macOS Sierra using codebrew/code with System Integrity Protection enabled:  ol liTemporarily adjust permissions on code/usr/local/code so brew can update:  precodesudo chgrp -R admin /usr/local sudo chmod -R g+w /usr/local /code/pre/li liInstall the updated version of OpenSSL (you probably want 1.0.2i):  precodebrew install openssl /code/pre/li liYou may want/need to delete an existing symlink to openssl from code/usr/local/bin/code:  precoderm /usr/local/bin/openssl /code/pre/li liRe-link the proper brew version:  precodesudo ln -s /usr/local/Cellar/openssl/1.0.2i/bin/openssl /usr/local/bin/openssl /code/pre/li liRestore original permissions on code/usr/local/bin/code:  precodesudo chown root:wheel /usr/local /code/pre/li /ol  <comment148554> Don't delete the original—just rename it. If you find the Homebrew-built version doesn't work for some purpose, there's no reason to put yourself up a creek without a (working) paddle. <comment148555> Fair enough, but on the other hand, I wouldn't call that version working... <comment148557> You are *not* using the version that came with OS X Mavericks -- that's 0.9.8y, which does not have the heartbleed bug (it was introduced in 1.0.1). Your best update path will depend on where and how you installed the newer version. `which openssl` might be informative. Also, the major problem isn't the openssl command, it's the openssl libraries (which are used by other programs) -- those aren't API compatible between versions 0.9.x and 1.0.x, so you *do not want* to update the system-supplied openssl libraries! <comment148558> @GordonDavisson - You are totally right.  I was mistaken.  I had apparently installed `MacPort` at some point on this machine which upgraded my openssl.  (Probably when I was trying to get python2.7 working).  Probably should delete this question, but won't in case others make the same mistake find SapphireSun's great answer useful). <comment148559> With that clarifying update, I'd leave it. There are probably other people in the same boat, and having this here should give them an idea what needs to be done. <comment148560> Even with the vulnerability, it's still useful to you in any situation in which you're willing to take the calculated risk in order to get app X (that depends on it) to work briefly. Or, if you prefer... "working" in the sense that a broken paddle can still push water. :-p <comment148658> `sudo port upgrade outdated` also works. <comment148853> If you install OpenSSL with *brew* it will *not* link the binaries to /usr/bin. Therefore it will not be run if you issue an *openssl* on command line. <comment149182> Just a note - after performing these steps, typing "openssl" in the terminal window failed with a "no such file or directory" error pointing to the old copy (but it did work in a new terminal window). To fix the terminal window I was working in, I needed to do a: `hash -r` <comment150492> @MaxRied how do you run the version that homebrew installed? I installed new openssl by instructions in accepted answer, and `openssl version` returns 1.0.1g, but you're saying `openssl` commands aren't using that version? <comment150495> When you install openssl with brew, it'll tell you, that it won't link it, as they fear this would break some OS X internals. <comment162904> → Gordon: you should upgrade your comment to an answer. Too many confusions between 2 commands, and 2 set of libraries in use. <comment174351> On OS X 10.9.5, I got openssl binary with homebrew, but had to manually create the symlink (the end of the answer). <comment255111> After trying this 10 different ways, this got my OpenSSL back in working order after an upgrade. <comment275048> If I can mention another command people may find useful here… `php -r "print_r(openssl_get_cert_locations());"` will tell you where openssl is looking for certificates.  I had a "composer update" that was failing with "ssl3_get_server_certificate:certificate verify failed" and it turned out as well as updating the Mozilla ca bundle, I needed to add a `openssl.cafile=/usr/local/etc/openssl/cert.pem` line to my php.ini file so it knew where to look for it. <comment282055> That's funny, having both macports and brew both install openssl on my machine was actually the cause of this happening to me. Running `sudo port -f uninstall openssl @old-version` did the trick for me :) <comment285849> Better than creating a symlink at `/usr/bin/openssl`, one can create the link at `/usr/local/bin/openssl`. That should precede `/usr/bin` on your `$PATH` and bypass any problems arising from "System Integrity Protection" in newer versions of OS X. <comment294201> @yair having both macports and homebrew will cause many problems <comment307661> @SapphireSun for me openssl doesn't update. Can you please have a look http://pastebin.com/gZv4zcYj <comment312077> If there's no permission for rename `/usr/bin/openssl` file, [disable](http://stackoverflow.com/a/32661637/1330787) `csrutil`. Reboot your mac and press cmd+r when booting up. Then go into utilities  terminal and type the following commands: `csrutil disable reboot` After you can rename `/usr/bin/openssl`. Type this command as @SapphireSun's answer. `ln -s /usr/local/Cellar/openssl/OpenSsl_version_number/bin/openssl /usr/bin/openssl` and check your `openssl version`. <comment313523> @SapphireSun `brew link openssl --force` links the binaries to `/usr/local/bin` which rules out the need to manually link these binaries. However, brew throws a warning which cannot be ignored. <comment313548> `ln -s /usr/local/opt/openssl/bin/openssl /usr/local/bin/` will dynamically connect to whatever version is installed by homebrew (or updated later). homebrew sumbolic links it `/usr/local/opt/openssl - ../Cellar/openssl/1.0.2h_1` <comment318698> In my case old version of OpneSSL is located in /usr/bin. It is failing when trying to change bin permission. <comment318768> Are you using Sudo? <comment318810> Yes. I used sudo. I found comment that in the latest version os OS X here is no way to change permission of this file. So I stop achieving it. <comment318819> Why not just change your `$PATH` variable to look in `/usr/local/bin`? <comment320790> After set the symlink path need to restart the terminal. <comment344563> I would avoid maintaining symlinks if `--force` fails and simple follow the instructions given when you run `brew info openssl` These state updating your $PATH to include openssl bin first. See http://stackoverflow.com/a/42385568/3985886 for more information. <comment373979> I found this Medium post helpful. Look for the text "[UPDATE] 2016/12/11" and follow step 3. I copy and pasted the commands listed and it worked.  I've also added  export PATH="/usr/local/opt/openssl/bin:$PATH" to my .bash_profile  https://medium.com/@katopz/how-to-upgrade-openssl-8d005554401 <comment374047> If you are using brew then, just use `brew upgrade openssl` to upgrade openssl