Use caffeinate to prevent sleep on lid close on battery <body> The native codecaffeinate/code utility is not working to prevent my macbook from sleeping when I close the display.  Instead, the system sleeps and various network services ( VPN, screenshares, VOIP calls, messaging clients, file transfers ) to fail while I walk from my desk to my meeting in &lt; 5 minutes.  Walking around with the laptop lid half open makes it difficult to safely carry with my coffee, and is distinctly uncool.  The native codecaffeinate/code utility is designed to handle this as a user-friendly replacement for codepmset/code, but appears to be designed not to work when disconnected from AC power.  Docs via codeman caffeinate/code     -s Create an assertion to prevent the system from sleeping. This assertion is valid only when system is strongemrunning on AC power/em/strong.   Looking for a native alternative to InsomniaX or nosleep.  A timeout feature is essential so that I avoid accidentally stuffing my undead macbook into a bag, resulting in a hot mess.  ( codecaffeinate -t/code, specifies the timeout value in seconds )  <answer219895> Have you tried this app? I find it very useful for exactly what you're after.   I'm fairly sure it has a timeout feature that you set within the settings of the app.   <answer270835> It's not ideal, but here's a solution. To prevent the laptop from sleeping when the lid is closed and you're running on battery, run the following commands:  precodesudo pmset -b sleep 0; sudo pmset -b disablesleep 1 /code/pre  To re-enable laptop sleeping when the lid is closed and you're running on battery, run the following commands:  precodesudo pmset -b sleep 5; sudo pmset -b disablesleep 0 /code/pre  The "5" in the second set of commands represents the number of minutes before sleeping when on battery; adjust as desired for your laptop.  This is a bit dangerous, since if you forget to re-enable your settings, the laptop will never sleep when on battery. Because of this, I've written a shell script to automatically re-enable the settings:  precode#!/bin/bash #*************************************************************************** #*** noz - prevent laptop from sleeping when lid is closed #***************************************************************************  #***** set some defaults ***** BATTERY_SLEEP=5 # in minutes DEF_WAKE_LEN=300 # in seconds  #***** determine timeout value ***** timeout_len=${1:-$DEF_WAKE_LEN}  function prevent_sleep() {     echo     echo -n "Preventing sleep for $timeout_len seconds; press &lt;enter&gt; to continue..."      sudo pmset -b disablesleep 1     sudo pmset -b sleep 0 }  function enable_sleep() {     # $1: &lt;enter&gt; = 0, timeout = 1, Ctrl-C = undef      #----- insert a newline for timeout or Ctrl-C -----     if [[ ${1:-1} -eq 1 ]]; then    echo; fi     echo "Restoring previous battery sleep setting: $BATTERY_SLEEP"      sudo pmset -b disablesleep 0     sudo pmset -b sleep $BATTERY_SLEEP      #----- sleep on timeout only -----     if [[ ${1:--1} -eq 1 ]]; then   sudo pmset sleepnow; fi     exit }  #***** prevent it from sleeping ***** prevent_sleep  #***** trap Ctrl-C ***** trap enable_sleep INT  #***** wait for an enter ***** read -t $timeout_len rc=$?  #***** re-enable normal sleep ***** enable_sleep $rc /code/pre  The shell script will disable sleeping until you hit the kbdEnter/kbd key, at which point it will re-enable the sleep settings (alternately, you can hit kbdCtrl/kbd-kbdC/kbd and achieve the same thing). It will also set a timeout (defaults to 300 seconds/5 minutes) after which the sleep settings will automatically be re-enabled, and the laptop will be forced to go to sleep. While this would be a pain if you're using your laptop in a meeting, it will be a lifesaver if you forgot and put your laptop in your bag to go home.  Astute readers will note that these commands require codesudo/code; sadly, that's unavoidable AFAIK. What I've done on my system is to make it so that I don't have to enter my password to run codepmset/code as root. To do that, edit the codesudoers/code file (codesudo visudo/code) and add this line:  precodejoe ALL=(ALL) NOPASSWD: /usr/bin/pmset /code/pre  replacing "joe" with your username. You could probably achieve the same result (i.e. running the script without having to enter your password) by running the shell script SETUID, but I don't like doing that; opening up this one command via sudoers seems less risky to me.  To run the script, stick it in a directory on your codePATH/code and invoke it as such:  precode$ noz [&lt;timeout in seconds&gt;] /code/pre  When you get to where you're going, simply hit kbdEnter/kbd or kbdCtrl/kbd-kbdC/kbd and you're good to go. And if you forget about it, it will automatically reset and sleep.  There's probably a way to achieve all of this via AppleScript, so that you can then assign it a hot key and what not; I'll try that if I ever get tired of running this from the command line.  <comment265972> I fear there is no *native* alternative, as a MacBook is supposed to go to sleep when you close it. :-/ <comment266813> Thanks @mitchell-d .  The question is specifically asking for a native solution, such as caffeinate.  There are other apps suggested in [is-there-any-way-to-set-a-macbook-pro-to-not-sleep-when-you-close-the-lid](http://apple.stackexchange.com/questions/2389/is-there-any-way-to-set-a-macbook-pro-to-not-sleep-when-you-close-the-lid?rq=1)  Nonetheless, I tried the [caffeine](http://lightheadsw.com/caffeine/) app you recommend it does *not* prevent my macbook from sleeping when I close the lid.