Remap "Home" and "End" to beginning and end of line <body> Most of my computing time is spent in Linux (with occasional time in Windows). On these platforms the kbdHome/kbd and kbdEnd/kbd keys universally jump to the beginning or end of the current line.  I am gradually getting used to using the one Apple computer in my life, but it is still frustrating than these keys seem to be bound to the beginning and end of the document and there doesn't seem to be any key at all for the line based actions.  My question:  ol liAre there existing keybindings I'm missing for beginning and end of line? (I mostly use a Terminal, Chrome and LibreOffice)/li liIs there a way to rebind the functions of these keys to the functions I am familiar with? I am willing to give up the document based versions which seem of little use to me./li /ol  Also two caveats:  ol liI am not the only user on the system. It would be nice if my user settings didn't break other peoples experience. If this isn't possible, I think I probably have the strongest preference!/li liI do use multiple languages and switch between keyboard layouts, so any solutions would be expected to work even when toggling between multiple keyboard layouts./li /ol  <answer16136> Thanks to this article, I figured out how to re-bind the kbdHome/kbd and kbdEnd/kbd keys to line based actions on a per-user basis that works across keyboard layouts.  You need to create a dictionary file with the keycodes and new commands to map to, but first make sure the folder where this will be placed exists by opening a Terminal and running:  precode$ mkdir -p ~/Library/KeyBindings /code/pre  Then create or edit the file at code~/Library/KeyBindings/DefaultKeyBinding.dict/code. If it didn't exist before, add the whole section below. If it does exist, just add the four new rows inside the block.  precode{     "\UF729"  = "moveToBeginningOfLine:";     "\UF72B"  = "moveToEndOfLine:";     "$\UF729" = "moveToBeginningOfLineAndModifySelection:";     "$\UF72B" = "moveToEndOfLineAndModifySelection:"; } /code/pre  In order to activate the settings you will need to logout of your user and login again.  Note that this covers both the normal action of moving the cursor and the kbdShift/kbd+kbdHome/kbd/kbdEnd/kbd combination to select durring cursor movement.  <answer16137> The default shortcuts for moving to beginning or end of (wrapped) lines are kbd⌘/kbdkbd←/kbd and kbd⌘/kbdkbd→/kbd. kbd⌥/kbdkbd↑/kbd and kbd⌥/kbdkbd↓/kbd or kbd⌃/kbdkbdA/kbd and kbd⌃/kbdkbdE/kbd move to the beginning or end of unwrapped lines (or paragraphs). kbd⌥/kbdkbd←/kbd and kbd⌥/kbdkbd→/kbd move backwards/forward by words, and all of these are compatible with holding kbdShift/kbd to select during the corresponding moves.  You could remap home and end by creating code~/Library/KeyBindings//code and saving a property list like this as codeDefaultKeyBinding.dict/code:  precode{     "\UF729"  = moveToBeginningOfLine:; // home     "\UF72B"  = moveToEndOfLine:; // end     "$\UF729" = moveToBeginningOfLineAndModifySelection:; // shift-home     "$\UF72B" = moveToEndOfLineAndModifySelection:; // shift-end } /code/pre  Applying changes requires reopening applications. DefaultKeyBinding.dict is ignored by some old versions of Xcode (works with latest version 6.3.1), Terminal, and many cross-platform applications.  See Cocoa Text System and my website for more information about the customizable keybindings.  Terminal's keybindings can be customized in Preferences  Settings  Keyboard. code\033OH/code moves to the beginning of a line and code\033OF/code to the end of a line.  In Eclipse, key bindings should be modified in Preferences  General  Keys. You need to modify default bindings for commands emLine Start/em and emLine End/em (replace ⌘← by ↖ and ⌘→ by ↘). For selection to work, also modify emSelect Line Start/em and emSelect Line End/em.  PS: You may need to stronglogout and login again/strong for the code~/Library/KeyBindings/DefaultKeyBinding.dict/code change to take effect.  <answer63972> I'm currently on Lion 10.7.4, and for some strange reason editing the code~/Library/KeyBindings/DefaultKeyBinding.dict/code didn't work for me.    I have found that the KeyRemap4MacBook System Preferences addon works really well, and you can also re-map a variety of keys with it, without having to edit any text files.  E.g. changing the page up / page down keys so the cursor also follows on page up / down.    Just download the addon, and in the System Preferences panel, browse to the codeFor PC Users/code section, and check codeUse PC Style Home /End/code.    Note, I picked code(Change Home to Command+Left)/code instead of code(Change Home to Control+A)/code, as if I picked the first, and if the line was wrapped, home would take me to the beginning of the wrapped line, several lines above, instead of taking me to the beginning of the current line.  img src="https://i.stack.imgur.com/bPLcU.png" alt="KeyRemap4MacBook"  <answer119404> I'm using the awesome KeyRemap4MacBook with the custom settings below.  It fixes Home/End in most applications and doesn't screw up iTerm2.  From https://gist.github.com/lhotari/6134223181439b9ed0a1   precode&lt;?xml version="1.0"?&gt; &lt;!-- ~/Library/Application Support/KeyRemap4MacBook/private.xml --&gt; &lt;!-- Custom keyboard mappings for MBP using https://pqrs.org/macosx/keyremap4macbook/ --&gt; &lt;root&gt;     &lt;item&gt;         &lt;name&gt;Lari's PC Style Home/End&lt;/name&gt;         &lt;appendix&gt;(Change Home to Command+Left)&lt;/appendix&gt;         &lt;appendix&gt;(Change End to Command+Right)&lt;/appendix&gt;         &lt;appendix&gt;&lt;/appendix&gt;         &lt;appendix&gt;{{ PC_STYLE_BINDINGS_IGNORE_APPS_DESCRIPTION }}&lt;/appendix&gt;         &lt;identifier&gt;lari.remap.pclikehomeend&lt;/identifier&gt;         &lt;block&gt;             &lt;only&gt;DREAMWEAVER&lt;/only&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_HOME, KeyCode::HOME, ModifierFlag::SHIFT_L&lt;/autogen&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_END,  KeyCode::END,  ModifierFlag::SHIFT_L&lt;/autogen&gt;         &lt;/block&gt;         &lt;block&gt;             &lt;only&gt;BLUEFISH,WORD,EXCEL,POWERPOINT&lt;/only&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_HOME, KeyCode::HOME&lt;/autogen&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_END,  KeyCode::END&lt;/autogen&gt;         &lt;/block&gt;         &lt;!--         &lt;block&gt;             &lt;only&gt;EMACS, TERMINAL, X11, ECLIPSE&lt;/only&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_HOME, KeyCode::A, ModifierFlag::CONTROL_L&lt;/autogen&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_END,  KeyCode::E, ModifierFlag::CONTROL_L&lt;/autogen&gt;         &lt;/block&gt;          --&gt;         &lt;block&gt;             &lt;not&gt;{{ PC_STYLE_BINDINGS_IGNORE_APPS }}&lt;/not&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_HOME, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND, KeyCode::CURSOR_UP,    ModifierFlag::COMMAND_L&lt;/autogen&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_HOME, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_CONTROL, KeyCode::CURSOR_UP,    ModifierFlag::COMMAND_L&lt;/autogen&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_END,  MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND, KeyCode::CURSOR_DOWN,  ModifierFlag::COMMAND_L&lt;/autogen&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_END,  MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_CONTROL, KeyCode::CURSOR_DOWN,  ModifierFlag::COMMAND_L&lt;/autogen&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_HOME,             KeyCode::CURSOR_LEFT,  ModifierFlag::COMMAND_L&lt;/autogen&gt;             &lt;autogen&gt;__KeyToKey__ FROMKEYCODE_END,              KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L&lt;/autogen&gt;         &lt;/block&gt;     &lt;/item&gt; &lt;/root&gt; /code/pre  <answer191149> You can also remap keyboard keys, as well as customize your mouse and trackpad in all kinds of cool ways, with the free BetterTouchTool, available at http://blog.boastr.net/. An excellent solution for customizing the workings of your input devices!  <answer223191> Imho the best tool to make keyboard changes is indeed Karabiner (old name KeyRemap4MacBook). Open source (https://github.com/tekezo/Karabiner) but also available as application (https://pqrs.org/osx/karabiner/index.html.en).  I have been searching quite a long time and I have never find anything better.   <answer259280> I found the following useful for codeiterm2/code and codezsh/code with quotes from here:     Open codeiTerm &gt; Preference/code. Go to codeprofiles tab &gt; Keys/code. Then click on the   code+/code button on the bottom of the keys list, press codeHome/code (or codeFn+left arrow/code on the apple cordless keyboard), under codeAction/code select codeSend Escape Sequence/code, and then type code[1~/code   Repeat for codeEnd/code key with code[~4/code for escape key sequence.     If you're using zsh, also do this:      1) Place the following in your code~/.zshrc/code file  precodebindkey "^[[1~" beginning-of-line bindkey "^[[4~" end-of-line /code/pre      2) Run codesource ~/.zshrc/code in any open terminals.   <answer271111> I'm using OS X Sierra, and the code~/Library/KeyBindings/DefaultKeyBinding.dict/code solution suggested by other users partially worked: some apps like TextEdit now have the desired behavior, but other apps don't. Google Chrome and Slack are two that don't seem to respect the codeDefaultKeyBinding.dict/code file.  To fix the remaining apps, I used BetterTouchTool to create app-specific keyboard shortcuts binding codeHome/code and codeEnd/code to OS X's native shortcuts codeCtrl+A/code and codeCtrl+E/code. BetterTouchTool is not free, but there's a 45-day trial period.  To do this:  ol liInstall and launch BetterTouchTool/li liGo to the Gestures  Keyboard tab/li liUnder "Select Application", click code+/code and choose the app you want to fix./li liClick "Add New Shortcut", assign the codeHome/code key in the "record shortcut" field, and set "Trigger other keyboard shortcut" to Ctrl+A. Repeat for codeEnd/code and Ctrl+E./li liWhen you're done the panel should look like this:img src="https://i.stack.imgur.com/WjC6K.png" alt="BetterTouchTool panel"/li liUnder BetterTouchTool's Advanced Settings, allow it to run on startup./li /ol  Note: don't quit the BetterTouchTool app or it will stop intercepting key presses. Just close its window and it should continue working in the background.  <comment17649> Note that while I ended up finding a solution and answering my own question, I'm open to easier or more versatile solutions. Also the process of discovering this is not clear. For example where do you find key codes and action names if I wanted to remap more keys? Feel free to add answers if you have relevant knowledge! <comment200405> Karabiner is great and also [open source](https://github.com/tekezo/Karabiner) <comment227038> Could you expand your answer with instructions on *how* to use the specified software to solve the original problem? <comment259774> With 10.10.5, the other suggestions seem to not work, but Karabiner (the new name for KeyRemap4MacBook -- works on all the Mac products) works well, and doesn't need a restart for the changes to take effect. Immensely helpful for this Mac noob; hopefully others can benefit as well. <comment263733> Karabiner only maps connected devices, so this won't work if you're using VNC, Splashtop, etc. However, the KeyBindings answers do work for Splashtop (which I'm currently using) and I'd assume they'd also work for VNC. <comment295506> `Just download the addon, and in the System Preferences panel,` I did not find it in System Preferences. I found it in the LaunchPad. Mac version: El Capitan 10.11.3 <comment355813> iTerm2 also has a "Natural text editing" key mapping preset that includes this behavior. <comment358204> Has not been updated to work with Sierra, per the link above. <comment358305> As of today, "Karabiner does not work on macOS Sierra at the moment." <comment358528> @james.garriss Give Karabiner-Elements a go - same author though rewritten from the ground up to support Sierra (it's still in development so they're quite a few rough edges) - https://github.com/tekezo/Karabiner-Elements <comment362175> Needs to be changed to `bindkey "^[[~4" end-of-line`. Note the position of the 4. <comment362181> @Ty Thanks, but can you explain why? The original source, as well as https://github.com/reenhanced/zsh-config/blob/master/lib/key-bindings.zsh and https://github.com/ThiefMaster/zsh-config/blob/master/zshrc.d/keybinds.zsh use "^[[4~" <comment362204> I'm not well versed in these escape sequences but for me `^[[4~` echos out `4` while `^[[~4` moves the cursor to the end of the line. <comment362223> @Ty Interesting. I did some searching to figure out why, but I have only been able to find examples of `^[[4~`. What kind of keyboard and character encoding are you using, maybe that makes a difference? <comment362754> @jklp Unfortunately the functionality that is needed for remapping Home and End keys on Apple extended keyboard isn't yet available in Karabiner Elements.  I personally seem to have the muscle memory for Ctrl-a, Ctrl-e when working in the console, but when working in a GUI app like Sublime, it's super difficult to remember. For Sublime (specifically) there is a solution, however: https://coderwall.com/p/upolqw/fix-sublime-text-home-and-end-key-usage-on-mac-osx <comment371289> Not free in either the "Free Beer" or "Freedom" senses. 45-day trial, closed-source, paid software.