Brew says Wine is installed but it fails to run with "command not found" error <body> I've recently just had a horrendous Mac hard drive issue which required an erase of the hard drive and a restore from an old back up.  Since it's been back, it's not quite been the same. I had Wine installed however codewine my.exe/code no longer works. I get a code-bash: wine: command not found/code error. I thought it might somehow have become de-installed, but upon trying to reinstall I get: codewine-1.7.19 already installed To install this version, first 'brew unlink wine'/code. I've been having lots of permission errors which can't be corrected by disk utility, all of which are "ACL found but not expected" and brew doctor found a whole load of broken symlinks which have since been pruned. All very odd behaviour.  How do I get Wine to run without having to unlink it and reinstall it? I'd much prefer if I could just continue where I left off.  I'm not using MacPorts as far as I'm aware.  <answer140221> If it is a simple problem then codebrew unlink wine/code and codebrew link wine/code might resolve it. This isn't the same as uninstalling and reinstalling, which would be codebrew remove wine/code and codebrew install wine/code. It should be quite quick.  When brew installs a piece of software it installs it to code/usr/local/Cellar/code and then links it to code/usr/local/bin/code. Unlinking just removes those links, so it is still there but basically sitting somewhere it wouldn't normally be found.  But the first thing to try would be to check that code/usr/local/bin/code is in your path. You can check this by typing codeecho $PATH/code in a Terminal window. You should see something like code/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin/code.  <comment165263> I don't think that `wine` is in your path. Try typing `which wine` in the Terminal. If nothing is outputted, you need to add the directory for `wine` to your path. <comment165277> @aglasser Ok, so nothing was outputted, how to I add the directory for wine? <comment165279> Do you know where it is installed? You can add a variable to the path by looking at a tutorial like: http://architectryan.com/2012/10/02/add-to-the-path-on-mac-os-x-mountain-lion/#.U9aWY4BdVgw <comment165280> Basically, edit `/etc/paths` with `sudo` (if you don't like `nano`, do something like `sudo open -a TextEdit /etc/paths`. Add the directory, then save and exit. <comment165282> If you don't know where it is installed, try running this: `sudo find / -name "wine"`. It'll take a while since it's searching the whole hard drive (since I have NO idea where `wine` is installed). <comment165283> Sorry, you shouldn't really do this. brew installs things to a particular place and then links them to /usr/local/bin. Manually adding a specific path like this would probably work initially but then cause issues down the road when you wanted to update or run other other brew software. <comment165284> Does brew link everything into `/usr/local/bin`? Last I checked, it added things wherever it wanted on the drive (which is a primary reason that I chose MacPorts instead). <comment165285> As a MacPorts user, I was guessing in my comments (which is why I didn't post an answer). Hopefully you are of more help than I :) <comment165286> Ok done `echo $PATH` and got `/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/texbin` which seems about right. I'll let you know how the link/unlink goes <comment165287> link/unlink worked. It removed 13 symlinks and added 59! Ace, thanks for the help everyone. <comment165288> It's relatively clean (to my mind anyway :) ). As I understand it everything gets installed to `/usr/local/Cellar` and then its just the links that exist in `/usr/local/bin`.