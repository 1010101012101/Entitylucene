gpg2: Warning: using insecure memory! <body> As of today, whenever I use codegpg2/code (installed via Homebrew) on my Mac (10.12.1), I now see the following warning:  precodeWarning: using insecure memory! /code/pre  For what it's worth, I'm seeing this same behavior on two different machines: a Mac mini (late 2012) and a MacBook Pro (late 2012), both running 10.12.1.  As the GnuPG FAQ says:     GnuPG tries to lock memory so that no other process can see it and so that the memory will not be written to swap. If for some reason it’s not able to do this (for instance, certain platforms don’t support this kind of memory locking), GnuPG will warn you that it’s using insecure memory.      While it’s almost always better to use secure memory, it’s not necessarily a bad thing to use insecure memory. If you own the machine and you’re confident it’s not harboring malware, then this warning can probably be ignored.   The thing that baffles me is that codegpg2/code has not changed since September 12, 2016. I've had version 2.0.30 installed more or less since then, but I've only started seeing this warning about insecure memory today. Even though the codegpg2/code formula hasn't changed since September 12, 2016, the one thing I can say for sure that I did on both machines prior to the onset of seeing this warning is a codebrew update &amp;&amp; brew upgrade/code. But I'm not even sure how that could affect this; given what the GnuPG FAQ says, it seems like this has something more to do with the OS and memory locking.  ... And what is even more odd is that I also have codegpg1/code installed from Homebrew (version 1.4.21), which does strongnot/strong warn about insecure memory when I use it:  precode$ gpg1 --require-secmem gpg: Go ahead and type your message ... ^C gpg: Interrupt caught ... exiting  $ gpg2 --require-secmem Warning: using insecure memory! gpg: will not run with insecure memory due to --require-secmem /code/pre  Both binaries belong to the same owner and group and have the same permissions:  precode-r-xr-xr-x  1 adamliter  admin  681932 Dec 10 18:06 /usr/local/Cellar/gnupg2/2.0.30_2/bin/gpg2 -r-xr-xr-x  1 adamliter  admin  929352 Aug 17 09:21 /usr/local/Cellar/gnupg/1.4.21/bin/gpg1 /code/pre  I just tried reinstalling codegpg2/code with Homebrew: both by using the precompiled binary and by building form source, but this doesn't change anything. I still get the warning about using insecure memory.  Moreover, even making the gpg2 binary have the setuid root bit flipped (as suggested, eme.g./em, here) does not cause the message to disappear; it still warns about using insecure memory.  Does anyone know what could have changed such that I would suddenly start seeing this warning today? And why would I be seeing it when using the codegpg2/code binary but not the codegpg1/code binary?  Other possibly relevant information:  precode$ which gpg1 /usr/local/bin/gpg1 $ ls -al /usr/local/bin/gpg1 lrwxr-xr-x  1 adamliter  admin  31 Aug 17 17:42 /usr/local/bin/gpg1 -&gt; ../Cellar/gnupg/1.4.21/bin/gpg1 $ which gpg2 /usr/local/bin/gpg2 $ ls -al /usr/local/bin/gpg2 lrwxr-xr-x  1 adamliter  admin  34 Dec 10 18:06 /usr/local/bin/gpg2 -&gt; ../Cellar/gnupg2/2.0.30_2/bin/gpg2 /code/pre  hr  strongUpdate/strong  I think the reason this is happening is because of the new version of codelibgcrypt/code. I still don't know emwhy/em it's happening, but I'm pretty sure that this is at least the root cause of the issue. The formula for codelibgcrypt/code was just updated today for the 1.7.4 bump; this would explain why I'm seeing this on two different computers after a codebrew update &amp;&amp; brew upgrade/code. It would also explain why it's not happening with codegpg1/code, because codegpg1/code did not rely on the external codelibgcrypt/code cryptographic library, instead using its own integrated cryptographic library.  Moreover, I also have codegpg2/code installed from MacGPG Suite, which is not exhibiting this problem and is linked against a different version of codelibgcrypt/code:  precode$ /usr/local/MacGPG2/bin/gpg2 --version gpg (GnuPG/MacGPG2) 2.0.30 libgcrypt 1.6.6 Copyright (C) 2015 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.  $ gpg2 --version gpg (GnuPG) 2.0.30 libgcrypt 1.7.4 Copyright (C) 2015 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. /code/pre  sup Thus I'm guessing that this is probably a bug report for the maintainers of codelibgcrypt/code. I will post to their mailing list, but I will leave this here for the time being in case anyone else comes across the same issue and/or in case anyone else knows why exactly this is happening. If I get confirmation after sending word to their mailing list that this is a bug, I'll vote to close this question. /sup  <answer264402> The difference between codegpg1/code and codegpg2/code that I was noticing arises from the fact that codegpg2/code uses an external cryptographic library, codelibgcrypt/code, whereas codegpg1/code uses an integrated cryptographic library.  And specifically, Homebrew updated to version 1.7.4 of codelibgcrypt/code on December 10, which introduced a regression in the codelibgcrypt/code code, leading to the insecure memory warning.  There was initially a bit of discussion about this on the pull request that introduced the formula for codelibgcrypt/code 1.7.4 into Homebrew, suggesting that it might be by design:  ul liDominyk Tiller found something to suggest that it might not be a bug; and/li licode@ilovezfs/code also found something to suggest that it might not be a bug either./li /ul  Nonetheless, it turns out that this was indeed a bug. The specific bug report was filed here:  ul licodelibgcrypt/code 1.7.4 breaks KWallet5: "Can't get secure memory" from GCRYCTL_INIT_SECMEM/li /ul  The bug was fixed in this commit, and the fix was released in codelibgcrypt/code 1.7.5, which, at the time of writing, is now the version that Homebrew installs thanks to Dominyk Tiller. Thus, to fix this problem, you can just do a codebrew update &amp;&amp; brew upgrade/code.  hr  For posterity's sake, here is some information from an old version of this answer before it was confirmed that this was a bug in codelibgcrypt/code:  One thing you can do if you'd rather not always see the warning about insecure memory is to add codeno-secmem-warning/code to code~/.gnupg/gpg.conf/code. An old version of the GnuPG FAQ points out:     Locking pages against being swapped out is not necessary if your system uses an encrypted swap partition.  In fact that is the best way to protect sensitive data from ending up on a disk.  If your system allows for encrypted swap partitions, please make use of that feature.  Note that GPG does not know about encrypted swap partitions and might print the warning; thus you should disabled the warning if your swap partition is encrypted.  You may also want to disable this warning if you can't or don't want to install GnuPG setuid(root).  To disable the warning you put a line      codeno-secmem-warning/code      into your code~/.gnupg/gpg.conf/code file.   As far as I know, macOS does use encrypted swap space. For me, for example, codesysctl vm.swapusage/code returns:  precodevm.swapusage: total = 1024.00M  used = 234.75M  free = 789.25M  (encrypted) /code/pre  Furthermore, as code@sideshowbarker/code points out in the comments, there is also a post to the gnupg-users mailing list, which says it's relatively safe to ignore this warning:     [...] it's code&lt;understatement&gt;/code pretty hard code&lt;/understatement&gt;/code to exploit   insecure memory without root privileges -- and if your attacker has root   privileges on your machine then it's all over anyway.   <comment331222> I'm honestly not sure if this question is most appropriate here, on Apple.SE, or if it's more appropriate for [Unix.SE](http://unix.stackexchange.com/). I asked here first because the GnuPG FAQ suggests it might be something about the OS and memory locking, but please feel free to suggest a migration if you think otherwise. <comment331226> http://www.techrepublic.com/blog/it-security/the-insecure-memory-faq/ seems to suggest the cause might be due to your environment having gotten low on RAM and so needing to write data to swap space. <comment331228> @sideshowbarker That was my initial thought as well, but (i) that wouldn't explain the differences between the behavior with `gpg1` and `gpg2`, and (ii) I've been monitoring memory on my computer when testing this, and there's plenty of unused memory when I see the warning message. I think I've localized the root of the issue, but I'm still not sure why it is happening. Will update the question in a second. <comment331230> @sideshowbarker Updated! <comment331255> Yeah this seems to be due to some change in the libgcrypt 1.7.4 brew package. I just did a `brew update && brew upgrade` and then started getting the same “using insecure memory”. So I did `brew switch libgcrypt 1.7.3` and that eliminated the warning. So you should post an answer here, because I reckon other people are going to start running into this same problem. <comment331296> @sideshowbarker There's been a bit of discussion on the [Homebrew pull request for `libgcrypt` 1.7.4](https://github.com/Homebrew/homebrew-core/pull/7750#issuecomment-266253889). I ended up posting something to their mailing list (which hasn't gone through yet), and Dominyk Tiller found [something](https://git.gnupg.org/cgi-bin/gitweb.cgi?p=libgcrypt.git;a=blobdiff;f=NEWS;h=722172a3e51c0514822ad81cf90f7de800fbae41;hp=0aaf8630acd5a53f31044804ac20cdefd492037d;hb=677ddf5bbd9c172a72607c7d5d7006907071c2cf;hpb=95bac312644ad45e486c94c2efd25d0748b9a20b) suggesting this might be by design ... <comment331300> ... So I'd like to wait until I hopefully get clarification from the developer mailing list as to whether this is a bug or not before posting an answer. <comment331301> @sideshowbarker Actually, I guess I'll go ahead and post an answer for now since it's not trivial to get the old version back if you haven't kept it around. <comment331314> Gotta laugh at that [“However, these days this is considered a minor issue and **can easily be mitigated by using encrypted swap space**”](https://git.gnupg.org/cgi-bin/gitweb.cgi?p=libgcrypt.git;a=blobdiff;f=NEWS;h=722172a3e51c0514822ad81cf90f7de800fbae41;hp=0aaf8630acd5a53f31044804ac20cdefd492037d;hb=677ddf5bbd9c172a72607c7d5d7006907071c2cf;hpb=95bac312644ad45e486c94c2efd25d0748b9a20b) part. <comment331949> In light of https://github.com/Homebrew/homebrew-core/pull/7750#issuecomment-266961501 and the fact that the `libgcrypt` maintainers seem to have broken this intentionally, it might be worth adding here that the message can be suppressed by adding the line `no-secmem-warning` to the `~/.gnupg/gpg.conf` file. As https://lists.gnupg.org/pipermail/gnupg-users/2015-December/054771.html notes, “it's pretty hard to exploit insecure memory without root privileges -- and if your attacker has root privileges on your machine then it's all over anyway”. So the warning isn’t very useful to begin with. <comment332091> @sideshowbarker Thanks! Updated.