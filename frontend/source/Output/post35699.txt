How can I sleep the display from Terminal? <body> I'd like to be able to turn my screen off from command line.  I know there's the keyboard shortcut kbdctrl/kbd+kbd&#x21E7;/kbd+kbd&#x23CF;/kbd but I want to do it from a shell script or remotely.   Is there a way?  <answer35701> Run the following command to execute a short AppleScript that puts the display to sleep:  precodeosascript -e 'tell application "System Events" to sleep' /code/pre  The command name suggests that it emmight/em put the entire system to sleep under some circumstances, but I could not make that happen in limited testing: I tested it with a shell script I started shortly before executing this command, and that was running for a few minutes until I "awoke" the system. It had continued to print output during the entire time.  <answer36478> While I haven't been able to find a command that will sleep the display natively, there is an app you download that will do it. There are two options from here.   ol liInstall the app to the Applications folder and from Terminal or SSH run codeopen /Applications/Sleep\ Display.app/code/li liRight click on the app from the Downloads folder and click "Show Package Contents". Navigate to codeContents/MacOS/code and copy the sleepdisplay file.   Navigate to code/usr/bin/code (you can use the kbd&#x21E7;/kbd+kbd&#x2318;/kbd+kbdG/kbd shortcut and type the directory in) and paste the binary file.  You will now be able to type the command codesleepdisplay/code into Terminal or through SSH and the display will immediately go to sleep./li /ol  Hope this helps!  <answer36491> You could use the codepmset/code command to change the value for displaysleep, something like  precodepmset -a displaysleep 1 /code/pre  (requires root)  <answer36534> Here's a simple shell script that will do it.  precode#!/usr/bin/env bash open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app /code/pre  This will run/start whatever settings you have enabled for Screen Saver on that computer.  <answer36706> The following script will do the job (in Leopard and later), but it must be run with sudo:  The premise is that pmset can set a time until display sleep, but the problem is that a value of 0 turns the feature off, rather than setting the delay to zero, and a value of 1 is a full one minute delay. The magic here is that a value of 2^31 seems to be stored as negative zero, which magically functions as "turn the display off immediately". In Tiger and earlier, a different magic number was needed, because a different bit-sized variable was used internally to store the delay, in minutes, until the display turns off.  This mimics the behavior of control-shift-eject, and can be used on MacBook Airs without an eject key.  precode#!/bin/bash original_setting=`/usr/bin/pmset -g | /usr/bin/grep displaysleep | /usr/bin/awk '{print $2}'` magic_number=2147483648 /usr/bin/pmset -a displaysleep $magic_number; sleep 1; /usr/bin/pmset -a displaysleep $original_setting /code/pre  <answer37027> Really hope this answer isn't too off the beaten track. My favourite way to sleep, restart, shut down - and most importantly lock - a Mac is using Alfred (the app launcher).  It doesn't require any scripts, knowledge of scripts or use of terminal, which is brilliant.  However, if you specifically WANT to use terminal, this probably isn't the solution for you.  <answer37103> Using Alfred (free at the AppStore) is a great way to put the display to sleep by just writing: "sleep". Doesn't get simpler than that.  Of course Alfred does much more than that, you can also restart, logout, empty trash, lock, shutdown and many more things.  <answer93553> Well, this is an old one, but it seems there aren't really good answers for this question anywhere.  I've gotten an AppleScript to work, though it requires a third-party, unmaintained, and un-registrable app—Extra Suites. It can be downloaded on the developer's old website.  precode# Gets the current state of the upper left hot corner, then sets it to sleep display. tell application "System Events"   tell expose preferences     set givenActivty to get the activity of the top left screen     set the properties of the top left screen corner to {activity:sleep display}   end tell end tell  # Uses Mouse to Activate upper left hot corner. [Moving directly to {0, 0} does not work tell application "Extra Suites"    ES move mouse {1, 1}   ES move mouse {0, 0} end tell  # Restores state of upper left hot corner. tell application "System Events"   tell expose preferences     delay 1     set the activity of the top left screen corner to givenActivty   end tell end tell  # Gets rid of Extra Suites nag window. tell application "Extra Suites"   quit end tell /code/pre  I've also incorporated it into an Alfred Workflow.  <answer110137> In OS X 10.9, you can simply do codepmset displaysleepnow/code. This will immediately turn off your display without changing any of your settings or putting the entire host to sleep.  Escalated privileges don't seem to be required (at least with recent versions of OS X), but if you get a message about inadequate privileges, you could do codesudo pmset displaysleepnow/code.  Based on feedback from commenters, this is not available in OS X 10.8 or earlier.  <answer134347> No need extra app, just use codetell application "Finder" to sleep/code  <answer237365> Take a look at the open source github project maclock  By default, it just launches the screensaver, but you can put the display to sleep with:  precodemaclock --display /code/pre  Under the covers, it is a bash script that is essentially just calling:  precodepmset displaysleepnow /code/pre  <answer237560> Wake: codecaffeinate -u -t 2/code  Sleep: codepmset displaysleepnow/code  <answer237565> I did it with codesudo shutdown -s now/code.  Note that you will need administrator privilege to do this though.  <answer262426> The app Launchbar works equally well as Alfred.  In my case, CMD spacebar then S [Sleep] - simple and fast  <answer284727> on macOS Sierra  ul lisleep display : codepmset displaysleepnow/code/li liwake display : codecaffeinate -u -t 1/code/li litest state : codepmset -g powerstate IODisplayWrangler | tail -1 | cut -c29/code results &lt;4 are a sleeping display/li /ul  a small node HTTP server to set screen status of your Mac remotely: https://github.com/ycardon/switch-api  <comment40695> Running shell scripts will delay system sleep, though the details aren't all there in my brain at the moment. <comment40712> Yes something like that but just to turn the screen black (as with ctrl+shift+eject), not put the computer to sleep. It does stop the music for example. <comment41496> +1 I was just about to post the same! I guess this is the best way. I'll up vote this as soon as I'm allowed again. I've reached my limit for today. :) <comment41498> Haha, that's awesome. Thanks. <comment41512> This is a good option as well, the only downside is that it will cause a one minute (hence the 1 at the end of the command) for the display sleep. Just thought Daniel Beck should know. <comment41517> Isn't this permanent? If it's just supposed to be used *once* when needed you need to use `force`: `sudo pmset force -a display sleep 1` <comment41620> You'd rather put it in /usr/local/bin, so as not to risk anything messed up in the system, have it survive potential system upgrades and whatnot. That's what /usr/local is for after all. <comment41653> Yeah, @Lloeki is right. My bad! <comment41690> Actually, I don't see that the /usr/local/bin directory exists. I think we're getting /bin and /usr/bin confused. I would still move the file to /usr/bin <comment41724> This is the answer.  It works instantly and incudes a true sleep state. <comment41733> @MilesLeacy Thanks, but that's not what the user asked for. Apparently it sleeps the machines completely (it didn't when I tested it). Keeping the answer up for others' reference only. <comment41822> No we're not getting confused. This is dictated by the [FHS](http://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard). Every single opensource package worth its salt has a --prefix defaulting to /usr/local for this reason. On Mac OS X (which respects the FHS, mostly, except for /users which got inherited from some other unixes) /usr/local/bin, although nonexistent on the filesystem by default, is in the default PATH. Just create it. <comment41961> Why not simply call: /Applications/Sleep\ Display.app/Contents/MacOS/sleepdisplay  Seems like an unnecessary extra step to copy it to /usr/bin or any other location. <comment41966> He's talking about doing it remotely, which means he may be doing from an iOS device. Also, I gave the option of just running open /Applications/Sleep\ Display.app which will do the same thing in less steps if he doesn't want to go through the extra step. <comment42077> While this is really cool, there are two limitations: 1) Alfred has no option for displaysleep 2) These special commands in Alfred only exist when your system language is English. <comment42129> @gentmatt While #1 is correct, #2 is wrong. My system language is Finnish and the special commands happily exist & execute. If you want to *localize the triggering commands* you can do it under Alfred's `Preferences` → `Features` → `System Commands` → `System`. <comment42130> Great news! Thanks for that info. <comment42186> This might help:  http://apple.stackexchange.com/questions/34884/how-can-i-dim-the-screen-from-terminal <comment42219> That didn't seem work if the original setting was 0 (never). You could add something like `[[ $original_setting == 0 ]] && original_setting=180`. <comment42280> This does not address his need to do this remotely or via ssh. <comment42294> Matt should get credit for the correct answer here, but just to note that you can run 'open -a SleepDisplay' via ssh and it will immediately turn off the screen (or, yes, you can do `cp /Applications/SleepDisplay.app/Contents/MacOS/sleepdisplay  /usr/local/bin/` if you want it in your path. Then you can just type `sleepdisplay` and it will, even over ssh, dim the monitor. I just tested this on my iMac, ssh'd from my MacBook Air. Both running 10.7. <comment42498> You can also read this: http://stackoverflow.com/questions/1239439/command-to-sleep-display-osx <comment43511> I like this one. I copy/pasted this code into a file /usr/local/bin/ss, chmod +x on it, and can now type 'ss' in a commandline to make the screen saver activate. The screen saver in turn is configured to ask for a password one minute after activating the screen saver (which could be lowered further, I believe, if needed) <comment130394> It's not in 10.8; I just checked. <comment140951> A minor note: using 'grep' to match a line to feed to 'awk' is extraneous; this is what 'awk' is for. Get rid of the grep and use `awk /displaysleep/ {print $2}'` <comment144331> For some reason I don’t need escalated privileges on my machine (with a clean Mavericks install). <comment159000> Doesn't this sleep the whole computer? <comment161855> On 10.9 (at least) this does sleep the entire system. <comment167457> FYI: To use this with any keyboard shortcut you want to put the display to sleep you can use Automator - New - Service. Then search "run shell script" in the "actions" tab. Drag it to the right side. Instead of "cat" put "pmset displaysleepnow" as proposed above. Select "no input" from the "service receives selected". Save (cmd+s) it as whatever name ie. "SleepDisplay". Then go to System Preferences - Keyboard - Shortcuts - Services and on the bottom of the list you find your command. Assign any shortcut you like. <comment188760> As a sidenote: use `caffeinate -u` to wake the display again. <comment328792> This does not answer the question. gregseth is not looking for a way to put the computer to sleep with a third-party utility, but a way to put the *display* to sleep from the *command line*. <comment342126> @kundor Your suggestion doesn't work; the grep is needed. <comment342130> @TeemuLeisti it seems to be missing a single quote before the first slash; is that what you mean? I assure you, using grep to match a pattern and awk to act on it is equivalent to using awk to both match the pattern and act on it. <comment342307> @kundor Yes, adding the quote before the first `/` made your example work. I'd assumed a quote was missing from in front of the `{`, instead. <comment348359> I have no idea why this was downvoted; using `caffeinate` to wake the display works.  (You can use a lower timeout in my experience, i.e., `caffeinate -u -t 1`.)