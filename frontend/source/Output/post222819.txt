How does software updates work in OS X? <body> I just switched from Linux to OS X and I am still getting used to it.  I know I'll need to use Homebrew, as I rely on many CLI tools. Also, I just read about Cask, what make me wonder about one thing. How does software (not from the App Store) get updates? Windows-like, i.e. a message notifying about a new version so I can download it, or somehow integrated with the system, so that I don't need to download a new .dmg every time I want to update an app?  If it's "Windows-like", is it better to use Cask for things like Firefox, VirtualBox, VLC, LibreOffice...?  <answer222826> There isn't a general accepted "best" way for non Apple delivered, non Mac App store apps to update. There are many ways, some use linux tools, others reinvent certain wheels, others are scripting rsync/curl in a similar vein to how homebrew is built on a core script and ruby package recipes.  As far as apps self-updating (or at least notifying end users when an update might be available), some use a framework like sparkle to check for updates or program their own update check mechanism. Microsoft Office, Chrome, Firefox and many other apps don't need any other update mechanism other than opting in to the self-update mechanism.  Homebrew casks probably update as well as the core homebrew experience does for command line tools so I would start with that and then ask a follow on question if/when you have a specific app in mind that's not updating to your desires.  ul lihttp://caskroom.io/li lihttp://brew.sh/li /ul  If you manage Macs professionally, there are many frameworks to image, update, and even run your own "app store" to package specific versions of apps and side-step Apple's process.  ul lihttp://www.johnkitzmiller.com/blog/better-software-updates//li lihttp://www.lindegroup.com/autopkgr and https://github.com/lindegroup/autopkgr/li lihttps://www.munki.org and https://www.munki.org/munki-pkg//li lihttps://github.com/unixorn/luggage/li /ul  <answer222833> ul liWith codecask/code, upgrading all of your installed applications (that installed with cask) is done with a single command:  precodebrew cask update /code/pre  This is an unofficial (community based) way to upgrade applications and only has free softwares on its repository (there is no way to purchase). Advantages of this mechanism are:  ol liIt's scriptable/li liIt separates system applications from user applications (your installed applications are placed in code~/Applications//code instead of code/Applications//code) so it's per user./li liInstallation of packaged installers is in the background so it doesn't need user interactions./li liUninstallation of applications is programmed by its community so there is no worry about remaining files after uninstallation./li liIt's possible to have multiple versions of applications systematically because the mechanism uses symbolic links for the latest or selected version of applications./li liThe source of applications is kept in the cache so you can install and uninstall them without additional downloads./li /ol  Disadvantages of this mechanism are:  ol liThere is no differential upgrade. It downloads the whole application image (.dmg) or package (.pkg) and stores in the cache./li liInstallation of applications is relied on symbolic links that may be not ideal (There are two copies of an application and may be repeated in "Open with" list)/li /ol/li liThere is also official App Store mechanism (the default) for upgrading applications that are installed with itself and it supports differential upgrade and can upgrade all of it's installed application with a single click; but unlike Cask it's not scriptable to run upgrade, installation, etc and does not keep the sources./li liAnother mechanism is in-app upgrade check that occurs when application starts. It is different from App Store upgrade and also supports differential upgrade./li /ul  I think it's up to you to choose which mechanism to use for which kind of applications, this comparison may help you.  I use the Cask for applications that is not provided in the App Store (like VLC, OS X FUSE, OwnCloud, Weka, etc.) and App Store for non-free applications i purchased. In-app upgrades are not suitable for me because it does not keep the source of downloaded data.  <comment270072> If you only need commands like g++/gcc and other developer tools, you can install Apple's command line developer tools, just by typing in g++ in Terminal, and then accept the install. All of the updates for these developer tools are in the App Store app, under "Updates".