How to rework a "System Events" command in AppleScript, so that it automatically works in all applications? <body> With the following AppleScript code within a "Run AppleScript" action in a Service:  precodetell application "System Events"     set theSBounds to {{572, 64}, {332, 515}}     set position of window "Google Hangouts - myemailaddress@gmail.com" of application process "Google Chrome" to item 1 of theSBounds     set size of window "Google Hangouts - myemailaddress@gmail.com" of application process "Google Chrome" to item 2 of theSBounds end tell /code/pre  the Service will only work if the application from which that Service has been called has been added to the list of applications under em"Allow the apps below to control your computer."/em This list is found at System Preferences → Security &amp; Privacy → Accessibility.  Is it possible to modify the AppleScript code somehow so that adding every application on one's computer to the list is not necessary? Or, so that, one only needs to add one item to the list, as opposed to every application on one's computer?  I thought that something like this might work:  precodedo shell script "osascript -e 'tell application \"System Events\"' -e 'set theSBounds to {{572, 64}, {332, 515}}' -e 'set position of window \"Google Hangouts - myemailaddress@gmail.com\" of application process \"Google Chrome\" to item 1 of theSBounds' -e 'set size of window \"Google Hangouts - myemailaddress@gmail.com\" of application process \"Google Chrome\" to item 2 of theSBounds' -e 'end tell'" with administrator privileges /code/pre  but this code also requires that the application from which the Service is run is added to the Accessibility list.  Note: I only want to run this AppleScript as a Service, and not in an Automator-created Application, because the code receives selected text as its input (system-wide).  <answer271701> I've found an okay solution (i.e., workaround).  Insert the "System Events" block of code into a "Run AppleScript" action and save it as its own application file in Automator. Note: The file extension of this code must be .app in order for this to work (more on this in a moment).  Go to System Preferences → Security &amp; Privacy → Privacy tab → Accessibility. Add and checkmark the newly created application to the list of apps allowed to control your computer.  Run the newly created app from within your Service. To do so, you may add the following line to your AppleScript code:  precodedo shell script "osascript -e 'tell application \"Application Name\" to activate'" /code/pre  (I habitually use codeosascript/code to codeactivate/code applications when using a "Run AppleScript" action in a Service, as this circumvents a bug with Services that I've discovered.)  Your Service should now run perfectly in every application on your computer, despite the fact that only one application (the one that contains the "System Events" code) has explicitly been granted the power to control the computer.  The file must be saved as a .app file, and not as a .scpt or .applescript file. This is because it is not possible to add .scpt or .applescript files to the list of apps allowed to control your computer; only true .app files can be selected in the dialog.  Note that the .app file does not have to be created in Automator. If you create the .app file in Script Editor.app and follow the other steps, the .app file will function in the same manner.  There is one difference, however. When the .app file is created in Automator, one can use either codeactivate/code or codelaunch/code to run the application in their Service. But, when the .app file is created in Script Editor, one can only use codeactivate/code to run the application; codelaunch/code will result in nothing happening.  <comment341426> Are you dead set on using that script as a service? Why not just save the script as an application through script editor? Then you only need to add that one app to allow accessibility in system preferences. Then you can take it one step further and make the app speakable and launch it whenever you want with a dictation command. <comment341428> Thanks for the suggestion. I didn't want to post the full code, as it's not related to my question, but in it, you would see that the code accepts the currently highlighted text as its input. Short of first copying the selected text to the clipboard, an AppleScript as an application file cannot access the selection. Also, I am unaware of even one third-party program that can get the selected text and send it as a variable to an AppleScript. <comment341429> On the second point, at one time, I was a (brief) user of Mac's Dictation Commands feature. But, I eventually found that it was not reliable enough to use. If my speaking fails to trigger the dictation even only 10% of the time, it's simply easier (IMO) to launch the application from the menu bar or by keyboard shortcut than to rely on my dictation being heard correctly. <comment341431> That's one of the drawbacks of automation in that one has to give permission for every app that controls the computer through an automation process. So you'll have to add apps as necessary. I'm sure that's not the answer you wanted to hear but does that answer the question you asked, or am I not understanding what your asking? <comment341434> @user3439894 I think you're understanding correctly. Here's another way that I can put my question: Is there a substitute for "System Events" that I can use to accomplish the same effect? The problem with "System Events" in AppleScript is that it actually uses whatever app that one currently has open to execute the command, as opposed to using the "System Events" app to execute the command (located at /System/Library/CoreServices/System Events.app). <comment341436> @rubik's sphere, The problem is, System Events is not the calling process, the front most visible app is the one making the call and as such needs permission. I know of no way to change that. That said, it doesn't mean there isn't, I just don't know it, but my experience tells me there probably isn't an easy way even if there was a way. Because you'd have to bypass the security measures Apple has intensionally implemented. Apple is not going to openly publish how to get around it. So as a user you make a choice to either use automation and the security risks it entails or don't use automation. <comment341437> @user3439894 Interesting. Is there a way to set the front most visible app before the `tell application "System Events"` line, so that I can choose the app that makes the call that Systems Events uses? <comment341438> @rubik's sphere, Off the top of my head I'd say no, because you need System Events to get the name of the first application process whose frontmost is true. <comment341439> @user3439894 I have a related question. Why is it that for some System Events commands (e.g.: `tell application "System Events" to set frontmost of process "TextEdit" to true`), one doesn't need to grant access to the front most visible application in order for the System Events command to work, but for other System Events commands (like the one in my question), one does need to grant access?