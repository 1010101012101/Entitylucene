How to run multiple commands on reboot using launchctl/plist? <body> In OS X, you can write a plist file in code~/Library/LaunchAgents//code (or something similar, depending on what permissions/users you like it to be operated on), and load it using codelaunchctl/code to make it function on reboot. However, is it possible to define multiple commands in the plist file, and if that's the case, how can I define it?  For example, suppose that I want to run a series of Python programs, such as:  precodepython first_script.py /code/pre  And then I want to run the script after the first script is done (so I cannot just define those two scripts in two different plist files, since it doesn't guarantee which one to be executed first), I want to run this script:  precodepython second_script.py /code/pre  I use OS X Mavericks 10.9.2.  h3bonus/h3  This is not what I want to do right now and comes from nothing but curiosity, but is it also possible to execute the second program depending upon the result of the first program? So for example:  precodepython first_script.py /code/pre  And if this script succeeds:  precodepython second_script.py --result true /code/pre  And if it fails:  precodepython second_script.py --result false --reason XXX /code/pre  <answer129208>   Run a shell command that starts the other commands:  pre class="lang-none prettyprint-override"code&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;   &lt;key&gt;Label&lt;/key&gt;   &lt;string&gt;some.label&lt;/string&gt;   &lt;key&gt;ProgramArguments&lt;/key&gt;   &lt;array&gt;     &lt;string&gt;bash&lt;/string&gt;     &lt;string&gt;-c&lt;/string&gt;     &lt;string&gt;python first_script.py;python second_script.py&lt;/string&gt;   &lt;/array&gt;   &lt;key&gt;RunAtLoad&lt;/key&gt;   &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  Or change the codeProgramArguments/code key to  pre class="lang-none prettyprint-override"code&lt;key&gt;Program&lt;/key&gt; &lt;string&gt;/path/to/script&lt;/string&gt; /code/pre  and use a script like this:  pre class="lang-none prettyprint-override"code#!/bin/bash  output=$(python first_script.py 2&gt;&amp;1) if [[ $? = 0 ]]; then   python second_script.py --result true else   python second_script.py --result --false --reason "$output" fi /code/pre  <comment150833> Write a script to call the scripts in order -this could be in shall - or for more complex use python and call the modules directly. Call this calling script from lanchd