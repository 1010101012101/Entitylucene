What is the complete, authoritative way in which Mac OSX 10.9 and later builds its PATH? <body> I have read just about every article on this subject.  To wit, I know about:  ul licodelaunchctl setenv/code/li licode/etc/launchd.conf/code/li licode/etc/paths/code/li licode/etc/paths.d/*/code/li licode/etc/profile/code/li licode/etc/bashrc/code/li licode~/.profile/code/li licode~/.bashrc/code/li licode~/.MacOSX/environment.plist/code/li licode~/Library/Preferences/.MacOSX/environment.plist/code/li /ul  Let's start whittling all this craziness down:  ul liFrom other reading, I know that on Mavericks anything that relies on an codeenvironment.plist/code is no longer supported or read./li liI know that code/etc/profile/code erases any codePATH/code previously set by codelaunchctl setenv/code or present in code/etc/launchd.conf/code, and uses a default set of paths appended with anything found in code/etc/paths.d/*/code and code/etc/paths/code./li liI also know that applications launched via Spotlight or the Dock obviously don't read your code~/.profile/code or code~/.bashrc/code./li /ul  That leaves codelaunchctl setenv/code and code/etc/launchd.conf/code (same thing, really).  At any rate, in my case I find that in a Terminal window—I should stress I have none of the following files: code~/.profile/code, code~/.bashrc/code, code./bash_profile/code—I find that the output of codeenv | grep PATH/code has code/opt/subversion/bin/code appended to the end of it.  This string does not show up in any of the sources listed above, so it must be coming from somewhere else.  I was not aware of there being anywhere else for it to come from.  So then: how does Mac OS X Mavericks build its codePATH/code variable?  <answer140516> You're trying to understand the theory and that's great.  I'll just say that from practical experience, you can modify code.bashrc/code, code.profile/code and/or code.bash_profile/code and the path setting will stick.  I prefer code~/.profile/code simply out of habit.  My teammates all use code.bash_profile/code.  Either way it works as long as you pay attention to the order of processing precedence.  Here are a few other thoughts on the matter:  ul liHomebrew wants me to amend my PATH (stackoverflow)/li liHow to correctly add a path to PATH (stackexchange)/li /ul  Hope that helps.  <comment165591> Where did you get your installation of subversion? <comment165592> Found the root of my own personal problem: there was an emacs backup file in `/etc/paths.d` that had the old information in it that was not being shown by `ls` given the way I was invoking it.  I'd still be interested in the full list, which I've never seen anywhere. <comment165702> Hi; thanks for your answer.  The `PATH` setting in that case won't stick for my Emacs.app launched from the Dock or from Spotlight.  Since I don't want to have duplicate `PATH` entries in both `/etc/launchd.conf` and `~/.profile`, I was hoping for the full startup sequence to see if I could find the common denominator. <comment166267> what if you modify .profile to include what you want, use Automator to call a shell script that simply says `bash open -fa /Applications/Emacs.app` (or whatever the path is) and see if that works.  Or maybe there's a PATH option buried somewhere in the Emacs Preferences?