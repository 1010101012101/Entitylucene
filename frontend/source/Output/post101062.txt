How to list installed versions of the same program <body> I have a program called PyMOL installed multiple times on my machine. One was installed by MacPorts, one was installed through the developers distribution channel and so on. One is in /opt/local/bin, the other is in /i/have/no/clue.  I know I can use "which pymol" to see, where the one that is executed is located, but how can I get the location of the other ones with the same name?  <answer101076> codewhereis pymol/code should show you all matches that are in your executable path.   <answer101095> You could use "find" or "locate" and then run the results through "grep".  This will give you more than the results of "which" or "whereis" which will only show things on $PATH.  "locate" is faster, but uses an index which isn't always up-to-date.  "find" is slower, doing a recursive search of everything, but it produces all results -- not just the results that have been indexed like "locate" does.  <answer101108> At least according to its man page, codewhereis/code doesn't search in code$PATH/code but in the result of codesysctl user.cs_path/code (which doesn't contain any additional directories added by the user's profile). To search for the command based on the actual code$PATH/code you could use a shell function like  precodefunction whereis() {     for p in ${PATH//:/ }; do         [[ -x "$p/$1" ]] &amp;&amp; echo "$p"     done } /code/pre  or (for your specific case) run  precodefor p in ${PATH//:/ }; do [[ -x "$p"/pymol ]] &amp;&amp; echo "$p" ; done /code/pre  hr  PS: The space character near the end ofcode${PATH...}/codeis essential for this to work.  <answer101418> You have the right command and just need to set the proper option:  codewhich -a pymol/code will show all instances of the executable codepymol/code located within your codePATH/code.  For example, on my laptop I have codegit/code installed in two places:  precode$ which git /usr/local/bin/git /code/pre  provides what will be run when I use the command codegit/code.  precode$ which -a git /usr/local/bin/git /usr/bin/git /code/pre  provides every instance of the executable in my codePATH/code.  <comment118992> Btw it works also on other unix systems. <comment119351> I always have trouble correctly using "find". Can you provide an example of how you would use "find" here? <comment119358> I have trouble using the "find" command too.  That's why I like a GUI interface such as what is in the "Easy Find" app: http://www.devontechnologies.com/download/products.html <comment119359> I did recommend the "find" command, so  I'll post some examples. <comment119487> This really is the best answer. The top result in `which -a foo` will tell you the default. <comment119660> OK, but how about instances not in $PATH? I'm actually after the instances I don't know about, and which therefore I have not added to $PATH.