Prevent Spotlight from indexing external drive <body> I sometimes use an external SSD with macOS Sierra on it, in conjunction to my current internal drive which has macOS Sierra running on it.  One annoying thing about Spotlight is that whenever I search something in it for example when I'm running from my external drive is that I get results from both my external emand/em internal drive, which is something I don't want.  When booted into my external drive, I tried creating a Spotlight exception for internal drive. However, it seems that if I do that, an exception is created for my internal drive emeven when I boot into my internal drive./em Thus, it seems as though the Spotlight exclusions are embound by the laptop, not the drive/em â€“ meaning that my internal drive will be excluded from spotlight results no matter which external drive I boot up from.  Is it possible to create a Spotlight exception for my internal drive when I am running from my external drive, and likewise an exception for my external drive when I am running from my internal drive?  <answer273165> You could have a script that runs at startup that employs the technique suggested in this post https://apple.stackexchange.com/a/91759/183505  emWhen booting from DriveA (when you want to disable spotlight indexing for External DriveB) you could execute :/em  precodetouch /Volumes/DriveB/.metadata_never_index /code/pre  emWhen booting from external DriveB and you want to re-enable spotlight perhaps you could have your startup script execute:/em  precoderm /Volumes/DriveB/.metadata_never_index /code/pre  The linked post also lists other ways to programatically alter the spotlight exclusions.  Here are some ways to add a script that will launch at login : https://stackoverflow.com/questions/6442364/running-script-upon-login-mac  Good luck!  hr  h2Edit : Method using bash scripts and plist files/h2  hr  First create a startup script. I chose to create one at code~/script.sh/code  Make sure it's executable codechmod +x ~/script.sh/code  strongScript for OS that wants to hide a drive from spotlight/strong  precode#!/bin/bash flagLocation="/Volumes/DriveToHide" flagRemoved=".ney_the_index"  # a new name  # if flag exists rename it. if [ -a "$flagLocation/.metadata_never_index" ]; then      mv "$flagLocation/.metadata_never_index" "$flagLocation/$flagRemoved"; fi /code/pre  strongScript on the OS that wants to index the drive/strong  precode#!/bin/bash flagLocation="/Volumes/DriveToHide" flagRemoved=".ney_the_index"  if [ -a "$flagLocation/$flagRemoved" ]; then     mv "$flagLocation/$flagRemoved" "$flagLocation/.metadata_never_index" fi  if [ ! -a "$flagLocation/$flagRemoved" ] || [ ! -a "$flagLocation/.metadata_never_index" ] ; then     touch "$flagLocation/.metadata_never_index" fi /code/pre  Create a plist file code~/Library/LaunchAgents/com.user.loginscript.plist/code  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;    &lt;key&gt;Label&lt;/key&gt;    &lt;string&gt;com.user.loginscript&lt;/string&gt;    &lt;key&gt;Program&lt;/key&gt;    &lt;string&gt;/Users/yourusername/script.sh&lt;/string&gt;    &lt;key&gt;RunAtLoad&lt;/key&gt;    &lt;true/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  Test it by loading and unloading it:  precodelaunchctl load ~/Library/LaunchAgents/com.user.loginscript.plist /code/pre  <answer273308> Whereas the other answer is a good method to do it, it can inadvertently cause problems and may not be 100% reliable. A better method would be to use Alfred, as it is more flexible than Spotlight, on the external OS.  <comment343386> Seems like this is the best way to do it. I was hoping for something more "native" in a way, but this should be quite reliable. Thank you. <comment343391> I want to mention a problem I'm facing trying to implement this: the `rm` command requires that I run it using `sudo`. I'm using the first method in the SO link you posted. Would you happen to have any suggestions for that? Do I need to use the launch daemon method to overcome this? <comment343658> I updated my answer with a slightly hacky solution. <comment343659> If `DriveToHide` has spaces, then your _scripts_, as currently written, will fail. If you are going to test with `[ ... ]` then double quote the variables to prevent blobbing and word splitting. Or use `[[ ... ]]` to test, then double quoting isn't necessary. <comment343665> Nice! thanks user3439894.  I updated the answer to reflect your suggestion. <comment343671> BTW In my first comment, "prevent blobbing" is a auto-correct error and should be "prevent globbing" <comment343735> @hapi Wow, thank you for the effort you took to write out that method! I'll try it out :)