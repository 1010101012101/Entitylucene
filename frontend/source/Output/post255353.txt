Any difference between ~ and $HOME? <body> It would appear that ~ and $HOME are equivalent in command line and shell scripts. Is that true?  <answer255354> It's true to a certain extent.  ul licode$HOME/code is an expression for expansion of the environment variable codeHOME/code/li licode~/code (tilde) is a separate shell expansion component supsee footnote/sup/li /ul  When used as a command argument and in separation from other strings, code$HOME/code and code~/code are usually equivalent.  But there are cases where they differ:  ul liif the string containing either is quoted, for example:  precode# echo "My home directory is $HOME" My home directory is /Users/techraf # echo "My home directory is ~" My home directory is ~ /code/pre/li liif they are concatenated to a string, for example:  ul licodedd if=${HOME}/source_file of=${HOME}/destination_file/code will work.  Shell will pass arguments codeif=/Users/techraf/source_file/code and codeof=/Users/techraf/destination_file/code containing a valid path to the codedd/code command./li licodedd if=~/source_file of=~/destination_file/code won't work  Shell will pass arguments codeif=~/source_file/code and codeof=~/destination_file/code to the codedd/code command and it will report an error as it does not interpret code~/code./li /ul/li /ul  hr  subfootnote:/sub  In fact code~/code is by default replaced with the value of codeHOME/code, but if codeHOME/code is empty, it is resolved to a home directory:  precode# echo $HOME /Users/techraf # export HOME=/dummy # echo $HOME /dummy # echo ~ /dummy /code/pre    precode# unset HOME # echo $HOME  # echo ~ /Users/techraf /code/pre  From codeman bash/code:     Tilde Expansion      If a word begins with an unquoted tilde character (`~'), all of the characters preceding the first unquoted slash (or all  characters,  if  there  is  no unquoted  slash)  are  considered a tilde-prefix.  If none of the characters in the tilde-prefix are quoted, the characters in the tilde-prefix following the tilde are treated as a possible login name.  If this login name is the null string, the tilde is replaced with the value of the shell parameter HOME.      If  HOME  is  unset,  the  home  directory of the user executing the shell is substituted instead.  Otherwise, the tilde-prefix is replaced with the home directory associated with the specified login name.   <answer255355> code$HOME/code is available on login early stages when code~/code is not available. The reason is that code$HOME/code is defined by system environment, and code~/code is a shell shortcut. That's why code$HOME/code is preferred for shell scripting.  <comment318033> Could you explain in more detail in which moment does shell resolve the environment variable using parameter expansion (`$parameter`) syntax (quote: "*login early stages*", so that it is "*preferred for shell scripting*"), but not yet `~`? <comment318053> I've removed the comments, please use https://chat.stackexchange.com/rooms/38/ask-different-chat or a private chat for extended discussions. <comment318065> As a side note: If you `unset HOME` in other shells, such as `ksh, zsh, or dash` then `echo ~` will not expand to the path of your home folder. <comment318068> @fd0 `ksh` behaviour seems funny - it resolves just to the username when no `HOME` is defined. <comment318271> POSIX states- If the login name is null (that is, the tilde-prefix contains only the tilde), the tilde-prefix is replaced by the value of the variable HOME. If HOME is unset, the results are unspecified. Since the HOME variable is changeable, there are advantages to using something like- `cd ~username`. In a script  `cd ~"$(id -un)"` will take you to the user's home folder no matter what HOME is set to.