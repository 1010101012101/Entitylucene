How to change fonts picked by Terminal.app to display languages other than English? <body> This is definitely and advanced topic and possibly needs a hack that I am willing to do.  I edit Arabic files quite a lot. Arabic characters displayed by Terminal.app are not playing nice at all. To top that, some custom fonts that I use are getting picked up as alternatives for certain glyphs in my codevim/code sessions.  The default font for displaying English works fine and I have no complains about it.  However, I want to change the font picked by Terminal.app when displaying other languages, in my case it is Arabic.  To answer this question, one must know if it is even possible. Are the fonts hardwired into the binary? Is there a hack to bypass that?  strongUPDATE:/strong  It turns out the only hack to solve this problem wasn't a emhack/em. It is the best of what the OS offers for eligible Fixed Arabic Font and that is codeCourier New/code. The font can be read very clearly except for "ARABIC LETER HEH INITIAL FORM" Unicode codeFEEB/code. Hopefully someday someone will fix that letter for better reading in the terminal. Or just copy those glyphs over to Menlo.  <answer88828> You can set the font for terminal in the terminal preferences. (Terminal - Preferences... then select the "Settings" tab and "Text" sub-tab. Fonts are choses based on profiles so you could set up a profile with an Arabic font.  You must have monospaced Arabic font installed. You'll need to to search the internet for one.  Most important, for using using Vim read this:  http://vim.dindinx.net/orig/html/arabic.txt.php  The default version of Vim on the Mac is compiled with "-arabic" so it will never give you what you want, you'll need to recompile you own version (try homebrew) also MacVim may work (GUI version of Vim so no terminal necessary).  <comment104113> Unfortunately, that doesn't answer the question. Thanks for the vim arabic page. Been through that already, and compiled a version of vim with Arabic support. Tried MacVim as well. My question is about picking up fonts for certain scripts when characters are not available in the current font. <comment104115> Does it also apply to other applications or for example using Terminal's default font in TextEdit? Could you just delete or disable the fonts you don't want to be used for font substitution? <comment104116> It is only in Terminal.app, it works great until I enable and use certain Arabic fonts then things get messy. So a way to solve this would be to know how does Terminal.app get to pick the next font (which font?) when the current font doesn't have the glyphs available. Other applications would play nicely. I even figured out a way to type in certain glyphs which OS X doesn't type anymore since Snow Leopard. <comment104121> Terminal.app only uses the one display font you select for it. Have you tried iTerm instead of Terminal? (http://iterm.sourceforge.net) It will allow you to choose a secondary font, presumably for exactly this reason. <comment104137> Whatever font you choose, the OS X font system automatically looks for any missing glyphs in a "fallback" font. The behavior should be the same for all applications. Terminal doesn't do anything special in this regard. As far as I am aware, there is a single fallback font and no supported means for users to choose another one. ismail Your best bet is to install a monospaced Arabic font that contains the glyphs you want. <comment104140> Can you elaborate on what "messy" means, or include a screenshot? My guess is that the available Arabic glyphs are variable-width and look "messy" when Terminal lays them out in monospace. Is that what you mean? The solution is likely to install a monospaced Arabic font. <comment104159> Chris, thanks for the clarification. Exactly what I was looking for, that "fallback" mechanism and if it can be altered/hacked to cherry pick desired fonts. <comment104160> sdmeyers, I'll iTerm a try. Used it long time ago, but fell back to shipped Terminal.app. Maybe it is time again to move to another Terminal App. <comment104161> by messy, i mean it picks certain normal glyphs present in the used font and for another set of glyphs also present in the for it would pick another font. Since Arabic is cursive, it gets really hard to even read the output. <comment104274> It's a minor point, but you should never find Unicode FEEB in correct unicode Arabic text.  What you should see is Unicode 0647 which the OS should display in the proper form depending on its position. <comment104294> Actually Tom, while 0647 has a purpose, I am sure if FEEB is not present in the font then it will fallback to a font that has it. FEEB is in the presentation form B section, but it is essential since Arabic is cursive and the OS wouldn't know how to display the corresponding glyph on its own. You might know better, but that's how I've been thinking about it since Presentation A is mostly for display of double letters, and Presentation B is for letter forms. <comment104303> @ismail No, Unicode Arabic text will be entirely in characters from the 0600/0700 range, and the OS does know exactly how to change the shapes according to the position and how to connect the forms (or not).  That is how Arabic currently works on computers.  The Presentation forms are only present in Unicode for compatibility with older standards used before Unicode. For more info there is http://www.unicode.org/versions/Unicode6.0.0/ch08.pdf <comment104317> Tom, thanks for the info! I've been having the wrong idea about how unicode is working all along! Some fact in my understanding though, that the glyphs must reside somewhere in the font file itself, what I was wrong about is that they don't share same code point. Thanks again. Your explanation and the reading makes me wonder if I can just make up my own font, it doesn't sound like it is so hard now. <comment104322> You are correct, the glyphs have to be there somewhere, ideally with just a glyph id instead of a codepoint.  It's quite possible to make your own font, but it seems like a daunting task for Arabic which has such a large number of table entries for required substitutions and ligatures.  Fixing a few glyphs in an existing font would be relatively easy I think.