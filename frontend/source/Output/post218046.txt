Search for *.swo <body> I think this should be an easy one, but it's got me stumped.   When I use the following, it finds the file.  precode$ ls -al  .bash_*.sw*    -rw-r--r--  1 damiensawyer  staff  12288 27 Nov 07:39 .bash_profile.swo /code/pre  But when I use this, it doesn't find it.  precode$ ls -al *.sw*       ls: *.sw*: No such file or directory /code/pre  I expected the second command to also return code.bash_profile.swo/code.  What am I missing?  <answer218047> h1Using codels/code/h1  The problem is that your file has two dots, not one. You need to account for that:  precodels -al .*.sw* /code/pre  This will match any file that begins with a dot (invisible files like code.DS_Store/code) and also ends with code.sw*/code.  code.swa/code as well as code.swz/code will match.  hr  h1Using codefind/code/h1  You can use the following to find all files with the same extension (codeswo/code in the case below) in a directory.  precodefind ~ -iname *swo /code/pre  code-iname/code finds a case insensitive match.  hr  You can search for that/those specific file(s) using this:  precodefind .bash_*.sw* /code/pre  hr  supNote: Using code~/code as the path will search your entire home directory./sup  <answer218050> The issue is that codels/code only shows files that begin with a code./code you have to explicitly have the first code./code in the file glob.  Thus the following will work:  precodels .*swo /code/pre  Unix shells expand the glob before codels/code sees the file names.  <answer218068> These patterns (code*.sw*/code and the like) are known as globs.  As @Mark and @Zach Gates have noted, globs do not match files whose names begin with a period unless you explicitly include a code./code at the beginning of the pattern. This is because in UNIX-like systems (such as OS X), files that begin with a dot are considered 'hidden' files and are generally not shown by default.  Glob matching is actually done by your shell (codebash/code by default), not by individual commands such as codels/code. As the bash manual explains under Filename Expansion:     After word splitting... Bash scans each word for the characters ‘code*/code’, ‘code?/code’, and ‘code[/code’. If one of these characters appears, then the word is regarded as a pattern, and replaced with an alphabetically sorted list of filenames matching the pattern (see Pattern Matching). If no matching filenames are found,...the word is left unchanged.      When a pattern is used for filename expansion, the character ‘code./code’ at the start of a filename or immediately following a slash must be matched explicitly, unless the shell option codedotglob/code is set.   <answer218070> This is not actually caused by codels/code, since codels/code never expands patterns.  The decision about how to expand glob patterns (patterns containing code*/code and code?/code) is strongmade by the shell/strong.  Your shell is most likely codebash/code.  By default codebash/code does not perform path expansion on dotfiles.  However, it can do so either by explicitly writing the code./code (as you discovered already) or by turning on the codedotglob/code option.  From the bash manpage:     strongdotglob/strong If set, bash includes filenames beginning with a `.' in the results of pathname expansion.   To demonstrate, let's just print the expansion with codeecho/code instead of codels/code:  precode$ touch .bash_profile.swo  $ echo .*.swo .bash_profile.swo  $ echo *.swo *.swo  $ shopt -s dotglob  $ echo *.swo .bash_profile.swo /code/pre  Futher discussion can be found here.  <comment263566> Thanks Zach. I'm aware of using find. I'm wondering if there's a reason that ls isn't working. Is it a limitation of ls? <comment263568> I've edited my answer. @DamienSawyer <comment263575> Thanks Mark. I did actually try -a, however it doesn't appear that your first sample works. I think that you need the leading period. <comment263577> aah cool. So, the takeaway from this should be 'the star doesn't match the period'? <comment263578> It *does* match a period, but it assumes that everything after the first period is the part that needs to match `sw*`. @DamienSawyer <comment263584> Hey, did you mean 'first' instead of 'worst'? <comment263602> Cool! Thanks! The plot thickens..... <comment263762> Actually, it isn't the "two dots" that is the problem, it is the fact that the first dot is the first character. In Unix this the convention for hiding files. *.sw* would match red.and.joe.are.sworn.enemies, since this is not a "hidden" file.