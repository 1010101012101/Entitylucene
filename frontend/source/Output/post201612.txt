keeping python 3 up to date on a mac <body> I want Python 3 (and I do not want to mess with OS X provided python).  According to:  https://docs.python.org/3/using/mac.html  I can get Python 3 and live long and prosper, BUT it is not clear what happens when I want to upgrade using the next DMG.  As an example I can tell you what happens with R on OS X: you get a GUI in /Application and stuff in /Library/Frameworks.  On upgrade the GUI is upgraded and the new framework is placed in the /Library/Frameworks directory, side by side with the old (there is a nice ‘current’ symlink that makes sure that the old stuff is ignored).  I always delete the old stuff to avoid accumulating crud, and that’s it.  Would this approach work for Phyton?  <answer201615> Use Homebrew :)  precodebrew install python3 /code/pre  To update it:  precodebrew update brew upgrade python3 /code/pre  <answer201616> I personally use Homebrew, which is a very nice package manager. If you want to give this a try, first of all make sure you have the XCode Command Line Tools installed on your Mac. Then install Homebrew by typing  precoderuby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" /code/pre  in the Terminal. Homebrew will place its "Cellar" (the set of all the packages you installed with Homebrew) in /usr/local/Cellar.  Now, about Python 3, once Homebrew is installed simply type  precodebrew install python3 /code/pre  and there we go. You have Python3 installed on your Mac.  Notes:  ul lithis version will automatically take place instead of the OS X version (if it doesn't, just run codebrew link python3/code - this will symlink python3 into /usr/local/bin/)/li lito update python run codebrew update/code in the Terminal (this will update Homebrew) and then codebrew upgrade python3/code if a new version of python3 is found by the command codebrew update/code/li liat the end you can run codebrew cleanup python3/code to remove every old version/li liwith this fancy package manager, you can also take care of R/li /ul  <answer290996> You can use the Anaconda distribution. Its a free version of Python 3 (and Python2). The Andaconda package will also let you update different python versions and upon installation it sets the proper python path. Anaconda comes with Anaconda Navigator which helps you load python packages and comes also with Spyder 3. A Python IDE type of app.   <comment243064> However does this leave old versions around and which directories does it update? <comment243069> As explained in the link I provided, Hombrew installs everything into `/usr/local/Cellar` and creates symbolic links for applications in `/usr/local/bin`. It will **not** touch anything else in the system. It comes with the `brew cleanup` command, which removes unused or outdated applications automatically. <comment243072> How does it deal with multiple python versions which is what the OP asks and you don't answer <comment243076> It will automatically link to the newest version after an upgrade and `brew clean` removes any remains of the previous version. <comment243078> Quote: "this version will automatically take place instead of the OS X version (if it doesn't, just run "brew link python3" - this will symlink python3 into /usr/local/bin/)".  That is exactly what I do NOT want. I use Homebrew for other stuff and I am not sure I want to go down the Homebrew way... <comment243081> Maybe I wasn't that clear. The OS X version still will be available, but the default compiler will be set as the Homebrew-one. If that's what you still do not want, then I don't get it. Just like the R example you provided, it will also create some GUI and the proper Framework will be updated as well. Apologies. <comment243112> Nothing to apologise for! ;) what I want is a totally sandboxed thing where if I type 'python' in a tty I will get the OS X supplied one -- that is the default and I do not want to ever mix it with my own stuff by mistake.  If I can sandbox HB python3 so that I need to specify I want that and not the default (every time!) then I'm good to go. <comment243114> The last thing I can say is, considering that HB will symlink things into "/usr/local/bin" and the original Apple stuffs are in "/usr/bin", you can set and edit priority by editing your $PATH environment: if you put "/usr/local/bin" first you'll have the HB version, if you put "/usr/bin" first, you'll have the Apple version. Rather annoying I know, but that's the only option that came to mind <comment243118> You may also use `brew unlink python3` to remove the symbolic link. You will now use the osx version when running `python`. To use the brew version, you can still run, for example, `/usr/local/Cellar/python3/3.3.2/bin/python3` or create a symlink like `ln -s /usr/local/Cellar/python3/3.3.2/bin/python3 /usr/local/bin/python-3.3.2` and after that, run `python-3.3.2`. You can also install old version of python3 formulas with HB, and use all of them separately. Check [this](http://stackoverflow.com/questions/3987683/homebrew-install-specific-version-of-formula) on how to do that. <comment243576> You don't need to link python3, it will automatically be available as `/usr/local/bin/python3`. And since OS X doesn't ship with Python 3 anyway, you don't overwrite any preinstalled Python.