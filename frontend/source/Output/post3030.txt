How can I run/stop/relaunch an application automatically, at boot/login/some other time? <body> How do you make a script or app to run or stop running automatically when the system is booted, a user logs on, at a specific time, when a disk is attached, etc.?  <answer3033> Lingon still works.  I just used it last week to create a "scheduled task".  After I downloaded it I had to use its auto-updater to get the latest version but it works fine.  <answer3044> If it's only necessary to run when the system is booted, just use the Login Items tab of your Accounts preference pane in System preferences.  img src="https://i.stack.imgur.com/ZBMXK.jpg" alt="alt text"  If it's a script, use AppleScript Editor to save it as an application. If it's not an AppleScript script, you can still use AppleScript to run the script like this:  codedo shell script "your script here"/code  <answer3047> h2Gui Method/h2  If you want something to run when a user logs in, the easiest way is to use the GUI. You can  ul liGo to the codeSystem Prefs &gt; Accounts &gt; Login Items/code screen, and add the item there by ul liclicking the code+/code symbol/li lidragging and dropping the code.app/code onto the pane/li /ul/li liIn the dock, bring up the context menu for an app, select codeOptions/code, then select codeOpen at Login/code/li /ul  h2Launchd method/h2  If you want to launch something that is not a code.app/code, or you want to have more control over launching it, such as:  ul liat a certain time or at a specified interval/li licontinuously re-launching if it crashes/li linot related to user login/li lias a function of network access/li lionly run when another process is running /li liwhen a file is added to a folder/li lietc./li /ul  then you want to use the strongtechnical solution/strong that is codelaunchd/code.  The easiest way to set up a codelaunchd/code config file is to use a tool to help. At the time of writing the most popular method is Lingon (which has an older free version available from SourceForge), or the PList Website tool.  h2Hand Coding/h2  If you don't want to use Lingon or the PList Website and only want to use the raw tools available on the system, you can write your own codelaunchd/code codeplist/code by hand  Here is my launchd script to run SomeApp strongcontinuously/strong after the system boots (independent of a user logging in). It is in /System/Library/LaunchAgents/ and called SomeApp.restart.plist. If it is run based on a user login, it could be stored in ~/Library/LaunchAgents/  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;         &lt;key&gt;RunAtLoad&lt;/key&gt;           &lt;true/&gt;         &lt;key&gt;KeepAlive&lt;/key&gt;         &lt;true/&gt;         &lt;key&gt;Label&lt;/key&gt;         &lt;string&gt;SomeApp.restart&lt;/string&gt;         &lt;key&gt;ProgramArguments&lt;/key&gt;         &lt;array&gt;                 &lt;string&gt;/path/to/SomeApp.app/Contents/MacOS/SomeApp&lt;/string&gt;         &lt;/array&gt;         &lt;key&gt;StartCalendarInterval&lt;/key&gt;         &lt;dict&gt;             &lt;key&gt;Hour&lt;/key&gt;             &lt;integer&gt;5&lt;/integer&gt;             &lt;key&gt;Minute&lt;/key&gt;             &lt;integer&gt;10&lt;/integer&gt;        &lt;/dict&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  Load it once with  precodelaunchctl load ~/Library/LaunchAgents/SomeApp.restart.plist /code/pre  ul liThe codeRunAtLoad/code option will launch the application the first time launchctl runs this./li liThe codeKeepAlive/code option will re-launch the application if it crashes./li liThe codeStartCalendarInterval/code will run it at a certain time. Presumably this is mutually exclusive with the previous two, but is included to show what can be done with codelaunchd/code/li liLaunchctl will run this after reboots./li /ul  There are many additional options that can be found by experimenting with Lingon or by reading the man pages for codelaunchctl/code, codelaunchd.plist/code, codeplist/code, codelaunchd.conf/code, etc.  <answer20381> Don't forget Loginhooks.  Although they run as root, you ought to be able to have it execute a $HOME/.loginhook script using something like this:  precode#!/bin/sh  home=`eval echo ~$user`  if [ -x "$home/.loginhook" ]; then     logger -t $0 "executing .loginhook of user $user"     su - $user -c "$home/.loginhook" fi /code/pre  Then just add whatever commands you want to the ~/.loginhook  Also, although 'launchd' is "the Mac way" crontab is still a perfectly viable option, and is much much easier to hand-edit than XML launchd files.  Personally, I happily paid $5 for Lingon.  <answer101966> Running an app at a specified time can be done easily in iCal, as I have just found out thanks to another forum!  ol liMake a new event in iCal for the time you want the app to open./li liAt 'Alert' choose 'Open File' - so, you can set a file to open, which will obviously also open the default application for that file type./li liTo just open an app, rather than a file, change the 'iCal' dropdown to 'Other...' and choose the app you want to run!/li /ol  One thing to be aware of is that if you have multiple Macs sharing stuff over iCloud, this event will also run on those apps, which you may or may not want. To make this only happen on a single Mac, you need to create the event in an 'On My Mac' calendar which you can do as follows...  ol liHide all other iCloud or shared calendars on the left hand bar by hovering over the calendar name and clicking the 'hide' button which will appear./li liNow right click (or Option click if you're a complete cretin and still haven't realised that you have more than one finger and can change your mouse preferences so that it is slightly more useful than its default 'cretinous brick for cretins' state) and choose 'New Calendar'./li liBecause all shared calendars are hidden, this new calendar will be created as 'On My Mac' and will be local to this Mac./li /ol  I've only just found this out myself, and was pleasantly suprised by both tips, so thought I'd share them here.  I got the info from these helpful people over here...so thanks you people!...  http://osxdaily.com/2013/04/15/launch-file-app-scheduled-date-mac-os-x/  <comment2694> Lingon is just an app to make creating the .plist files for launchd more user friendly. Also someone made a web based launchd plist creator: http://plist.spotmac.de/ <comment9889> Lingon also is now on the App Store <comment15976> Thanks, really useful. You can also use `launchctl load -w ...` to make the change persistent. Based on your feedback I updated my [OSX poweruser configurator script](https://gist.github.com/993847) <comment19165> But to find the free, open source version you need to dig it out of Sourceforge.  The lastest commercial version also doesn't work on Leopard (10.5).  But 2.1.1 does - see http://sourceforge.net/projects/lingon/files/Lingon/2.1.1/ <comment22600> So the script in the code block should be saved as `/path/to/script`, and `sudo defaults write com.apple.loginwindow LoginHook /path/to/script`? And the point in running a script in the home directory is that each user can have a custom (or no) `~/.loginhook`? <comment22645> @Lri - yes, precisely. Sorry that wasn't clearer. The block code could be /usr/local/bin/loginhook.sh and, since it is run by root, it will look for a $HOME/.loginhook when a user logs in, and run it as that user. <comment55850> Boo! plist.spotmac.de seems to be gone. :-( <comment202790> Huh ? Are you sure about that ? It says in the UI of your screenshot "These items will open automatically when you log in" - isn't that different from when the system boots ? Also, your link seems to 404.