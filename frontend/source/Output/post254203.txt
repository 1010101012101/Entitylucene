Run lolcat after each command? <body> I'm trying to add an alias for lolcat that will invoke after each command put into the terminal.  I only know how to add it to select items, anyone know how to just make it a standard output?  img src="https://i.stack.imgur.com/78mNP.jpg" alt="enter image description here"  <answer254209> Why exactly you would want to do this is beyond me, but there are two ways you can accomplish this:  1)  you can put the command in the PS1 variable (the variable the controls your prompt)  or...  2)  Use the variable PROMPT_COMMAND (preferred)  h3Modifying PS1/h3  For example, your prompt might default to displaying the hostname and the username:  precodeAllans-iMac:~ allan /code/pre  To see the code, type codeecho $PS1/code and we get:  precode\h:\W \u\$ /code/pre  Which equates to hostname, working directory, username and the dollar sign.  To run a command (using codels/code as an example) just add it in enclosed with backticks and assign it to PS1:  precodePS1=`ls`"\h:\W \u\$" /code/pre  Now, every time a command is executed, successful or not, it will issue the codels/code command before displaying the prompt.  h3Using the PROMPT_COMMAND variable/h3  Like above, but this time you set the variable PROMPT_COMMAND with the command you wish to execute.  Again using codels/code as the example:  precodePROMPT_COMMAND=ls /code/pre  Now, without having to modify the PS1(prompt) value, you can have a command execute every time.  You can set either of these values permanently in your .bash_profile located in the user's home directory.  <answer266112> strongUPDATE/strong  I put my implementation here with install instructions:  https://github.com/dosentmatter/rainbow-bash-prompt  It uses the C implementation of lolcat but I modified it a little to make it psuedo-random.  strongOLD ANSWER/strong  Here is how I did it. Add this to your code.bashrc/code:  precodePS1_colorless=${PS1:-'\h:\W \u\$ '}  ESC=$(echo -e '\033') SOH=$(echo -e '\001') STX=$(echo -e '\002') PS1_color_wrap='s/'$ESC'\\[[[:digit:];]*m/'$SOH'&amp;'$STX'/g'  PS1="\$(lolcat -f &lt;&lt;&lt; \"$PS1_colorless\" | sed '$PS1_color_wrap')" /code/pre  It works by running codelolcat/code dynamically on code$PS1_colorless/code and doing a codesed/code to add in control characters so line wrapping works correctly.  It takes a little less than 200 milliseconds to run. So it might be too slow for you. Here is an example I timed:  img src="https://i.snag.gy/nAS6Zk.jpg" alt="ruby lolcat time"  I chose to use codePS1/code and not codePROMPT_COMMAND/code because I wanted to be able to use the bash prompt escape sequences such as code\h/code, code\W/code, etc. which wouldn't be possible with codePROMPT_COMMAND/code since I need to pass it to codePS1/code for expansion before running codelolcat/code. You can use alternatives like code${HOSTNAME%%.*}/code to imitate the behavior of code\h/code but I don't think you can do it for something like  precode\#     the command number of this command /code/pre  It uses code-f/code to force codelolcat/code to run even though the output is being piped to codesed/code. codelolcat/code defaults to not output anything if the output is not to a tty.  After doing the codelolcat/code, it does a codesed/code to surround the ansi color syntax such as codeESC[38;5;184m/code (codeESC/code is the control character code\033/code) with the control characters codeSOH/code and codeSTX/code so it becomes codeSOHESC[38;5;184mSTX/code. codeSOH/code and codeSTX/code are just code\[/code and code\]/code respectively in the bash prompt control characters. I have to use codeSOH/code and codeSTX/code control characters instead of code\[/code and code\]/code because I am generating colors dynamically. code\[/code and code\]/code would not work because they are translated to control characters when codePS1/code is first parsed. code\[/code and code\]/code would work if you used codePROMPT_COMMAND/code to generate output for codePS1/code but then I wouldn't be able to use code\u/code and code\W/code because lolcat would have been run before passing code\u/code to codePS1/code for expansion.  For reference: https://stackoverflow.com/questions/24839271/bash-ps1-line-wrap-issue-with-non-printing-characters-from-an-external-command  Characters surrounded by codeSOH/code and codeSTX/code are treated as non printing characters. This is required so line-wrapping works correctly and doesn't treat the ansi color as actual visible characters.  If you want to use literal non-printable control characters, you can replace  this  precodeESC=$(echo -e '\033') SOH=$(echo -e '\001') STX=$(echo -e '\002') PS1_color_wrap='s/'$ESC'\\[[[:digit:];]*m/'$SOH'&amp;'$STX'/g' /code/pre  with this  precodePS1_color_wrap='s/^[\\[[[:digit:];]*m/^A&amp;^B/g' /code/pre  Note the code^[/code, code^A/code, and code^B/code are the literal control characters so you can't just copy and paste. You would have to use something like vim to enter them  In vim:  code^[/code == kbdCtrl/kbd+kbdv/kbdkbdEsc/kbd or kbdCtrl/kbd+kbdv/kbdkbdo/kbdkbd0/kbdkbd3/kbdkbd3/kbd  code^A/code == kbdCtrl/kbd+kbdv/kbdkbdCtrl/kbd+kbda/kbd or kbdCtrl/kbd+kbdv/kbdkbdo/kbdkbd0/kbdkbd0/kbdkbd1/kbd  code^B/code == kbdCtrl/kbd+kbdv/kbdkbdCtrl/kbd+kbdb/kbd or kbdCtrl/kbd+kbdv/kbdkbdo/kbdkbd0/kbdkbd0/kbdkbd2/kbd  strongEDIT (a little faster in python)/strong: The python one seem to run a little bit faster:  img src="https://i.snag.gy/NCtnAZ.jpg" alt="python lolcat time"  Change these variables in your .bash_profile:  precodePS1_colorless=${PS1:-'\h:\W \u\$'} PS1_newline="tr -d '\n'" PS1_spacing=' ' PS1="\$(lolcat -F 6 -p 25 -f &lt;&lt;&lt; \"$PS1_colorless\" | $PS1_newline | sed '$PS1_color_wrap')" PS1+=$PS1_spacing /code/pre  The python version has extra newlines in the output so I remove them with the codetr/code. It also removes trailing spaces so I removed the trailing spaces from codePS1_colorless/code and add them back with codePS1_spacing/code.  You can get it here: https://github.com/tehmaze/lolcat  I will update if I ever get the C port working: https://github.com/jaseg/lolcat  I can't get it to build on mac os. If anyone can get it working on linux or mac os, please let me know.  <comment316455> Added picture for reason.. :)   will check this out and see how it works! <comment316463> Okay, so it needs to be like this.. ls | lolcat , will this work with trailing? or can I add it lolcat | ls ? <comment333699> I'm currently trying to figure out how to speed it up with ports of lolcat. There is a implementation in C and in Python. Haven't tried the Python one yet and I can't get the C one to compile on mac os. Not sure if musl can be built on mac os.   C: https://github.com/jaseg/lolcat   Python: https://github.com/tehmaze/lolcat   Here's the Ruby one that I am using currently: https://github.com/busyloop/lolcat