How can I force command-line arguments to a program shortcut in the dock? <body> I have Chrome installed in Applications, and a shortcut to it in the Dock. How can I achieve to force some command-line arguments to each start-up of this app?  Let me be clearer, in the Terminal, I can do this: open /Applications/Google\ Chrome.app --args --explicitly-allowed-ports=6666 And that way I modify Chrome's behavior as I like it. How can I have this option by default when launching the app from the Finder of the Dock?  <answer17477> One way to do this is with AppleScript.  Open AppleScript Editor (/Applications/Utilities) and type this in:  precodedo shell script "open '/Applications/Google Chrome.app'  --args --explicitly-allowed-ports=6666" /code/pre  Save it as an Application, and add that application to the Dock.br Click on the app's icon and you Chrome will open with your custom parameters.  This way works, but it isn't exactly ideal for a couple reasons:  ul liRunning the AppleScript will take a little longer than just opening the app/li liYou'll have two icons in your dock (the script and Chrome)/li /ul  This will work, but I'm interested to see if someone comes up with a better answer.  <answer17478> According to Mac OS X Hints article (found by Googling mac gui application command options), this can be accomplished by editing the application's bundle. I would do this on a backup copy of Chrome to test it out first.  ol liOpen the Google Chrome application bundle by right/ctrl-clicking on it and selecting codeShow Package Contents/code./li liWithin the package, navigate to codeContents/Mac OS/Google Chrome/code and rename it something like codeGoogle Chrome-bin/code./li liCreate a text file at that same location with the name codeGoogle Chrome/code with the following contents:  precode!/bin/sh  exec '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome-bin' --args --explicitly-allowed-ports=6666" /code/pre/li liUse terminal to change the new file to be executable (codechmod 755/code)./li /ol  Note, I've not actually tried this, only outlining what's mentioned in the linked article.  <answer17479> If you go inside the app bundle (right-click on the app in Finder and select "View Package Contents") and go to the Contents/MacOS folder, there should be a file called codeGoogle Chrome/code whose icon is a black square. Make a note of its name and rename it (something easy like codechrome_bin/code). Make a blank text file in the folder with the same name (codeGoogle Chrome/code) as the original file and paste in the following script:  precode#!/usr/bin/bash  ./chrome_bin --args --explicitly-allowed-ports=6666 /code/pre  Make your script file executable (codechmod +x chrome_bin/code) and see if that starts Chrome properly!  <comment19080> Nathan's way is the best way. There's no code in Chrome at present to take these as a default or read a preferences file. Those switches are temporary for debugging until a feature gets added more formally - then you should have a way to change it more permanently. See http://www.chromium.org/developers/design-documents/appmode-mac for plans for helper apps. See http://fluidapp.com/ for a nice wrapper - you might be able to hack it to suit your needs (or the author might like a suggestion to extend the tool for your use case) <comment208714> The downside of this answer is that it results in a long series of "Google Chrome-bin wants to use your confidential information stored in ... in your keychain. Do you want to allow access to this item?" <comment208716> *"Save it as an Application, and add that application to the Dock."* -- how do I save it as an Application? And trying to add a .scpt file marked as executable to the Dock just doesn't work for me under Mountain Lion: the file just doesn't "stick" to the Dock.