In bash, can test -e look for a file with a semi-variable name using *? <body> I have an if then looking for a certain set of files. They all start with lib, so I could either set an if then up for each one or I was hoping there's a way I can use an asterisk.  Here's what I have and what I tried.  precode d=myfolder  if [[ -e $d/lib* ]]; then   mv /etc/launchd.conf $d/launchd.conf  else   2&gt;/dev/null; true  fi /code/pre  so as you can see, if any of those lib files are present I want to move the launchd.conf file as well. but the asterisk isn't doing it. Any ideas?  <answer156855> From codeman bash/code   precode[[ expression ]]       Return a status of 0 or 1 depending on the evaluation of the conditional        expression expression.  Expressions  are composed  of  the primaries        described below under CONDITIONAL EXPRESSIONS. Word splitting and pathname       expansion are not performed on the words between the [[ and ]]; tilde        expansion, parameter and variable  expansion,  arithmetic expansion, command        substitution, process substitution, and quote removal are performed.       Conditional operators such as -f must be unquoted to be recognized as primaries. /code/pre   Or in short, the pattern is not expanded.  A simple alternative could look like  precodeif [[ $(echo $d/lib*) != "$d/lib*" ]]; then     mv /etc/launchd.conf $d/launchd.conf fi /code/pre  Short explanation on how this works:  ul licodeecho $d/lib*/code expands to a list of library files if any are present, this list is not equal to code$d/lib*/code (which doesn't get expanded) so the codemv/code is executed/li liOTOH if no library files are present, the echo returns the string code$d/lib*/code, the code!=/code evaluates to false and the codemv/code is not executed/li /ul  <comment184492> I'm attempting to implement the alternative you provided but it's not quite doing what I need. Also, I may need to clarify, I'm using the asterisk to append the file-name, not to find an executable. I'm going to attempt to explain what the alternative does to see if I'm understanding it right. <comment184496> I may have misread your question but isn't your goal to see whether there are any files matching `$d/lib*`? <comment184497> Sorry, I waited too long to add the end of my comment haha.    the goal is to see if there are any files matching $d/lib... because there are multiple files that all start with lib but end in something else.  Examples: libgenkit.dylib, libgenkitsa.dylib, libimckit.dylib, libimckitsa.dylib.  So, if any of those files are in the $d folder, I want to move launchd.conf. If they aren't, do nothing.  if the variable (myfolder) with /lib* attached is not the same as myfolder/lib* (thus, if that is true) then move launchd.conf. <comment184499> Which is, if I didn't make a typo of some sort, what the alternative should do. `echo $d/lib*` expands to a list of library files if any are present, this list is not equal to `$d/lib*` (which doesn't get expanded) so the `mv` is executed. OTOH if no library files are present, the echo returns `$d/lib*`, the `!=` evaluates to false and the `mv` is not executed. At least that's how it did work here :-) <comment184530> Patrix, thank you for the response. It did work, the issue I was running into was I didn't correctly escape the quotes since it's being run in a `do shell script` command in AppleScript.