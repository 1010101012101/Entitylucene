When writing AppleScript in Automator, what is the significance of "input" and "parameters"? <body> When one adds a "Run AppleScript" action to a file in Automator.app (e.g., a workflow, application, or service), the following default code is presented:  precodeon run {input, parameters}      (* Your script goes here *)      return input end run /code/pre  What is the significance of codeinput/code and codeparameters/code? That is to say,  ul liWhere does the AppleScript code get these variables from?/li liTo where exactly does the AppleScript codereturn/code the codeinput/code to?/li liHow might these variables be ideally employed in an AppleScript application/service? Examples are appreciated./li /ul  <answer271107> I'll try to answer my own question, making use of the relevant documentationsup1/sup provided by @user3439894 in a comment on my question.  h1strongemWhere does the AppleScript code get these variables from?/em/strong/h1  h2strongcodeinput/code/strong:/h2     The codeinput/code parameter contains (in most instances) strongthe output of the previous action in the workflow/strong.   The data type of codeinput/code is codelist/code.  To display the contents of codeinput/code in Automator's corresponding em"Results"/em pane for that specific action, simply use:  precodereturn input /code/pre  hr  h2strongcodeparameters/code/strong:/h2     The codeparameters/code parameter contains the strongsettings made in the action’s user interface/strong.   The data type of codeparameters/code is codereco/code (i.e., a coderecord/code object).  Here is an overview of the codereco/code typesup2/sup:     This type is used as the type of the codeproperties/code property for the codeitem/code class, and the type of the codewith properties/code parameters of the codeduplicate/code and codemake/code commands.   To display the contents of codeparameters/code in Automator's corresponding em"Results"/em pane for that specific action, simply use:  precodereturn parameters /code/pre  h3strongWhat, specifically, does codeparameters/code contain?/strong/h3  I was curious what exactly is meant by, em"settings made in the action’s user interface,"/em so I took a look at the contents of codeparameters/code. I learned that, unlike codeinput/code, codeparameters/code only contains information about that specific action, not any information regarding the preceding action.   By using the following line of code,  precodedisplay dialog length of parameters /code/pre  I also discovered that the number of properties in codeparameters/code for a em"Run AppleScript"/em action in Automator is three.  They are:  precode|temporary items path|: /code/pre  where code|temporary items path|/code is followed by the file path of the temporary folder created to store temporary data that may be created by the currently running em"Run AppleScript"/em action. This folder is necessarily created upon run, even if the code does not create any temporary data. After the em"Run AppleScript"/em action has completed, this folder and its parent folder are immediately deleted.  ul liNote that code|temporary items path|/code differs from code(path to temporary items)/code.  ul licodereturn POSIX path of (path to temporary items)/code produces:  ul li   "/private/var/folders/p9/q_5_fbld7qzdmz6htfqjcxhw0000gn/T/TemporaryItems/" /li /ul/li licodereturn |temporary items path| of parameters/code produces:  ul li   "/var/folders/p9/q_5_fbld7qzdmz6htfqjcxhw0000gn/T/1BD6446F-5501-42E5-A002-29588DFF8BD8/1/com.apple.Automator.RunScript" /li /ul/li liWhile both folders reside within the "T" folder, the difference between these two folders is that the code|temporary items path|/code folder, as well as its parent folder, are deleted upon completion of the em"Run AppleScript"/em action (i.e., this folder is action-specific), while the codepath to temporary items/code folder is never deleted and can be viewed even when the AppleScript is not running./li /ul/li /ul  b/b  precodeignoresInput: /code/pre  where codeignoresInput/code is either emtrue/em or emfalse/em, depending on whether the em"Ignore this action's input"/em box found in the emOptions/em tab beneath that action in Automator is either ticked or unchecked.  precodesource: /code/pre  where codesource/code contains the unabridged AppleScript code of that em"Run AppleScript"/em action.  h3strongHow does one read the contents of codeparameters/code within an AppleScript?/strong/h3  Since the type of codeparameters/code is not codelist/code, one cannot simply:  precodeset firstParameter to item 1 of parameters /code/pre  as this will produce an error. But, you can convert codeparameters/code to a codelist/code object:  precodeset parametersInListFormat to (parameters as list) /code/pre  Then, you'll be able to execute something like this:  precodeset individualItemFrom_parametersInListFormat to ""  repeat with individualItemFrom_parametersInListFormat in parametersInListFormat     display dialog individualItemFrom_parametersInListFormat end repeat /code/pre  Alternatively, you can skip the conversion to a codelist/code and read the contents of codeparameters/code simply like sosup1/sup:  precodeset item1 to |temporary items path| of parameters set item2 to |ignoresInput| of parameters set item3 to source of parameters /code/pre  hr  h1strongemTo where exactly does the AppleScript codereturn/code the codeinput/code to?/em/strong/h1  The codeinput/code of the current action is sent to the next action as that action's codeinput/code.  More info on the codereturn/code statementsup3/sup:     A codereturn/code statement exits a handler and optionally returns a specified value. Execution continues at the place in the script where the handler was called.      If a handler does not include a codereturn/code statement, AppleScript returns the value returned by the last statement. If the last statement doesn’t return a value, AppleScript returns nothing.      When AppleScript has finished executing a handler (that is, when it executes a codereturn/code statement or the last statement in the handler), it passes control to the place in the script immediately after the place where the handler was called. If a handler call is part of an expression, AppleScript uses the value returned by the handler to evaluate the expression.   hr  h1strongemHow might these variables be ideally employed in an AppleScript application/service?/em/strong/h1  Now that I better understand the positional parameters of codeinput/code and codeparameters/code, it is easier for me to imagine their practical value.  h2strongcodeinput/code/strong:/h2  The value of codeinput/code is conspicuous and the possibilities for its implementation are immeasurable.  One very basic application would be if you want to pass a string of text that a user enters in a dialog box via an em"Ask for Text"/em action to the next action, a em"Run AppleScript"/em action that writes this string to file. Here is what this might look like:  img src="https://i.stack.imgur.com/oqwUd.png" alt="Sample Automator Workflow"  hr  h2strongcodeparameters/code/strong:/h2  Given that codeparameters/code is limited to that specific action and does not contain any data from previous actions, and the data that it does contain isn't necessarily relevant, it is much less useful and flexible  than codeinput/code. I can visualize the need for code|temporary items path|/code, but I am unable to do so for the other two properties.  Here is an example of how one might need to reference code|temporary items path|/code in their AppleScript:  ul liSay that one wanted an Automator application to display to the user the dimensions of a web image.  ul liThe user could use code|temporary items path|/code as a location to store that image, so that the code could operate on it. Then, upon completion, since the user does not need or want the image saved to disk, the AppleScript would automatically delete that image (or, more specifically, the AppleScript would automatically delete the folder that contains the folder that contains that image)./li liHere is how this might be implemented:  precodeon run {input, parameters}      set theURLofImage to "https://cdn.sstatic.net/Sites/stackoverflow/company/img/logos/se/se-logo.png"     set tempFolderThatIsAutomaticallyDeletedAfterRun to |temporary items path| of parameters     set filename to "StackExchangeLogo.png"     set fullFilepath to tempFolderThatIsAutomaticallyDeletedAfterRun &amp; "/" &amp; filename        -- Saving image from internet to disk.     -- From: http://stackoverflow.com/a/21491446/7138483         do shell script "curl -f " &amp; theURLofImage &amp; " -o " &amp; fullFilepath        -- Figuring out the dimensions of the saved image.     -- From: https://www.macosxautomation.com/applescript/imageevents/01.html     try         tell application "Image Events"             launch             set this_image to open fullFilepath             -- Extract the properties record.             set the props_rec to the properties of this_image             -- Purge the open image data.             close this_image             -- Extract the property value from the record.             copy (dimensions of props_rec) to {x, y}             set the image_info to "Dimensions of " &amp; filename &amp; ": " &amp; "" &amp; x &amp; " x " &amp; y         end tell         display dialog image_info     on error error_message         display dialog error_message     end try      return input end run /code/pre/li /ul/li liAlso, one might want to monitor the size of the code|temporary items path|/code folder, to impose a limitation, so that if its size surpasses a certain value, an error is presented to the user./li /ul  In terms of how code|ignoresInput|/code might be used, one could change the code|ignoresInput|/code setting mid-code, with the following line:  precodeset |ignoresInput| of parameters to true /code/pre  One might want to arrange their code so that if the codeinput/code meets or does not meet some condition, then the codeinput/code should be ignored. For example:  precodeif item 1 of input &gt; 10 then         set |ignoresInput| of parameters to true end if /code/pre  But, even if one did want to make sure that the codeinput/code was only utilized if its contents met some condition, one could accomplish this same effect without having to read or alter the code|ignoresInput|/code value; instead, one could simply declare their own boolean value for this purpose. So, I still think that the applicability of the code|ignoresInput|/code codeparameter/code is questionable.  Similarly, I can't think of any particularly compelling reasons why one would need to read or modify the codesource/code codeparameter/code of their AppleScript while it runs.  hr  h1strongemWhat else?/em/strong/h1  One area of confusion for me still exists.  I still don't understand why Apple, in its documentation, advises against not returning anything in an AppleScriptsup1/sup:     The template code finally returns codeinput/code as its output; your action should always return something as output, even if it what [sic] is given it as input.   What's the harm of removing the codereturn/code statement from one's AppleScript, if one does not need it?  If someone familiar with AppleScript methodology can address this matter for me, please drop a comment.  It is possible that I am misinterpreting the sentence.  I am interpreting this sentence to mean:  em"When writing your code, you should always make sure to include a codereturn/code statement somewhere in your code."/em  But, the sentence could potentially mean instead:  em"If you put a codereturn/code statement in your code, that codereturn/code statement is designed to always return something. If you don't assign anything to codeinput/code, then the code will simply return the same input that it received."/em  The ambiguity revolves around the original intent of the word, emshould/em, and whether the emshould/em is meant to act as a recommendation for the user writing an AppleScript, or whether, by emshould/em, they meant emwill/em.  hr  Sources for passages included in this answer:  sup1.sub Automator Programming Guide - emThe Structure of the on run Command Handler/em/sub/sup    sup2.sub Cocoa Scripting Guide - emBuilt-in Support for Basic AppleScript Types/em/sub/sup    sup3.sub AppleScript Language Guide - emHandler Reference/em/sub/sup    <comment339453> If you're going to continue to program in AppleScript, I strongly suggest you read the entire [AppleScript Language Guide](https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983-CH208-SW1) <comment339454> Also, [About Handlers](https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-CJBIDBJH) and [Handlers in Script Applications](https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptLangGuide/conceptual/ASLR_about_handlers.html#//apple_ref/doc/uid/TP40000983-CH206-SW14) as this covers the area of your questions. In brief, this allows for objects to be passed to the _action_ and passed off to the next _action_ but not limited to that. <comment339458> _"This allows for objects to be passed to the action and passed off to the next action but not limited to that."_ I understand what this means vaguely, but sometimes I just need someone to explain things to me in a practical sense with examples for me to absorb a concept. <comment339472> Also since your using AppleScript mainly in Automator, you should also read the [Automator Programming Guide](https://developer.apple.com/library/content/documentation/AppleApplications/Conceptual/AutomatorConcepts/Automator.html) and specifically [The Structure of the on run Command Handler](https://developer.apple.com/library/content/documentation/AppleApplications/Conceptual/AutomatorConcepts/Articles/ImplementScriptAction.html#//apple_ref/doc/uid/TP40001512-97148-CJBIADBH), as the latter specifically covers what you asked.