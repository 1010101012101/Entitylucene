locate & updatedb - files not found <body> I ran  precodesudo /usr/libexec/locate.updatedb /code/pre  then   precodelocate Radium3 /code/pre  but it returns nothing!  but  precode$ ls ~/Library/Containers/com.catpigstudios.Radium3/ Container.plist Data /code/pre  So why doesn't codelocate/code see all the files?  Am I using this command correctly on OS X?  <answer126677> Try:  precodesudo /usr/libexec/locate.updatedb /code/pre  And look config:  /etc/locate.rc           the configuration file  strongEdited:/strong  Post here output:  precodeecho $LOCATE_CONFIG /code/pre  And:  precodecat /etc/locate.rc /code/pre  And:  precodeecho $0 /code/pre  strongUpdate:/strong  https://developer.apple.com/library/mac/documentation/Darwin/Reference/Manpages/man1/locate.1.html#//apple_ref/doc/man/1/locate  The locate program searches a database for all pathnames which match the specified pattern.  The data-base database      base is recomputed periodically (usually weekly or daily), and strongcontains the pathnames of all files      which are publicly accessible/strong.  Try strongmdfind/strong instead stronglocate/strong  strongUpdated2:/strong  strongmdfind -name text which is more accurate. Just mdfind text gives you files that contain text as well. â€“  David Krmpotic/strong  precodemdfind -name text /code/pre  <answer126696> If you want to search the same database that Spotlight uses, you can use the codemdfind/code command as an alternative (although not an exact replacement) for codelocate/code:  precodemdfind Radius3 /code/pre  <answer126707> Permissions may be the culprit as locate apparently cannot read files that are not world readable. See this answer by Plundra for more explanation.   The findutils package from homebrew does enable codegupdatedb/code and codeglocate/code commands that seem to overcome some of the limitations of the builtin utilities.   <comment148397> I uncommented `#SEARCHPATHS="/"` in config, it didn't help. `-v` option doesn't seem to produce any additional output :/ <comment148398> Give additional info for me plz. In answer "Edited" section. <comment148399> http://pastie.org/8998774 <comment148400> BTW, 'locate'  finding something else? Did you have /var/db/locate.database? <comment148403> $ ls -la /var/db/locate.database -r--r--r--  1 nobody  wheel  19463861 Apr  6 20:08 /var/db/locate.database $ locate david.jpg /Users/david/temp/david.jpg <comment148405> Try **mdfind** instead **locate** <comment148416> you should update your answer to `mdfind -name text` which is more accurate. Just `mdfind text` gives you files that *contain* text as well. <comment148422> Thank you! but now that I know about `mdutil` does it make sense to check out this? One use case I can think of is that I can trigger rescan manually with `gupdatedb` - with Spotlight not so easy or it would take longer (it also indexes files contents). Are there other advantages? <comment148432> Reindexing with mdutil/spotlight can take awhile for sure. `updatedb` is quicker for that. `glocate` seems to have no problem indexing system files, while I find `mdfind` ignores ~/Library and other system files. I definitely find I get more hits with `glocate` over `mdfind` in most circumstances. YMMV. <comment148466> ok, I'm testing this now. I think I found some problem... fist I ran `sudo gupdatedb`, then saved `glocate Radium` output. Then I ran `gupdatedb` and it said: `/.Trashes: Permission denied`, the same for some other folders. I compared the output for both and it was the same! Strange... <comment149118> From what you're saying, you first ran `sudo gupdatedb` (running it as root), then you followed up later by running `gupdatedb` as a normal user which would not have access to the files that the root user would have access to, meaning you'd get permission denied errors. If you want a complete database of filenames for your whole system, keep running it as root. This does expose your files to other users on the system who may use the `glocate` command. But if you are the only user, that should be fine.