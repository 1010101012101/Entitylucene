bind application to file of particular names(rather than suffix) <body> I want to open all makefiles with TextWrangler. But since makefiles have no suffix so binding a type of file to TextWrangler does not work.  How can I tell Mac to open any file named codeMakefile/code with TextWrangler?  <answer38533> There is no way to do this, you can change the application opened on a per instance basis using the standard methods, however this will not apply to all other files of the same name.  There are two workarounds, but those do involve a slightly more user movements, click-mouse move -click) instead of double-click  ol liTextWrangler adds an menu item to the right click (ctrl-left click) menu for all files to "Open File in TextWrangler"/li liDrag the files into the TextWrangler app (or a shortcut) to open the files directly./li /ol  <answer41945> I don't know any way to change the default app based on filename, but you could assign a default application for text files with no extension (and executable shell scripts). codef=~/Library/Preferences/com.apple.launchservices.plist; plutil -convert xml1 $f; open $f -a TextEdit/code and add the entries below to the LSHandlers array:  precode&lt;dict&gt;     &lt;key&gt;LSHandlerContentType&lt;/key&gt;     &lt;string&gt;public.plain-text&lt;/string&gt;     &lt;key&gt;LSHandlerRoleAll&lt;/key&gt;     &lt;string&gt;com.barebones.textwrangler&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt;     &lt;key&gt;LSHandlerContentType&lt;/key&gt;     &lt;string&gt;public.unix-executable&lt;/string&gt;     &lt;key&gt;LSHandlerRoleAll&lt;/key&gt;     &lt;string&gt;com.barebones.textwrangler&lt;/string&gt; &lt;/dict&gt; /code/pre  Applying the changes requires restarting the OS (not just logging out and back in).  <answer41952> There is a way, but I wonder if codeLaunchSerivces/code would honor it on Lion or not.  Any how, it is setting the file's strongcreator/strong &amp; strongtype/strong code.  I read some time ago that Lion's codeLaunchServices/code no longer honors those codes and they are Legacy tech from the old Mac days.  I can think of one possible solution for this. That is to change, if that is even possible, the codekMDItemContentType/code to have a type unique to codeMakefile/code's. Also that type must be some how constructed and listed in the field below that which is codekMDItemContentTypeTree/code. You can lookup those fields while running code% mdls Makefile/code in Terminal.app.  Either way, setting the strongcreator/strong &amp; strongtype/strong codes or setting codekMDItemContentType/code field, is not an easy task. But I hope I have put you on the right track for a possible solution. 