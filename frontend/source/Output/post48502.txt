How can I permanently add my SSH private key to Keychain so it is automatically available to ssh? <body> It seems that codessh-add -K ~/.ssh/id_rsa/code will load your key but will ask for the password each time you reboot.  I am looking for a solution that would not require me to re-enter the key password between logins.  <answer49195> Add the public key in:  precode.ssh/known_hosts /code/pre  Public key usually are on:  precode/home/user/.ssh/id_rsa.pub /code/pre  Hope that helps  <answer197223> You are being prompted for the password every time because your "login" keychain is being locked after inactivity and/or sleeping or in your case a reboot. There are two ways to solve this for you.  ol liChange the settings for your "login" keychain. Assuming your ssh key is stored in the "login" keychain.  ul liOpen Keychain Access/li liHighlight the "login" keychain/li liRight-click or option-click the "login" keychain/li liUncheck the "Lock after X minutes of inactivity" and the "Lock when sleeping" checkboxes./li /ul/li liGenerate another SSH key without using a passphrase.  ul liOpen Terminal./li liEnter command: codessh-keygen -t rsa -b 4096 -C &lt;comment&gt; -f &lt;.ssh/id_rsa&gt;/code/li li-t is for type, -b is key size, -C is comment, -f output file (must create directories first)/li liDo not set a passphrase./li liImport SSH key into "login" keychain with codessh-add -K &lt;path to ssh key&gt;/code/li /ul/li /ol  You should not be prompted for a keychain password anymore.  <answer250572> On OSX, the native codessh-add/code client has a special argument to save the private key's passphrase in the OSX keychain, which means that your normal login will unlock it for use with ssh. On OSX Sierra and later, you also need to configure SSH to always use the keychain (see Step 2 below).  Alternatively you can use a key without a passphrase, but if you prefer the security that's certainly acceptable with this workflow.  h2Step 1 - Store the key in the keychain/h2  Just do this once:  codessh-add -K ~/.ssh/[your-private-key]/code  Enter your key passphrase, and you won't be asked for it again.  (If you're on an earlier version of OSX (pre-Sierra), you're done, Step 2 is not required.)  hr  h2Step 2 - Configure SSH to always use the keychain/h2  It seems that OSX Sierra removed the convenient behavior of persisting your keys between logins, and the update to ssh no longer uses the keychain by default. Because of this, you will get prompted to enter the passphrase for a key after you upgrade, and again after each restart.  The solution is fairly simple, and is outlined in this github thread comment. Here's how you set it up:  ol liEnsure you've completed Step 1 above to store the key in the keychain./li liIf you haven't already, create an code~/.ssh/config/code file. In other words, in the code.ssh/code directory in your home dir, make a file called codeconfig/code./li liIn that code.ssh/config/code file, add the following lines:  precodeHost *   UseKeychain yes   AddKeysToAgent yes   IdentityFile ~/.ssh/id_rsa /code/pre  Change code~/.ssh/id_rsa/code to the actual filename of your private key. If you have other private keys in your code~.ssh/code directory, also add an codeIdentityFile/code line for each of them. For example, I have one additional line that reads codeIdentityFile ~/.ssh/id_ed25519/code for a 2nd private key.  The codeUseKeychain yes/code is the key part, which tells SSH to look in your OSX keychain for the key passphrase./li liThat's it! Next time you load any ssh connection, it will try the private keys you've specified, and it will look for their passphrase in the OSX keychain. No passphrase typing required./li /ol  <comment55582> Can you say a little more about when the password prompt comes up for you?  I ask because I have an ssh-key for a remote server, which I assure you is not the same as my Mac login password or anything, and I haven't had to enter the password for the ssh-key for *years*.  I can just open up a terminal, type "ssh server", and I'm there.  I think I first set this key up under OSX 10.5. id_dsa, but I don't think that should matter. <comment55583> My `id_rsa` key has a password on it. <comment55590> I also have the problem that I solved this so long ago that I can't remember exactly what I did. But I _think_ the idea is to _not_ run `ssh-add`, but just run `ssh` directly. You should get a window popping up that will as the pass phrase for the key, and with a checkbox to let you store it in your keychain. <comment55591> @Sorin - so does mine!  I had to enter it once, long ago, and the Mac has saved it for me ever since.  Hopefully Harald's advice will help. <comment56305> Do you mean the Keychain password (i.e. your login password) or the key's passphrase? If it's the latter, re your passphrases definitely stored in Keychain? You can check this by opening Keychain Access and looking for it in the login keychain. <comment59444> I think mean the `authorized_keys` <comment59448> **ssh - authorized_keys HOWTO** http://www.eng.cam.ac.uk/help/jpmg/ssh/authorized_keys_howto.html <comment59494> Anyway, this doesn't work if you have more than one key! <comment332317> This almost worked for me. My "login" keychain already had automatic locking disabled, so Matthew Sanabria's answer did not apply. Using `ssh-add -K ...` added the keys to the ssh agent without prompting for a password, but only for the current session. After a reboot, I had to reissue the command. <comment333915> Somehow I do the ssh-add -K and it works for a while and then suddenly starts prompting me for a password again. Not sure if this is to do with iterm or oh my zsh updates? <comment333966> Note that when invoking `ssh-add` from inside SSH, `security unlock-keychain` must be called first. Also, I didn't have to create the directories for the `-f` parameter. Unfortunately, I still had to call `security unlocl-keychain` in SSH sessions in order to access the login Keychain, which prompts for password every time... <comment335379> @Poulsbo & @Abram -- see my update, Sierra changed the automatic behavior and now you have to run `ssh-add -A` manually to load your saved keychain. Some possible solutions referenced above. <comment335944> @trisweb Thanks for the tip. joshbuchea's solution of modifying the `.ssh/config` file looks promising! See https://github.com/lionheart/openradar-mirror/issues/15361#issuecomment-270242512 <comment336934> @trisweb check previous comment, I think that this may be good workaround for the need to run `ssh-add` in bash login, especially as not everyone is using bash shell. Please update the answer once you have the confirmation that it works. <comment336977> @sorin see the updated answer, and let me know if you have any feedback. Thanks! <comment344491> Editing 'config' works great on MacOS, but fails under Linux (Bad configuration option: UseKeychain). Is there a way to write one config file that works on both? <comment346671> Works great! In my case I needed to use the `A` flag in addition to the `K` one to add my keys to the keychain and register the passphrase into it (`ssh-add -AK ~/.ssh/[your-private-key]`). Thanks! <comment359363> @wcochran I too am running into this one.  This really throws a wrench into plans to keep dotfiles common across platforms. <comment360031> One thing to remember about these: It's NOT in the OpenSSH upstream, *only* in the Apple [Mm]acOS(X) versions.  There are recipes elsewhere how to get the /usr/bin/ssh-add auto add the keys, so that /usr/local/bin/ssh (OpenSSH via brew etc.) can use the user-agent