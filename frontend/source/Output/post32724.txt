What are pros and cons for MacPorts, Fink and Homebrew? <body> I'm just migrating from Ubuntu Linux to Mac, and everything is new and I'm re-learning a lot of stuff.  On Linux I had the excellent apt-get to manage software packages. I googled for an alternative on Mac and found about MacPorts, Fink and Homebrew.  I will use this computer primarily to develop Ruby on Rails applications.  So, what are the differences between them? Which are the upsides and downsides? Which one is best maintained and has more packages?  <answer34972> Definitely Homebrew. I started with Fink, then switched to MacPorts (happier), then Homebrew (much, much happier). These are my reasons for using each (a pro list if you will):  h2Fink/h2  ul liApt-based - feel right at home if you come from a Debian-based environment/li liBinary packages - packages are available as binaries so no long compile times. Practically though I've found that the pre-compiled binaries were always outdated and I had to compile stuff for my system anyways/li liDecent selection of packages/li /ul  h2MacPorts/h2  ul liBiggest selection of packages/ports/li liGenerally very up to date/li liNice variants system that lets you customise the build/li liEasy and intuitive port files/li /ul  h2Homebrew/h2  ul liVery up to date/li liMaximum leveraging of what comes with OS X. Unlike Fink or MacPorts, it does not require you to build/install ruby and libraries from scratch just to install some small Ruby-based tool./li liInstalls into code/usr/local/code so does not need you to modify codePATH/code anywhere/li liEverything owned by user, so no packages ever need potentially risky root access to install/li liEvery installed package is cleanly sandboxed into its own cellar so you don't have stray files all over your system, just symlinks from bin, man, etc./li liRidiculously easy to create your own formula files (ie. package descriptors)/li liSince you're from a ruby background, another plus is everything is written in ruby and all formulas are simple ruby scripts/li /ul  h2pkgin/h2  ul liVery up to date/li liFaster installs because of Pre-compiled binaries/li liEverything installed in /opt/pkg//li libacked by pkgsrc community and Joyent/li liKnown to work on NetBSD, DragonFly BSD, Solaris, Debian, Mac OS X, Minix/li /ul  https://pkgsrc.joyent.com/install-on-osx/  http://pkgin.net/  <answer89352> h2MacPorts/h2  It is more independent of Mac OS X, this means MacPorts will just ignore many of the system libraries and softwares that already available in Mac OS X and pull its own one instead, which could be slower when the utility you install requires some set of large libraries and softwares.   strongBut/strong this kind of choice is safer because the packages you installed are less influenced by Apple's system update/upgrade procedure.  hr  h2Homebrew/h2  It is more dependent on existing Mac OS X installed packages, so this will speed up the installation of packages and minimize redundant libraries.   strongBut/strong the risk is installed packages might be broken because of Apple's system update/upgrade.  So, these are the two different kind of tradeoff.  Also, Homebrew takes over strong/usr/local/strong by default, with which some folks don't like this because it somehow conflict with the unix-tradition and might cause problems if you’ve already installed anything there (MySQL, etc.)  hr  Apart from these differences, considering the packages these two can offer, you can check with these two commands if you already have MacPorts/Homebrew installed, which show you the packages they currently provided:  precodeport list | wc -l brew search | wc -l /code/pre  And you will find out that MacPorts has much more packages than Homebrew.   (19399 v.s 3583  on May 13 2016)  <answer145773> Just to add some of my own thoughts that seem true-ish circa late 2014 at least.  Homebrew, as of a couple of years ago, definitely has the upper hand in terms of mindshare. You'll find a lot of blogs with people talking about how much happier they are with Homebrew - usually because of the whole "MacPorts pulls in the whole world" vs "Homebrew makes use of what you already have" thing.  However, IMO, MacPorts is a different beast now than it was a couple of years ago. When I first switched to OS X &amp; was using MacPorts the MP philosophy was indeed frustrating because almost everything was built from source. A new installation was particularly painful/slow. However over the past year or so, based purely on my own impressions, it seems like 90% of MP packages are binaries &amp; so installation is actually really fast now. From what I gather Homebrew is also moving in this direction with "Bottles" but i get the impression that most things you install via HB at this point in time will be compiled from source.  So, if only to offer a countervailing opinion, MacPorts seems to actually be the "faster " option these days. However most peoples opinions of MP seem to be based on experiences from circa 2011-12 or so &amp; dont really take this into account. Take this with a grain of salt though as I'm not a regular HB user (and its rather painful to use both side by side).  I do think HB has advantages that mean it will probably "win the war" in the long run though  ul liHB is all Ruby whereas MacPorts, and its package formulae, are written in TCL which is....not exactly a popular scripting language. That said its pretty damn simple to create your own portfile./li liHB is based around GitHub &amp; thus seems a lot more welcoming to new contributors whereas MacPorts hosts its own SVN repository somewhere I think - which basically reflects the different ages of both projects I suppose./li liAs mentioned the general consensus is that MacPorts has been superseded by HB &amp;, rightly or wrongly, that draws more people towards it./li /ul  Otherwise YaOZl &amp; kLy covered the main difference in terms of sudo, dependencies etc pretty well. Personally I do find that MacPorts sometimes leads to some headaches in terms of other programs not expecting anything to be in code/opt/local/code, things being installed with root permissions etc &amp; there are some things that are generally best not installed with MacPorts (e.g. you can install Rails via MacPorts but you'd be crazy not to install it via Ruby's normal Gem management). Other than that though I'm a big fan of the MacPorts philosophy of building its own little world &amp; not relying on some prepackaged OS X library - when it works, and it mostly does, everything is dead simple. Which is what you want of a Package Manager really. And as i mentioned, at this point in time its pretty damn quick to set most things up.  Hope some of that was useful.  <answer213132> Brew was completely smooth for me to use, so I'm unable to tell about its cons. Some disadvantages of MacPorts:  ul liyou have to install Xcode from the Apple Developer site, hence you must have an Apple developer account (which now requires credit card) and download almost 3.5 GB of stuff;/li liif port 873 (rsync) is blocked by your firewall, you'll have to manually configure the HTTPS protocol;/li lithe HTTP(S) server from which packages are downloaded is (often) extremely slow (under 20 KiB/s yesterday; tested from a couple very reliable Gigabit connections in different countries) and may fail with error Operation too slow. Less than 1024 bytes/sec transferred the last 60 seconds, forcing you to redo everything from scratch./li /ul  There are several very popular questions about the first two points.  <comment37412> I edited your title to make it match your real question. On most Stack Exchange sites question asking for "the best" are frowned upon. <comment37418> Why do you need any of these won't ruby's gems be sufficient? <comment103630> Note that for home-brew you can argue that "Installs into /usr/local " and " leveraging of what comes with OS X" are problems - they are the two main reasons I use another packaging system <comment130541> As a remark on the differing number of packages: Homebrew decidedly does not include packages for programming languages which have their own packaging system (rubygems/pip/cpan…) or for software for which an arguably more appropriate OS X installer is available (MacTeX). Also, duplicates and older versions are not in the default repo but includes in alternate *tap* repos. Compare this to macports, which, eg contains an IPython port for all included Python versions. It is kind of a different philosophy which naturally increases the number of packages in macports. <comment146230> Given that /usr/local/bin isn't in the default Mac OS X path, you most certainly do have to modify your PATH—you just only have to do it once, since brew puts in that one place links to all the new bins it installs (except the "keg only's", but that's noise here). <comment160134> for more on why duplicates aren't always bad: http://apple.stackexchange.com/questions/11461/is-there-any-alternative-to-macports also there are a few more alternatives there <comment175624> Never used it myself, but perhaps a comparison to [pkgin](http://pkgin.net) would also be useful. <comment178396> Excellent link!  http://terrychay.com/article/macports-vs-homebrew.shtml  Thank you! <comment200477> @Mark Which packaging system do you prefer? <comment226635> @Mark I second David's question, as I recently abandoned Homebrew after seeing what it did to my `/usr/local` directory. Homebrew doesn't really play well with other applications that want to write there. <comment226690> @jedd.ahyoung I prefer macports which puts in /opt/local (fink puts in /sw) <comment257333> This was my experience installing ImageMagick on 10.6; brew was very easy, but didn't include the JP2 delegate. http://imagemagick.org/script/binary-releases.php <comment257343> brew and macports just require Xcode command line tools so the same here. <comment257345> @Mark I'm not sure what you mean, but brew worked perfectly for me without Xcode. <comment257354> You'll need a complier for brew *and* MacPorts, which can be installed via the Xcode Command Line Tools. You will not need the Xcode *application*. <comment257356> Well, that's not what http://www.macports.org/install.php says. If the installation instructions are wrong, that doesn't make for an easy install. <comment257357> The issue is that Macports knows it works with full Xcode and that is what the build servers use - in practice it seems to work with just the command line tools but noone is prepared to say it works in all cases so better to be safe and install the Xcode.app <comment257358> If there is a workaround to install MacPorts without an Apple developer account, that's definitely worth linking, but it's IMHO off topic for this question. My answer addresses the standard procedure.