In OSX Yosemite, why can I set many environment variables for GUI apps, but cannot set the specific variable PATH <body> After I had sorted out OSX' PATH issues up to the  Mavericks release, the problems come back in Yosemite!!!   So I want to mimic the old codelaunch.conf/code feature in the new Mac OSX 10.10 Yosemite release, in order to have the PATH environment variable  in GUI apps like Carbon Emacs or RStudio available. I used the great idea of stackoverflow user ursa to set up a shell script which configures environment variables via codelaunchctl/code. (See his stackoverflow answer here.) This works for most environment variables, strongbut not for the PATH variable/strong.  h31. What have I done?/h3  First I wrote  the  code/etc/environment.rc/code script looking like:  precodelaunchctl setenv PATH /Users/halloleo/bin:/usr/texbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin launchctl setenv JAVA_HOME /usr/local/jdk1.7 launchctl setenv ENVIRONMENT_RC "yes" /code/pre  Then I created the  plists for codelaunchd/code (listings of these and of other mentioned scripts in the appendix below). Then I activated them with  precode$ sudo launchctrl load ... /code/pre  Then I disabled the codepath_helper/code utility in shell init file code/etc//codeprofile, so that it does not overwrite the codeenvironment.rc/code settings. And finally I restarted the machine.  h32. What's the effect?/h3  When I start up Terminal the new environment variables codeJAVA_HOME/code and codeENVIRONMENT_RC/code are set according to codeenvironment.rc/code, but PATH is set to  /usr/bin:/bin  In order to make sure, no codebash/code init file got in the way I wrote a little python script instead (in the appendix as well) to show the variables in the current environment and I execute this directly by double clicking a Platypus wrapper. Again the new variables are set, while PATH has the system default.  strongSo why can I set other variables, but emnot/em the PATH variable? And how can I solve this emin a unified way/em?/strong  h3Update:/h3  emThe situation is very puzzling: The shell (codebash/code at least) in Terminal or Emacs will pick up the PATH you set via codelaunchctl/code, but other GUI apps will not do so., e.g. the mentioned minimal python script straight called via Platypus will not show your custom path. And even Emacs itself does not know the correct PATH: You notice this e.g. when you issue the Emacs command codeM-x ispell-buffer/code; the unix tool codeispell/code which emacs tries to call won't be found if it is just on your custom path./em  hr  h3Appendix/h3  strongcodenet.halloleo.environment.plist/code, the launchd config file in code/Library/LaunchDaemons//code:/strong  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;KeepAlive&lt;/key&gt;     &lt;false/&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;net.halloleo.environment&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/bin/sh&lt;/string&gt;         &lt;string&gt;/etc/environment.rc&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;WatchPaths&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/etc/environment.rc&lt;/string&gt;     &lt;/array&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  strongcodenet.halloleo.environment-user.plist/code, the launchd config file in code/Library/LaunchAgents//code:/strong  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;KeepAlive&lt;/key&gt;     &lt;false/&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;net.halloleo.environment-user&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/bin/sh&lt;/string&gt;         &lt;string&gt;/etc/environment.rc&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;RunAtLoad&lt;/key&gt;     &lt;true/&gt;     &lt;key&gt;WatchPaths&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/etc/environment.rc&lt;/string&gt;     &lt;/array&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  strongcode/etc/profile/code, the modified bash start-up file:/strong  precode# System-wide .profile for sh(1)  # if [ -x /usr/libexec/path_helper ]; then #   eval `/usr/libexec/path_helper -s` # fi  if [ "${BASH-no}" != "no" ]; then     [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc fi /code/pre  strongcodeshow_environ.py/code, the script displaying all environment variables:/strong  precodeimport os print (os.environ) /code/pre  <answer153404> PATH in Yosemite can and should be set within /etc/paths file. Just add your path to the end of this file:  precode/usr/bin /bin /your/custom/path /code/pre  /etc/environment script in original post provides support for PATH variable in GUI applications (tested with Emacs).  <answer162543> This puzzled me for a long time (well, the last couple of hours). In the end I ran into this bug report, which seems to exactly describe my problem (I'm not sure to what extend it's related to your problem, but there seems to be a bug in Yosemite/launchd in combination with PATH and scripts such as python:  http://www.openradar.me/18945659  The solution seems to be to start a shell script which then starts the python. Not really what I like, but it's the way it is....  <answer192931> The problem is that launchd appends another PATH variable instead of replacing the one in the environment. Most programs use codegetenv/code which always returns the first occurence of a variable, shells instead iterate through all environment variables and import them as local variables thus overwriting previous instances with the last one.  This is obviously a bug in launchd, environment variables passed to a program should be unique.  <comment180559> This does *only* work for shells which call `/usr/libexec/path_helper` during their initialisation process. GUI apps do *not* get the PATH according to `/etc/paths` - and I asked specifically about GUI apps. <comment180664> I've updated answer and /etc/environment script in original post <comment180668> This is two answers which one are you giving - also the OP says /etc/environment  does not work <comment180676> @mark (1) after this question were rised I've updated /etc/environment, and now it does support PATH. (2) the answer here is to use /etc/paths <comment180689> Sorry, ursa, for me, even if I use `/etc/environment` instead of `/etc/environment.rc`(as file name and referenced in the plists), the PATH *in the environment* of launched GUI is still `/usr/bin:/bin`. In Carbon Emacs, launched via double click in finder(!) and without a `.emacs` file, check the value of `exec-path` or `process-environment`. <comment180692> ok. try in steps: (1) in terminal call "launchctl setenv PATH /your/custom/path:/bin:/usr/bin" (2) relaunch Dock application "osascript -e 'tell app "Dock" to quit'" (3) launch Emacs with spotlight (4) menu  Tools  Shell command  echo $PATH. what does it print? <comment180969> Worked for me. `sudo vim /etc/paths` then reboot and worked great. Thanks. <comment181351> @ursa Sorry for my late reply. When I do the four steps you suggest, I get the result you mention, but this does not mean that PATH **in Emacs' environment** is set correctly, it only shows, that the shell launched by `shell-command` gets the correct PATH. It's a very puzzleing situation. I will update the question with these details. <comment181357> @halloleo that is what I would expect - the shell command in Emacs launches a new shell and that shell reads /etc/path and .bashrc etc but Emacs itself does not get called via the shell mechanism <comment181403> @mark Yes, and that is exactly my point, problem and question: How can I set the environment variable PATH of GUI apps themselves when launched via the Finder? Still, no real *general* solution for this in sight... <comment199510> Thanks for the link to the bug report. Good to now it is a real bug. I found another clutch around it; I will post it here. <comment229876> Cool background answer! I guess theer is not real way around it in shells, or is there? <comment229926> @halloleo You can launch the command as `sh -c 'YOUR ORIGINAL COMMAND'` which passes it though shell, picking the `PATH` set in launchd.