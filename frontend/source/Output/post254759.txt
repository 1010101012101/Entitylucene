How to package an app with sqlite3 database <body> I'm a new Mac user trying to create a *.pkg file which should hold an *.app (let's call it MyApp) and a corresponding sqlite3 database(let's call it MyAppDB.sqlite3). This application has been written in Python and transformed into a Mac application using Pyinstaller . It is hence not a 'native' Mac app.   The *.pkg instalation process should copy the MyApp.app into code~/Applications/MyApp/code and the related database into code~/Library/Application Support/MyApp/MyAppDB.sqlite3/code  For this purpose I've used Packages, however the program seems no to copy the db into the code~/Library/Application Support//code folder since no new folders or files are created there after the installation process, only the code~/Applications/MyApp/code folder is correctly created where the app gets copied.  Without the database the program crashes. I've added a bash script which creates in a post-installation manner the missing folders into code~/Library/Application Support/MyApp//code and copies there the MyAppDB.sqlite3 file. Unfortunately the file has only coderead/code persmissions and I cannot change that.   Hence my question:   ul liany expierience with Packages and how to sucessfully add files to other folder  than code~/Applications/code ? Maybe I'm doing something wrong... ? /li /ul  Many thanks in advance for your help!  <answer254774> h1Check the Installer Log/h1  Have you checked the Installer log file, code/var/log/install.log/code, for errors or problems? Maybe the package is working but not installing where you expect.  h1A Better Approach/h1  As Mark comments in your other question, try to avoid needing to install files in multiple locations.  Apple's developer tools for creating packages are:  ul lipkgbuild/li liproductbuild/li /ul  h1Quick Fix using codepkgbuild/code/h1  Try the following approach for a quick fix. Note this installs to code/Applications/code and not code~/Applications/code:  ol liPrepare the files for packaging:  precode~/installer/ ~/installer/Applications/ ~/installer/Applications/YourApp.app ~/installer/Library/ ~/installer/Library/Application Support/ ~/installer/Library/Application Support/YourApp/ ~/installer/Library/Application Support/YourApp/MyAppDB.sqlite3 /code/pre/li liCreate the package with codepkgbuild/code using a command like:  precodepkgbuild --root ~/installer/ --install-location / ~/Desktop/MyApp.pkg /code/pre/li /ol  h2Avoid this approach! Why?/h2  This approach is not recommended because the codeinstall-location/code is root code//code. strongA robust installer will never install directly to root./strong  Problems include, what if the package's Applications, Library, or Application Support permissions differ from the user's permissions or ownership? What happens if the user has symlinked one or more of these files?  Instead a distribution package containing two standard packages should be used. One standard package will have an codeinstall-location/code of code/Applications/code and the other with code/Library/Application Support/code. This approach tells the codeinstaller/code tool to handle all the ownership, permissions, and symlink problems for you.  h1Ideal Approach/h1  Ideally, a Mac application will be distributed as a self contained application bundle. If the codeMyAppDB.sqlite3/code needs to be modified, a well behaved Mac application should copy a default database file from within the application bundle to the appropriate codeApplication Support/code folder and use the copy as needed.  Be aware that if your application is sandboxed, the Application Support folder at code/Library/Application Support//code will not be visible to the application. The application will be given its own, contained, support folder. This means that installing a database to code/Library/Application Support//code will not behave as you expect.  If you can bundle everything in to the application, then a single call to codeproductbuild/code will create a safe ready-to-distribute outside the Mac App Store installer package. Better yet, you could avoid an installer package entirely and distribute via a disk image or zip file.  <comment317188> Is your application sandboxed? This will become important because sandboxing affects the location of the `Application Support` folder. <comment317192> You have [multiple questions](http://apple.stackexchange.com/q/254760/88313) about the same topic.  Is it possible to combine these into 1 question or are they unrelated? <comment317195> @fbara - you're right - they are. However, each asks a different question and I thought for the reason to make it clear and help in the future also other users I'd rather keep them separate as different answers may pop-up. <comment317198> @GrahamMiln - I don't know what do you mean with sandboxing my application..?:) It's an app which I will not distribute through the AppStore, if that answers ...?! <comment317209> [Sandboxed](https://developer.apple.com/app-sandboxing/) applications have a different `Application Support` location than non-sandboxed applications. <comment317212> It is a duplicate of  http://apple.stackexchange.com/questions/254760/how-to-create-an-installer-pkg-with-an-app-and-sqlite3-database However this one would be cloded immediately on SO for lack of research - sandboxing is a basic part of Apple develop,ment and is in their intro docs <comment317284> @Mark - I'm not aware of sandboxing since I have never developed an application for MacOs (I will edit this in my question above). The application that I refer to above is written in Python and packaged into a Mac app using PyInstaller. Still - not sure if sandboxing does apply to this ... <comment317290> Thanks a lot for this excellent reply! I see a few new things which I was not aware of, which is likely due to the fact that (as I have added to my question) the app is not a native Mac app. I've written it in Python and converted it to a Mac app using [PyInstaller](http://www.pyinstaller.org). I need to follow-up on sandboxing.... <comment317386> PyInstaller [includes support for Mac bundles](https://github.com/pyinstaller/pyinstaller/search?utf8=âœ“&q=mac+bundle) and codesigning (which includes sandboxing). Bundles are folders such as application bundles.