What does -HUP do when used with killall? <body> Sometimes when I'm running a codekillall/code command from Terminal, a co-worker would suggest or edit my scripts to show codekillall -HUP/code.  What does the code-HUP/code part do?  <answer103614> The code-HUP/code option is the signal that's sent to the processes by the codekillall/code command. It can be a little hard to tell, but the relevant entry in the codekillall/code manual is:  precode-SIGNAL     Send a different signal instead of the default TERM.  The signal may be specified             either as a name (with or without a leading SIG), or numerically. /code/pre  The difference between the default codeTERM/code signal that codekillall/code sends and the codeHUP/code signal depends largely on the program you're sending the signal to. At the program end, they receive a different interrupt signal value. So the program can catch the interrupts and decide, based on the value, if they should do one thing or the other.  The codeTERM/code signal (historically the "terminate signal") is usually sent to a program to request its termination (which is a politer version of emforcing/em its termination with the codeKILL/code signal). The program is free to catch and ignore the codeTERM/code signal. It doesn't have to terminate if it doesn't want to and it can completely ignore this signal.  The codeHUP/code signal (historically the "hangup signal") is usually sent to a program to request that it restarts and re-reads all its configuration in the process. The actual behaviour of the program depends on the program-specific implementation. Not all programs catch codeHUP/code and they aren't required to by convention or dogma. For example, the Apache web server will catch a codeHUP/code signal and re-read all its configuration files but it won't restart any processes.  If you want to truly terminate the processes and not worry about whether they're going to catch and obey the signal uses the codeKILL/code signal. It cannot be caught or ignored and results in process termination.  For a good review of available POSIX signals see this Wikipedia article.  <answer103660> The code-HUP/code is the "hang up" signal that may trigger an app to cease, read it's config file, and then start again. It is not necessarily any better than using it without.  precodekillall Finder /code/pre  and   precodekillall -HUP Finder /code/pre  Are respectfully the same. In OS X Finder will relaunch, but it will re-read it's configuation file. This might not be really the case if the application that is running does not have the code-HUP/code function built into it. As the previous poster mentioned Apache. It reads it's config files, but it cannot launch again.  <comment121930> Here's the Apple man page for killall: https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/killall.1.html  it looks like h = help, u = user, and p = process. But those are all lower case. I don't see upper case parameters on the man page, but upper case could have completely different meanings - or they might not exist .. <comment121934> At the bottom of the man page for killall, in the SEE ALSO section, is a link to the [kill manpage](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/kill.1.html#//apple_ref/doc/man/1/kill) which lists some signals and what they do. <comment121938> I am one of those `#FAIL` people that never read past the switches. Thank you! <comment121989> As a "hangup signal", HUP is typically sent to a program when the user logs out or terminates the shell that started the program.  If catching the signal is not implemented by the program, the program typically will terminate.  As noted above, the program receiving the signal can implement any desired activity as a result of catching the signal, as indicated by the Apache example.