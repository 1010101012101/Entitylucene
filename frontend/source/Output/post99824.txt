Make shortcuts to directories via terminal <body> My problem is: whenever I'm coding, I work inside folders that are inside other folders and it's a long way to type:  precodecd /folder1/folder2/.../folderN /code/pre  I know it's possible to make a shortcut to the folder using codealias/code. So it would be:  precodealias ep="cd /Users/thi/Dropbox/CurrentProject" /code/pre  My question is, where should I put this alias? Inside code/etc/bashrc/code? Or should I create a file called code~/.profile/code and place it there? Where should I put it?  <answer99828> i am not expert in bash but i think you should put your alias inside .bashrc in your home directory.   <answer99829> Typically you put alias definitions into the same file as your code$PATH/code definitions which is probably code~/.bashrc/code.  hr  Technically speaking an alias is not a shortcut to a folder but for any shell command. So you can also have things like  precodealias heal='xattr -d com.apple.quarantine' alias la='ls -lFa' alias ll='ls -lF' alias ls='ls -FG' alias show-path='echo -e ${PATH//:/\\n}' /code/pre  to make your life easier. Aliases are replaced as-is by the shell so if you run  precodeheal downloadedFile.dmg /code/pre  it gets expanded to  precodexattr -d com.apple.quarantine downloadedFile.dmg /code/pre  and executed afterwards. If you need more flexibility with parameters you may want to look into shell functions (but that probably should go into another question).  <answer99832> I keep aliases in code~/.bash_profile/code.  Terminal and iTerm 2 open new shells as login shells by default. When bash is invoked as an interactive login shell, it reads code~/.bash_profile/code but not code~/.bashrc/code. The terminal emulators on other platforms often open new shells as non-login shells, so for example bash reads code~/.bashrc/code but not code~/.bash_profile/code. OS X users often use code~/.bash_profile/code as the personal configuration file corresponding to code~/.bashrc/code on other platforms, but it is also possible to source code~/.bashrc/code from code~/.bash_profile/code or to tell Terminal or iTerm 2 to open new shells as non-login shells.  If both code~/.profile/code and code~/.bash_profile/code exist, bash only reads code~/.bash_profile/code when it is invoked as an interactive login shell. code~/.profile/code is also used by other shells and programs that might not understand the same configuration options as bash.  code/etc/bashrc/code is owned by root, and it might get replaced when you upgrade OS X.  See codeman bash|less +^INVOCATION/code or https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html for more information.  <answer202245> h1The short answer is: em(generally)/em/h1  Add it to code~/.bash_profile/code  precodeecho 'alias ep="cd $HOME/Dropbox/CurrentProject"' &gt;&gt; ~/.bash_profile /code/pre  strongemNOTE:/em/strong emThere shouldn't be any space between the alias/variable and the strongequals sign ("=")/strong and the value. If your value has spaces then the whole value should be put in quotes./em  h1A better answer is: em(probably)/em/h1  Try setting an environment variable, instead. This is probably more like what you actually want.  precodeecho 'export EP="$HOME/Dropbox/CurrentProject"' &gt;&gt; ~/.bash_profile echo 'alias ep="cd $EP"' &gt;&gt; ~/.bash_profile /code/pre  strongemNOTE:/em/strong emThat environment variables are accessed by prepending the strongdollar sign ("$")/strong. However, when being defined, the strongdollar sign ("$")/strong should be omitted./em  h1An alternative answer is: em(possibly)/em/h1  strongemSymbolic-Links/em/strong. emAKA./em strongemSymlinks/em/strong. em{FKA. strongAliases/strong. (Mac OS)}./em em{BKA. strongShortcuts/strong. (Windows OS)}./em  precodeln -s &lt;dirA/subB/fileC_in&gt; &lt;dirX/subY/symbZ_out&gt; /code/pre  strongemNOTE:/em/strong emsymlinks are sometimes denoted by prepending the strongampersand sign ("@")/strong./em   <answer202282> This answer neatly summarises what ideally belongs in each of code~/.bashrc/code, code~/.profile/code, and code~/.bash_profile/code. In summary:  ul li~/.bash_profile should be super-simple and just load .profile and .bashrc (in that order)/li li~/.profile has the stuff NOT specifically related to bash, such as environment variables (PATH and friends)/li li~/.bashrc has anything you'd want at an interactive command line. Command prompt, EDITOR variable, bash aliases for my use  A few other notes:/li liAnything that should be available to graphical applications OR to sh (or bash invoked as sh) MUST be in ~/.profile/li li~/.bashrc must not output anything/li liAnything that should be available only to login shells should go in ~/.profile/li liEnsure that ~/.bash_login does not exist./li /ul  <comment117478> That is what Patrix said. ~ is a shell shortcut for $HOME. <comment117479> I think what would take you to the next level is learning about shell completion. bash's completion is pretty basic, but zsh has extensible completion. For example `ls -l P/H/O/Clatab` expands to `ls -l Projects/Home/OpenGL/Clams` <comment244001> Please see [the site chat channel](https://chat.stackexchange.com/rooms/38/ask-different-chat) if you want to discuss the lock on this post and future edits.