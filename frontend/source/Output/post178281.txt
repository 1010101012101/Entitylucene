How to investigate high kernel task memory usage? <body> I was using my MBP (with 16GB of RAM) as usual and out of blue I've this popup that:     Your system has run out of application memory.      To avoid problems with your computer, quit any applications you are not using.   img src="https://i.stack.imgur.com/axgXkm.png" alt="Force Quit Applications - Your system has run out of application memory - screenshot"  I've obviously closed few which I could, but it didn't help.  After checking on memory, it seems kernel task ate 7GB and 22.36GB swap memory was used of total 23GB (which obviously was the case). However I've still 20GB of space free on my SDD.  img src="https://i.stack.imgur.com/pGGnEm.png" alt="Memory - iStat Menus - screenshot"  Activity Monitor didn't help much whilst my OS X was heading to the destruction.  img src="https://i.stack.imgur.com/HtuMGm.png" alt="Process Explorer"  img src="https://i.stack.imgur.com/amx2Dm.png" alt="kernel_task - Memory tab - screenshot" img src="https://i.stack.imgur.com/XVqMzm.png" alt="kernel_task - Statistics tab - screenshot"  My codetop/code stats before my kernel freeze:  precodeProcesses: 344 total, 2 running, 5 stuck, 337 sleeping, 2580 threads                                                                                                                         19:23:56 Load Avg: 1.56, 1.62, 2.09  CPU usage: 3.51% user, 8.47% sys, 88.1% idle   SharedLibs: 46M resident, 0B data, 6572K linkedit. MemRegions: 757970 total, 2139M resident, 56M private, 907M shared. PhysMem: 9410M used (6198M wired), 556M unused. VM: 1155G vsize, 1311M framework vsize, 112872658(320) swapins, 122668389(0) swapouts. Networks: packets: 299419263/363G in, 142126838/14G out. Disks: 58970173/1079G read, 20012389/1120G written. /code/pre  At the end my OS X frozen and I had to do hard reset, repair my SDD in recovery mode and fixing afterwards (recovering lost work, fixing application conflicts, checking my lost+found folder, Chrome/Terminal tabs gone, headache, etc.).  My question is, stronghow do I check on high memory usage of kernel task/strong or how to properly deal with that kind of situation? I've tried to take Sample with Activity Monitor, but it's greyed out.  hr  My MBR details: 2.3GHz Intel Core i7 (late 2013) with 16GB RAM. OS X: 10.9.5  <answer178353> There are many things that go wrong with high kernel task usage. Usually this is related to faulty or heavy process which overusing system resources (such as indexing storage, running VMs, too many tabs in the web browser or some other background processes).   Here are some methods which help to investigate OS X kernel usage issues:  h3Basic methods/h3  ul liRun codeConsole.app/code and check on 'emAll Messages/em' to see if anything unusual currently is happening./li liUse emActivity Monitor/em to read system memory and determine how much CPU, RAM and Disk is being used.  Alternatively run codetop/code in emTerminal/em and hold kbdSpace/kbd to refresh - easier to find the cause problem (emswapins/em/emswapouts/em/emdisks/em?)./li listrongRun codesudo fs_usage/code/strong in emTerminal/em to report system calls and page faults related to filesystem activity in real-time (I think this is the best option from all other). Then hit kbdControl/kbd-kbdC/kbd to stop it.  Action: Consider killing apps which appears frequently on the list, but you're not using them.  Learn more at: How do I debug an out-of-control “kernel_task” process?/li listrongRun codesudo syscallbypid.d/code/strong (or codesyscallbyproc.d/code), wait a bit, hit kbdControl/kbd-kbdC/kbd. Now check which process generated the most system calls in that given time (last column) and if you recognise it, consider kill it. If not, Google it and learn more about it./li /ul  h3Advanced methods/h3  ul liUse codesysdiagnose/code command (can be triggered by hitting kbd⌘/kbd-kbd⌥/kbd-kbdControl/kbd-kbdShift/kbd-kbd,/kbd - emCmd-Opt-Ctrl-Shift-Period/em) to quickly gather system-wide diagnostic information helpful in investigating system memory/performance issues (will appear in code/var/tmp/code) either by you or Apple guys. During analysis, try to not do anything, when done - consider uncompressing the generated file and analyse the logs./li liRun codefootprint/code to gather detailed memory information on a per-VM-region type level and swapped bytes:  precodesudo footprint -a /code/pre  Older version:  precodesudo footprint -all -categories -swapped -collapseSharing /code/pre/li liUse codespindump/code to profile entire system, it'll generate code/tmp/spindump.txt/code file (including kernel and its extensions)./li liUse codevm_stat/code to show virtual memory statistics. E.g.  precodevm_stat 1 # to display every second. /code/pre/li liUse codezprint/code to check information about kernel usage, it's possible by:  precodesudo zprint -t -s | head -n20 /code/pre  It'll show the most wasting kernel zones./li liUse codenewproc.d/code to snoop new processes as they are executed, codecreatbyproc.d/code for files:  precodesudo newproc.d sudo creatbyproc.d /code/pre  Note: On newer OS X (10.11 or above) this may not work when integrity protection is enabled (check by codecsrutil status/code). /li liTry codesar/code - system activity reporter which can sample and report various cumulative statistic counters maintained by the operating system./li /ul  For more useful debugging tools, check for dtrace scripts (codegrep dtrace /usr/bin/*/code). If you know the faulty process which causing the problem, you may use codedtruss/code to debug it.  hr  h3Actions/h3  Here are some suggestions which can help you with the operating system issues.  ul liFree up some inactive memory. In order to do this, you've to flush cache first and force disk cache to be purged:  precodesync &amp;&amp; sudo purge /code/pre     codesync/code - force completion of pending disk writes (flush cache)      codepurge/code - force disk cache to be purged (flushed and emptied)   Its function is basically to terminate all the I/O pending operations which are using disk cache and then to free all the occupied disk cache, so it should free disk space to ease paging out and swapping out of main memory. It is safe to use, as it does not affect anonymous memory that has been allocated through malloc, vm_allocate, etc./li liUse some 3rd party apps to clear up some overused memory such as iBoostUp, SystemPal, etc./li liYou may also disable temporary Spotlight:  precodesudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist  /code/pre  And consider other services by:  precodesudo launchctl list | grep ^[0-9] sudo launchctl bslist | grep ^A /code/pre/li liQuit your web browser and check if that helps. For example using Chrome is very resourceful, especially when there is some front-end processing going on in the background (e.g. Javascript) or advert-like animations are constantly rendering the content./li /ul  <answer244574> I had a very similar issue after replacing my LCD screen on a late 2012 iMac. Fan was running at high RPM and had high CPU Kernel_task usage. I narrowed it down to a Temperature sensor you must move from the old LCD screen to the new replacement screen. if you forget to do so the CPU speed and Kernel_task are affected slowing down your system.  <comment211138> Is the behavior of your system reproducible? Please also add your system version: <comment211139> @klanomath Usually I've plenty of freezes especially with long uptime and these are just kernel freezes for unknown reason (my MBR is quite new). But this is the first I've seen that popup that I'm out-of-memory (with 16GB RAM and 50GB of free space). However my main question is how to I investigate memory usage of kernel task, so if it's reproducible shouldn't be relevant. <comment211140> Use `zprint -t` (Lion) or `sudo zprint -t` (Mountain Lion and later). <comment211141> You are right with the irrelevance of the reproducibility regarding your question in the title, but it might be relevant solving your problem(s). <comment211142> @klanomath Thanks, I was afraid that non-reproducible issues are off-topic. This kind of freeze was the 1st time. `zprint -t` shows me the table. Is there any way to reduce/refresh kernel usage? Or it could be some kind of bad luck leak? <comment211143> Would you mind adding the output to your question (or save it to your documents)? Just for future reference/to be able to compare it to a zprint made in a more critical system state. IMHO it's a bad luck leak. If you post it I may be able to tell you more. <comment211145> @klanomath Ok, I'll do. With my luck I'm sure it'll happen again. Or somebody else will get into similar situation. <comment323117> Spotlight keeps reapparing, but I'm not using it, and every time I kill it it reappears the second after... How/should I do I get rid of it? <comment323118> @ling I would suggest you to ask another question then, since this is related to high kernel task memory, not a Spotlight specific. <comment332872> *sigh* I've got 4 GB ram on my mac, and just recently the kernel task was going upwards to 3.1 GB, basically freezing my whole computer. Closed my Google Drive tab, and it went down to 950 MB... <comment354682> Not specific enough to actually solve the high `kernel_task` memory & cpu usage issue.