Change display arrangement in OS X programmatically <body> I periodically have to move my display around (physicallysup1/sup) and this requires also rearranging my display arrangement in System Preferences.  Manually doing this all the time is a pain in the neck.  Is there any way to do it programmatically?  hr  sup1/sup I work on one side of a table when I'm working solo, but when I want to pair with someone I flip to the other side of the table because it has more unused space available for a second person.  Flipping the display around to face the other side of the table means the display goes from being to the right of my laptop to being to the left, since the laptop goes on a stand either way.   <answer249598> Using my MacBook Pro, which normally sits to the left of my Thunderbolt Display, and my Thunderbolt Display, the following will show how to use hsscreens and AppleScript to toggle the two arrangements programmatically based on how it's currently arranged. The end result is an AppleScript application that when run simply toggles back and forth between the two arrangements. This app can be run in all the normal ways any other application can be run.  In the image below, you see the emnormal/em and emflipped/em arrangements of the Displays and Menu bar showing the difference relationships between my MacBook Pro and Thunderbolt Display.   img src="https://i.stack.imgur.com/dNIiV.png" alt="Screen Arrangements"  This AppleScript application, along with the codehsscreens/code binary executable file, programmatically toggles between the two arrangements shown in the image above, shifting  the MacBook Pro's Display to the right or left of the Thunderbolt Display maintaining the Menu bar on the MacBook Pro's Display.  To emcode/em this, I needed to determine what the emcurrent arrangement/em was and then act accordingly. To do this I used codehmscreens -info/code in a Terminal twice, once while in each emarrangement/em.  Looking at the outputted information I saw a piece of info that I could codegrep/code for, in order to the set a emflag/em to toggle against.  hr  Output of codehmscreens -info/code in a emnormal arrangement/em of the Displays:  pre class="lang-none prettyprint-override"code$ hmscreens -info Screen ID: 68822100 Size: {1440, 900} Global Position: {{0, 0}, {1440, 900}} Color Space: NSCalibratedRGBColorSpace BitsPerPixel: 32 Resolution(dpi): {144, 144} Refresh Rate: 0 Uses Quartz Extreme: YES  Screen ID: 68695180 Size: {2560, 1440} Global Position: {{1440, -540}, {4000, 900}} Color Space: NSCalibratedRGBColorSpace BitsPerPixel: 32 Resolution(dpi): {72, 72} Refresh Rate: 0 Uses Quartz Extreme: YES  $ /code/pre  hr  Output of codehmscreens -info/code in a emflipped arrangement/em of the Displays:  pre class="lang-none prettyprint-override"code$ hmscreens -info Screen ID: 68822100 Size: {1440, 900} Global Position: {{0, 0}, {1440, 900}} Color Space: NSCalibratedRGBColorSpace BitsPerPixel: 32 Resolution(dpi): {144, 144} Refresh Rate: 0 Uses Quartz Extreme: YES  Screen ID: 68695180 Size: {2560, 1440} Global Position: {{-2560, -540}, {0, 900}} Color Space: NSCalibratedRGBColorSpace BitsPerPixel: 32 Resolution(dpi): {72, 72} Refresh Rate: 0 Uses Quartz Extreme: YES  $ /code/pre  hr  If was obvious, to me, I needed to use info from codeGlobal Position:/code to determine what the emcurrent arrangement/em of the Displays were. I immediately saw code-2560/code as unique between the output and a way of determining the emcurrent arrangement/em.  If I codegrep/codeed for code-2560/code and found it then I was in the emflipped arrangement/em, not the emnormal arrangement/em. So this is what I used to determine the emcurrent arrangement/em and thus toggle between the two emarrangements/em. (Note: code-2560/code was not the only thing unique, it's just what I focused on first and felt an easy way to parse the information to set a emtoggle flag/em with.)  Save the AppleScript emcode/em below as an application and place a copy of the codehmscreens/code binary executable file within the code&lt;appname&gt;.app/Contents/Resources/code folder.  This way the app, e.g. code/Applications/Toggle Displays Arrangements.app/code is self-contained and not dependent on an external location of the codehmscreens/code binary executable file.  Obviously you'll need to determine what to codegrep/code for or use a different method to set the emtoggle flag/em and modify the emcode/em below accordingly to suite your particular needs (if other then this use case or a different use case).  AppleScript emcode/em:  pre class="lang-none prettyprint-override"codeset hms to (path to me as text) &amp; "Contents:Resources:hmscreens"  set screenIDs to paragraphs of (do shell script quoted form of POSIX path of hms &amp; " -screenIDs") if (count of screenIDs) is greater than 1 then      set normalOrentation to "1"     try         set normalOrentation to do shell script quoted form of POSIX path of hms &amp; " -info | grep '\\-2560'"     end try     if normalOrentation is "1" then         set othersPosition to "left"     else         set othersPosition to "right"     end if      set secondScreen to item 1 of screenIDs     do shell script quoted form of POSIX path of hms &amp; " -setMainID " &amp; secondScreen &amp; " -othersStartingPosition " &amp; othersPosition  else      tell me         activate         display dialog "Only one screen is attached to your computer!" buttons {"OK"} default button 1 with icon note     end tell  end if /code/pre  hr  The image below shows syntactical highlighting of the AppleScript emcode/em.  img src="https://i.stack.imgur.com/kUQTx.png" alt="AppleScript Code"  <comment309813> Just a note... I modified the code as there was no need to replicate what I previously did in the `if normalOrentation ...` _statement_. That just needed to cover info for the _toggle flag_. The replicated _code_ has been moved out and set below it.