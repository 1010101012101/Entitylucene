How to install framework (from pkg file) in a non-standard location? <body> In brief, my question is this:  emstrongHow can I install a framework from a &ast;.pkg file somewhere other than under code/Library/Frameworks/code (or code/System/Library/Frameworks/code)?/em/strong  hr  strongBackground/strong  I want to install a version of Python 2.7.3 that lives under code$HOME/Library/Frameworks/Python.framework/code and code$HOME/python/code.  My goal here is to have a version of Python that is as independent as possible from the Python that comes with OS X Lion.  In particular, I want to have an installation of Python that is, as much as possible, not liable to be altered "behind-my-back" by system updates or other software updates.  That's why I want to keep this installation as clear as possible away from the "standard" places for them.  Among the problems I am trying to avoid by doing this is the buggy Tk framework that comes with the latest versions of OS X.  Therefore, a key sub-goal here is to install new Tcl and Tk frameworks, separate from the system-supplied ones.  The ones I want to install come from ActiveState ("Mac OS X (10.5+, x86_64/x86)"), in the form of a *.pkg file.  When I click on this file, I get presented with the usual "wizard"-like sequence of steps ("Introduction", "License", etc.).  At no point during this sequence I am offered the opportunity to choose a different installation location for these frameworks before I reach the choice of clicking on the kbdINSTALL/kbd button.sup1/sup  I suspect that if I click on this button, the installed files will go under code/Library/Frameworks/code (or possibly under code/System/Library/Frameworks/code), which is what I'm trying to avoid.  (Indeed, when I click on kbdINSTALL/kbd, I'm immediately presented with an password-entry dialog, which is a pretty good indication that the installation will put files somewhere under code/Library/code or code/System/code.)  Therefore I'm looking for an alternative way to perform this installation that will allow me to emexplicitly set/em the destination folder for the installed files.  subsup1/supYes, the installer allows me choose a different volume for the installation, but it does not let me specify, e.g., code$HOME/Library/Frameworks/code as the destination for the installed files./sub  <answer84274> You can safely install Python under code/Library/Frameworks/code and not worry about it interfering with the "system" Python, although with a few symlinks and/or code$PATH/code changes you can make it the default if you want.  As an alternative, you can install MacPorts and set its install root to whatever you want (the default is code/opt/local/code, I believe, although this is configurable during setup), although the Python framework will still be installed under a codeLibrary/Frameworks/code subdirectory. I prefer the MacPorts distribution over the python.org one because there are many additional modules you can install which are pre-configured to build correctly, which isn't always the case when you use codepip/code or codeeasy_install/code, depending on what you're trying to build. MacPorts also has a pretty decent versioning system, allowing multiple versions to coexist side-by-side, with simple tools to switch between them. As an added bonus, the MacPorts Tcl is not "broken," so everything emshould/em work out of the box. YMMV :)  <answer84275> Generally speaking, strongyou can only relocate a package/strong (that is, install it into a different directory) strongthat has been built with relocation in mind/strong.  If the package supports it, it can be relocated with the command line equivalent of codeInstaller.app/code, conveniently called codeinstaller/code, with option code-target/code (from codeman installer/code):     The target volume is specified with the code-target/code parameter (code-tgt/code is   accepted as a synonym).   The argument to code-target/code is:  ol liA volume mount point (code/Volumes/HDD/code), device node (code/dev/disk0s5/code) or volume UUID (code376C4046-083E-334F-AF08-62FAFBC4E352/code), for example:  precodeinstaller -pkg InstallMe.pkg -target /  /code/pre/li liAny of the values returned by code-dominfo/code (codeLocalSystem/code or codeCurrentUserHomeDirectory/code), for example:  precodeinstaller -pkg InstallMe.pkg -target CurrentUserHomeDirectory /code/pre/li /ol  (As you see, the latter command looks very promising. It would install codeInstallMe.pkg/code in the hierarchy of the home directory of the current user.)  In our specific case, unfortunately, strongActiveState's Tcl package wasn't designed to be relocated/strong:  ul liIt doesn't return any information for code-dominfo/code:  precode$ installer -verbose -dominfo -pkg ActiveTcl-8.6.pkg Domain information: NoDomainsAvailable /code/pre/li liAlthough the codepkg/code file can be successfully installed on another volume:  precode$ sudo installer -verbose -pkg ActiveTcl-8.6.pkg -target /Volumes/DISK2GO/ installer: Package name is ActiveState ActiveTcl 8.6.0.0.296563 installer: Installing at base path /Volumes/DISK2GO (...)    # installer: Writing filesâ€¦..... (...) installer: The software was successfully installed...... installer: The install was successful. # /code/pre  as can be seen here:  img src="https://i.stack.imgur.com/ownh3.png" alt="enter image description here"  it doesn't work:  precode$ cd /Volumes/DISK2GO/usr/local/bin/ $ ./tclsh8.6 dyld: Library not loaded: /Library/Frameworks/Tcl.framework/Versions/8.6/Tcl   Referenced from: /Volumes/DISK2GO/usr/local/bin/./tclsh8.6   Reason: image not found Trace/BPT trap: 5 $  ./tclselect  -bash: ./tclselect: /usr/local/bin/tclsh: bad interpreter: No such file or directory /code/pre/li /ul  The reason is that scripts and compiled tools use and are linked to code/Library/Frameworks/code:  precode$ cd /Volumes/DISK2GO/usr/local/bin/ $ otool -L tclsh8.6   tclsh8.6:  /Library/Frameworks/Tcl.framework/Versions/8.6/Tcl (compatibility version 8.6.0, current version 8.6.0) (...) $ grep Library tclselect  #  /Library/Frameworks # installation. I.e. a Tcl installed in '/Library/Frameworks' and return /Library/Frameworks/Tcl.framework/Versions /code/pre  If you wish to use ActiveState's Tcl you must install the package in its default location.   And as far as I can tell, strongit won't conflict with the installed Tcl framework/strong:  ul liOS X own framework is installed in code/System/Library/Frameworks/Tk.framework//code, some binaries in code/usr/bin/code./li liActiveState's Tcl installs in code/Library/Frameworks/Tcl.framework/code, code/Library/Frameworks/Tk.framework/code, code/Library/Tcl/code and code/usr/local/bin/code (for a full listing, double click the codepkg/code file and select FileShowFiles)./li /ul  <comment96960> System updates will only update the Apple supplied python, any other python will be separate