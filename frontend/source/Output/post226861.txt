is a directory error in bash script <body> I have very limited knowledge of bash scripting, and I haven't been able to figure out what I'm doing wrong. So I apologize if there's an extremely simple solution that I've overlooked.  I'm trying to follow the steps in this blog post: Using Mendeley and Dropbox to sync your pdf library across computers  However, when I run the terminal commands I get the following error:  precode~/Library/Application\ Support&gt;cp -r Mendeley\ Desktop/ ~/Dropbox/Mendeley/db/ -bash: /Users/XXXXXXXX/Library/Application Support: is a directory /code/pre  Everything I've read online seems to suggest that this command is correct.  <answer226863> The author of the linked article probably had a modified bash profile (like explained by the user user3439894 in the comments to your question) or had problems to copy and paste the commands.  Use the following instead:  precodecd ~/Library/Application\ Support cp -r Mendeley\ Desktop/ ~/Dropbox/Mendeley/db/ mv Mendeley\ Desktop/ _backup_Mendeley_Desktop/ ln -s ~/Dropbox/Mendeley/db/Mendeley\ Desktop . /code/pre  Please don't forget to include the dot code./code at the end of the last command. The last line means: create a soft link of the folder "~/Dropbox/Mendeley/db/Mendeley Desktop" at your current working directory (which is "~/Library/Application Support").  Explanantion:  ol licodecd ~/Library/Application\ Support/code: change the working directory to "/Users/YourUserFolder/Library/Application Support"./li licodecp -r Mendeley\ Desktop/ ~/Dropbox/Mendeley/db//code: copy the folder (including the content) "Mendeley Desktop" into the folder "~/Dropbox/Mendeley/db/"/li licodemv Mendeley\ Desktop/ _backup_Mendeley_Desktop//code: rename (move/backup) the folder "Mendeley Desktop" to "_backup_Mendeley_Desktop"./li licodeln -s ~/Dropbox/Mendeley/db/Mendeley\ Desktop ./code: create a soft link of the folder "~/Dropbox/Mendeley/db/Mendeley Desktop" at your current working directory./li /ol  <comment275497> The article you linked to really had nothing to do with bash scripting per se, just running some individual command line programs in a Terminal and in this case is not the same as bash scripting. That said however, the article is IMO poorly written! The command prompt shown is atypical of the default prompt in OS X, which normally has the pattern as defined in the environment as `PS1='\h:\W \u\$ '`. Where `\h` is the hostname, up to the first ‘.’, a `:` as a separator, `\W` the basename of `$PWD`, with `$HOME` abbreviated with a tilde, a _space_ as a separator, _(Continued in next...)_ <comment275498> `\u` the username of the current user and `\$` if the effective uid is 0, `#`, otherwise `$` followed by another _space_. So the prompt with the `cp` command should have looked like, e.g. `mac1:Application Support johndoe$ cp -r Mendeley\ Desktop/ ~/Dropbox/Mendeley/db/` after having been told first to actually `cd` to `~/Library/Application\ Support`, which wasn't told to be done. Just shown a extremely poor representation of what the command prompt would look like and never would have looked like it in the first place! So it's not at all your fault there was confusion. <comment275561> @user3439894 Thanks for the detailed explanation and response! This helped to clarify for me and it's good to know the problem wasn't entirely my fault. <comment275564> It wasn't really your fault at all. If you haven't learned something yet... well you haven't learned it yet, no fault included. :)  Just do as shown in klanomath's answer and you should be covered. <comment275578> Regardless of whether or not the author of the linked article has a modified bash profile, where the article lacked is it didn't contain any real direction for the subject matter surrounding the use of the Terminal. Suffice it to say the average computer user does not often use the command line and is typically intimidated to begin with when having to do so, even with clear directions.  Which IMO the article lacked in this area. _(Continued in next comment...)_ <comment275579> Instead of showing, e.g. "[mac]@mac1:~/Library/Application Support" there should have been clear direction to `cd` to `~/Library/Application\ Support` and then just show the individual commands without showing an atypical command prompt. If the prompt is to be shown, use what is a typical default or just use `$` as common in some documentation, or don't show any at all. Personally I prefer to be told to `cd` ... and then just shown the actual commands to execute without showing a command prompt. The less clutter around the actual commands to execute the easier the process can be comprehended. <comment275592> I just wanted you to know that by my comments I was not suggesting that you needed to make changes to your answer or give an explanation.  I was just being a critic of the IMO poorly written linked article in the OP. Your answers are typically well written and easily understood, even with the complicated subjects which this particular one is not. That said, your recent edit surely adds value for the command line neophyte. :)  I'd +1 you again if I could. <comment275594> @user3439894 A lot of my answers concerning the shell lack an explanation what the commands actually do. So I took your comments as stimulus to add one. ;-)