terminal script to search CSV file <body> 2 parts to this, can't see where I'm going wrong  The 1st part works--get my BSSID through the airport command:  precodemyBSSID="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I | grep BSSID | awk '{print $2}'" /code/pre  then (this is where I get EOF or syntax errors):  pass that value to awk, which will search a file (APtable.csv) for that string, and give me the adjacent value to it:   precodeawk -v theBSSID=$myBSSID '$1 == theBSSID {print $2}' '/Users/russell/Desktop/APtable.csv' /code/pre  <answer270380> You do not need to pipe to codegrep/code and then to codeawk/code in the first line as codeawk/code can do what's needed by itself. Also the way you have the first line written, it is missing the code$(...)/code around the commands.  In the second line you're missing the field separator in the codeawk/code command, which in a code.csv/code file normally is a comma. So I added that to the codeawk/code command.  Use the following two lines:  precodemyBSSID="$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I | awk '/BSSID/{print $2}')" awk -F ',' -v theBSSID="$myBSSID" '$1 == theBSSID {print $2}' "$HOME/Desktop/APtable.csv" /code/pre  hr  I noticed the output of the codeairport/code command didn't report the codeBSSID/code correctly in that if left out some zeros.  If that's the case on your system and the code.cvs/code file has proper info, then try the following:  precodemyBSSID="$(system_profiler SPAirPortDataType | awk '/BSSID/{print $2}')" awk -F ',' -v theBSSID="$myBSSID" '$1 == theBSSID {print $2}' "$HOME/Desktop/APtable.csv" /code/pre  Note that codesystem_profiler SPAirPortDataType/code isn't as fast as using codeairport/code but if the output of codeairport/code is dropping some of the zeros, then you'll need an alternative if the codeBSSID/code's in the code.cvs/code file have all 12 characters, not counting the colons, which they should.  The following could be used to incorporate both methods in a codebash/code emscript/em so as to only use the second method if the length of codemyBSSID/code is less then 17 characters, as 17 is the correct length.  precode#!/bin/bash  myBSSID="$(/S*/L*/P*/A*/V*/A/R*/airport -I | awk '/BSSID/{print $2}')" l="${#myBSSID}" if [[ $l -lt 17 ]]; then     myBSSID="$(system_profiler SPAirPortDataType | awk '/BSSID/{print $2}')" fi awk -F ',' -v theBSSID="$myBSSID" '$1 == theBSSID {print $2}' "$HOME/Desktop/APtable.csv" /code/pre  <comment339841> Depending on what you want to achieve in the end, you could also look into doing this in python; [this answer](http://stackoverflow.com/a/15170342/565489) provides a starting point, and you could easily store (access) the return values using e.g. the `pandas` module in python. <comment339961> 343-- I've noticed that too, (dropping of 0's)... weird. Can we be the first to notice this? But the important thing is, you got the code to work (together)! Thanks. <comment340002> I've updated my answer, so you might want to review it. <comment340058> : ( Spoke too soon. <comment340059> So, Murphy's Law, first BSSID I connect to has a leading 0, so the original script doesn't return anything. But running your addended script does get me something, but I'm not quite sure what: `awk: newline in string 94:b4:0f:ed:fd:b1 40... at source line 1` <comment340070> It seems like awk finds what its looking for in column 1 of the file, but then doesn't print column 2 next to it. <comment341867> After a week of puzzling over this and getting nowhere, I'm wondering if anyone has a suggestion on how I can get a log of the script's events.  In the second part of the script, when it searches for the value adjacent to the BSSID string, it seems to not understand that I want that value (the adjacent one) returned.