How to invoke osascript 'Generic Scripting System'? <body> The terminal command codeosalang/code list the following installed OSA languages supported by codeosascript/code.  precodeAppleScript JavaScript Generic Scripting System /code/pre  Using AppleScript or JavaScript works. For example:  precodeosascript -l JavaScript \     -e 'Application("iTunes").currentTrack.name()' /code/pre  However, something like to following returns a "found unknown token" error.  precodeosascript -l 'Generic Scripting System' \     -e '#!/bin/bash' \     -e 'echo $HOME' /code/pre  How does one invoke codeosascript/code for 'Generic Scripting System' from the command line for some non-AppleScript, non-JavaScript scripting ... without using any (intermediate) AppleScript or JavaScript?  Is this even possible?  <answer282116> According to OS X system internals, the "Generic Scripting System" is a generic class to contain the two flavors of scripting supported:  ul liAppleScript/li liJavaScript/li /ul  It's not some third option that adds one or more new dialects, but a container to hold the existing ones. This is indirectly explained in Apple's documentation - they list the two languages and don't mention the wrapper class (or whatever it's proper name is):  ul liMac Automation Scripting Guide -  part of which is the list of languages/li /ul  If you needed other languages, I would call AppleScript "do shell script..." to then call whatever shell executable that ships by Apple or you have installed (codebash/code, codesh/code, codepython/code, codeswift/code, codeperl/code, ...).  <comment355202> so, apparently, the "Generic Scripting System" listed by `osalang` is not some gateway beyond the available AppleScript & JavaScript. After your answer, i thought to check the Activity Monitor (information button, Open Files and Ports) with the interactive session `osascript -l 'Generic Scripting System' -i`. ... the "Generic" interactive goes right to the AppleScript framework resources.