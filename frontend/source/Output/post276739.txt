Squidman, iOS devices, SSL and Docker <body> I want to access a website and an API both running in Docker containers behind another nginx Docker container (reverse proxy managing SSL) from an iOS device.  So I have:br 1 iOS device having IP code192.168.178.57/codebr 1 MacBook Pro having IP code192.168.178.64/codebr 1 Docker container running nginx having two codeserver_name/code settings:  codeapp.dev/code and codeapi.dev/code, both using self-signed SSL certificates code/etc/hosts/code points has these entries:  precode192.168.178.64 app.dev 192.168.178.64 api.dev /code/pre  code~/proxy.pac/code contains these entries:  precodefunction FindProxyForURL(url, host){   if (shExpMatch(host, "app.dev")) {     return "PROXY app.dev:443; DIRECT";   }   if (shExpMatch(host, "api.dev")) {     return "PROXY api.dev:443; DIRECT";   }   return "DIRECT"; } /code/pre  Squidman is configured on port code9090/code and allowed clients are code192.168.178.0/24/code.  Squidman template allows access to codelocalhost/code  precode# protect web apps running on the proxy host from external users # http_access deny to_localhost  # rules for client access go here http_access allow localhost %HTTPACCESSALLOWED% /code/pre  The iOS device proxy is configured as code192.168.178.64/code, port code9090/code.  The MacBooks Networks codeAutomatic Proxy Configuration/code points to the code~/proxy.pac/code file.  I can browse web sites from the iOS website like http://apple.com.  I can browse https://app.dev and call https://api.dev from the MacBook.  I cannot browse https://app.dev nor call https://api.dev from the iOS device.  What am I doing wrong?  <answer276742> [strongon hold/strong (the answer is right under certain circumstances but sometimes  wrong) - strongunder construction/strong]  iOS has no clue where and what api.dev and app.dev are. The entries in the hosts file are valid for the local host only.  Since you can't modify iOS' hosts file without jailbreaking the iOS device you have to set up a DNS-server (e.g. brew + dnsmasq) on your MacBook Pro and point iOS' DNS setting to it.  <answer276757> I solved it using this Docker container: https://github.com/jpillora/docker-dnsmasq  Simply follow the instructions and add e.g. code127.0.0.1 app.dev/code and code127.0.0.1 api.dev/code to your code/etc/hosts/code.  Then change the DNS on the macOS and iOS device to code192.168.178.64/code (following the initial question).  <comment348374> Tried this already with `/etc/hosts` but using `/private/etc/hosts/`  didn't fix it neither. <comment348375> I'm gonna set it up in a virtual environment to comprehend your problem <comment348381> Thanks. A solution using dnsmasq would be fine as well. <comment348396> Do you have a quick setup guide (or other instructions) to install the reverse proxy (SSL) docker image (which one did you use?) and the other two nginx docker images? <comment354523> Check out http://xip.io next time - often far easier to just use FQDN for all the non-routable IP you need for proxies, containers, VM and devices to test.