How can I search my entire drive for a file without getting recursively stuck in /Volumes? <body> I'm looking for a txt file that contains a word.  However when I search my hard drive (or my TimeCapsule backup) I always get stuck in a recursive search of /Volumes/Hard Drive (etc).  The hardlink (or softlink, not sure) is causing me to never complete the search.  How can I search the entire harddrive (or backup drive) for a file without getting stuck in recursion?  <answer84556> Use codelocate/code, codegrep/code or codefind/code at the command line.  Open ApplicationsUtilitiesTerminal and either use:  ol licodesudo locate -0 '*.txt' | xargs -0 grep WORD 2&gt;/dev/null/code  Substitute WORD with the word you want to search for. This is by far the strongfastest/strong method.  I'd recommend to recreate the locate database first to improve accuracy:   codesudo /usr/libexec/locate.updatedb/code  Note that on OS X, the codelocate/code database is created by user codenobody/code. That means that files hidden to codenobody/code won't be indexed. You can modify code/usr/libexec/locate.updatedb/code and comment out (that is, prefix with code#/code) this section:  precodeif [ "$(id -u)" = "0" ]; then      rc=0      # 2013-03-08 jaume Correct mktemp      export FCODES=`mktemp --tmpdir updatedbXXXX`      chown nobody $FCODES      tmpdb=`su -fm nobody -c "$0"` || rc=1      if [ $rc = 0 ]; then          install -m 0444 -o nobody -g wheel $FCODES /var/db/locate.database      fi      rm $FCODES      exit $rc  fi /code/pre  so that it is indexed under user coderoot/code (this applies to OS X 10.8 (Mountain Lion), on other OS X versions codelocate/code may index files differently)./li licodesudo grep -R --exclude-dir '/Volumes/&lt;OS volume&gt;' --exclude-dir '/Volumes/MobileBackups' --exclude-dir '/.Spotlight*' --exclude-dir '/.MobileBackups' --exclude-dir '/.DocumentRevisions*' --include '*.txt' WORD / 2&gt;/dev/null/code  Substitute WORD with the word you want to search for and code&lt;OS volume&gt;/code with the name of your OS volume. The codegrep/code options used are:  ul licode-R/code: does a recursive search in the specified path, that is, in code//code. If you search your TimeCapsule backup, replace code//code with something like code/Volumes/TimeCapsule/code./li licode--exclude-dir/code: excludes the specified folders. As you see, I exclude Spotlight, the Versions folder and local TimeMachine folders. If you want to search your local drive only while your TimeCapsule is mounted, add code--exclude-dir /Volumes/TimeCapsule/code./li licode--include '*.txt'/code: tells codegrep/code to search files which match code*.txt/code./li /ul  Additionally:  ul licode2&gt;/dev/null/code: sends errors to code/dev/null/code so that you don't see them./li /ul/li licodesudo find / ! -path '/.Spotlight*' ! -path '/Volumes/&lt;OS volume&gt;/*' ! -path '/Volumes/MobileBackups/*' ! -path '/.MobileBackups/*' ! -path '/.DocumentRevisions*' -name *.txt -type f -exec grep -H WORD {} + 2&gt;/dev/null/code  Again, substitute WORD with the word you want to search for and code&lt;OS volume&gt;/code with the name of your OS volume. As before, code2&gt;/dev/null/code sends errors to code/dev/null/code so that you don't see them, and if you search your TimeCapsule backup, replace code//code with something like code/Volumes/TimeCapsule/code.  The codefind/code options used are:  ul licode! -path/code: exclude paths specified. If you want to search your local drive only while your TimeCapsule is mounted, add code! -path /Volumes/TimeCapsule/*/code./li licode-name *.txt/code: search files named *.txt. As you see, I exclude Spotlight, the Versions folder and local TimeMachine folders./li licode-type f/code: search only files, ignore symlinks, folders, etc./li licodegrep -H WORD {}/code: grep file for WORD. code-H/code forces codegrep/code to print the filename./li /ul/li /ol  The output of any of the commands above looks like this:  precodefilename: matched line /code/pre  for example, when searching for 'GNU':  precode/usr/local/share/doc/p7zip/DOCS/readme.txt:7-Zip is free software distributed under the GNU LGPL  /usr/local/share/doc/p7zip/DOCS/readme.txt:1) You can compile and use compiled files under GNU LGPL rules, since  /usr/local/share/doc/p7zip/DOCS/readme.txt:  copying.txt    - GNU LGPL license /usr/local/share/doc/xz/history.txt:    Alexandre Sauv√© helped converting the build system to use GNU /code/pre  If you want to do a case insensitive search, replace codegrep/code with codegrep -i/code above.  <answer124834> You could use the program EasyFind. It can search inside files and has a nice GUI.  <comment97307> How are you searching for it? Spotlight doesn't get confused by this, and `find` doesn't follow symlinks (although it will traverse other volumes unless you specify the `-x` option)... <comment97325> Spotlight won't show results for the entire drive. <comment97503> @jaume: It does if you explicitly tell it to include [system files](http://support.apple.com/kb/HT4355) and [invisible files](http://support.apple.com/kb/PH11165) in the results. <comment97527> @GordonDavisson:  Thank you, I didn't know that, I always use `locate` in Terminal when doing a system wide search. In my comment above I was thinking of Spotlight as the search field that appears when you press Space+Command, not as the search function in Finder... <comment97573> re #1- I'm not sure what needs editing in that file.  I run the find command and orginally the file didn't exist, then I ran as administrative user and got the error `locate: locate database header corrupt, bigram char outside 0, 32-127: -1` <comment97577> You don't need to edit `/usr/libexec/locate.updatedb`, it is more of a comment for expert users than something you must do. As I write, this applies to OS X 10.8, you may have another version. The error you mention: `locate: locate database header corrupt` says that the locate database is corrupt. Recreate it as explained in the answer doing: `sudo /usr/libexec/locate.updatedb`. You may want to delete the database first: `sudo rm /var/db/locate.database`. If you have trouble with answer #1, try another, that's why I describe 3 commands :-) <comment97649> Did you manage to create the locate database? I've noticed that the `locate` command was wrong. I corrected it. Could you try it and report back?