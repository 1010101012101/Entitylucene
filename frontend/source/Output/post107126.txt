What scale or measure does Mavericks' and Yosemite's "memory pressure" adhere to? <body> Mavericks' (and also Yosemite's) Activity Monitor shows a new diagram, the emmemory pressure/em. Sadly, its help text only vaguely explains what exactly it measures. How is memory pressure calculated?  img src="https://i.stack.imgur.com/u5arr.png" alt="Mavericks Activity Monitor - memory"  emPicture creds go to this answer from a poll question on Mavericks' best new feature./em  <answer107181> Memory pressure isn't a simple gauge of percentage of memory free and seems to be a 0 to 100% graph. The codesysctl/code value of codevm.memory_pressure/code is calculated in relation to a computed target that tracks the ratio between free and inactive memory pages to the wired and active pages. The absolute counters are viewed using the codevm_stat/code command line tool to inspect detailed allocation of virtual memory. Jonathan Levin has excellent documentation at http://newosxbook.com/articles/MemoryPressure.html covering both macOS and iOS virtual memory and how they calculate memory pressure as well as the actions taken when the pressure index is high.  The relevant virtual memory (vm) that feed the calculation of codevm.memory_pressure/code are:  ul licodevm.page_free_count/code - an absolute count of free pages/li licodevm.vm_page_free_target/code - a calculated target or goal for a "pressure free" situation/li licodevm.page_free_wanted/code - what the vm system would like to free to alleviate the current calculated pressure index/li /ul  So - if you are tracking your memory pressure with Activity monitor (or my checking the sysctl values programmatically or at the command line shell) you would do well to look at these four values:  precodesysctl -a vm | egrep "page_free|pressure" /code/pre  There is a new command codememory_pressure/code introduced with Mavericks and when I run it to drive the memory subsystem into a warning state - you can see the memory pressure increase into a yellow range.  img src="https://i.stack.imgur.com/JfpyL.png" alt="activity monitor results of &lt;code&gt;sudo memory_pressure -l warn&lt;/code&gt; "  The tool allocated about 4 GB of memory to the tool as the pressure graph increased steadily to this state where apparently the "warning" level is graphed: codesudo memory_pressure -l warn/code. As you can see, the system before the pressure had 5.9 GB used and after was up to 7.99 GB used which doesn't even need to add up due to swapping and compression.  After watching how codevm_stat 15/code showed the warning result in no measurable paging, I quit the tool (Control-C) and then re-ran the tool to make memory pressure critical: codesudo memory_pressure -l critical/code  I didn't let this run for more than a few minutes as paging was starting and once the tool said I had 5 GB of RAM paged to disk, I didn't want to fill my drive and quit the tool.  img src="https://i.stack.imgur.com/02fNm.png" alt="activity monitor results of &lt;code&gt;sudo memory_pressure -l critical&lt;/code&gt;"  You can observe how rapidly the system freed RAM after the warning was ended and also how it ramped into "red" territory to show that the virtual memory system couldn't compress enough pages to avoid swapping to disk. My educated guess is red on the pressure indicates swapping and dramatic over-allocation and/or a time where the free pages are below the amount the system prefers and it's actively purging inactive pages and/or swapping pages expected to be used to swap. Similarly, the system rapidly recovers once the allocations are released and pressure is taken off the virtual memory system.  <answer107724> To somewhat clarify and make that guess more accurate: memory pressure is a metric used by the kernel (xnu) with a dedicated thread called memory_status (previously known as Jetsam). This thread is responsible for detecting when the available RAM is low - which in OS X can force swapping, and in iOS kills the highest memory consuming app (as there is no swap). In Mavericks, the two OSes are closer together. Memorystatus issues a kernel note, which the Obj-C runtime eventually translates to an appDidReceiveLowMemoryWarning. Apps are supposed to purge unused or extraneous memory (for example, caches). Darwin's libC also purges memory automatically.  There is a specific (though undocumented) system call, vm_pressure_monitor (#296, if I remember correctly), which lets a client listen in on pressure events, and see how many physical pages can be reclaimed.  You can view pressure events on Mavericks using Process Explorer for OS X - downloadable from http://newosxbook.com/index.php?page=downloads. That both shows you the pressure "gauge", as well as pressure events.  <answer119557> Memory pressure is defined by two counters Mach keeps internally:   ul licodevm_page_free_count/code: How many pages of RAM are presently free /li licodevm_page_free_target/code: How many pages of RAM, at a minimum, should optimally be free. /li /ul  You can see these easily using sysctl:  pre class="lang-bash prettyprint-override"codemorpheus@Zephyr (~/Documents) % sysctl -a vm | grep page_free vm.vm_page_free_target: 2000 vm.page_free_wanted: 0 vm.page_free_count: 73243 /code/pre  if the amount of free pages falls below the target amount - we have a pressure situation.  hr  From http://newosxbook.com/articles/MemoryPressure.html  <comment135638> Awesome detail on the similarities and differences between Mavericks and iOS kernel. Thanks for the link to Process Explorer. <comment135639> That website also has a detailed article - http://newosxbook.com/articles/MemoryPressure.html - detailing Memory pressure and handling in OS X and iOS <comment146995> Thank you for the clarification. I would like to know if there is a command (or set of commands) that calculate Virtual Memory, File Cache and App Memory parameters in the screen shot above. <comment311107> @MuhammadHassan The answer below covers a nice reverse engineering  summary of the algorithm and points out where to look in `xnu` open source for the internals. I've pulled out the 4 values covered that are most relevant to the GUI display of pressure.