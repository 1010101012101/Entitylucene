How do I check the effective file permissions/accessibilty for/of a given file and a given user? <body> How do I check the effective file permissions (including ACLs)/accessibility for/of a given file and a given user (including service/system accounts) without checking the whole path manually?  Example: Suppose a user joe, and the file /long/path/to/file.txt. Even if file.txt was chmoded to 777, joe still has to be able to access /long/, and then /long/path/ and then /long/path/to/ before. If joe doesn't have at least read access to all folders in the path, he can't access (read/write/execute) the file. So the effective permissions for him (as "world/all" user) are 0 and he can't access the file.  Alternatively: how do I get a list of the permissions (including ACLs) of all users (including service/system accounts) for a given file?  An app or a bash script are also welcome.  A similar question with a slightly different focus has already been asked at Unix &amp; Linux: How to check if a user can access a given file?  <answer207737> One commercial app which provides the effective permissions for a user and a selected file or folder is TinkerTool System:  In the example below the effective permissions of the file /private/var/log/clamav.log for the user emSpotlight/em are shown. The user emSpotlight/em can neither read nor write data.  img src="https://i.stack.imgur.com/xC6WY.jpg" alt="enter image description here"  Triggering the tab emShow or Set Permissions/em the POSIX permissions/ownership are shown explicitly.  img src="https://i.stack.imgur.com/tfnEc.jpg" alt="enter image description here"  <comment250617> `ls -del FILE|DIR` will list both unix standard permissions and ACLs. What exactly are you looking for? <comment250625> @patrix Your  `ls` command shows the file permissions for given file. But as described in the linked Unix&Linux question, permissions in the superior path may be set different so that a file which is world readable can't be read by an arbitrary user. Result: the file permissions are (77)7 but the effective file permissions are (77)0 (for an arbitrary user other than the owner & not in the same group) <comment250626> Can you please clarify your question then so it stands on its own and maybe add some examples? It also might be helpful to differentiate between file permissions (which are displayed by `ls -del`) and ability to access (which seems to be what you are looking for). <comment250627> Interesting challenge actually! If you take hard links on files into consideration, it will get *very* interesting :-)