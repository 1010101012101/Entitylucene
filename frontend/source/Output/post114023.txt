How does a Mac's Screen Sharing service work? <body> What components does it have and how do they work? What protocols are supported? What I only know of is it is compatible with VNC (as a client and as a host).  I'm interested in knowing more technical details and play around with them.  <answer117576> If we are speaking only about Screen Sharing (SS) (forgetting ARD), it is working as follows:  First, there is a daemon configuration file (/System/Library/LaunchDaemons/com.apple.screensharing.plist). It contains a record that tells emlaunchd/em to start SS Server (and then SS Agent) every time when someone connects to port 5900. The server is located at /System/Library/CoreServices/RemoteManagement/screensharingd.bundle, the agent is at /System/Library/CoreServices/RemoteManagement/ScreensharingAgent.bundle.  The strongSS Server/strong is the main part of SS Service. It performs network interacting, implements used protocols, performs image encoding, authentication and so on. In turn, strongSS Agent/strong impersonates current user and handles things like providing image of user screen, “pressing” keys, “moving” mouse.  (AFAIR, this separation began with Mac OS X 10.7. Formerly the service was monolithic, was named AppleVNCServer and has been always running while the “Screen Sharing” switch in System Preferences was on).  SS Service also can start the following helpers as needed:  ul liSSPasteboardHelper (located in SS Agent bundle) — pastes pasteboard data to system pasteboard as it arrives from the client,/li liSSAssistanceCursor — appeared just recently, I’m wondering what it is for,/li liSSFileCopyReceiver / SSFileCopySender (in SS Server bundle) — is used for transmitting/receiving files./li /ul  As for protocols, SS Service uses the same RFB protocol as all VNC clients, but with some specific extensions. The server reports that it supports protocol version 3.889 (most other servers report versions 3.3 to 3.8). It also supports most common codecs — raw, ZLib, ZRLE — as well as Apple’s custom ones (black-and-white and grayscale ZLib, and “adaptive” codec that uses JPEG-like compression algorithm). Also there are many Apple-specific protocol extensions, implementing drag-and-drop, files transmission, automatic pasteboard synchronization, transmission of gesture events, and so on.  This is a very general explanation, but if you ask a more specific question, I’ll be glad to help.  <comment137791> Wow. I wouldn't call this detailed explanation general. Thank you for the effort and sharing this info! If I could upvote this more than once, I would!