Extract wordlist from system dictionaries? <body> Is it possible to extract plain text wordlists from the system dictionaries in Yosemite?  <answer207275> Indeed it's possible to extract dictionaries:  Someone else already investigated the issue and published the result in his blog.  The quintessence:  Copy the code below and paste it in a *.c document named dedict.c:  precode#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt; #include &lt;assert.h&gt; #include "zlib.h"  #define CHUNK 16384  /*  40 Length of the zlib stream  4c 0020  54 0275 number of blocks   60 808c pointer to the next block  64 8088 length of the first block  68 047a4a length of the unpacked block  6c start of the zlib stream   80fc second block   13cd134  13cd174 */  int unpack(unsigned char *in, int len) {   int ret,outed=0;   unsigned have;   z_stream strm;   unsigned char out[CHUNK];    strm.zalloc = Z_NULL;   strm.zfree = Z_NULL;   strm.opaque = Z_NULL;   strm.avail_in = 0;   strm.next_in = Z_NULL;   ret = inflateInit(&amp;strm);   if (ret != Z_OK)     return ret;   strm.avail_in = len;   strm.next_in = in;   do {     strm.avail_out = CHUNK;     strm.next_out = out;     ret = inflate(&amp;strm, Z_NO_FLUSH);     assert(ret != Z_STREAM_ERROR);  /* state not clobbered */     switch (ret) {       case Z_NEED_DICT:         ret = Z_DATA_ERROR;     /* and fall through */       case Z_DATA_ERROR:       case Z_MEM_ERROR:         (void)inflateEnd(&amp;strm);         return ret;     } //    printf("%lx %x\n",strm.next_in-in,strm.avail_in);     have = CHUNK - strm.avail_out /* - (outed?0:4)*/;      int off = 0;     /*     while (have - off &gt; 3 &amp;&amp; out[off] != '&lt;' &amp;&amp; out[1+off] != 'd' &amp;&amp; out[2+off] != ':') {       ++off;     }*/      if (have - off &lt;= 3) {       fprintf(stderr, "could not find entry\n");     }      if (fwrite(out + off/*+(outed?0:4)*/, have - off, 1, stdout) != 1 || ferror(stdout)) {       (void)inflateEnd(&amp;strm);       return Z_ERRNO;     }     //exit(0);      outed+=have;   } while (strm.avail_out == 0);   printf("%06x\n",outed);   (void)inflateEnd(&amp;strm);   return ret == Z_STREAM_END ? Z_OK : Z_DATA_ERROR; }  char filename[256];  int main(int argc,char **argv) {   FILE *fin; int limit,blen=0,p,l,bcnt=0; unsigned char *buf=NULL;   assert(argc &gt;= 2);   sprintf(filename,"/Library/Dictionaries/%s.dictionary/Contents/Body.data",argv[1]);   if((fin=fopen(filename,"rb"))) {     fseek(fin,0x40,SEEK_SET);     fread(&amp;l,1,4,fin);     limit=0x40+l;     p=0x60;     do {       fseek(fin,p,SEEK_SET);       fread(&amp;l,1,4,fin); //      if(0==l) break;       if(blen&lt;l) {         if(buf!=NULL) free(buf);         blen=l;         buf=(unsigned char *)malloc(blen);       }       fread(buf,1,l,fin);       //fprintf(stderr, "%x@%06x: %x&gt;%06x\n",bcnt,p,l,((int *)buf)[1]);       unpack(buf+8,l-8);       p+=4+l;       ++bcnt;     } while(p&lt;limit);     free(buf);     fclose(fin);   }   return 0; } /code/pre  and this code and paste it in a *.c document named strip.c:  precode// This program strips the first 4 characters from each line in the input #include &lt;stdio.h&gt;  int main() {   while(!ferror(stdin) &amp;&amp; !feof(stdin)) {     size_t len = 0;     char *line = fgetln(stdin, &amp;len);     if (!line) break;      if (len &gt; 4)       fwrite(line + 4, 1, len - 4, stdout);   }    return 0; } /code/pre  Then open Terminal and cd to the folder containing the two *.c files and execute (in the example one of the dicts in /Library/Dictionaries/ is used, you may use any other in the same folder and then have to replace the name "Oxford Dictionary of English" in line 3 below):  precodeclang dedict.c -Wall -lz -o dedict clang strip.c -Wall -o strip ./dedict "Oxford Dictionary of English" | ./strip &gt; dict.xml egrep -o 'd:title="(.+?)"' dict.xml | awk -F\" '{print $2}' &gt; words /code/pre  First four results visible in emwords/em (it's getting better later):  precodeA A a a /code/pre  This should work at least in OS X 10.7 - 10.10. 