su and sudo without typing passphrase twice <body> On the command line, I find that, if I want to administer something, I must first codelogin admin/code and enter password and then codesudo something/code and enter password again. Is there a way to do this in one step, remembering the password for 60 seconds?  This is not a duplicate. I don't want to make my normal user a suoder.  <answer222165> Once again open root shell, edit code/etc/sudoers/code using your favourite text editor, and after entry code%admin ALL=(ALL) ALL/code enter codeyourusername ALL=(ALL) ALL/code, where codeyourusername/code is your Unix-style user name (emjohn/em or emroot/em rather than em"John Smith"/em or em"System Administrator"/em).  <answer222196> The passwords used for codelogin/code and codesudo/code may be the same, but the authentication mechanism behind is it different. So there is no direct way to avoid having to enter the password twice.  Things you can do to overcome this (but with their own drawbacks):  ul liAdd your current user to code/etc/sudoers/code, so you can use codesudo/code without having to login as another user. You would still need to enter your password whenever you use codesudo/code/li liEnable codessh/code and add the public key of current user to the authorized ssh keys of the admin user. This allows you to log in as codeadmin/code with codessh admin@localhost/code, without entering a password/li /ul  hr  For the second option, do the following once you've enabled codessh/code in System Preferences:  ul liAs your normal user, run codessh-keygen/code (and just press enter on all questions)/li liReplace ADMIN with the name of the admin user and run  precodessh ADMIN@localhost "mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys" &lt; ~/.ssh/id_rsa.pub /code/pre  This will be the last time you'll need to enter the password of the admin user to log in/li liRun codessh ADMIN@localhost/code to log in as the admin user/li /ul  <comment269100> see http://apple.stackexchange.com/questions/76088/how-do-i-give-a-user-sudo-permissions and http://apple.stackexchange.com/questions/82438/allow-sudo-to-another-user-without-password?rq=1 <comment269142> **Never ever** edit `/etc/sudoers` directly with your text editor. If you somehow break the file, you will not be able to `sudo` afterwards, requiring at least a reboot into Single User mode to fix things. From the man page: "The sudoers file should always be edited by the visudo command which locks the file and does        grammatical checking.  It is imperative that sudoers be free of syntax errors since sudo will        not run with a syntactically incorrect sudoers file." <comment269144> @patrix I have done this. My mac works very good <comment269145> I didn't say it doesn't work. It's just risky. <comment269146> @patrix If your mac breaks up, it means you have messed up something. My instructions didn't break up anything on my, my brother's and my friend's MacBooks. <comment269147> If somebody's "favorite text editor" stores files with DOS line breaks (there are some of those out there) or if somebody makes a typo when entering text in the file, somebody will be stuck. <comment269148> @patrix ok, ok, vim or nano <comment269150> Let us [continue this discussion in chat](http://chat.stackexchange.com/rooms/33826/discussion-between-jakub-kaszycki-and-patrix). <comment269191> Welcome to Ask Different. It's best to remove any text that says "this is not a duplicate" and replace it with exact details that will make it abundantly clear to someone _why_ this is distinct from the other similar questions. Putting that in to a question seems to make it a sport to close as duplicate <comment269192> -1 since "any text editor is a recipe for disaster" and that tools like `visudo` exist to prevent pain that haphazard editing of that file has caused over the years. <comment269215> If you are sure there is no easy way, thanks. It just occurred to me, though, that one might perhaps be able to do it with a tmux script; but that would require a safe way to store the password temporarily. (Not sure if environment variables would be safe.) <comment269238> I'm not sure, maybe somebody else has better ideas. The solution above is the one I'm using and it's working fine for me.