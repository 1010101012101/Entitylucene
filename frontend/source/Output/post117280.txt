How long should my System password be? <body> In the early versions of Mac OS X, only the first 8 characters of any password was used. Later Apple increased that number.  A proper password system stores a hash not the actual password. In that case, a longer password/passphrase is generally better so as to increase the chance of a generating a hash value not already pre-calculated. I assume Apple is using this hash technique for authenticating system login users.  It Mavericks, what is the maximum number of characters in a passphrase used by Apple's user account login?  <answer117284> Actually storing hashes is a TERRIBLE way to "securely" store passwords. By nature hashes are impossible to "reverse", but that does not stop one from generating a large table (called a rainbow table) that stores plaintext-hash pairs. With this table it's possible to lookup a hash and see it's associated plaintext password(s).  The accepted way of storing passwords is the hash and salt method. A salt is a random, large string that is combined with the password before a hash is calculated. This makes the input of the hash too big to be feasibly pre-calculated in a rainbow table. In the end, the only things stored in a proper password database are hashes and salts (the salts can be stored in plaintext, since they aren't at all helpful to reversing the hashes).  Basically, you don't need to have a long password to protect from rainbow table attacks, since salts do that for you.  Computerphile made a great YouTube Video on storing passwords.  As far as making secure password goes, one of the best approaches is to use 4-6 medium length, unrelated, REAL words (without the need for symbols/numbers). This ensures a sufficiently long password, that isn't easily guessed, and is most importantly memorable (so you'll never be tempted to write it on a sticky note).  strongTL;DR:/strong img src="https://i.stack.imgur.com/PfIci.png" alt="XKCD Password Strength"  <answer117290> I tested passwords up to 480 characters (in OS X version 10.8.5) and it used all of them; around 480 the codepasswd/code command had a little trouble setting passwords, but it was slightly inconsistent, so I'm not sure if that's a real limit. I didn't test with the System Prefs interface, because it doesn't allow pasting passwords, and there's no way I'm typing something that long (twice!). Basically, it'll use as much as you can stand to type.  <answer117351> The (salted and stretched) hash of the login password is stored in code/var/db/dslocal/nodes/Default/users/username.plist/code in 10.7 and later. If you're worried that someone can read the hash (by for example starting up in single user mode) and then use a cracking tool like DaveGrohl to figure out the password, OS X has used PBKDF2 since 10.8, which limits cracking tools to about ten guesses per second per core.  It took about ten minutes to guess a random three character password on my iMac:  precode$ sudo dave -u $USER -- Loaded PBKDF2 (Salted SHA512) hash... -- Starting attack  -- Found password : 'y8d' -- (incremental attack)  Finished in 879.274 seconds / 31,385 guesses... 35 guesses per second. /code/pre  Unless you perform a distributed attack, it's currently impractical to crack even a random eight character password that consists of lowercase ASCII letters and ASCII numbers. At 40 guesses per second, it would take about 36^8/40/(86400*365) â‰ˆ 2000 years to test all options.  <comment137066> That's good info. But my question is regarding the maximum number of characters to which Mac OS X (Mavericks) pays attention in your password. As I said in my question, originally in Mac OS X you could type in a really long password but you were wasting your time. They only used the first 8 letters. I wonder if there is still some kind of limit. No point in having a 60-letter password if Apple is only using 12 (or some such number). <comment137074> I will confirm the above for 10.9.1 <comment137075> OS X has used salted password hashes since version 10.4; in 10.8, they added [key stretching](http://en.wikipedia.org/wiki/Key_stretching) (Computerphile doesn't mention this, but it's highly recommended) by using PBKDF2 to iterate the SHA512 hash function. Basically, they're doing it right at this point. <comment137077> The System Preferences password field will only accept 64 characters (I tested using TextExpander) <comment137079> Actually, I should qualify that. Recent versions of OS X also store the password in Kerberos-conpatible form; I'm less familiar with how this works, but my understanding is that it's also hash-based, but not nearly as secure as the SALTED-SHA512-PBKDF2 hash. If you enable SMB file sharing and password compatibility for that, it adds an NTLM-compatibilie hash, which is also much weaker.