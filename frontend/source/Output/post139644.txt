Why is everything set to immutable and how do I reverse it? <body> I can't seem to change the permissions (let alone delete) anything in directories like code/usr/local/code (which I should be). My research has indicated that it's due to OSX automatically setting everything to be immutable. I was able to work through my problem by booting into single-user mode and remounting the partition with code-uw/code. From there I was able to use codechflags/code to remove the immutability.  However, I would REALLY love to not have to do this every time. Is there a way I can disable immutability globally across the system? Is there a reason I shouldn't?  <answer139660> The root user should always be able to change permissions on the filesystem. I believe things are made immutable by default to help avoid footguns by people who try to copy/paste things from the Internet. Requiring a root password may give people some pause, or at least give them the idea that changing files in /usr/local at random may not be a good idea.  Homebrew, the Mac package manager, makes /usr/local writable to be able to install packages from the web without needing to use the codesudo/code command every time. It runs the following two commands to achieve that:  precodesudo chmod 775 /usr/local sudo /usr/bin/chgrp "admin" /usr/local/&lt;unwritable directories/files below this&gt; /code/pre  <comment164613> I think you need to start by figuring out why your entire filesystem is getting marked immutable.  Does it happen reproducibly?  Do you have any messages in any of your logs?  Have you tried running Permissions Repair from Disk Utility?  Have you tried [resetting home directory permissions](http://apple.stackexchange.com/q/110334/24154)? <comment164614> @D.W. so, I kept digging deeper. Turns out somewhere down the line a new user called `root` was created on my system. I had to force `uid=0` on that user. Now things run much more smoothly. Although the immutability is still interesting. Any reason why OSX does it that way? <comment164625> OS X doesn't do it that way -- something else is doing it (and probably also created the bogus root account), and you're going to have to do some troubleshooting/fault isolation to figure out what that is. BTW, the root user you mentioned: was that in addition to the normal root account, or did it just mess up the normal root account?