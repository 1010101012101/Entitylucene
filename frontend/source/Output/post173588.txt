Combining CharacterViewer with FontBook in Yosemite <body> I used a OS X 10.5.8 system for several years and now I am using a new laptop with the latest Yosemite.  I find some features of the older system are much more powerful than the newest one.  For example, the Character Palette of my old computer is like a combination of  strengthened versions of today's CharacterViewer and FontBook.  The CharacterPalette of old could display all the characters (with their Unicode info) of a given font in a FontBook manner and still fully interact with any text editor.  Today’s CharacterViewer has practically no interaction with font information.   It is not possible to give CharacterViewer a font and ask it to display all the available characters in that font. CharacterViewer can only display all characters (without consideration of any font) in their order according to Unicode (and a few other encodings, but I'm interested in fonts not encodings). Also, when CharacterViewer displays the font variants of a given character it only displays the shapes and not the font names. The user has to click each shape drawing individually to see what is the name of the font it corresponds to. The older interface which automatically displayed the font name next to the glyph was much simpler and user-friendly.  I found those now-disappeared features incredibly useful as I wrote articles on ancient texts involving many unusual characters.    Is there any reasonable chance to restore those features on a Yosemite system ?  UPDATE 18:16 : In answer to a comment below, here is a sample of characters that I often use :  img src="https://i.stack.imgur.com/2XvEj.png" alt="enter image description here"  Note that my problem cannot be solved by simply gathering "all the characters I need" in the favorites Section of CharacterViewer. To exaggerate slightly, every epigraph has its own characters and I need to update my set of characters periodically. The typical character I need is often in the "Private Area" of the Unicode standard. The most comprehensive font I found so far is ALPHABETUM, and with the old Character Palette I regularly discovered new characters from ALPHABETUM.  <answer173632> The problem you mention has existed since OS X 10.7 was released nearly 4 years ago, so it has been discussed a lot in various places.  I think the best fix is probably to use the 3rd party alternative palette, Ultra Character Map.  https://itunes.apple.com/us/app/ultra-character-map/id520265986?mt=12  However if I remember right it cannot handle glyphs with no unicode codepoint assigned (i.e glyph variants).  <answer173635> Here is what I would do, since I do not know a way to integrate the some of the character viewer symbols in to a font.  Your input method is your keyboard.  Your Font is a choice of a font as main language alphanumeric) for lets say Latin) and sub version (Italic, Bold ect) as stile of the font.  As you are writing in main language (let say English) you need to occasionally use a special character from another alphanumeric language (modern or ancient).  For quick access of special variations of a letter one can use the click and hold to get a pop up of choices, and one can add new symbols to the keyboard key you pressed, in this example the letter "a".  img src="https://i.stack.imgur.com/0v2DG.jpg" alt="special characters"  To add your frequently used special characters, you need to do one off action, which is bit cumbersome initially, but easy to use afterwards. You can keep adding new characters any time.  The process:  Open a file in code/System/Library/Input Methods/PressAndHold.app/Contents/Resources/code now find the Input (keyboard) language you normally use and open it.  Here is a sample from my German keyboard for the letter "A"  img src="https://i.stack.imgur.com/2B06U.jpg" alt="German keyboard"  Now you just add a special letter from the character viewer that you wan to be assigned to the keyboard key "A" so when you "Press and Hold it will appear as choice.  <comment204256> could you publish a sample of your work, a screen shot, since today there are other methods (improved) to handle special characters. <comment204268> @Buscar웃 I just updated my question, taking your comment into account.