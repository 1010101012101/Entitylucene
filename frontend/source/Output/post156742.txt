Upgrade to Yosemite: kextd close to 95% CPU <body> I just gave in to the App Store's constant nagging about upgrading to Yosemite. Aside from an unhappy Chrome, there is this codekextd/code process that's constantly running close to 95% CPU. This results in the fan also running constantly and my battery being drained.  Things I tried but didn't work:  ul liremoved all the code.plist/code files/li liupgraded to 10.10.1 when it came out this morning/li licalled Apple support who had me delete a cache file (code/System/Library/Caches/com.apple.kext.caches/Startup/kernelcache/loadedkextmt.plist/code)/li /ul  The process doesn't start straight at boot, but maybe 10 minutes later during use.  How can I get this codekextd/code process to quiet down?  <answer156749> I find that there is not a real fix to it and OS X may not run correctly if you stop it.  But, if you search for codekexts/code you should be able to find it. Click it and then press the button under the close button in the window.   img src="https://i.stack.imgur.com/zkOEn.png" alt="enter image description here"  <answer156756> The codekextd/code is a process that handles loading and unloading kernel extensions. So if the system is going nuts with codekextd/code usage it could mean there is a corrupted kernel extension. And this could be related to Spotlight reindexing the system after the upgrade. In fact, I would bet that is the case since Spotlight always reindexes—and it seems to take forever—after any system update.  The quick/easy way to see if Spotlight is in action is to look at the magnifying glass icon in the top right area of the finder control bar. If that magnifying glass has a small dot in it that is pulsing in and out and if you then click on the Spotlight magnifying glass it says something about indexing in progress, then there you go.  Another—more radical—way to deal with this if it’s not spotlight is to actually adjust the way the system kernel reacts to certain kernel texts by essentially “hacking” the codeIOPlatformPluginFamily.kext/code to remove your system from that kernel process.  More details here but here is the long and short of it. As the site says—and I will restate—this is a radical method to deal with the issue and might result in the system being unusable. So proceed at your own risk. But honestly, when you look at how easy it is to roll this change back I would just not worry too much… Just worry enough.  Anyway, go into the Terminal and type this:  precode system_profiler -detailLevel mini | grep "Model Identifier:" /code/pre  Now wait a second or two. The system should return something like this; running this on my Mac Mini running Mac OS X 10.9.5 (Mavericks) so it returns the following:  precodeModel Identifier: Macmini6,1 /code/pre  Next confirm that codeIOPlatformPluginFamily.kext/code is running by typing in this:  precodekextstat | grep IOPlatformPluginFamily /code/pre  The value I get returned is this:  precode85    7 0xffffff7f81066000 0xa000     0xa000     com.apple.driver.IOPlatformPluginFamily (5.7.1d6) &lt;10 7 6 5 4 3&gt; /code/pre  And as explained on the site I am linking to:     Within this kext will be another further kext-   codeACPI_SMC_PlatformPlugin.kext/code, in which each recent Macintosh model is   listed with relevant instructions that the kernel uses to determine   how and when to invoke the control.   Now type in the following to get into the nitty gritty of codeACPI_SMC_PlatformPlugin.kext/code within codeIOPlatformPluginFamily.kext/code:  precodecd /System/Library/Extensions/IOPlatformPluginFamily.kext/ cd Contents/PlugIns/ACPI_SMC_PlatformPlugin.kext/ cd Contents/Resources/ /code/pre  Yes, that is a lot of codecd/code items that could probably be one line, but it does show the overall process of what you are attempting to do. Or you could just do this massive codecd/code as a one liner:  precodecd /System/Library/Extensions/IOPlatformPluginFamily.kext/Contents/PlugIns/ACPI_SMC_PlatformPlugin.kext/Contents/Resources/ /code/pre  Now while in there, run this codels/code command to count the items in there:  precodels | wc -l /code/pre  On my system, I get the following:     50   Which means 50 different systems have profiles in codeACPI_SMC_PlatformPlugin.kext/code. You can also just run codels -la/code like this to see the whole list if you wish. But for now, find yours by running an codels/code command like this:  precodels MacBookPro* /code/pre  Which will list all of the MacBook Pro profiles. So let’s say your MacBook Pro has the system identifier:  precodeMacBookPro5,5 /code/pre  Then the connected profile in codeACPI_SMC_PlatformPlugin.kext/code would be:  precodeMacBookPro5_5.plist /code/pre  Now we want to move that profile out of codeACPI_SMC_PlatformPlugin.kext/code so the system does not act on that. You can do it like this using codesudo/code:  precodesudo mv MacBookPro5_5.plist ~/ /code/pre  You’ll be asked for your password. After you enter that the file codeMacBookPro5_5.plist/code will be moved to your home directory (aka: code~//code) which effectively neutralizes it from codeACPI_SMC_PlatformPlugin.kext/code.  Now just restart your machine and see what happens. Chances are it will clear up the issue of codekextd/code CPU usage.  If it doesn’t, something else has happened.  If none of what we just did makes you feel comfortable and you want to roll this change back, just move the codeMacBookPro5_5.plist/code file back like this:  precodesudo mv ~/MacBookPro5_5.plist /System/Library/Extensions/IOPlatformPluginFamily.kext/Contents/PlugIns/ACPI_SMC_PlatformPlugin.kext/Contents/Resources/ /code/pre  And restart your machine. The profile will now be back and active in codeACPI_SMC_PlatformPlugin.kext/code and you will be back to the way you started.  <answer168109> I had this same issue and I found this message repeatedly on the system logs: com.apple.kextd[8095]: Kext net.semaja2.kext.insomnia not found for client path request.  Closing InsomniaX quickly solved the issue for me.  Will do some more research on how to properly fix this in order to have InsomniaX running.  EDIT: After uninstalling InsomniaX and upgrading to the latest build the issue has been resolved.  <comment184345> Hi Jake. Spotlight doesn't seem to be indexing as per your description, and `mds` and `mds_stores` are using barely any CPU. I actually tried your hack earlier and wasn't able to find my Mac version in the list. My version is `MacBookAir6,2`, and the list stops at `MacBookAir4_2`. When I do `kextstat | grep IOPlatformPluginFamily` it returns `94    4 0xffffff7f8136e000 0xa000     0xa000     com.apple.driver.IOPlatformPluginFamily (5.8.0d49) 11 7 6 5 4 3`. <comment184349> Since I couldn't find the `plist` for my Mac I did some additional research and found this post: http://www.mactalk.com.au/11/116990-kernel_task-mavericks.html#post1207490. I moved all lists to another folder but `kextd` is still hungry for more power. <comment184350> It just comes right back up when you close it... <comment184352> @ben I don’t think the `.plist` thing matters if you don’t have a config listed there. Stinks. Sadly issues like this are the reason I am sticking to Mac OS X 10.9.5 for now. If I discover anything else, I will post. If you found this answer helpful please remember to up vote it. Good luck! <comment184515> @bmike: the process that's overloaded in my case is `kextd`, not `kernel_task`. <comment184602> Fair enough - sorry for any confusion I caused. <comment197230> I do use insomnia so that could fit! I've downgraded back to maverick a while ago though so can't test the hypothesis. <comment209730> omg it was insomniaX in my case!