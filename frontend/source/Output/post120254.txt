How to export a list of recently opened files from Office:MAC? 2011? <body> I recently inherited some old mac machines and was told to look for anything important on the before formatting them.    One of the things that is installed on these machines is Office:MAC 2011, and everytime I open one of these documents I'm concerned that another falls off the recently opened list.    I'd like to save the list of recent files some how so that I don't loose anymore recently opened documents.  Is it possible to somehow export this list so I can view the list without destroying the list?  <answer120260> Based on my research there is no way to do this. However, what you could do is:  ol liChange the number of files that appear in the list  or/li liPin the files to the list/li /ol  See this link for more information.  <answer120266> You can do this, but it's complicated.  The recent documents for all Microsoft office products are stored in a preferences file (plist) in each users's library:  code~/Library/Preferences/com.microsoft.office.plist/code  This file is in standard plist format, and can be viewed using the plist viewer built into Xcode.  If you open it up it will look something like this:  img src="https://i.stack.imgur.com/88Aa1.png" alt="microsoft plst"  The list of recent items for each application is stored in the key codeFile MRU/code.  The example above is for Word, which corresponds to the codeMSWD/code code.  Each document compromises one numbered item under this plist key.  As you can see, unfortunately the values for these keys are binary encoded, not plain text, so you need to paste the Value strings into a Hex editor to see the file names and paths.  (I use HexFiend .)  img src="https://i.stack.imgur.com/viMrr.png" alt="hex viewer"  strongBottom Line:/strong Copy the codecom.microsoft.office.plist/code file to a safe location.  With some elbow grease, you can pull all the recent files out of this document.  You could also check out this Python script that does some of this parsing automatically, but your mileage may vary.  <answer120277> If you want to keep a running list of documents you are going to open moving forward, add this macro to your Normal.dot  precodeSub AutoOpen()     Dim ff As Long     Dim logpath As String      logpath = MacScript("return (path to desktop) as string") &amp; "autoopen_log.txt"      ff = FreeFile     Open logpath For Append As #ff     Print #ff, ActiveDocument.FullName     Close #ff End Sub /code/pre  It will log the path of every file you open in Word to the specified text file on your desktop. You can just reopen the existing recent files to add them to the log.  <answer239933> I ended up implementing this in Swift and not even using it (because the format changed in Office 15), but if anyone else still needs it:  pre class="lang-swift prettyprint-override"codeimport Foundation  func getMRUList(forApp: String) -&gt; [String]? {     guard let defaults = NSUserDefaults.standardUserDefaults().persistentDomainForName("com.microsoft.office") else {         NSLog("Unable to find Office defaults")         return nil     }      guard let mruList = defaults["14\\File MRU\\" + forApp ] as? [NSDictionary] else {         NSLog("Unable to find recent documents for Office application \(forApp)")         return nil     }      return mruList.flatMap { (mruItem: NSDictionary) in         guard let mruFileAliasData = mruItem["File Alias"] as? NSData else {             NSLog("Unable to extract file alias from MRU item \(mruItem)")             return nil         }         do {             let mruFileBookmarkData = CFURLCreateBookmarkDataFromAliasRecord(nil, mruFileAliasData).takeRetainedValue()             let mruFileURL = try NSURL.init(byResolvingBookmarkData: mruFileBookmarkData, options: NSURLBookmarkResolutionOptions(), relativeToURL: nil, bookmarkDataIsStale: nil)             return mruFileURL.path         } catch let error as NSError {             NSLog("Unable to resolve file alias for MRU item \(mruFileAliasData): \(error.localizedDescription)")             return nil         }     } }  if let mruList = getMRUList("MSWD") {     print(NSString.init(data: try! NSJSONSerialization.dataWithJSONObject(mruList, options: NSJSONWritingOptions()), encoding: NSUTF8StringEncoding)!) } /code/pre  You can replace codeMSWD/code with the creator of another Office 14 app (e.g. codePPT3/code for PowerPoint, codeXCEL/code for Excel) as appropriate.  <comment140276> You could take a screenshot of the list <comment140279> :p No, I want something I can search the text of.