How to prevent Mac sleep from command line? <body> I have a long running script at the remote computer.  I don't want terminate my ssh session, and need enter it into a shell script.  How is it possible to prevent my Mac from falling into sleep from the command line?  <answer62559> In Mountain Lion you can use the codecaffeinate/code command.  precodecaffeinate -u -t 1000 /code/pre  will prevent idle sleep for 1000 seconds.  <answer62562> Another option is pmset. Use the command codepmset noidle/code  to prevent sleep as long as codepmset/code is running. Unfortunately, it requires a separate Terminal window with codepmset/code running in it. However, the other option, codecaffeinate/code, only lets you set a certain emtime/em. So it's a matter of choosing whether you want to open a second SSH session, or deal with a time restraint.  Edit: According to binarybob's comment, you can actually run it in the background like this: codepmset noidle &amp;/code To get back to codepmset/code type codefg/code.  <answer62564> precodecaffeinate -i -s /bin/ssh ... /code/pre  Explanation:  code-i/code - Prevent idle sleep.  code-s/code - Prevent system sleep (entirely, even if you close the lid). Note: it only works while on AC power.  code/bin/ssh/code - Just keep writing the command you want to execute. Using codessh/code directly instead of code/bin/ssh/code should also work.  Results: Your system will not sleep as long as the codessh/code command is running.  <answer62569> The solution to this problem is emnot/em keeping the client (your Mac) awake.  Using approaches like this are undependable.  What happens if the network connection is lost? Even if your Mac is awake, the script will halt.   strongUse codenohup/code/strong  If your long-running script is called codeeternity.sh/code, try the following:  codenohup /path/to/eternity.sh &gt; /path/to/output.out &amp;/code  emNow you can even close the connection and your script will keep running/em. The code&amp;/code backgrounds the process so you can keep the connection open and enter commands.  View any output from your script via:  codetail -f /path/to/output.out/code  The paths in the examples are optional if the script is on your path and you want script output to be written to codeoutput.out/code in the current directory.   I manage scripts that run for days at a time.  Scripts like these should be detached from the terminal.  Thankfully, codenohup/code provides an easy-to-remember command invocation to achieve this--think emno hangup/em.   <answer192969> If you are looking for the nuclear option like I was:  precodesudo systemsetup -setcomputersleep Never /code/pre  â€“Set or Disable Sleep Due to Mac System Inactivity from the Command Line in OS X  <answer229131> The StarMessage screensaver ( http://starmessagesoftware.com/moonscreensaver/ ) has also the option to keep the MAC awake for 2 hours, 8 hours, or permanenty.  This way of disabling the MAC sleep, is much easier than caffeine.  <comment72249> Which OS X version? <comment72294> You can also run `pmset` in the background using `pmset noidle &` and therefore continue using the current command prompt. Type `fg` to get `pmset` back, at which point you can Ctrl+C it <comment72329> @binarybob Oh! I didn't know that. Thanks for the tip! <comment72404> See also `man screen`. <comment72570> @mankoff - i'm already using screen. It is the best command since the dicovery of a sliced breed. ;) The main point of the question is eleiminate the need of the "ssh to@somewhere" when my mac fall asleep - I simply don't want terminate my ssh session - my command on the remote side is already "protected" with screen. ;) <comment72571> @ephsmith - the question was: how to eliminate the ssh session terminate... ofc nohup is nice for situations when your remote command is not an interactive one. For the interactive commands the screen is much much better solution. Thanx anyway for reply. <comment72572> @davisgeek - really nice! Thanx for the tip. <comment72583> @kobame, maybe the point of the question and this additional information should've been included in your original question.  The first line in your question referred to a long running script.  I assumed it wasn't interactive which led to the reference to nohup. <comment72584> @kobame, did any of these answers solve your problem? <comment72586> @ephsmith - got it - accept - thanx for the reminder ;) <comment72628> @kobame Yup. NP. That's what we're here for! :-) <comment140723> I've had no success yet with any 'caffeinate' cmdline combination (including one above) nor Caffeine.app in Mavericks preventing sleep upon lid close.  InsomniaX.app is only thing that has thus far prevented lid sleep, but haven't yet found a working cmdline version (haven't yet made http://goo.gl/CU06jb work - it may be obsolete).  Even still, I want something that enables display-password requirement even while denying sleep for limited, programmable time upon lid close...and InsomniaX.app doesn't appear to do that either. <comment195757> Similar issues. I am on Yosemite, and even though I run caffeinate in terminal, after a while the screen goes dark, and I have to log back in. This suggests to me that caffeinate isn't keeping the Mac awake, which is my goal so that the Wifi connection can persist / whatever I have going on can proceed. <comment279453> How does this run for the command line? <comment279459> Be sure to read the [promotion section](http://apple.stackexchange.com/help/behavior) on [Help Center](http://apple.stackexchange.com/help). <comment327738> this one also works in IPython notebook: `!pmset noidle` -- very nice when you have a desktop serving IPython notebook and a laptop connecting remotely.