Revert Filetype Association <body> I occasionally work with iTunes Music Store packages. These packages have a code.itmsp/code extension. Like code.app/code, code.itmsp/code is essentially a container directory. code.itmsp/code folders contain XML and media files.  The latest Xcode and/or Mac OS X update (Xcode 4.6.1 on Mac OS 10.8.3) has hijacked the filetype association for directories with the code.itmsp/code extension. Previously they were treated like normal folders -- no double-click required to see inside. Now, I have to double-click them to interact with them. When I do, a program called Application Loader tries to open them. In order to see inside I have to right-click and select "Show Package Contents". I'm dealing with thousands of these files at any given time, so that won't work.  I've tried changing or removing the filetype association using Get Info and RCDefaultApp. Neither works. Removing the filetype association simply turns code.itmsp/code directories into blank files. So does deleting Application Loader.app entirely. In either case I still can't browse the contents without right-clicking.   The previously accepted answer worked a treat for a while: codelsregister -u /Applications/Contents/Applications/Application\ Loader.app//code It's stopped working since I updated Xcode and/or Mac OS X. If you have Xcode installed, you should be able to test this yourself by naming a directory codefoo.itmsp/code.  How can I make it so code.itmsp/code files are treated as folders once again?  <answer49732> Here's a relevant excerpt from Apple's documenation about bundles  (ememphasis added/em)     h2How the System Identifies Bundles and Packages/h2      The Finder considers a directory to be a package if any of the following conditions are true:      ul   liThe directory has a known filename extension: .app, .bundle, .framework, .plugin, .kext, and so on./li   liThe directory has an extension that some other application claims represents a package type; see “Document Packages.”/li   liThe directory has its package bit set./li   /ul      emThe preferred way to specify a package is to give the package directory a known filename extension. For the most part, Xcode takes care of this for you/em by providing templates that apply the correct extension. All you have to do is create an Xcode project of the appropriate type.   Almost certainly Xcode is representing that it claims code.itmsp/code represents a package type, as described in Document Packages.  So maybe removing that extension from Xcode's codeInfo.plist/code will do the trick, but I suspect that once that association has been noted by the Finder, removing it from Xcode won't undo it.  What are the "recommended applications" you get when you right-click on "Open With..."? You need to check all of their Info.plists.     I suggest seeing if you can get away with using codelsregister -u/code to unregister any apps that claimed code.itmsp/code.  Otherwise you might have to remove code.itmsp/code from all the plists and then kill the whole finder association database using codelsregister -kill -seed/code.  Never did that, no telling how much damage that will do to the rest of your system.  Probably you want to unregister, then edit the plists, then kill and reseed the database.  Wouldn't surprise me if unregister doesn't delete the association if you've removed from the plist already, and reseed will add it back in if you haven't removed it yet.  Plus this way you won't lose all the other associations for the offending apps.  What's worse, Xcode could have gone through and set the bundle bit on all the folders.  I guess then you'd have to write a script using codeGetFileInfo/code and codeSetFile/code to scan the disk and undo those, which is kind of a pain, but doable. Fingers crossed the bundle bits remain unset. Use codeGetFileInfo/code to check by testing a few.  <answer49740> One option would be to unregister Application Loader with codelsregister -u /Applications/Xcode.app/Contents/Applications/Application\ Loader.app//code, but it is registered again if it is opened, if the Launch Services database is rebuilt, or possibly if Xcode is updated.  You could also comment out the entries in the CFBundleDocumentTypes and UTExportedTypeDeclarations dictionaries in code/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Info.plist/code and run codelsregister -f /Applications/Xcode.app/Contents/Applications/Utilities/Application\ Loader.app//code. It doesn't invalidate Xcode's code signature, but the changes could get overwritten by updates.  The full path to lsregister is code/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister/code in 10.5 and later.  <answer86762> h2The problem: .itmsp folders are shown as files/h2  The Finder treats .itmsp folders as packages, that is, as if they were a single file. For example, in column view, anything contained within the .itmsp folder is invisible, only the document icon is shown:  img src="https://i.stack.imgur.com/L3vHi.png" alt="enter image description here"  The Finder considers a directory to be a package if any of the following conditions is true (from the Bundle Programming Guide):  ol liThe directory has a known filename extension: .app, .bundle, .framework, .plugin, .kext, and so on (as defined in code/System/Library/CoreServices/CoreTypes.bundle/Contents/Info.plist/code. This is a binary plist, open it with Xcode: codeopen -a Xcode Info.plist/code)./li liThe directory has an extension that some other application claims represents a package type (look for codecom.apple.package/code in the output of codemdls -name kMDItemContentTypeTree &lt;foldername&gt;/code to find out.)/li liThe directory has its package bit set (if codeGetFileInfo -ab &lt;foldername&gt;/code returns code1/code, it is set.)/li /ol  Case 2. applies to .itmsp folders: codeApplication Loader.app/code exports type codecom.apple.itunes-producer.itmsp/code and sets it to conform to codecom.apple.package/code:   precode$ mkdir foo.itmsp $ mdls -name kMDItemContentTypeTree foo.itmsp/ kMDItemContentTypeTree = (     "com.apple.itunes-producer.itmsp",     "com.apple.package",     (...) ) $ grep -B 5 -A 8 com.apple.package /Applications/Xcode.app/Contents/Applications/Application\ Loader.app/Contents/Info.plist      &lt;key&gt;UTExportedTypeDeclarations&lt;/key&gt;     &lt;array&gt;         &lt;dict&gt;             &lt;key&gt;UTTypeConformsTo&lt;/key&gt;             &lt;array&gt;                 &lt;string&gt;com.apple.package&lt;/string&gt;                 &lt;string&gt;public.composite-content&lt;/string&gt;             &lt;/array&gt;             &lt;key&gt;UTTypeDescription&lt;/key&gt;             &lt;string&gt;iTunes Package&lt;/string&gt;             &lt;key&gt;UTTypeIconFile&lt;/key&gt;             &lt;string&gt;ITMSP.icns&lt;/string&gt;             &lt;key&gt;UTTypeIdentifier&lt;/key&gt;             &lt;string&gt;com.apple.itunes-producer.itmsp&lt;/string&gt; /code/pre  h2A solution: re-declare type codecom.apple.itunes-producer.itmsp/code/h2  strongA solution would be to re-declare type codecom.apple.itunes-producer.itmsp/code and extension codeitmsp/code as a emfolder/em and force Launch Services to use the modified type declaration./strong     strongImportant note:/strong      Although it reliably solves the OP's problem, the proposed solution, when applied to other packages, doesn't display them as folders.      I've found out that the proposed solution seems to work only with file types declared by applications located in an non standard application path.      This is the case with codeApplication Loader.app/code, which is located in code/Applications/Xcode.app/Contents/Applications//code.      If you are interested in a partial solution check the end of this answer.   To have .itmsp folders be displayed as folders by the Finder follow the next steps:  ol liOpen Automator in the Applications folder and select emApplication/em:  img src="https://i.stack.imgur.com/DHjSu.png" alt="enter image description here"/li liSelect Utilities in the Library list, select Run Shell Script and drag it to the pane on the right:  img src="https://i.stack.imgur.com/2G5m1.png" alt="enter image description here"/li liReplace the default script contents with codeexit 0/code:  img src="https://i.stack.imgur.com/ytO23.png" alt="enter image description here"/li liSave the application as itmspOpener:  img src="https://i.stack.imgur.com/FOCYX.png" alt="enter image description here"/li liClose Automator./li liSelect codeitmspOpener.app/code and show its contents:  img src="https://i.stack.imgur.com/pTS6L.png" alt="enter image description here"/li liLocate ContentsInfo.plist and open it with your favorite editor:  img src="https://i.stack.imgur.com/qwlLs.png" alt="enter image description here"/li liReplace these sections in codeInfo.plist/code:  precode&lt;key&gt;CFBundleDocumentTypes&lt;/key&gt; &lt;array&gt;     &lt;dict&gt;         &lt;key&gt;CFBundleTypeExtensions&lt;/key&gt;         &lt;array&gt;             &lt;string&gt;itmsp&lt;/string&gt;         &lt;/array&gt;         &lt;key&gt;CFBundleTypeName&lt;/key&gt;             &lt;string&gt;itmsp folder&lt;/string&gt;         &lt;key&gt;CFBundleTypeRole&lt;/key&gt;             &lt;string&gt;Viewer&lt;/string&gt;         &lt;key&gt;CFBundleTypeIconFile&lt;/key&gt;             &lt;string&gt;folder&lt;/string&gt;         &lt;key&gt;LSTypeIsPackage&lt;/key&gt;             &lt;false/&gt;         &lt;key&gt;LSHandlerRank&lt;/key&gt;             &lt;string&gt;Owner&lt;/string&gt;     &lt;/dict&gt; &lt;/array&gt; (...) &lt;key&gt;UTExportedTypeDeclarations&lt;/key&gt; &lt;array&gt;     &lt;dict&gt;         &lt;key&gt;UTTypeConformsTo&lt;/key&gt;         &lt;array&gt;             &lt;string&gt;kUTTypeDirectory&lt;/string&gt;         &lt;/array&gt;         &lt;key&gt;UTTypeDescription&lt;/key&gt;         &lt;string&gt;itmsp folder&lt;/string&gt;         &lt;key&gt;UTTypeIconFile&lt;/key&gt;         &lt;string&gt;folder.icns&lt;/string&gt;         &lt;key&gt;UTTypeIdentifier&lt;/key&gt;         &lt;string&gt;com.apple.itunes-producer.itmsp&lt;/string&gt;         &lt;key&gt;UTTypeTagSpecification&lt;/key&gt;         &lt;dict&gt;             &lt;key&gt;public.filename-extension&lt;/key&gt;             &lt;string&gt;itmsp&lt;/string&gt;         &lt;/dict&gt;     &lt;/dict&gt; &lt;/array&gt; /code/pre     strongNote:/strong   Why codekUTTypeDirectory/code instead of codepublic.directory/code in codeUTExportedTypeDeclarations/code? From Apple's documentation: emImportant: When using system-defined UTIs in your code, you should use the constants defined in codeUTCoreTypes.h/code in the Launch Services framework when available, rather than the actual UTI strings. For example, pass kUTTypeApplication rather than “com.apple.application”. “System-Declared Uniform Type Identifiers ” lists these constants in addition to the UTI strings./em /li liAssociate a .itmsp file to codeitmspOpener/code and press the button kbdChange All.../kbd:  img src="https://i.stack.imgur.com/mm29G.png" alt="enter image description here"/li liReset the Launch Services database:  precode$ lsregister -kill -r -domain local -domain system -domain user /code/pre  (on OS X 10.8 codelsregister/code is located in code/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support//code.)/li liCreate a .itmsp folder and list its properties:  precode$ mkdir foo3.itmsp $ mdls -name kMDItemContentTypeTree foo3.itmsp/ kMDItemContentTypeTree = (     "public.folder",     "public.directory",     "public.item" ) /code/pre  Because the Launch Services database was reset, now the Finder shows .itmsp folders as folders./li liOpen codeitmspOpener.app/code to load its plist file and register codecom.apple.itunes-producer.itmsp/code:  precode$ open ~/Desktop/itmspOpener.app /code/pre/li liStart codeApplication Loader.app/code:  precode$ open '/Applications/Xcode.app/Contents/Applications/Application Loader.app' /code/pre  Folder codefoo3.itmsp/code should still be displayed as a folder./li liCheck the folder properties again:  precode$ mdls -name kMDItemContentTypeTree foo3.itmsp/ kMDItemContentTypeTree = (     "public.directory",     "public.item",     "public.content" ) /code/pre  codecom.apple.package/code wasn't added to the folder's metadata attributes, that's why the Finder still displays .itmsp folders as folders!/li /ol  h2Automated solution: displaying .itmsp folders as folders after login/h2  To display .itmsp folders as folders after login:  ol liCreate codeitmspOpener.app/code and modify its codeInfo.plist/code as described above./li liCreate code/usr/local/bin/itmspTypeLoader/code with this contents (the variable codeitmspOpener/code points to the location where codeitmspOpener.app/code resides, change  as necessary):  precode#!/bin/bash  itmspOpener="/Users/jaume/Applications/itmspOpener.app/"  echo "$(date): Starting" &gt; /tmp/itmspTypeLoader.log sleep 15 echo "$(date): Deleting Launch Services database" &gt;&gt; /tmp/itmspTypeLoader.log /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain system -domain user &gt;&gt; /tmp/itmspTypeLoader.log sleep 15 echo "$(date): Starting $itmspOpener" &gt;&gt; /tmp/itmspTypeLoader.log open $itmspOpener &gt;&gt; /tmp/itmspTypeLoader.log sleep 1 echo "$(date): Starting Application Loader.app" &gt;&gt; /tmp/itmspTypeLoader.log open "/Applications/Xcode.app/Contents/Applications/Application Loader.app/"  # Wait until process "Application Loader.app" exists while [ $(ps -ef|grep -v grep|grep -c "Application Loader") -ne 1 ]; do     sleep 1     echo "$(date): Waiting" &gt;&gt; /tmp/itmspTypeLoader.log done # Send TERM signal kill -TERM $(ps -ef|grep "Application Loader"|grep -v grep|awk "{print \$2}") if [ $? -eq 0 ]; then     echo "$(date): Application Loader killed" &gt;&gt; /tmp/itmspTypeLoader.log else     echo "$(date): Application Loader could not be killed" &gt;&gt; /tmp/itmspTypeLoader.log fi echo "$(date): Exiting" &gt;&gt; /tmp/itmspTypeLoader.log /code/pre  strongBoth codesleep 15/code before and after running codelsregister/code are of utmost importance. If you don't see the desired result, try different delays./strong/li liCreate code/usr/local/bin/itmspTypeLoaderLauncher/code with this contents:  precode#!/bin/bash  # $1 returns the short name of the user who is logging in su - $1 -c /usr/local/bin/itmspTypeLoader &amp; /code/pre/li liSet both scripts executable:  precode$ sudo chmod a+x /usr/local/bin/itmspTypeLoader /usr/local/bin/itmspTypeLoaderLauncher  /code/pre/li liSet code/usr/local/bin/itmspTypeLoaderLauncher/code as login hook:   precode$ sudo defaults write com.apple.loginwindow LoginHook /usr/local/bin/itmspTypeLoaderLauncher /code/pre/li liReboot for changes to take effect. After logging in you should see this:  img src="https://i.stack.imgur.com/ckmYQ.png" alt="enter image description here"  and codelsregister -dump/code should reveal that codeitmspOpener.app/code's codeUTExportedTypeDeclarations/code takes precedence over codeApplication Loader.app/code's:  precode$ lsregister -dump | less bundle  id:            24748         path:          /Users/jaume/Desktop/itmspOpener.app/         name:          itmspOpener         (...)         flags:         apple-internal  relative-icon-path  ui-element  has-min-sys-version-by-arch  hi-res-capable  user-can-change-hi-res-mode           item flags:    container  package  application  extension-hidden  native-app  scriptable  services  x86_64           (...)         --------------------------------------------------------         type    id:            33796                 uti:           com.apple.itunes-producer.itmsp                 description:   itmsp folder                 flags:         exported  active  apple-internal  trusted                   icon:          Contents/Resources/folder.icns                 conforms to:   kuttypedirectory                 tags:          .itmsp         --------------------------------------------------------         (...) bundle  id:            24600         path:          /Applications/Xcode.app/Contents/Applications/Application Loader.app/         name:          Application Loader         (...)         flags:         apple-internal  relative-icon-path  hi-res-capable  user-can-change-hi-res-mode           item flags:    container  package  application  extension-hidden  native-app  i386  x86_64           (...)         --------------------------------------------------------         type    id:            33832                 uti:           com.apple.itunes-producer.itmsp                 description:   iTunes Package                 flags:         exported  inactive  apple-internal  trusted                   icon:          Contents/Resources/ITMSP.icns                 conforms to:   com.apple.package, public.composite-content                 tags:          .itmsp         -------------------------------------------------------- /code/pre  Do you see the codeinactive/code flag set in Application Loader.app's type export? We defeated Application Loader./li /ol  h2The acid test: .itmsp folders still displayed as such after iTunes update/h2  I recently updated Xcode:  img src="https://i.stack.imgur.com/kywdA.png" alt="enter image description here"  and can confirm that .itmsp folders were shown as folders during the update:   img src="https://i.stack.imgur.com/0IYNu.png" alt="enter image description here"  and afterwards:  img src="https://i.stack.imgur.com/Fw9wG.png" alt="enter image description here"  h2A partial solution: The package will show contents when double clicked/h2  As commented previously, the procedure detailed above won't work with arbitrary folders that are displayed as packages by the Finder.  However, if you just want to be able to double-click a package to open it, there is a way to do it with one codebash/code script and Automator:  ul liThe script creates a hidden, temporary folder inside the package, reveals it in the Finder (thus revealing the package as a folder) and then deletes the temporary folder.     strongNote:/strong      The script could instead create a hidden, temporary file. However, I prefer to create a folder because codermdir/code only   deletes emempty/em folders, while coderm/code deletes emany/em file, so if, for some   reason. the script wreaks havoc, only empty folders will be deleted,   which is probably not as bad as if files were deleted. /li liAutomator bundles the script into an application that will be associated with the package files./li /ul  These are the steps to create such an application. I'll use .itmsp files as a package type example in the explanation below:  ol liOpen Automator in the Applications folder and select emApplication/em:  img src="https://i.stack.imgur.com/DHjSu.png" alt="enter image description here"/li liSelect emUtilities/em in the Library list, select emRun Shell Script/em and drag it to the pane on the right:  img src="https://i.stack.imgur.com/2G5m1.png" alt="enter image description here"/li liSet emPass input/em to emas arguments/em:  img src="https://i.stack.imgur.com/nzNqa.png" alt="enter image description here"/li liReplace the default script contents with this:  precodefor f in "$@"; do     # If not dealing with a directory, exit     if [ ! -d "$f" ]; then exit; fi     # Create a temporary directory inside the itmsp "file"     tmpdir="$f/.itmspOpener$$"     if mkdir $tmpdir; then         # Reveal in Finder         open -R $tmpdir         # Delete temporary file         rmdir $tmpdir     fi done /code/pre/li liSave the application as itmspOpener:  img src="https://i.stack.imgur.com/nifpZ.png" alt="enter image description here"/li liClose Automator./li /ol  Now you have an application that can open .itmsp files as folders if associated with it.  There's a cosmetic problem: as it stands, associated files will have the standard white document icon:  img src="https://i.stack.imgur.com/5A66D.png" alt="enter image description here"  Let's fix this, too:  ol liMake sure Automator is closed./li liSelect itmspOpener and show its contents:  img src="https://i.stack.imgur.com/pTS6L.png" alt="enter image description here"/li liLocate ContentsInfo.plist and open it with your favorite editor:  img src="https://i.stack.imgur.com/qwlLs.png" alt="enter image description here"/li liReplace the value for this key in the codeCFBundleDocumentTypes/code array:  precode&lt;key&gt;CFBundleTypeName&lt;/key&gt; &lt;string&gt;itmsp folder&lt;/string&gt; /code/pre  and add this key:  precode&lt;key&gt;CFBundleTypeIconFile&lt;/key&gt; &lt;string&gt;folder&lt;/string&gt; /code/pre  Now, the section looks like this:  img src="https://i.stack.imgur.com/HzHAK.png" alt="enter image description here"/li liSwitch to the Finder, select a folder, press kbd⌘/kbdkbdI/kbd, select the folder icon in the left top corner and copy it with kbd⌘/kbdkbdC/kbd:  img src="https://i.stack.imgur.com/bdFsl.png" alt="enter image description here"/li liOpen Preview and select FileNew from Clipboard. Save the file as codefolder.icns/code:  img src="https://i.stack.imgur.com/R4lUJ.png" alt="enter image description here"/li liCopy codefolder.icns/code to codeitmspOpener/Contents/Resources/code:  img src="https://i.stack.imgur.com/jdG6e.png" alt="enter image description here"/li liAssociate a .itmsp file to codeitmspOpener/code and press the button kbdChange All.../kbd:  img src="https://i.stack.imgur.com/mm29G.png" alt="enter image description here"/li /ol  The icon of .itmsp files should change to a folder, or at least I thought so: unfortunately, this wasn't the case. So I moved the application itmspOpener to another location (I created a temporary folder on my Desktop, moved it there and back to my Desktop). That refreshed the icon information in the Finder:  img src="https://i.stack.imgur.com/5nmUd.png" alt="enter image description here"  Now double click a .itmsp file and watch it open as a folder:  img src="https://i.stack.imgur.com/ggVEa.png" alt="enter image description here"  <answer86991> I believe that you can fix this using  code/usr/bin/SetFile -a B /path/to/file.itmsp/code  Test it on one before you try it on all of the others, obviously.  If you need it to run on all of them in a given folder:  codefind . -name \*.itmsp -exec /usr/bin/SetFile -a B {} \;/code  should do it for you.  <comment56633> Have you tried dragging and dropping a file on the Xcode App Icon and see if it does what you want? <comment56658> Thanks for the suggestion. It's not relevant to the issue at hand, so I'll try to edit my question to clarify my intent. <comment56937> What version of OS X are you running?  What version of Xcode? <comment56983> Are you sure that unregistering the app after changing its `Info.plist` will unregister the file types you removed from the plist?  I can imagine it working and I can easily imagine it failing. too. <comment56988> @OldPro Yeah, `lsregister -u $app && lsregister $app` does seem to apply the changes to an Info.plist at least in this case. <comment57014> That worked. Thank you. <comment57016> This is a fabulous answer - keep in mind that the next time you upgrade Xcode - you may end up with an Application Loader that registers the default `CFBundleDocumentTypes` so you might just delete that "tool" when it appears if you don't need it and/or tire of modifying it. <comment100461> This is very impressive... BUT it seems to have one niggling issue: If the Finder is in column view (my preferred view type), anything contained within the `.itmsp` folder is invisible. I can't sort out why, but there it is. Additionally, if I had my druthers, you wouldn't have to double-click the file to see inside, but oh well. <comment100715> `SetFile -a B` *sets* the bundle bit. In fact, it should be disabled: `SetFile -a b`. But this won't have effect since the `Has bundle` bit is not set: `GetFileInfo -ab foo.itmsp` returns `0`. <comment100728> You are right. I didn't anticipate you used column view, although I must say it makes perfect sense when dealing with thousand of .itmsp folders. But I found a way to solve the problem, that is, force the Finder to treat .itmsp folders as folders. Take a look at my edit (or jump directly to the last paragraph called The solution, but don't forget to modify itmspOpener's Info.plist first as described in paragraph The trick .) <comment100747> Unbelievable! Thanks for the answer. This is a very interesting look at some of the things that make the Finder and OS X tick. <comment101821> Thanks, I'm glad you found it useful! (I will edit the answer later to improve readibility and give it more structure.) <comment101940> I deleted my Answer which did the remove the types from the CFBundleDocumentTypes and kill on the Launch Service DataBase. It works for a while but it appears to reassert its self again at some point later on.?? <comment106927> I finally found some time to edit the answer. I have reordered paragraphs and added evidence that the solution explained in my answer is immune to iTunes updates.