Bash script to back up files <body> I am new to bash, so I'm a bit lost with this script I made to backup some directories from the local machine into a NAS. The NAS will contain only a certain number of backed up files, so before copying a new one I delete the oldest of the existing.  First of all the script defines all the paths, directory and file names into variables  precode# Defines directories ORIGEN='/Library/path-to-directories/' DESTINAS='/Volumes/path-to-backup/' DESTITAR='/Library/path-to-temp/'  # Defines names of the files and folders to delete (OLDDIR) and copy (NEWDIR) OLDTAR=`/bin/ls /Volumes/path-to-backup/ | head -n 1` NEWDIR=`/bin/ls /Library/path-to-directories/ | tail -n 1` /code/pre  Then using the variable names it: Creates a tar compressed file from the original directory. The tar file is kept in a separate, temporary directory.  precode/usr/bin/sudo /usr/bin/tar -czf "$DESTITAR$NEWDIR.tgz" "$ORIGEN$NEWDIR" /code/pre  Deletes the older of the tar files from the NAS:  precode/usr/bin/sudo /bin/rm $DESTINAS$OLDTAR /code/pre  Copies the tar file into the NAS:  precode/usr/bin/sudo /bin/cp -Rp "$DESTITAR$NEWDIR.tgz" $DESTINAS /code/pre  Deletes the tar file from the temp directory:  precode/usr/bin/sudo /bin/rm -f "$DESTITAR$NEWDIR.tgz" /code/pre  The script is run unattended by a user that has been duly authorized through changes in the sudoers file. Everything runs smoothly except in this step:  precode/usr/bin/sudo /bin/rm $DESTINAS$OLDTAR /code/pre  The log file shows no errors but there's nothing in the place of the code$OLDTAR/code variable, like it is not resolved, so it actually executes:  precode/usr/bin/sudo /bin/rm /Volumes/path-to-backup/ /code/pre  However if I run the commands in the terminal one by one I get it to work well. It may be a problem of user permissions?  <answer256717> This is not a real answer, but I would pick apart your question into 4 smaller tasks.  ol liSet up permissions / ACL so you don't need sudo if at all possible/li liJust set up a script to tar the files locally - and date stamp the backup/li liSet up a script to rsync the backup directory from the local server to the NAS. You can use the code--delete/code option or code--delete-after/code if you want to expire old backups over time./li liSet up a script to purge dated backups in the local backup folder/li /ol  Also - if you can't avoid using root /sudo - add this line codetmutil snapshot/code before any delete and check one time to allow for local backups codetmutil enablelocal/code in general so you have a backup if a script deletes too much. Time Machine will allow you recover rapidly from any errors in the logic of the scripts.   Lastly - for debugging bash - run codebash -x script/code or set debugging codeset -x/code to see the values of the variables and see if you have a path error / encoding error or something else amiss.  <answer257051> I've found what was going on: the user executing the script had not sufficient permissions to read on the NAS directory, so the result of this:  precodeOLDTAR=$(/bin/ls /Volumes/path-to-backup/ | head -n 1) /code/pre  was an empty string, this is where the script failed. Instead If I do:  precodeOLDTAR=$(/usr/bin/sudo /bin/ls /Volumes/path-to-backup/ | head -n 1) /code/pre  it works as I expected.  <comment320224> If, instead of executing the `rm` command, use `echo $DESTINAS$OLDTAR` what does it output? <comment320226> @Allan: it looks correct, it composes the full path and filename. <comment320231> are there spaces? <comment320244> @Allan nope, it's `filename_YYYY-MM-DD_HHMM.tgz` <comment320246> check to see if it exists using `if [ -f $DESTINAS$OLDTAR ] then rm -f "$DESTITAR$NEWDIR.tgz" else echo "file not there" fi`  Add that conditional statement to your script <comment320248> Also, can you post the whole script.  Debugging line by line as you have it is painful. <comment320249> Use `set -x` after the `shebang` ( e.g. `#!/bin/bash`) in your script to help diagnose.  Also use: [http://www.shellcheck.net/](http://www.shellcheck.net/) <comment320270> Please add the original unmodified script. Your problem could be as simple as a typo when setting OLDTAR but there is no way to check this right now. <comment320368> It's a permissions problem, the user executing the script can write but not read into the destination directory. How is this possible? the permissions in the `OLDTAR`directory are: `drwxrwxrwx  1 admin  staff` <comment320369> Thanks @bmike this is a complete remake of the script I may consider when I get more bash knowledge. Just one question: why do you recommend `rsync` rather than copy? it's only for the delete expired copies feature or for something else? <comment320437> @naio I like that rsync has a --dry-run option to tell me what would be copied or deleted without doing the work. It handles large files - if the copy fails or gets interrupted, it picks up half way done with a file. It's fast, corrects errors and is really useful. You can use it like `cp` if you want easy - but it's quite powerful in ways `cp` is not.