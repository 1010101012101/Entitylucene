DNS not resolving on Mac OS X <body> Some of my coworkers are having troubles on their Macs - DNS resolution does not work under Mac OS X. They're running Snow Leopard 10.6.8. They can use DNS in a Windows 7 virtual machine (VMware Fusion 3.1.3) running under OS X. The computers are 15" MacBook Pros, early 2011 model.  Things they've tried that have not worked:  ul liturning airport on/off/li lirebooting/li liusing wired connection instead wifi/li lideleting connection credentials and adding it again/li liturning off Mac firewall/li liusing fixed static IP/li limanually setting DNS servers/li lirestarting mDNSResponder/li lithe fixes from this other question/li /ul  strongEDIT/strong response Martín's answer:  • strongCan you ping the DNS you want to use?/strong  precode$ ping apple.com ping: cannot resolve apple.com: Unknown host /code/pre  • strongWhat is/are the IP address(es) of the DNS(s) you want to use?/strong  This is a company DNS server that is given with DHCP, it works well for other people. I've also tried Google's 8.8.4.4 and 205.171.3.65 (which I found from GRC's DNS Benchmark to be the fastest).  • strongHave you tried using 8.8.8.8 (google) or any of the OpenDNS    208.67.222.222 or 208.67.220.220?/strong  It doesn't work, see Google Chrome output:     The server at www.apple.com can't be found, because the DNS lookup failed. DNS is the network service that translates a website's name to its Internet address. This error is most often caused by having no connection to the Internet or a misconfigured network. It can also be caused by an unresponsive DNS server or a firewall preventing Google Chrome from accessing the network.   • strongCan you ping those hosts?/strong  precode$ ping 8.8.8.8 PING 8.8.8.8 (8.8.8.8): 56 data bytes 64 bytes from 8.8.8.8: icmp_seq=0 ttl=58 time=3.925 ms /code/pre  • strongcreating a blank user/strong  A guest user account was created, the DNS issue was still there when using the guest account.  • strongnslookup and dig both work fine/strong  precode$ nslookup www.apple.com 8.8.8.8 Server:  8.8.8.8 Address: 8.8.8.8#53  Non-authoritative answer: www.apple.com canonical name = www.isg-apple.com.akadns.net. www.isg-apple.com.akadns.net canonical name = www.apple.com.edgekey.net. www.apple.com.edgekey.net canonical name = e3191.c.akamaiedge.net. Name: e3191.c.akamaiedge.net Address: 184.24.141.15 /code/pre  &nbsp;  precode$ dig @8.8.8.8 www.apple.com ; &lt;&lt;&gt;&gt; DiG 9.6.0-APPLE-P2 &lt;&lt;&gt;&gt; @8.8.8.8 www.apple.com ; (1 server found) ;; global options: +cmd ;; Got answer: ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 11298 ;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 0  ;; QUESTION SECTION: ;www.apple.com.   IN A ;; ANSWER SECTION: www.apple.com.  1041 IN CNAME www.isg-apple.com.akadns.net. www.isg-apple.com.akadns.net. 38 IN CNAME www.apple.com.edgekey.net. www.apple.com.edgekey.net. 8794 IN CNAME e3191.c.akamaiedge.net. e3191.c.akamaiedge.net. 17 IN A 184.24.141.15 ;; Query time: 4 msec ;; SERVER: 8.8.8.8#53(8.8.8.8) ;; WHEN: Tue Oct 4 09:25:28 2011 ;; MSG SIZE  rcvd: 158 /code/pre  • strongalso flushing the DNS cache was done but it didn't help/strong  precodesudo dscacheutil -flushcache sudo killall -HUP mDNSResponder /code/pre  strongEDIT 2/strong:   precode$ cat /etc/resolv.conf # # Mac OS X Notice # # This file is not used by the host name and address resolution # or the DNS query routing mechanisms used by most processes on # this Mac OS X system. # # This file is automatically generated. # domain {redacted}.com nameserver 8.8.8.8 nameserver 208.67.222.222 /code/pre  <answer26646> Name resolution under OSX (and UNIX in general) is taken from the IP addresses of the DNSs in the file located in /etc/resolv.conf (which OS X automatically generates as far as I can remember).   Since you've tried virtually anything that comes to my mind, I'd like to ask you:   ul liCan you ping the DNS you want to use? /li liWhat is/are the IP address(es) of the DNS(s) you want to use?/li liHave you tried using 8.8.8.8 (google) or any of the OpenDNS 208.67.222.222 or 208.67.220.220?/li liCan you ping those hosts?/li /ul  Finally, a usually nice test consists of creating a blank user and seeing if that new user exhibits the same problem. If it doesn't, then you can start digging what your current user has that could be causing the issue; if it also fails, then you know this is something more "system" related.   Also take a look around the Console to see if you can spot something that may be related (and would like to paste around here).  Last but not least, your Mac comes with two important DNS commands, codenslookup/code and codedig/code.   So to resolve www.apple.com using google's server, you'd type:  nslookup "host to resolve" "DNS server to use". E.g.:  precode$ nslookup www.apple.com 8.8.8.8 Server:     8.8.8.8 Address:    8.8.8.8#53  Non-authoritative answer: www.apple.com   canonical name = www.isg-apple.com.akadns.net. www.isg-apple.com.akadns.net    canonical name = www.apple.com.edgekey.net. www.apple.com.edgekey.net   canonical name = e3191.c.akamaiedge.net. Name:   e3191.c.akamaiedge.net Address: 184.24.141.15 /code/pre  NSLookup is an old command (that was supposed to be deprecated some years ago and replaced by DIG, but its easy to use syntax was too good to kill I guess.), its "replacement" is codedig/code, a much more powerful command, whose syntax is more crazy.  To perform the same query, you'd type:  dig @8.8.8.8 www.apple.com  ANd here's the output:   precode$ dig @8.8.8.8 www.apple.com  ; &lt;&lt;&gt;&gt; DiG 9.7.3 &lt;&lt;&gt;&gt; @8.8.8.8 www.apple.com ; (1 server found) ;; global options: +cmd ;; Got answer: ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 17356 ;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 0  ;; QUESTION SECTION: ;www.apple.com.         IN  A  ;; ANSWER SECTION: www.apple.com.      1782    IN  CNAME   www.isg-apple.com.akadns.net. www.isg-apple.com.akadns.net. 42 IN CNAME   www.apple.com.edgekey.net. www.apple.com.edgekey.net. 21581 IN CNAME   e3191.c.akamaiedge.net. e3191.c.akamaiedge.net. 2   IN  A   184.24.141.15  ;; Query time: 26 msec ;; SERVER: 8.8.8.8#53(8.8.8.8) ;; WHEN: Mon Oct  3 21:21:49 2011 ;; MSG SIZE  rcvd: 158 /code/pre  As you can see, dig is much more "verbose" (which is good to debug what the heck is going on). The power of dig comes from the fact that you can specify what type of query you want to perform (Among other things).   In any case, let us know the exact outputs of these commands.   <answer41248> I had the same exact same symptoms (and spend a while troubleshooting) but I was able to resolve it when I realized that I messed with code/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist/code and what I did was somehow interpreted as malformed. I restored from a backup and the machine was able resolve hostnames again.  Before coming to the solution, I also realized that I was able to browse the internet if I used a SOCKS5 proxy through codessh -D/code and tried DNS lookups through the tunnel.  <answer48827> Actually, I think you might want to use  precodescutil --dns  scutil -r hostname /code/pre  These commands use the dynamic store in configd, as opposed to the flatfiles in /etc, which often are only read in single user mode and for non networked systems.  precodeman scutil   # or  scutil --help   /code/pre  <answer48828> It turns out the solution was to bounce mDNSResponder:  precodesudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist /code/pre  This was obtained by a different coworker from this Server Fault question.  h2OS X 10.10.0 – 10.10.3, Yosemite/h2  Apparently, mDNSResponder doesn't exist in Yosemite (OS X 10.10). You can restart descoveryd instead to fix these issues.  precodesudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.discoveryd.plist sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.discoveryd.plist /code/pre  h2OS X 10.10.4+, Yosemite/h2  In OSX 10.10.4 the mDNSResponder has been reintroduced. So use the first one will work again.  <answer54617> I am having the same problem with 10.6.8. The first trip to an Apple Store resulted in system restore. But, after that, DNS broke again while I was overseas and didn't have a system DVD with me. At that time I found this thread and deleted code/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist/code per @freezedpeanuts and @Tom Thorogood.  It fixed the problem, but, amazingly, DNS broke for the third time couple of days later. I hunted down a system image of 10.6.3 and:  ol liCopied code/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist/code from the system image./li licodesudo chown root /System/Library/LaunchDaemons/com.apple.mDNS*/code/li liRebooted/li /ol  That fixed the problem.  It breaks periodically for me now (once a month or so), and the restore procedure is down to the steps above, except instead of rebooting you can:  codesudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist/code  <answer63059> I've experienced the same problem… And while restarting mDNSResponder does seem to "work", restarting it a couple of times every hour sort of sucks.  So, for now, I've "solved" the problem by running dnsmasq locally. To do that:  ul liBuild dnsmasq (download the tgz and codemake/code or codebrew install dnsmasq/code)/li liPut this in a codednsmasq.conf/code file:  precoderesolv-file=resolv.conf user=nobody group=nobody interface=lo0 cache-size=1024 /code/pre/li liPut this in a coderesolv.conf/code file that is in the same directory as the codednsmasq.conf/code file (nb: emnot/em code/etc/resolv.conf/code):  precodenameserver 8.8.8.8 nameserver 4.2.2.1 nameserver 4.2.2.2 /code/pre/li liRun codednsmasq/code with codesudo dnsmasq --no-daemon --log-queries -C dnsmasq.conf/code. The output should look something like:  precode... dnsmasq: reading resolv.conf dnsmasq: using nameserver 4.2.2.1#53 dnsmasq: using nameserver 4.2.2.2#53 dnsmasq: using nameserver 8.8.8.8#53 dnsmasq: read /etc/hosts - 6 addresses /code/pre/li liOpen Network Preferences and make sure that code127.0.0.1/code is the only DNS server (network preferences - advanced - DNS - add 127.0.0.1)/li /ul  Things should begin to work nicely again.  Once things are working, you can run codednsmasq/code without the code--no-daemon/code and code--log-queries/code options, so it will start in the background and you don't need to keep a Terminal window open.  <answer66656> I had a very, very similar issue, except the symptoms were slightly different.  My user could not resolve any name (local NAS, Google etc) but a guest user on the same iMac (OS X 10.7.4) worked fine.  Flushing and restarting mDNSResponder as mentioned worked for a while. Whilst it would remain working when the iMac was put in sleep mode, it would emalways/em fail once rebooted.  When the flush/restart stopped working I looked for other reasons/solutions and I found that it was related to my firewall. I don't know strongemwhat/em/strong in my (OS X) firewall settings was causing it, but if I restored the firewall setting it worked.  To restore the default settings I used:  precodesudo cp /usr/libexec/ApplicationFirewall/com.apple.alf.plist /Library/Preferences/com.apple.alf.plist /code/pre  Obviously any custom rules will have been removed with this restore.  I wanted to share my version of this issue as it's been causing me grief on and off for months and this post is the best collection of possible solutions on the net!   <answer77103> After upgrading from Snow Leopard on an old Mac Book to Mountain Lion, the system could not resolve DNS. Flushing, restart, nothing helped. Changing WiFi to a different Access point (my phone) helped.  Mountain Lion adds a new client field to the DHCP network settings. Filling in this field seemed to make the wifi access point happy. Leaving it blank meant nothing was getting thru, even though the wifi connection seemed to succeed.  <answer116191> Turning Wi-Fi off and on again helped.  supMacBook Pro with 10.9.1/sup  Especially if you turn off wifi and then reboot. The extra delay and starting with no IP/network connection ensure the request to rejoin the network has better chances to succeed.   <answer142534> Please note to anyone still having issues, you might have to remove any public DNS servers until cache is cleared.  <answer152371> I hit this problem on Yosemite (10.10).  Turns out that a key daemon, codediscoveryd/code, was killed off as it was consuming too much CPU.  precode2014/10/22 3:50:07.000 PM kernel[0]: process discoveryd[49] thread 1251 caught burning CPU! It used more than 50% CPU (Actual recent usage: 68%) over 180 seconds. thread lifetime cpu usage 90.016372 seconds, (74.516637 user, 15.499735 system) ledger info: balance: 90007570271 credit: 90007570271 debit: 0 limit: 90000000000 (50%) period: 180000000000 time since last refill (ns): 131905306167  /code/pre  Strangely rebooting didn't cause it to be restarted.  I manually restarted the service with:  precodesudo launchctl kickstart -k system/com.apple.networking.discoveryd /code/pre  and now all is well.  <answer201037> I had seemingly the same problem as the OP. Using the tool networksetup I found that for the given network name, some wrong DNS was configured:  precodenetworksetup -getdnsservers &lt;networkname&gt; /code/pre  listed 192.168.0.1 as DNS. Using scutil --dns I've got comparable results, listing that resolver #2 used nameserver[0] : 192.168.0.1.  Using the command   precodenetworksetup -setdnsservers &lt;networkname&gt; 192.168.188.1 8.8.8.8 /code/pre  I was able to reconfigure the DNS for the given network and resolve names of local and global machines when connected to the VPN.  <answer239625> As it turns out, to solve the problem you have to configure a search domain and add it to the search domain field under System Preferences dns configuration.  Basically, the search domain will work sort of the way that .local does, but instead it will be .  You have to set up your search domain as a master zone in your dns server for this to work.  <answer240505> I've a similar problem with finding the host server. We have 21 iMacs running from the Server (El Capitan, recently upgraded) and only one won't bind. The fix is usually pretty simple through Users and Groups in SysPref. Deleting the host server and re-binding, finding the available server in the dropdown option, but for some unknown reason the server is listed as codeunkown-00-00-12-34-56-78.home/code, which I've found is the MAC address of the server. I ran this in terminal:  precodesudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist /code/pre  and   precodesudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist /code/pre  returned to bind to the server in SysPref and the correct server name option briefly appeared and then changed back to "unkown-00-00-12-34-56-78.home" right in front of my eyes!  <answer255777> This probably won't help anybody, but in case, I accidentally some time ago, created a file in the folder, when a DNS was down for a particular domain:  /etc/resolver/  and this was preventing a specific name from ever being resolved, two years later.  <answer258307> Unfortunately none of this helped me, and turned out after an hour of trying to figure it out and beating my head against the coffee table .. something, somehow, somewhere ... removed the code/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist/code file, and was the reason I had this problem.  Realized this when I saw this error message: code/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist: No such file or directory/code  Here's a copy of a version from El Capitan: https://gist.github.com/tripflex/e7147690d1768dc74b1dd626614573c0  Here's the code from that gist:  precode&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt; &lt;plist version="1.0"&gt; &lt;dict&gt;     &lt;key&gt;Label&lt;/key&gt;     &lt;string&gt;com.apple.mDNSResponder.reloaded&lt;/string&gt;     &lt;key&gt;OnDemand&lt;/key&gt;     &lt;false/&gt;     &lt;key&gt;InitGroups&lt;/key&gt;     &lt;false/&gt;     &lt;key&gt;UserName&lt;/key&gt;     &lt;string&gt;_mdnsresponder&lt;/string&gt;     &lt;key&gt;GroupName&lt;/key&gt;     &lt;string&gt;_mdnsresponder&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;         &lt;string&gt;/usr/sbin/mDNSResponder&lt;/string&gt;     &lt;/array&gt;     &lt;key&gt;MachServices&lt;/key&gt;     &lt;dict&gt;         &lt;key&gt;com.apple.mDNSResponder&lt;/key&gt;         &lt;true/&gt;             &lt;key&gt;com.apple.mDNSResponder.dnsproxy&lt;/key&gt;             &lt;true/&gt;     &lt;/dict&gt;     &lt;key&gt;Sockets&lt;/key&gt;     &lt;dict&gt;         &lt;key&gt;Listeners&lt;/key&gt;         &lt;dict&gt;             &lt;key&gt;SockFamily&lt;/key&gt;             &lt;string&gt;Unix&lt;/string&gt;             &lt;key&gt;SockPathName&lt;/key&gt;             &lt;string&gt;/var/run/mDNSResponder&lt;/string&gt;             &lt;key&gt;SockPathMode&lt;/key&gt;             &lt;integer&gt;438&lt;/integer&gt;         &lt;/dict&gt;     &lt;/dict&gt;     &lt;key&gt;POSIXSpawnType&lt;/key&gt;     &lt;string&gt;Interactive&lt;/string&gt;     &lt;key&gt;EnablePressuredExit&lt;/key&gt;     &lt;false/&gt; &lt;/dict&gt; &lt;/plist&gt; /code/pre  <answer286104> In my case, everything else was fine: mDNSResponder was running and working, codehost/code/codenslookup/code worked, both code/etc/resolv.conf/code and codenetworksetup/code reported the correct DNS servers, etc. Despite all that, DNS resolution in general (e.g. with codeping/code) inevitably stopped working at some point a few hours after boot.  This specific problem may be somewhat unlikely, but I'm going to document it here as an answer anyway.  I only noticed when the machine started slowing down, but there were stronga lot of identical processes running/strong. codesensu-client/code, specifically.  We had it configured in launchd with this plist file:  pre class="lang-xml prettyprint-override"code&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE plist PUBLIC -//Apple//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd&gt; &lt;plist version="1.0"&gt;   &lt;dict&gt;   &lt;key&gt;KeepAlive&lt;/key&gt;   &lt;true/&gt;   &lt;key&gt;RunAtLoad&lt;/key&gt;   &lt;true/&gt;   &lt;key&gt;WorkingDirectory&lt;/key&gt;   &lt;string&gt;/etc/sensu&lt;/string&gt;   &lt;key&gt;UserName&lt;/key&gt;   &lt;string&gt;root&lt;/string&gt;   &lt;key&gt;Label&lt;/key&gt;&lt;string&gt;org.sensuapp.sensu-client&lt;/string&gt;     &lt;key&gt;ProgramArguments&lt;/key&gt;     &lt;array&gt;       &lt;string&gt;/usr/bin/sensu-client&lt;/string&gt;       &lt;string&gt;-d/etc/sensu/conf.d/&lt;/string&gt;       &lt;string&gt;-b&lt;/string&gt;     &lt;/array&gt;   &lt;/dict&gt; &lt;/plist&gt; /code/pre  The code-b/code flag to codesensu-client/code makes it fork to the background, acting as a daemon. However, all codelaunchd/code sees is that the original process terminated, so (in accordance with the codeKeepAlive/code flag) it restarts it. This leaves thousands of forked processes in the background, and even then launchd will be none the wiser to the fact that it is running.  I believe that these strongseveral thousand processes/strong (all codesensu-client/code, the software we had written a launchd config for) may have been simultaneously making requests to mDNSResponder, effectively resulting in a stronglocal denial of service of the DNS cache/strong. Killing these processes and fixing the plist given to launchd eventually solved the problem.  The plist fix was just to remove the code-b/code (background / daemonise) flag from the sensu-client invocation. Note that this is not sensu's fault; this plist was written by a former system administrator at this company.  <comment30438> See my edit to the question. <comment30467> @CajunLuke hmmmm interesting… I mind adding the output of: cat /etc/resolv.conf to your question? <comment30470> Edited. (Padding to make comment fit.) <comment30473> @CajunLuke i'm puzzled. Let's go back to the roots… this only happens on this machine, and only under OSX, the VMs are ok. I'm starting to suspect that Parallels or VMware may be causing some trouble. What type of network are these VMs using? Bridged? Shared? <comment30475> It's VMware Fusion, and we're using the NAT option. There are probably twenty identical (imaged) machines, out of which two have this issue. OS X has the problem, VMs do not. <comment30818> @CajunLuke I really can't think of anything else from here. Given the reputation of both VMware and Parallels to "add stuff" to the network stack/layer and add virtual adapters, etc., I'd try completely removing VMware from the machine to see if that fixes it, which would then point you to VMware for more info. You can tell them, hey, i've got two identical machines, one works, one doesn't. Did you spot anything interesting in the Console (Applications/Utilities/Console.app) related to DNS or VMware while the resolution is in progress? <comment30842> Nothing interesting in Console. Also, one of the computers having the issue spontaneously un-broke itself yesterday. We're hoping the other will, too. <comment54408> My company has been having this issue for months and months, each time taking Macs to the "Genius bar" whose only solution was to wipe the hard drives and start over. I saw your post, and deleted com.apple.mDNSResponder.plist, rebooted, and the problem was solved. I wish I could upvote you a billion times. <comment57260> Worked for me as well. Thanks! <comment57262> Happens for me on lion as well. <comment71627> But this isn't really a satisfactory answer. I need to know how to stop it from happening in the first place. <comment71794> My DNS (internet connection with IP addresses is fine, as is nslookup) also started going out, this brings it back without a reboot, thanks! <comment72776> @dkagedal Will one of the other answers help? I'm really not familiar with networking, so this is not my forte. If you come up with a better prevention answer, please post it here! <comment76181> You don't explain why these commands would help with this problem. Do they even? Or this this meant as a comment to one of the other answers or something? <comment76182> No other answer here helps to prevent it, and I haven't found any other answer. <comment82880> @dkagedal This is actually as good an answer as we're going to get - this happens because your mac caches the DNS entries to avoid hitting your DNS server (likely your router) for every DNS lookup - which happens a lot. This cache is necessary, and good, but it would be nice if there were better behavior when an entry is not found (I consider this a bug). In any case, there is some timeout in the cache; when I waited 10 minutes or so on my machine, this situation resolved itself. For the majority of users, the existing behavior is fine, so is not likely to be changed by Apple anytime soon. <comment87441> Of course this is not as good as it gets. No other OS has this problem. There is nothing wrong with the DNS, the record for www.google.com didn't go missing, it's just the MacOS cache that for somehow lost it and won't refetch it. And that's a bug that needs fixing. <comment89896> @dkagedal agreed it is a pretty bad bug, especially since a non-technical user can't figure out the problem, but I'm  unclear what you expect StackExchange to do about it? <comment94103> Sorry, I just meant that there should be a proper answer and solution to this. And I can't imagine that everybody has this problem as it would cause enourmous amounts of grief. So there is likely something on my machine that is causing it, but I don't know what. <comment94409> @dkagedal That's very probably the case. However, nobody seems to be able to diagnose the root cause. If you can come up with a better solution, I'll change my accept to it. <comment125940> Got this problem on 10.9 and solution worked perfectly. In my case DNS was resolving for full names but not short ones. <comment145572> Do note delete `com.apple.mDNSResponder.plist`! I did it as @TomThorogood suggested.  I have hard time to get back. Even I put the file back and restart I was unable to get any response from Internet. The `sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist` than helped. <comment152393> Wow! you are the best! +1 :) worked like a charm! <comment162421> Happening for me on Mavericks, 10.9.4 <comment169749> This worked for me, thank you so much! <comment195965> What if that file is missing from my mac? <comment196035> @Matteo Maybe the file doesn't have to exist, or maybe the answer needs to be updated for Yosemite. Do you have this issue? Does running those commands fix it? <comment196135> My bad, didn't see it was related to snow-leopard, anyway no, there is nothing that can fix it other than a workaround that restart the dns daemon or the network interface every 2 mins <comment196203> @Matteo You might find this article useful then - I guess mDNSResponder doesn't exist in Yosemite, though you can install it. http://arstechnica.com/apple/2015/01/why-dns-in-os-x-10-10-is-broken-and-what-you-can-do-to-fix-it/ <comment208056> Today I've got this frustrating problem (Yosemite 10.10.2) and the only thing that helped - was setting up Google's DNS as my primary DNS (description is here https://developers.google.com/speed/public-dns/docs/using) + had to edit `hosts` files for sites where I used VPN <comment217952> This was the solution for me on Yosemite as well.  Some details: host, dig, and Chrome worked fine, but ping, telnet, ssh, firefox, and safari could not resolve hostnames.  This solution fixed my issue. <comment219458> Annoying this happens all the time for me. Have to restart the service. <comment226038> My Yosemite is reporting that load and unload are legacy subcommands for launchctl.  What should we be doing instead? <comment226040> One possible advantage of scutil is that it might work regardless of whether the computer has discoveryd or mDNSResponder.  It dates from before their introduction. <comment226041> Although the question may need some editing, it still says (at the time of writing this comment) that the workers already tried turning Wi-Fi off and on again.   Maybe we could retract this answer? <comment226043> Maybe we should mention https://support.apple.com/en-au/HT203244. <comment226812> @DavidVincent Are you using the discoveryd command? What version of Yosemite are you on? Can you post the full command and response you're using? <comment226928> @CajunLuke, those are excellent questions.  I haven't tried the discoveryd command.  As I should have said in my first comment, I am on OS X Yosemite 10.10.3.  As for the command and response I'm using:  I almost tried launchctl as suggested, but decided to look first at the man page.  There's a heading for LEGACY SUBCOMMANDS that talks about load and unload. <comment229344> @DavidVincent I'm not sure what replaces load and unload for launchctl, but I use those discoveryd commands whenever my network goes wonky, about once a month. <comment236859> This look like an historical problem which rotted the life of users and network admins from Leopard to Yosemite. If someone still see this problem, please report clearly if you have more than one interface active and moreover getting its conf. from a DHCP server (from different sides). Why? I never saw such a problem on any other Unix and on none of my Macs (I have a lot), but none of them has more than one interface talking toward a DNS info source. <comment252644> +1 for the suggestion to try again. Multiple answers help lots of people, and each router has different time outs and behaviors. <comment252645> I don't have enough reputation to add a comment to a post on turning wifi off and then on, but that worked for me. Retracting the answer would be silly. <comment287511> I'd just like to point out that after 16 straight hours scouring the Internet, this is the *only* solution I've found that both lets me resolve internal company names AND allows for split networking to function properly. Thank you SO much for making this comment. <comment287512> I'd also point out that on OS X El Capitan, in order to script setting this up, I wrapped my `openconnect` command in a python script, along with commands such as `networksetup -setdnsservers 127.0.0.1` and `networksetup -setsearchdomains "$COMPANY_NAME".com`. Add in your `dnsmasq` command and it's all set! I finally have a stable VPN solution thanks to this comment. <comment287513> For future readers, I found it easiest to just ssh into my box at work, determine which IP's it had for name servers, and then hardcode those IP's into my resolv.conf below 8.8.8.8 (googles DNS server). That allows all non company names to resolve properly without having to go through company servers, which I find useful for privacy and speed. As far as hardcoding goes, those IP's aren't going to change any time soon, and if they do, I won't be the only one affected and it should be trivial to edit two lines. <comment324589> these commands don't solve the issue