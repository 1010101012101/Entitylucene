Command-line arguments for "Remote Desktop Connection for Mac"? <body> I haven't been able to find any documentation that would indicate this is possible, but is there any way to pass the hostname you'd like to connect to as a command-line argument to Microsoft's Remote Desktop Connection for Mac?   Some background info for those interested:  I'm a systems administrator, and I'm in the process of moving to a MacBook Air as my primary work computer from a Windows 7 laptop. I frequently use Remote Desktop Client to connect to servers, and in Windows, I use Launchy as my keyboard launcher. I've assigned "rdp" as a keyword so when I invoke Launchy, type "rdp {tab} servername" it passes the text after the tab key as the hostname to mstsc.exe (i.e., mstsc.exe /v:servername). This results in the remote desktop client opening a session to the hostname specified.  <answer54925> There is no command line access for the Microsoft Remote Desktop Client. But the free and most excellent CoRD remote desktop client does handle coderdp:///code links which would let you call it from a launcher of your choice or even via codeopen/code on the command line.  The CoRD documentation on github lays out how you can use URL encoded parameters to open full-configured RDP sessions.  rdp:// URL syntax  CoRD handles rdp:// URLs, which you can use from many places inside OS X. Unfortunately, there is no way to extend Finder's "Connect to Server" dialog, which supports launching VNC URLs, so we can't launch CoRD from there. If Apple changes this (or if anybody is aware of a way to extend it) we would love to hear about it.     codeSaved Servers/code      If you want to use coderdp:///code urls with existing saved servers, you can (as of 0.5.3)! Just use the label in place of a hostname:      codeopen rdp://label/code      strongNew Servers/strong      From a shell (using Terminal):      codeopen rdp://hostname/code      Additional parameters can be used to start a fully-configured session via the URL:      codeopen rdp://[username[:password]@]hostname[:port][/domain][?parameters]/code      The following parameters can be set for the session via a query string (as of 0.5.2):      ul   licodescreenDepth ### [8|16|24|32]/code/li   licodescreenWidth &lt;width in pixels&gt;/code/li   licodescreenHeight &lt;height in pixels&gt;/code/li   licodeconsoleSession ### [true|false|yes|no]/code/li   licodefullscreen ### [true|false|yes|no]/code/li   licodewindowDrags ### [true|false|yes|no]/code/li   licodedrawDesktop ### [true|false|yes|no]/code/li   licodewindowAnimation ### [true|false|yes|no]/code/li   licodethemes ### [true|false|yes|no]/code/li   licodefontSmoothing ### [true|false|yes|no]/code/li   licodeforwardDisks ### [true|false|yes|no]/code/li   licodeforwardPrinters ### [true|false|yes|no]/code/li   licodeforwardAudio ### [0|1|2]/code      ul   licode0 - Forward Audio to the Local Machine (Currently not used since CoRD doesn't present audio)/code/li   licode1 - Leave Audio at the Remote Machine/code/li   licode2 - Disable Audio at both  Machines/code/li   /ul/li   /ul      strongExample/strong      codeopen rdp://jsmith:securePassword@hostname.bigco.com/BigCoDomain?screendepth###24\&amp;consoleSession###true\&amp;themes###false\&amp;screenWidth###1280\&amp;screenHeight###800/code      Note:      When using ampersands (&amp;) from the command line, they have to be escaped with a backslash (). Colons (:) can be used in place of ampersands for the same effect, without needing to be escaped.      Passwords with any special characters in them, @, :, &amp;, etc need to be encoded according to the URL Encoding Format      strongCommand Line Use/strong      CoRD supports the following command line options: -host -port -u -d -p -a [8|16|24|32] set screen depth -width set screen resolution width -height set screen resolution height      strongExample/strong      code/Applications/CoRD.app/Contents/MacOS/CoRD -host example.com -port 3389 -u username/code      strongCaveats/strong      Launching CoRD from the command line this way causes a fresh instance of CoRD to be opened. One symptom of this is multiple Dock icons. This overrides or decreases the effectiveness of many of CoRD strong points, including unified sessions, etc. For that reason, we recommend using the open command, and rdp:// URLs to launch sessions.   img src="https://i.stack.imgur.com/8sEJ4.jpg" alt="enter image description here"  <answer54926> Well, after consulting my Microsoft TAM, I've found that there is no way to pass a hostname to the Microsoft client via the command line.  CoRD, on the other hand, can actually do what I'd like by handling rdp:// links. After installing CoRD, if you type   precodeopen rdp://servername /code/pre  in Terminal or iTerm2, it will open a session to the host emservername/em within CoRD.   I use Alfred (http://www.alfredapp.com/) as my "Launchy" alternative on Mac, having just discovered it after being a longtime user of Quicksilver. I bought the Powerpack for Alfred, which allows you to use a number of extensions, one of which give it the ability to launch shell scripts. So I created a shell script extension, assigned the keyword rdp, set it to "required parameter", and set the script to:   precodeopen rdp://{query} /code/pre  This allows me to invoke alfred, and type emrdp {tab} servername {return}/em to open a Remote Desktop Connection session to the remote server.   <answer86496> I don't love CoRD. It works, but it seems to flake out periodically. I made my own CLI script for Microsoft RDP. I created a sed+open bash script to make it possible to pass 2 arguments to Microsoft Remote Desktop Client. I can pass a host name, and I can throw a switch to connect to the console of Server 2003 hosts.  strongI know this could be taken further. For Example:/strong    ul liMy bash script will not work with spaces in the paths or file names :)  /li liI imagine any of the XML data in the .RDP file could be modified with sed.  /li liI included a number of variations of a switch for connecting to the console because I'm old and can never remember which one I like. I bet that bash scripting has a more elegant solution than I use.  /li /ul  strongHere is how I did it:/strong  ol liCreate a Microsoft RDP template profile with all of your preferred settings. Name it 'template.rdp'. Make it connect to a fake server. I used a server name 'zzxyzyz'. This gets used in the 'sed' command as the string to search for and replace with a real server name./li liCreate a bash script to copy the template.rdp to a temp.rdp, then sed the temp.rdp with the desired host name that gets passed in when invoking the script. I named my bash script 'rdp.sh'. /li liModify your '~/.bash_profile' to include an alias to 'rdp.sh'/li liMake the bash script executable: chmod +x rdp.sh/li liBob's yer uncle /li /ol  strongContents of my bash script/strong:  precode    #! /bin/bash rdpTemplateFile='/Users/levi/Dropbox/RDC_Connections/RDS/template.rdp' rdpTempRDP='/Users/levi/Dropbox/RDC_Connections/RDS/t.rdp' rdpRunCommand="/Applications/Remote Desktop Connection.app/Contents/MacOS/Remote Desktop Connection" rdpHost=${1}  if [ "${2}" = "/console" ] ; then     rdpHost="${rdpHost} /console";     echo "rdpHost is: " ${rdpHost} fi  if [ "${2}" = "-console" ] ; then     rdpHost="${rdpHost} /console";     echo "rdpHost is: " ${rdpHost} fi  if [ "${2}" = "-admin" ] ; then     rdpHost="${rdpHost} /console";     echo "rdpHost is: " ${rdpHost} fi  cp -f ${rdpTemplateFile} ${rdpTempRDP}  sed -i '' "s|zzxyzyz|${rdpHost}|g" ${rdpTempRDP}  open -na "${rdpRunCommand}" --args ${rdpTempRDP} /code/pre  strongAlias added to .bash_profile/strongbr (This assumes my rdp.sh script file is in my home directory, ~/ )  precodealias rdp=~/rdp.sh /code/pre  strongMake the script executable:/strong  precodesudo chmod +x rdp.sh /code/pre  strongRun the script:/strongbr Here is an example that includes the console switch. I left a debugging line in the script that shows what is going to be sed'd into the t.rdp file.  precodeLeviMAC&gt;rdp MyServer -console rdpHost is:  MyServer /console [~/] LeviMAC&gt; /code/pre  <answer132766> I think it would be just as easy to make a template for each server you want to connect to, as well as one with an empty server field for those "once in a lifetime" connections. I just pop them in a folder and either name or number them to get the order right.  Drag the folder to the dock and I have a spot I can click to get a quick list of the rdp templates which I can then just single-click to connect. Or I can Command+Space and type in the name of the file and press enter to run it. OR YOU CAN TYPEY TYPEY TYPEY TYPE and install all kinds of management apps.  <answer199208> I don't know when this changed, but the Microsoft Remote Desktop Client does handle rdp:// links now:     Microsoft Remote Desktop uses the URI scheme rdp://query_string to store pre-configured attribute settings that are used when launching the client. The query strings represent a single or set of RDP attributes provided in the URL. The RDP attributes are separated by the ampersand symbol (&amp;).      For example, when connecting to a PC, the string is:      rdp://full%20address=s:mypc:3389&amp;audiomode=i:2&amp;disable%20themes=i:1    All the attributes are documented on the Remote Desktop Client URI Scheme Support TechNet page.  <answer281560> The script above doesn't work with the latest "Microsoft Remote Desktop".  Referencing the application with a variable was problematic so I hard coded the path (which is different from the original example).  I also needed to remove the '--args' parameter and it started to work.  precodeopen -na /Applications/Microsoft\ Remote\ Desktop.app/Contents/MacOS/Microsoft\ Remote\ Desktop ${rdpTempRDP} /code/pre  <comment62972> Sadly, no there is no command line access or AppleScript access to Remote Desktop Client. I've asked the CoRD developer if he'd consider adding it to CoRD though. And there's my plug for a better client than MS' RDP client: http://cord.sourceforge.net/. :) <comment62974> @Ian C., I'd used CoRD in the past, on my personal MacBook... it feels like it's been a few years. Wasn't really satisfied with it compared to the stability and more "polished" look of Microsoft's client. I actually just downloaded it again, because I noticed in one of their screenshots, there was a mention of handling rdp:// links. This does _exactly_ what I'm looking for, so thanks for pointing me back towards CoRD! I was able to set up a "shell script" extension in Alfred that executes "open rdp://{query}". Cheers! <comment62975> Oh wow. I didn't even notice it handled rdp:// links. That's awesome. I'll make my comment an answer. :) <comment62976> Too funny! I was answering my own question as you answered it as well. Thanks again for your help! <comment328053> I would LOVE to se some sample URLs. I have my local port 3389 forwarded to a Windows machine and I connect as user "et" using the official Microsoft Remote Desktop app. But, I cannot construct a URL that doesn't give an error. <comment328079> Try using 127.0.0.2 instead of localhost? <comment328159> thank you. I was able to get in with `rdp://full%20address=s:localhost:3389&audiomode=i:2&disable%20themes=i:1` the part that threw me was I didn't realize that it meant literally "full%20address". I took that to mean "replace with the full address" because the common URI pattern is `scheme://host/optional_path?query=value&etc=value` So, my late night brain was rejecting the idea of not having a `host` or a `?` in it. <comment328160> Have any ideas about how to store/pass passwords? <comment328197> Passwords aren't allowed in the URL. You can save them in an app like Microsoft RDP of course but I guess that is no good for you. <comment328227> Saving the password in the Microsoft Remote Desktop (for Mac) app is what I currently do. However, my goal is to launch a connection to a new IP:Port via the command line after opening that port via ssh tunnel. I'm just trying to improve my script which currently ends with "Now change the host of the saved connection to 10.10.1.23:5589 and connect" <comment328504> Please let me know if you find a way :) <comment363058> I was able to get this concept to work, but only after some modification. The command I used to start RDP was `open -na "/Applications/Microsoft Remote Desktop.app/Contents/MacOS/Microsoft Remote Desktop" path/to/profile.rdp`