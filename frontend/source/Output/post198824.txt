Bash script with lock folder problems for large files <body> My script is:  precode#!/bin/bash      # Path to a lock folder LOCK_PATH="/Volumes/PROOFS_WATCH/copy.lock"  trap 'rmdir "$LOCK_PATH"; exit' 1 6 15  if mkdir "$LOCK_PATH"; then     echo "Lock file did not exist and was created, Copying..."          # Perform commands     cp /Volumes/PROOFS_WATCH/*.mov /Volumes/PROOFS_WATCH/AME_Processing/     cp /Volumes/PROOFS_WATCH/*.mov /Volumes/PROOFS_TV     rm /Volumes/PROOFS_WATCH/*.mov           # Remove the lock     rm -f "$LOCK_PATH" fi /code/pre  My Output is:  precodeLock file did not exist and was created, Copying... cp: /Volumes/PROOFS_WATCH/*.mov: No such file or directory cp: /Volumes/PROOFS_WATCH/*.mov: No such file or directory rm: /Volumes/PROOFS_WATCH/*.mov: No such file or directory rm: /Volumes/PROOFS_WATCH/copy.lock: is a directory logout [Process completed] /code/pre  coderm -f/code does not remove the lock folder for some reason...  I would like this script to run automatically via Cron every 60 seconds. If a large file is being written though I don't want it to run until the file write is complete.  Im realizing more of what can be done with bash and I want to automate more processes as well.   <answer198828> h2Fixing the Lock Removal/h2  Try using codermdir/code to remove the lock folder:  precodermdir "$LOCK_PATH" /code/pre  h2Debugging Paths/h2  To debug the codecp/code paths, try this command in Terminal.app:  precodeopen /Volumes/PROOFS_WATCH/ /code/pre  Does the expected folder open? Play around with the path until codeopen/code displays the expected folder in the Finder.  To debug the lock folder, try running the script in two Terminal.app windows. Do they both try and copy? Trying adding an else statement to see if codemkdir/code is working as desired:  precode… else     echo "Lock exists." fi /code/pre  h2Debugging Shell Scripts/h2  Take a look at How to Add Error Checking to Your Shell Scripts to help identify any problems.  h2Hard Links/h2  Mentioned in comments below is a new constraint: other applications may be writing the files as this script is running. This script can not block other applications changing or writing to the affected folders.  If a file is being written to, then the codecp/code will only see and copy a partial file. The next time the script runs, the file will likely be fully available and copy correctly. This may or may not be acceptable.  If the copy occurs on the same physical volume, the copy can likely be avoided. In place of a copy, consider creating a hard link with the codeln/code tool:  precodeln &lt;source_file&gt; &lt;target_file&gt; ln [-Ffhinsv] &lt;source_file&gt; ... &lt;target_dir&gt; /code/pre  The link does not copy any data and is almost instant. Changing either the original file or the newly hard linked file will be reflected in both.  Try creating a hard link by hand before attempting to change the script:  precodeln /Volumes/PROOFS_WATCH/movie.mov /Volumes/PROOFS_WATCH/AME_Processing/movie.mov /code/pre  <comment238068> yo remove directories rm -r or rmdir <comment238087> Ok, so paths are good, rmdir works, everything is running fine... but when I test it with a large file, it does not stop the script from copying the file before its done... It just copies away before the file write is complete. <comment238088> I have updated the answer with an `else` suggestion and how to add more error checking. Hope this helps! <comment238227> Hey Graham! So Ive gone through, error checked everything, and its working perfectly now! You were extremely helpful! However Ive realized that this script only offers protection against running the script, then waiting for a long copy, then the script running again. Which is great! And its a great feature to have, but I realized my problem still exists because if my large file is still being written by another application and the script runs the script will still execute, create the lock folder, and copy the file, thus corrupting it. l think I will still have to use LSOF or similar. <comment238228> I will mark this as answered and ask another question. Thanks again! I really appreciate your efforts and knowledge. <comment238234> If the files are on the same physical volume, try replacing the copy with the creation of [a hard link](https://en.wikipedia.org/wiki/Hard_link#Usage). This may help overcome partially written files – assuming files are being written in place by the application. <comment238237> All files are on a central XSAN. How do I create a hard link and how does that prevent script execution if the file is still being written? <comment238244> I have added a section about hard links. It should work but test first before committing too much time.