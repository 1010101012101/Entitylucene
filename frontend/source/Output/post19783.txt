How do I know the IP addresses of other computers in my network? <body> Say that I have two computers connected to the same network. I know that from computer1 and file sharing enabled I can snoop around inside computer2. But say that there is something interesting on computer2, which you access by typing localhost:9091 in safari. (e.g. transmission's web UI). To access that I would have to type in the ip_address_of_computer2:9091 on computer1.  But how do I find out computer2's ip address without using computer2?  <answer19784> strongMethod #1/strong  The easiest way would be to access your network router's administration page. It will have information about any other devices on the network, including IP address.  strongMethod #2/strong  If you know the computer's network name you can codeping/code it in the Terminal. It will return the computer's IP address.  strongMethod #3/strong  If you don't know the computer's network name, there's another trick you can do using codeping/code. Find your IP address and your subnet mask. Both should be visible in the Network preference pane of System Preferences. Line up your IP address and your subnet mask, and replace any code0/code values in the subnet mask with code255/code in the same relative position of the IP address. For example, if you have the following IP address and subnet mask, respectively:  code192.168.1.151/code  code255.255.255.0/code  The code0/code is in the last field of the subnet mask, so you replace the last field of the IP address with code255/code and ping it: codeping 192.168.1.255/code  You should get a response with the IP address of any device on the network capable of responding to pings.  strongMethod #4/strong  Last trick is to use the terminal command codearp -a/code. This will show the IP and MAC address of all devices on the network that it knows about.  Last two tricks courtesy of this Macworld article.  <answer100169> Type the command  precode  arp -a /code/pre  This will show you all connections one by one.  <answer115328> If you want to know the name using IP: http://runakay.blogspot.com/2013/12/obtaining-computer-name-from-ip-address.html  <answer117608> You could also use netstat to show network addresses:  precoderoger.moore@WKSTCAL0141 ~ $ netstat -n  Active Connections    Proto  Local Address          Foreign Address        State   TCP    127.0.0.1:11235        127.0.0.1:49184        ESTABLISHED   TCP    127.0.0.1:49155        127.0.0.1:49156        ESTABLISHED   TCP    127.0.0.1:49156        127.0.0.1:49155        ESTABLISHED   TCP    127.0.0.1:49184        127.0.0.1:11235        ESTABLISHED   TCP    192.168.10.131:445     192.168.10.119:52624   ESTABLISHED   TCP    192.168.10.131:1433    192.168.10.2:60866     ESTABLISHED   TCP    192.168.10.131:1433    192.168.10.119:52775   ESTABLISHED   TCP    192.168.10.131:3389    192.168.10.119:54473   ESTABLISHED   TCP    192.168.10.131:49154   192.168.10.119:52796   ESTABLISHED   TCP    192.168.10.131:49182   192.168.10.9:52230     ESTABLISHED   TCP    192.168.10.131:49247   192.168.10.6:445       ESTABLISHED   TCP    192.168.10.131:49432   192.168.10.4:1106      ESTABLISHED   TCP    192.168.10.131:49440   192.168.10.4:1106      ESTABLISHED   TCP    192.168.10.131:49451   192.168.10.6:1025      ESTABLISHED   TCP    192.168.10.131:55100   192.168.10.2:445       ESTABLISHED   TCP    192.168.10.131:64558   192.168.10.20:135      TIME_WAIT   TCP    192.168.10.131:64559   192.168.10.20:49158    TIME_WAIT   TCP    192.168.10.131:64566   192.168.10.100:135     TIME_WAIT   TCP    192.168.10.131:64575   192.168.10.100:59811   TIME_WAIT   TCP    192.168.10.131:64581   192.168.10.41:139      TIME_WAIT   TCP    192.168.10.131:64582   192.168.10.3:5357      TIME_WAIT   TCP    192.168.10.131:64585   192.168.10.61:3910     TIME_WAIT   TCP    192.168.10.131:64587   192.168.10.65:3910     TIME_WAIT   TCP    192.168.10.131:64588   192.168.10.9:139       TIME_WAIT   TCP    192.168.10.131:64589   192.168.10.135:2869    ESTABLISHED   TCP    192.168.10.131:64593   192.168.10.6:135       TIME_WAIT   TCP    192.168.10.131:64594   192.168.10.6:1025      TIME_WAIT   TCP    192.168.10.131:64599   192.168.10.100:59811   TIME_WAIT /code/pre  <answer136534> This script should give you what you are looking for really quickly and requires to have nmap installed. The advantage is that if your host does not reply to ping probes, nmap would still find the host while other tools will not.  precode#!/bin/bash i="en1" # edit this to fit your Network interface cidr=$(while read y; do echo ${y%.*}".0/$(m=0; while read -n 1 x &amp;&amp; [ $x = f ]; do m=$[m+4]; done &lt; &lt;(ifconfig $i | awk '/mask/             {$4=substr($4,3); print $4}'); echo $m )"; done &lt; &lt;(ifconfig $i | awk '/inet[ ]/{print $2}') | head -n 1 | sed s/addr://g | sed 's/\/0//g') myip=`ifconfig $i | grep "inet " | awk 'NR==1 {print $2}' | sed s/addr://g` set -x sudo nmap -n -T4 -PN -p9091 --exclude "$myip" "$cidr" /code/pre  Store this script as codelookup.sh/code and call it (with switch to english) with  precodeLANG=c bash lookup.sh /code/pre  <answer143902> There are a few other tools that have not been mentioned yet for discovering IP address information, assuming you have the host name and you are using mDNS (aka Bonjour in Mac environments).  Unless you have configured things differently, your local network names are in the form codehost-name.local/code so in your initial example you would be looking for codecomputer2.local/code  The first:  precode    dscacheutil -q host -a name &lt;host-name&gt;.local /code/pre  For example:  precode    % dscacheutil -q host -a name computer2.local     name: computer2.local     ip_address: 10.0.1.6 /code/pre  Another useful tool is codedig/code (try codedig google.com/code for example), which with a few special parameters can be used to query the mDNS nodes of your local network.  precode    % dig @224.0.0.251 -p 5353 &lt;host-name&gt;.local     % dig @224.0.0.251 -p 5353 -x &lt;ip-address&gt; /code/pre  To get just the IP address out of codedig/code you can try:  precode    % dig +short @224.0.0.251 -p 5353 &lt;host-name&gt;.local /code/pre  <answer189455> You can install Wireshark and start a scan on your network card.  Filter the result by "nbns", and you will see the IP address in the upper window.  <answer261921> strongQ:/strong How do I know the strongIP addresses/strong of other computers in strongmy network/strong?  strongA lot of networks/strong  Well, first of all your computer is probably on a lot of emnetworks/em. You can see this with the codeifconfig/code command. There is a lot of info in there, but most of it is overwhelming, so I like to filter is like so:  precode$ ifconfig | grep -E '^[a-z0-9]|inet '  lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 16384     inet 127.0.0.1 netmask 0xff000000 gif0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280 stf0: flags=0&lt;&gt; mtu 1280 en0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500     inet 192.168.0.101 netmask 0xffffff00 broadcast 192.168.0.255 en1: flags=963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX&gt; mtu 1500 en2: flags=963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX&gt; mtu 1500 p2p0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 2304 awdl0: flags=8943&lt;UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1484 bridge0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500     inet 192.168.2.1 netmask 0xffffff00 broadcast 192.168.2.255 utun0: flags=8051&lt;UP,POINTOPOINT,RUNNING,MULTICAST&gt; mtu 2000 utun1: flags=8051&lt;UP,POINTOPOINT,RUNNING,MULTICAST&gt; mtu 1500     inet 172.141.0.10 --&gt; 172.141.0.9 netmask 0xffffffff en5: flags=8963&lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&gt; mtu 1500     inet 169.254.146.193 netmask 0xffff0000 broadcast 169.254.255.255 bridge100: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500     inet 192.168.3.1 netmask 0xffffff00 broadcast 192.168.3.255 /code/pre  The first field of the left aligned lines are network interface names. You wifi is probably codeen0/code. My TunnelBlick VPN to AWS is codeutun1/code. My System Preferences  Sharing  Internet Sharing created codebridge100/code for the RaspberryPi I have getting internet from my MacBook Pro via my ethernet dongle.  strongAssume IPv4/strong  Because you asked for emIP addresses/em I assume IPv4 addresses are what you care about. I used "inet " (with a space) to block the "inet6" entries for IPv6. If you wanted IPv6 you probably know more about networking than I do and I should be asking you questions.  strongFind the hosts/strong  Let's focus on that codebridge100/code and bring you a little Google traffic. Lots of people run into this situation when they want to SSH or RDC into a headless computer (like a strongRaspberryPi/strong) either on their network or tethered via strongInternet Sharing/strong. It's especially difficult when you have no connection history (arp table) with the device. For this you can use codesudo nmap -sn 192.168.3.0/24/code, which is the value of bridge100 inet (192.168.3.1) with the last digit replaced with "0/24". However, nmap isn't standard on OSX so we can install it with homebrew.  precode$ brew install nmap Warning: nmap-7.31 already installed  $ sudo nmap -sn 192.168.3.0/24 Password:  Starting Nmap 7.31 ( https://nmap.org ) at 2016-11-21 22:03 EST Nmap scan report for 192.168.3.6 Host is up (0.00025s latency). Nmap scan report for 192.168.3.1 Host is up. Nmap done: 256 IP addresses (2 hosts up) scanned in 2.08 seconds /code/pre  From that you can assume that my RaspberyPi got IP code192.168.3.6/code for some reason. Last time I connected it I was on a different subnet and it got code192.168.2.3/code. That nmap trick is a lot better than typingcodeping 192.168.3.2/code ... codeping 192.168.3.6/code until you find it.  I hope that helps.  <comment103340> DO you know computer2's name? <comment135006> Welcome to Ask Different! While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference. Link-only answers can become invalid if the linked page changes. <comment142803> __Method # 4__ `arp -a` will work if, and only if, the Mac already successfully probed or was connected to a host. Try yourself by restarting your Mac and displaying the arp table. It will be almost empty. To populate that table you need to run something like a ping scan: `nmap -sP 192.168.1.0/24` <comment144300> For some reason, pinging 192.168.1.255 returns the addresses from all Macs in the network, but none from the Linux machines ?!? Great tip though! <comment165957> `ping SOME-PC -4` to forve the IPV4 resolving. <comment177118> How do you save and run that? <comment177205> You paste this in TextEditor, and save and name this file "qnmap". You then move this file to /usr/bin (Hold Command+Shift+G, or Finder / Go / Go to folder : /usr/bin). open terminal, type "sudo chmod a+x /usr/bin/qnmap". Type "qnmap" in the terminal and wait for the result. <comment177273> Ok. I get this error: `/usr/bin/qnmap: line 2: =en1: command not found` It looks like the dollar sign before the `i` shouldn't be there. <comment177386> Sorry Dan, my bad, the line should be : i="en1" <comment177712> Cool. It works good. <comment178091> Since we're scanning only port 9091, you can add -sV to the nmap command (service detection, fingerprinting), it won't take much longer. If this port does reply with a TCP ack flag, the -sV option would be more effective. <comment178092> Good one bu it requires to know the IP address or computer multicastDNS name (.local). <comment178093> BonjourBrowser is a nice GUI application for this. <comment179125> @FlorianBidabe - Why do you say you need to know the IP address to use these commands?  These commands return the IP address of the named machine.  Yes, it is required to know the name of the target machine to use this method. <comment198522> Does this work if your are pinging a windows computer? <comment232381> I would list `arp -a` as method #1 <comment286523> I didn't know about method 3! Plus one for blowing my mind Michael you little IT devil you. <comment286878> This doesn't seem to work for some devices. I'm not sure if it's because the devices aren't "listening" or if it's because of different OS's but I'm trying it now and `arp -a` is not picking up one of my linux boxes. <comment310469> @cullub Yes, it works in windows. `ping adminPC` pings the adminPC computer and displays the IP address. And as Nakilon commented, `ping adminPC -4` displays the IPv4. <comment310982> ERROR : error en1: error fetching interface information: Device not found en1: error fetching interface information: Device not found + sudo nmap -n -T4 -PN -p9091 --exclude '' ''  Starting Nmap 6.40 ( http://nmap.org ) at 2016-08-24 23:50 IST Failed to resolve "". WARNING: No targets were specified, so 0 hosts scanned. Nmap done: 0 IP addresses (0 hosts up) scanned in 0.08 seconds <comment345856> I needed `arp -a`- thanks! <comment351038> The first time you go to talk to another device on your computer, your computer needs to resolve IP - MAC, and so it broadcasts "who has IP xxx.yyy.zzz.aaa?", and the owner of that IP responds (broadcasts) with "me!", and of course that packet has a source MAC in it.  If that transaction hasn't taken place while your device was on the network, it won't have an ARP entry for it.  Hence: not all devices show up in the ARP table, but may show up in other devices' ARP tables.